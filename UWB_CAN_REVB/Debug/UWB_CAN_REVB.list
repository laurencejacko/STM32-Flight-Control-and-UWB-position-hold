
UWB_CAN_REVB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ffc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08020198  08020198  00030198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020c10  08020c10  00040390  2**0
                  CONTENTS
  4 .ARM          00000008  08020c10  08020c10  00030c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020c18  08020c18  00040390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020c18  08020c18  00030c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020c1c  08020c1c  00030c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  08020c20  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b1c  20000390  08020fb0  00040390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005eac  08020fb0  00045eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  000403c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ebea  00000000  00000000  00040482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000538e  00000000  00000000  0005f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  00064400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119c  00000000  00000000  00065b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026285  00000000  00000000  00066ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002204c  00000000  00000000  0008cf69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caddf  00000000  00000000  000aefb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a34  00000000  00000000  00179d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001817c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <dw3000_driver>:
 80001d0:	12 03 ca de 0f ff ff ff 40 05 02 08 48 05 02 08     ........@...H...
 80001e0:	7c 04 02 08 40 04 02 08 07 00 06 00                 |...@.......

080001ec <dw3700_driver>:
 80001ec:	13 03 ca de 0f ff ff ff 40 05 02 08 48 05 02 08     ........@...H...
 80001fc:	bc 05 02 08 80 05 02 08 07 00 06 00                 ............

08000208 <dw3720_driver>:
 8000208:	14 03 ca de 0f ff ff ff 40 05 02 08 48 05 02 08     ........@...H...
 8000218:	cc 06 02 08 90 06 02 08 07 00 06 00                 ............

08000224 <__do_global_dtors_aux>:
 8000224:	b510      	push	{r4, lr}
 8000226:	4c05      	ldr	r4, [pc, #20]	; (800023c <__do_global_dtors_aux+0x18>)
 8000228:	7823      	ldrb	r3, [r4, #0]
 800022a:	b933      	cbnz	r3, 800023a <__do_global_dtors_aux+0x16>
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <__do_global_dtors_aux+0x1c>)
 800022e:	b113      	cbz	r3, 8000236 <__do_global_dtors_aux+0x12>
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <__do_global_dtors_aux+0x20>)
 8000232:	f3af 8000 	nop.w
 8000236:	2301      	movs	r3, #1
 8000238:	7023      	strb	r3, [r4, #0]
 800023a:	bd10      	pop	{r4, pc}
 800023c:	20000390 	.word	0x20000390
 8000240:	00000000 	.word	0x00000000
 8000244:	0802017c 	.word	0x0802017c

08000248 <frame_dummy>:
 8000248:	b508      	push	{r3, lr}
 800024a:	4b03      	ldr	r3, [pc, #12]	; (8000258 <frame_dummy+0x10>)
 800024c:	b11b      	cbz	r3, 8000256 <frame_dummy+0xe>
 800024e:	4903      	ldr	r1, [pc, #12]	; (800025c <frame_dummy+0x14>)
 8000250:	4803      	ldr	r0, [pc, #12]	; (8000260 <frame_dummy+0x18>)
 8000252:	f3af 8000 	nop.w
 8000256:	bd08      	pop	{r3, pc}
 8000258:	00000000 	.word	0x00000000
 800025c:	20000394 	.word	0x20000394
 8000260:	0802017c 	.word	0x0802017c

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2uiz>:
 8000c58:	004a      	lsls	r2, r1, #1
 8000c5a:	d211      	bcs.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d211      	bcs.n	8000c86 <__aeabi_d2uiz+0x2e>
 8000c62:	d50d      	bpl.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d40e      	bmi.n	8000c8c <__aeabi_d2uiz+0x34>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d102      	bne.n	8000c92 <__aeabi_d2uiz+0x3a>
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2f>:
 8000c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca0:	bf24      	itt	cs
 8000ca2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ca6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000caa:	d90d      	bls.n	8000cc8 <__aeabi_d2f+0x30>
 8000cac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ccc:	d121      	bne.n	8000d12 <__aeabi_d2f+0x7a>
 8000cce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd2:	bfbc      	itt	lt
 8000cd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cd8:	4770      	bxlt	lr
 8000cda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce2:	f1c2 0218 	rsb	r2, r2, #24
 8000ce6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cee:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf2:	bf18      	it	ne
 8000cf4:	f040 0001 	orrne.w	r0, r0, #1
 8000cf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d04:	ea40 000c 	orr.w	r0, r0, ip
 8000d08:	fa23 f302 	lsr.w	r3, r3, r2
 8000d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d10:	e7cc      	b.n	8000cac <__aeabi_d2f+0x14>
 8000d12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d16:	d107      	bne.n	8000d28 <__aeabi_d2f+0x90>
 8000d18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bxne	lr
 8000d28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff ff0b 	bl	8000b8c <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc81 	bl	80006a8 <__aeabi_dmul>
 8000da6:	f7ff ff57 	bl	8000c58 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fc02 	bl	80005b4 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc78 	bl	80006a8 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff faba 	bl	8000338 <__aeabi_dsub>
 8000dc4:	f7ff ff48 	bl	8000c58 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <ds_twr_initiator>:
 *
 * @param  none
 *
 * @return none
 */
int ds_twr_initiator(void) {
 80010a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0

	  /* Display application name on LCD. */
	    test_run_info((unsigned char *)APP_NAME);
 80010a8:	48a3      	ldr	r0, [pc, #652]	; (8001338 <ds_twr_initiator+0x298>)
 80010aa:	f000 ffb1 	bl	8002010 <test_run_info>
	    /* Configure SPI rate, DW3000 supports up to 36 MHz */
	    port_set_dw_ic_spi_fastrate();
 80010ae:	f00a ffcb 	bl	800c048 <port_set_dw_ic_spi_fastrate>

	    /* Reset DW IC */
	    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80010b2:	f00a ff49 	bl	800bf48 <reset_DWIC>

	    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 80010b6:	2002      	movs	r0, #2
 80010b8:	f00a ff1a 	bl	800bef0 <Sleep>

	    /* Probe for the correct device driver. */
	    int ret = dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 80010bc:	489f      	ldr	r0, [pc, #636]	; (800133c <ds_twr_initiator+0x29c>)
 80010be:	f00b f9bf 	bl	800c440 <dwt_probe>
 80010c2:	6178      	str	r0, [r7, #20]

	    if (ret != 0) {
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <ds_twr_initiator+0x48>
	    	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80010ca:	2120      	movs	r1, #32
 80010cc:	489c      	ldr	r0, [pc, #624]	; (8001340 <ds_twr_initiator+0x2a0>)
 80010ce:	f002 feb2 	bl	8003e36 <HAL_GPIO_TogglePin>
	    	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 80010d2:	2101      	movs	r1, #1
 80010d4:	489b      	ldr	r0, [pc, #620]	; (8001344 <ds_twr_initiator+0x2a4>)
 80010d6:	f002 feae 	bl	8003e36 <HAL_GPIO_TogglePin>
	    	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80010da:	2102      	movs	r1, #2
 80010dc:	4899      	ldr	r0, [pc, #612]	; (8001344 <ds_twr_initiator+0x2a4>)
 80010de:	f002 feaa 	bl	8003e36 <HAL_GPIO_TogglePin>
	    	HAL_Delay(100);
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f001 fd7a 	bl	8002bdc <HAL_Delay>

	    }
	    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 80010e8:	bf00      	nop
 80010ea:	f00b fb09 	bl	800c700 <dwt_checkidlerc>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0fa      	beq.n	80010ea <ds_twr_initiator+0x4a>

	    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 80010f4:	2000      	movs	r0, #0
 80010f6:	f00b fa0f 	bl	800c518 <dwt_initialise>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d103      	bne.n	800110a <ds_twr_initiator+0x6a>
	    {
	        test_run_info((unsigned char *)"INIT FAILED     ");
 8001102:	4891      	ldr	r0, [pc, #580]	; (8001348 <ds_twr_initiator+0x2a8>)
 8001104:	f000 ff84 	bl	8002010 <test_run_info>
	        while (1) { };
 8001108:	e7fe      	b.n	8001108 <ds_twr_initiator+0x68>
	    }

	    /* Configure DW IC. See NOTE 2 below. */
	    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
	    if (dwt_configure(&config))
 800110a:	4890      	ldr	r0, [pc, #576]	; (800134c <ds_twr_initiator+0x2ac>)
 800110c:	f00b fa10 	bl	800c530 <dwt_configure>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <ds_twr_initiator+0x7e>
	    {
	        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8001116:	488e      	ldr	r0, [pc, #568]	; (8001350 <ds_twr_initiator+0x2b0>)
 8001118:	f000 ff7a 	bl	8002010 <test_run_info>
	        while (1) { };
 800111c:	e7fe      	b.n	800111c <ds_twr_initiator+0x7c>
	    }

	    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
	    dwt_configuretxrf(&txconfig_options);
 800111e:	488d      	ldr	r0, [pc, #564]	; (8001354 <ds_twr_initiator+0x2b4>)
 8001120:	f00b fa12 	bl	800c548 <dwt_configuretxrf>

	    /* Apply default antenna delay value. See NOTE 1 below. */
	    dwt_setrxantennadelay(RX_ANT_DLY);
 8001124:	f244 70c8 	movw	r0, #18376	; 0x47c8
 8001128:	f00b fa1a 	bl	800c560 <dwt_setrxantennadelay>
	    dwt_settxantennadelay(TX_ANT_DLY);
 800112c:	f643 0067 	movw	r0, #14439	; 0x3867
 8001130:	f00b fa28 	bl	800c584 <dwt_settxantennadelay>

	    /* Set expected response's delay and timeout. See NOTE 4, 5 and 7 below.
	     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
	    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001134:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001138:	f00b fb0a 	bl	800c750 <dwt_setrxaftertxdelay>
	    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800113c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001140:	f00b faba 	bl	800c6b8 <dwt_setrxtimeout>
	    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8001144:	2005      	movs	r0, #5
 8001146:	f00b fac9 	bl	800c6dc <dwt_setpreambledetecttimeout>

	    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
	     * Note, in real low power applications the LEDs should not be used. */
	    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 800114a:	2003      	movs	r0, #3
 800114c:	f00b f9d6 	bl	800c4fc <dwt_setlnapamode>

				tx_final_msg[DESTINATION_ADDRESS_IDX] = address_of_B[0];
				tx_final_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_B[1];

			} else if (AnchorIndex == 2) {
				tx_poll_msg[DESTINATION_ADDRESS_IDX] = address_of_C[0];
 8001150:	4b81      	ldr	r3, [pc, #516]	; (8001358 <ds_twr_initiator+0x2b8>)
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	4b81      	ldr	r3, [pc, #516]	; (800135c <ds_twr_initiator+0x2bc>)
 8001156:	71da      	strb	r2, [r3, #7]
				tx_poll_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_C[1];
 8001158:	4b7f      	ldr	r3, [pc, #508]	; (8001358 <ds_twr_initiator+0x2b8>)
 800115a:	785a      	ldrb	r2, [r3, #1]
 800115c:	4b7f      	ldr	r3, [pc, #508]	; (800135c <ds_twr_initiator+0x2bc>)
 800115e:	721a      	strb	r2, [r3, #8]

				rx_resp_msg[SOURCE_ADDRESS_IDX] = address_of_C[0];
 8001160:	4b7d      	ldr	r3, [pc, #500]	; (8001358 <ds_twr_initiator+0x2b8>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b7e      	ldr	r3, [pc, #504]	; (8001360 <ds_twr_initiator+0x2c0>)
 8001166:	715a      	strb	r2, [r3, #5]
				rx_resp_msg[SOURCE_ADDRESS_IDX + 1] = address_of_C[1];
 8001168:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <ds_twr_initiator+0x2b8>)
 800116a:	785a      	ldrb	r2, [r3, #1]
 800116c:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <ds_twr_initiator+0x2c0>)
 800116e:	719a      	strb	r2, [r3, #6]

				tx_final_msg[DESTINATION_ADDRESS_IDX] = address_of_C[0];
 8001170:	4b79      	ldr	r3, [pc, #484]	; (8001358 <ds_twr_initiator+0x2b8>)
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <ds_twr_initiator+0x2c4>)
 8001176:	71da      	strb	r2, [r3, #7]
				tx_final_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_C[1];
 8001178:	4b77      	ldr	r3, [pc, #476]	; (8001358 <ds_twr_initiator+0x2b8>)
 800117a:	785a      	ldrb	r2, [r3, #1]
 800117c:	4b79      	ldr	r3, [pc, #484]	; (8001364 <ds_twr_initiator+0x2c4>)
 800117e:	721a      	strb	r2, [r3, #8]
		 *
		 *	Imported the simple_rx.c script
		 */


if 	(example_pointer != ds_twr_initiator) {
 8001180:	4b79      	ldr	r3, [pc, #484]	; (8001368 <ds_twr_initiator+0x2c8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a79      	ldr	r2, [pc, #484]	; (800136c <ds_twr_initiator+0x2cc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	f040 80cb 	bne.w	8001322 <ds_twr_initiator+0x282>
		 * The ds_twr_initiator.c sketch. This will begin ranging and have distance measurement calculated on the TAG node.
		 *
		 */

		/* Write frame data to DW IC and prepare transmission. See NOTE 9 below. */
		tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <ds_twr_initiator+0x2d0>)
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	4b72      	ldr	r3, [pc, #456]	; (800135c <ds_twr_initiator+0x2bc>)
 8001192:	709a      	strb	r2, [r3, #2]
		dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001194:	2200      	movs	r2, #0
 8001196:	4971      	ldr	r1, [pc, #452]	; (800135c <ds_twr_initiator+0x2bc>)
 8001198:	200a      	movs	r0, #10
 800119a:	f00b fa05 	bl	800c5a8 <dwt_writetxdata>
		dwt_writetxfctrl(sizeof(tx_poll_msg) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging. */
 800119e:	2201      	movs	r2, #1
 80011a0:	2100      	movs	r1, #0
 80011a2:	200c      	movs	r0, #12
 80011a4:	f00b fa0e 	bl	800c5c4 <dwt_writetxfctrl>

		/* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
		 * set by dwt_setrxaftertxdelay() has elapsed. */
		dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 80011a8:	2002      	movs	r0, #2
 80011aa:	f00b fa19 	bl	800c5e0 <dwt_starttx>

		/* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 10 below. */
		waitforsysstatus(&status_reg, NULL,
 80011ae:	2300      	movs	r3, #0
 80011b0:	4a70      	ldr	r2, [pc, #448]	; (8001374 <ds_twr_initiator+0x2d4>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4870      	ldr	r0, [pc, #448]	; (8001378 <ds_twr_initiator+0x2d8>)
 80011b6:	f009 fe7a 	bl	800aeae <waitforsysstatus>
				(DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO
						| SYS_STATUS_ALL_RX_ERR), 0);

		/* Increment frame sequence number after transmission of the poll message (modulo 256). */
		frame_seq_nb++;
 80011ba:	4b6d      	ldr	r3, [pc, #436]	; (8001370 <ds_twr_initiator+0x2d0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <ds_twr_initiator+0x2d0>)
 80011c4:	701a      	strb	r2, [r3, #0]

		if (status_reg & DWT_INT_RXFCG_BIT_MASK) {
 80011c6:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <ds_twr_initiator+0x2d8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a0 	beq.w	8001314 <ds_twr_initiator+0x274>
			uint16_t frame_len;

			/* Clear good RX frame event and TX frame sent in the DW IC status register. */
			dwt_writesysstatuslo(
 80011d4:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 80011d8:	f00b fafa 	bl	800c7d0 <dwt_writesysstatuslo>
					DWT_INT_RXFCG_BIT_MASK | DWT_INT_TXFRS_BIT_MASK);

			/* A frame has been received, read it into the local buffer. */
			frame_len = dwt_getframelength();
 80011dc:	f00b fb2e 	bl	800c83c <dwt_getframelength>
 80011e0:	4603      	mov	r3, r0
 80011e2:	827b      	strh	r3, [r7, #18]
			if (frame_len <= RX_BUF_LEN) {
 80011e4:	8a7b      	ldrh	r3, [r7, #18]
 80011e6:	2b14      	cmp	r3, #20
 80011e8:	d805      	bhi.n	80011f6 <ds_twr_initiator+0x156>
				dwt_readrxdata(rx_buffer, frame_len, 0);
 80011ea:	8a7b      	ldrh	r3, [r7, #18]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4862      	ldr	r0, [pc, #392]	; (800137c <ds_twr_initiator+0x2dc>)
 80011f2:	f00b fabf 	bl	800c774 <dwt_readrxdata>
			}

			/* Check that the frame is the expected response from the companion "DS TWR responder" example.
			 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
			rx_buffer[ALL_MSG_SN_IDX] = 0;
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <ds_twr_initiator+0x2dc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	709a      	strb	r2, [r3, #2]
			if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0) {
 80011fc:	220a      	movs	r2, #10
 80011fe:	4958      	ldr	r1, [pc, #352]	; (8001360 <ds_twr_initiator+0x2c0>)
 8001200:	485e      	ldr	r0, [pc, #376]	; (800137c <ds_twr_initiator+0x2dc>)
 8001202:	f019 fe8e 	bl	801af22 <memcmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	f040 8086 	bne.w	800131a <ds_twr_initiator+0x27a>
				uint32_t final_tx_time;
				int ret;

				/* Retrieve poll transmission and response reception timestamp. */
				poll_tx_ts = get_tx_timestamp_u64();
 800120e:	f009 fd7f 	bl	800ad10 <get_tx_timestamp_u64>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	495a      	ldr	r1, [pc, #360]	; (8001380 <ds_twr_initiator+0x2e0>)
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
				resp_rx_ts = get_rx_timestamp_u64();
 800121c:	f009 fdb9 	bl	800ad92 <get_rx_timestamp_u64>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4957      	ldr	r1, [pc, #348]	; (8001384 <ds_twr_initiator+0x2e4>)
 8001226:	e9c1 2300 	strd	r2, r3, [r1]

				/* Compute final message transmission time. See NOTE 11 below. */
				final_tx_time = (resp_rx_ts
						+ (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 800122a:	4b56      	ldr	r3, [pc, #344]	; (8001384 <ds_twr_initiator+0x2e4>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	4955      	ldr	r1, [pc, #340]	; (8001388 <ds_twr_initiator+0x2e8>)
 8001232:	1854      	adds	r4, r2, r1
 8001234:	f143 0500 	adc.w	r5, r3, #0
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	0a22      	lsrs	r2, r4, #8
 8001242:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001246:	0a2b      	lsrs	r3, r5, #8
				final_tx_time = (resp_rx_ts
 8001248:	4613      	mov	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
				dwt_setdelayedtrxtime(final_tx_time);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f00b f9d9 	bl	800c604 <dwt_setdelayedtrxtime>

				/* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
				final_tx_ts = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800125e:	460b      	mov	r3, r1
 8001260:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8001264:	460b      	mov	r3, r1
 8001266:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 800126a:	f42a 78ff 	bic.w	r8, sl, #510	; 0x1fe
 800126e:	f028 0801 	bic.w	r8, r8, #1
 8001272:	f00b 09ff 	and.w	r9, fp, #255	; 0xff
						+ TX_ANT_DLY;
 8001276:	4640      	mov	r0, r8
 8001278:	4649      	mov	r1, r9
 800127a:	f7ff f9df 	bl	800063c <__aeabi_ul2d>
 800127e:	a32c      	add	r3, pc, #176	; (adr r3, 8001330 <ds_twr_initiator+0x290>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff f85a 	bl	800033c <__adddf3>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
				final_tx_ts = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fd82 	bl	8000d98 <__aeabi_d2ulz>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	493c      	ldr	r1, [pc, #240]	; (800138c <ds_twr_initiator+0x2ec>)
 800129a:	e9c1 2300 	strd	r2, r3, [r1]

				/* Write all timestamps in the final message. See NOTE 12 below. */
				final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX],
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <ds_twr_initiator+0x2e0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <ds_twr_initiator+0x2f0>)
 80012a6:	f009 fddb 	bl	800ae60 <final_msg_set_ts>
						poll_tx_ts);
				final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX],
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <ds_twr_initiator+0x2e4>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	4838      	ldr	r0, [pc, #224]	; (8001394 <ds_twr_initiator+0x2f4>)
 80012b2:	f009 fdd5 	bl	800ae60 <final_msg_set_ts>
						resp_rx_ts);
				final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX],
 80012b6:	4b35      	ldr	r3, [pc, #212]	; (800138c <ds_twr_initiator+0x2ec>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	4836      	ldr	r0, [pc, #216]	; (8001398 <ds_twr_initiator+0x2f8>)
 80012be:	f009 fdcf 	bl	800ae60 <final_msg_set_ts>
						final_tx_ts);

				/* Write and send final message. See NOTE 9 below. */
				tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <ds_twr_initiator+0x2d0>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <ds_twr_initiator+0x2c4>)
 80012c8:	709a      	strb	r2, [r3, #2]
				dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 80012ca:	2200      	movs	r2, #0
 80012cc:	4925      	ldr	r1, [pc, #148]	; (8001364 <ds_twr_initiator+0x2c4>)
 80012ce:	2016      	movs	r0, #22
 80012d0:	f00b f96a 	bl	800c5a8 <dwt_writetxdata>
				dwt_writetxfctrl(sizeof(tx_final_msg) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging bit set. */
 80012d4:	2201      	movs	r2, #1
 80012d6:	2100      	movs	r1, #0
 80012d8:	2018      	movs	r0, #24
 80012da:	f00b f973 	bl	800c5c4 <dwt_writetxfctrl>
				HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80012de:	2120      	movs	r1, #32
 80012e0:	4817      	ldr	r0, [pc, #92]	; (8001340 <ds_twr_initiator+0x2a0>)
 80012e2:	f002 fda8 	bl	8003e36 <HAL_GPIO_TogglePin>

				ret = dwt_starttx(DWT_START_TX_DELAYED);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f00b f97a 	bl	800c5e0 <dwt_starttx>
 80012ec:	60b8      	str	r0, [r7, #8]
				/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 13 below. */
				if (ret == DWT_SUCCESS) {
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d112      	bne.n	800131a <ds_twr_initiator+0x27a>
					/* Poll DW IC until TX frame sent event set. See NOTE 10 below. */
					waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 80012f4:	2300      	movs	r3, #0
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f009 fdd7 	bl	800aeae <waitforsysstatus>

					/* Clear TXFRS event. */
					dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8001300:	2080      	movs	r0, #128	; 0x80
 8001302:	f00b fa65 	bl	800c7d0 <dwt_writesysstatuslo>

					/* Increment frame sequence number after transmission of the final message (modulo 256). */
					frame_seq_nb++;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <ds_twr_initiator+0x2d0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <ds_twr_initiator+0x2d0>)
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e002      	b.n	800131a <ds_twr_initiator+0x27a>

		}

	} else {
		/* Clear RX error/timeout events in the DW IC status register. */
		dwt_writesysstatuslo(
 8001314:	4821      	ldr	r0, [pc, #132]	; (800139c <ds_twr_initiator+0x2fc>)
 8001316:	f00b fa5b 	bl	800c7d0 <dwt_writesysstatuslo>
				SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR
						| DWT_INT_TXFRS_BIT_MASK);
	}

	/* Execute a delay between ranging exchanges. */
	Sleep(RNG_DELAY_MS);
 800131a:	2062      	movs	r0, #98	; 0x62
 800131c:	f00a fde8 	bl	800bef0 <Sleep>
if 	(example_pointer != ds_twr_initiator) {
 8001320:	e72e      	b.n	8001180 <ds_twr_initiator+0xe0>
	break;
 8001322:	bf00      	nop
}
}
 8001324:	bf00      	nop
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001330:	1eb851ec 	.word	0x1eb851ec
 8001334:	40cc3385 	.word	0x40cc3385
 8001338:	08020198 	.word	0x08020198
 800133c:	08020334 	.word	0x08020334
 8001340:	40020800 	.word	0x40020800
 8001344:	40020400 	.word	0x40020400
 8001348:	080201ac 	.word	0x080201ac
 800134c:	20000000 	.word	0x20000000
 8001350:	080201c0 	.word	0x080201c0
 8001354:	20000134 	.word	0x20000134
 8001358:	20000044 	.word	0x20000044
 800135c:	20000010 	.word	0x20000010
 8001360:	2000001c 	.word	0x2000001c
 8001364:	2000002c 	.word	0x2000002c
 8001368:	20004050 	.word	0x20004050
 800136c:	080010a1 	.word	0x080010a1
 8001370:	200003ac 	.word	0x200003ac
 8001374:	3427d000 	.word	0x3427d000
 8001378:	200003c4 	.word	0x200003c4
 800137c:	200003b0 	.word	0x200003b0
 8001380:	200003c8 	.word	0x200003c8
 8001384:	200003d0 	.word	0x200003d0
 8001388:	02aa8118 	.word	0x02aa8118
 800138c:	200003d8 	.word	0x200003d8
 8001390:	20000036 	.word	0x20000036
 8001394:	2000003a 	.word	0x2000003a
 8001398:	2000003e 	.word	0x2000003e
 800139c:	34279080 	.word	0x34279080

080013a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d013      	beq.n	80013e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013c8:	e000      	b.n	80013cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80013ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f9      	beq.n	80013ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_write>:

extern void test_run_info(unsigned char *data);

#include "stdio.h"

int _write(int file, char *ptr, int len) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
	int iii = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
	for (iii = 0; iii < len; iii++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e009      	b.n	8001418 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ffc7 	bl	80013a0 <ITM_SendChar>
	for (iii = 0; iii < len; iii++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf1      	blt.n	8001404 <_write+0x16>
	return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <compare>:

						};

union DoublePair converter;

int compare(const void* a, const void* b) {
 800142a:	b5b0      	push	{r4, r5, r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
    double diff = *(double *)a - *(double *)b;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7fe ff7a 	bl	8000338 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (diff > 0) - (diff < 0); // Returns 1 if a > b, -1 if a < b, 0 if equal
 800144c:	2301      	movs	r3, #1
 800144e:	461c      	mov	r4, r3
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800145c:	f7ff fbb4 	bl	8000bc8 <__aeabi_dcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <compare+0x40>
 8001466:	2300      	movs	r3, #0
 8001468:	461c      	mov	r4, r3
 800146a:	b2e3      	uxtb	r3, r4
 800146c:	461c      	mov	r4, r3
 800146e:	2301      	movs	r3, #1
 8001470:	461d      	mov	r5, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800147e:	f7ff fb85 	bl	8000b8c <__aeabi_dcmplt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <compare+0x62>
 8001488:	2300      	movs	r3, #0
 800148a:	461d      	mov	r5, r3
 800148c:	b2eb      	uxtb	r3, r5
 800148e:	1ae3      	subs	r3, r4, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bdb0      	pop	{r4, r5, r7, pc}

08001498 <ds_twr_responder>:
 *
 * @param  none
 *
 * @return none
 */
int ds_twr_responder(void) {
 8001498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800149c:	b0ce      	sub	sp, #312	; 0x138
 800149e:	af0a      	add	r7, sp, #40	; 0x28
	dwt_nlos_alldiag_t all_diag;
	dwt_nlos_ipdiag_t index;

	// All float variables used for recording different diagnostic results and probability.
	float ip_f1, ip_f2, ip_f3, sts1_f1, sts1_f2, sts1_f3, sts2_f1, sts2_f2,
			sts2_f3 = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	float ip_n, sts1_n, sts2_n, ip_cp, sts1_cp, sts2_cp, ip_rsl, ip_fsl,
			sts1_rsl, sts1_fsl, sts2_rsl, sts2_fsl = 0;
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float pr_nlos, sl_diff_ip, sl_diff_sts1, sl_diff_sts2, sl_diff, index_diff =
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			0;
	float alpha, ip_alpha, log_constant = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Display application name on LCD. */
	test_run_info((unsigned char*) APP_NAME);
 80014c0:	484b      	ldr	r0, [pc, #300]	; (80015f0 <ds_twr_responder+0x158>)
 80014c2:	f000 fda5 	bl	8002010 <test_run_info>

	/* Configure SPI rate, DW3000 supports up to 36 MHz */
//	port_set_dw_ic_spi_fastrate();
	/* Reset DW IC */
	reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80014c6:	f00a fd3f 	bl	800bf48 <reset_DWIC>

	Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 80014ca:	2002      	movs	r0, #2
 80014cc:	f00a fd10 	bl	800bef0 <Sleep>

	/* Probe for the correct device driver. */
	int ret = dwt_probe((struct dwt_probe_s*) &dw3000_probe_interf);
 80014d0:	4848      	ldr	r0, [pc, #288]	; (80015f4 <ds_twr_responder+0x15c>)
 80014d2:	f00a ffb5 	bl	800c440 <dwt_probe>
 80014d6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	if (ret != 0) {
 80014da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00f      	beq.n	8001502 <ds_twr_responder+0x6a>
		while (1) {
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014e2:	2120      	movs	r1, #32
 80014e4:	4844      	ldr	r0, [pc, #272]	; (80015f8 <ds_twr_responder+0x160>)
 80014e6:	f002 fca6 	bl	8003e36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80014ea:	2101      	movs	r1, #1
 80014ec:	4843      	ldr	r0, [pc, #268]	; (80015fc <ds_twr_responder+0x164>)
 80014ee:	f002 fca2 	bl	8003e36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80014f2:	2102      	movs	r1, #2
 80014f4:	4841      	ldr	r0, [pc, #260]	; (80015fc <ds_twr_responder+0x164>)
 80014f6:	f002 fc9e 	bl	8003e36 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80014fa:	2064      	movs	r0, #100	; 0x64
 80014fc:	f001 fb6e 	bl	8002bdc <HAL_Delay>
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001500:	e7ef      	b.n	80014e2 <ds_twr_responder+0x4a>

		}
	}

	dev_id = dwt_readdevid();
 8001502:	f00a ffe9 	bl	800c4d8 <dwt_readdevid>
 8001506:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */{
 800150a:	bf00      	nop
 800150c:	f00b f8f8 	bl	800c700 <dwt_checkidlerc>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0fa      	beq.n	800150c <ds_twr_responder+0x74>
	};

	if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR) {
 8001516:	2000      	movs	r0, #0
 8001518:	f00a fffe 	bl	800c518 <dwt_initialise>
 800151c:	4603      	mov	r3, r0
 800151e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001522:	d103      	bne.n	800152c <ds_twr_responder+0x94>
		test_run_info((unsigned char*) "INIT FAILED     ");
 8001524:	4836      	ldr	r0, [pc, #216]	; (8001600 <ds_twr_responder+0x168>)
 8001526:	f000 fd73 	bl	8002010 <test_run_info>
		while (1) {
 800152a:	e7fe      	b.n	800152a <ds_twr_responder+0x92>
		};
	}

	/* Configure DW IC. See NOTE 15 below. */
	/* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
	if (dwt_configure(&config)) {
 800152c:	4835      	ldr	r0, [pc, #212]	; (8001604 <ds_twr_responder+0x16c>)
 800152e:	f00a ffff 	bl	800c530 <dwt_configure>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <ds_twr_responder+0xae>
		test_run_info((unsigned char*) "CONFIG FAILED [TAG]    ");
 8001538:	4833      	ldr	r0, [pc, #204]	; (8001608 <ds_twr_responder+0x170>)
 800153a:	f000 fd69 	bl	8002010 <test_run_info>
		while (1) {
			test_run_info((unsigned char*) "CONFIG FAILED [TAG]    ");
 800153e:	4832      	ldr	r0, [pc, #200]	; (8001608 <ds_twr_responder+0x170>)
 8001540:	f000 fd66 	bl	8002010 <test_run_info>
 8001544:	e7fb      	b.n	800153e <ds_twr_responder+0xa6>
		};
	}

	/* Configure the TX spectrum parameters (power, PG delay and PG count) */
	dwt_configuretxrf(&txconfig_options);
 8001546:	4831      	ldr	r0, [pc, #196]	; (800160c <ds_twr_responder+0x174>)
 8001548:	f00a fffe 	bl	800c548 <dwt_configuretxrf>

	/* Apply default antenna delay value. See NOTE 1 below. */
	dwt_setrxantennadelay(RX_ANT_DLY);
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <ds_twr_responder+0x178>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f83f 	bl	80005d4 <__aeabi_i2d>
 8001556:	a322      	add	r3, pc, #136	; (adr r3, 80015e0 <ds_twr_responder+0x148>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f8a4 	bl	80006a8 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb76 	bl	8000c58 <__aeabi_d2uiz>
 800156c:	4603      	mov	r3, r0
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f00a fff5 	bl	800c560 <dwt_setrxantennadelay>

//	 uint16_t returneddelay = dwt_getrxantennadelay();
	dwt_settxantennadelay(TX_ANT_DLY);
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <ds_twr_responder+0x178>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f82a 	bl	80005d4 <__aeabi_i2d>
 8001580:	a319      	add	r3, pc, #100	; (adr r3, 80015e8 <ds_twr_responder+0x150>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f88f 	bl	80006a8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fb61 	bl	8000c58 <__aeabi_d2uiz>
 8001596:	4603      	mov	r3, r0
 8001598:	b29b      	uxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f00a fff2 	bl	800c584 <dwt_settxantennadelay>

	/* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
	 * Note, in real low power applications the LEDs should not be used. */
	dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f00a ffab 	bl	800c4fc <dwt_setlnapamode>

	memset(distA, 0, sizeof(distA));
 80015a6:	2205      	movs	r2, #5
 80015a8:	2100      	movs	r1, #0
 80015aa:	481a      	ldr	r0, [pc, #104]	; (8001614 <ds_twr_responder+0x17c>)
 80015ac:	f019 fcc9 	bl	801af42 <memset>
	memset(distB, 0, sizeof(distB));
 80015b0:	2205      	movs	r2, #5
 80015b2:	2100      	movs	r1, #0
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <ds_twr_responder+0x180>)
 80015b6:	f019 fcc4 	bl	801af42 <memset>
	memset(distC, 0, sizeof(distC));
 80015ba:	2205      	movs	r2, #5
 80015bc:	2100      	movs	r1, #0
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <ds_twr_responder+0x184>)
 80015c0:	f019 fcbf 	bl	801af42 <memset>
	if ((dev_id == (uint32_t) DWT_DW3000_DEV_ID)
 80015c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <ds_twr_responder+0x188>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d004      	beq.n	80015d8 <ds_twr_responder+0x140>
			|| (dev_id == (uint32_t) DWT_DW3000_PDOA_DEV_ID)) {
 80015ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <ds_twr_responder+0x18c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d129      	bne.n	800162c <ds_twr_responder+0x194>
		log_constant = LOG_CONSTANT_C0;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <ds_twr_responder+0x190>)
 80015da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015de:	e028      	b.n	8001632 <ds_twr_responder+0x19a>
 80015e0:	1eb851ec 	.word	0x1eb851ec
 80015e4:	3fe1eb85 	.word	0x3fe1eb85
 80015e8:	c28f5c29 	.word	0xc28f5c29
 80015ec:	3fdc28f5 	.word	0x3fdc28f5
 80015f0:	080201d4 	.word	0x080201d4
 80015f4:	08020334 	.word	0x08020334
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020400 	.word	0x40020400
 8001600:	080201e8 	.word	0x080201e8
 8001604:	20000048 	.word	0x20000048
 8001608:	080201fc 	.word	0x080201fc
 800160c:	20000134 	.word	0x20000134
 8001610:	20000090 	.word	0x20000090
 8001614:	200004f0 	.word	0x200004f0
 8001618:	200004f8 	.word	0x200004f8
 800161c:	20000500 	.word	0x20000500
 8001620:	deca0302 	.word	0xdeca0302
 8001624:	deca0312 	.word	0xdeca0312
 8001628:	427ccccd 	.word	0x427ccccd
	} else {
		log_constant = LOG_CONSTANT_D0_E0;
 800162c:	4bc7      	ldr	r3, [pc, #796]	; (800194c <ds_twr_responder+0x4b4>)
 800162e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	}

	dwt_configciadiag(DW_CIA_DIAG_LOG_ALL);
 8001632:	2001      	movs	r0, #1
 8001634:	f00b f8ac 	bl	800c790 <dwt_configciadiag>

	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001638:	2101      	movs	r1, #1
 800163a:	48c5      	ldr	r0, [pc, #788]	; (8001950 <ds_twr_responder+0x4b8>)
 800163c:	f002 fbfb 	bl	8003e36 <HAL_GPIO_TogglePin>

	memset(counter, 0, sizeof(counter));
 8001640:	2218      	movs	r2, #24
 8001642:	2100      	movs	r1, #0
 8001644:	48c3      	ldr	r0, [pc, #780]	; (8001954 <ds_twr_responder+0x4bc>)
 8001646:	f019 fc7c 	bl	801af42 <memset>
	memset(final_distance, 0, sizeof(final_distance));
 800164a:	2230      	movs	r2, #48	; 0x30
 800164c:	2100      	movs	r1, #0
 800164e:	48c2      	ldr	r0, [pc, #776]	; (8001958 <ds_twr_responder+0x4c0>)
 8001650:	f019 fc77 	bl	801af42 <memset>


	/* Loop forever responding to ranging requests. */
	while (1) {

		if 	(example_pointer != ds_twr_responder) {
 8001654:	4bc1      	ldr	r3, [pc, #772]	; (800195c <ds_twr_responder+0x4c4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4ac1      	ldr	r2, [pc, #772]	; (8001960 <ds_twr_responder+0x4c8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	f040 8443 	bne.w	8001ee6 <ds_twr_responder+0xa4e>
		/*
		 *
		 * Begins the ds_twr_responder.c sketch, calculates the distance upon successful completion.
		 *
		 */
		dwt_setpreambledetecttimeout(0);
 8001660:	2000      	movs	r0, #0
 8001662:	f00b f83b 	bl	800c6dc <dwt_setpreambledetecttimeout>
		/* Clear reception timeout to start next ranging process. */
		dwt_setrxtimeout(0);
 8001666:	2000      	movs	r0, #0
 8001668:	f00b f826 	bl	800c6b8 <dwt_setrxtimeout>

		/* Activate reception immediately. */
		dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800166c:	2000      	movs	r0, #0
 800166e:	f00b f817 	bl	800c6a0 <dwt_rxenable>

		/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
		waitforsysstatus(&status_reg, NULL,
 8001672:	2300      	movs	r3, #0
 8001674:	4abb      	ldr	r2, [pc, #748]	; (8001964 <ds_twr_responder+0x4cc>)
 8001676:	2100      	movs	r1, #0
 8001678:	48bb      	ldr	r0, [pc, #748]	; (8001968 <ds_twr_responder+0x4d0>)
 800167a:	f009 fc18 	bl	800aeae <waitforsysstatus>
				(DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO
						| SYS_STATUS_ALL_RX_ERR), 0);

		if (status_reg & DWT_INT_RXFCG_BIT_MASK) {
 800167e:	4bba      	ldr	r3, [pc, #744]	; (8001968 <ds_twr_responder+0x4d0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8425 	beq.w	8001ed6 <ds_twr_responder+0xa3e>
			uint16_t frame_len;

			/* Clear good RX frame event in the DW IC status register. */
			dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 800168c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001690:	f00b f89e 	bl	800c7d0 <dwt_writesysstatuslo>

			/* A frame has been received, read it into the local buffer. */
			frame_len = dwt_getframelength();
 8001694:	f00b f8d2 	bl	800c83c <dwt_getframelength>
 8001698:	4603      	mov	r3, r0
 800169a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
			if (frame_len <= RX_BUF_LEN) {
 800169e:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80016a2:	2b18      	cmp	r3, #24
 80016a4:	d806      	bhi.n	80016b4 <ds_twr_responder+0x21c>
				dwt_readrxdata(rx_buffer, frame_len, 0);
 80016a6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	48af      	ldr	r0, [pc, #700]	; (800196c <ds_twr_responder+0x4d4>)
 80016b0:	f00b f860 	bl	800c774 <dwt_readrxdata>
			}

			/* Check that the frame is a poll sent by "DS TWR initiator" example.
			 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
			rx_buffer[ALL_MSG_SN_IDX] = 0;
 80016b4:	4bad      	ldr	r3, [pc, #692]	; (800196c <ds_twr_responder+0x4d4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	709a      	strb	r2, [r3, #2]
			if (memcmp(rx_buffer, rx_poll_msg, allMSGCOMMONLEN) == 0) {
 80016ba:	4bad      	ldr	r3, [pc, #692]	; (8001970 <ds_twr_responder+0x4d8>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	49ac      	ldr	r1, [pc, #688]	; (8001974 <ds_twr_responder+0x4dc>)
 80016c2:	48aa      	ldr	r0, [pc, #680]	; (800196c <ds_twr_responder+0x4d4>)
 80016c4:	f019 fc2d 	bl	801af22 <memcmp>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1c2      	bne.n	8001654 <ds_twr_responder+0x1bc>

				initiatorAdress[0] = rx_buffer[7]; //tutaj
 80016ce:	4ba7      	ldr	r3, [pc, #668]	; (800196c <ds_twr_responder+0x4d4>)
 80016d0:	79da      	ldrb	r2, [r3, #7]
 80016d2:	4ba9      	ldr	r3, [pc, #676]	; (8001978 <ds_twr_responder+0x4e0>)
 80016d4:	701a      	strb	r2, [r3, #0]
				initiatorAdress[1] = rx_buffer[8];
 80016d6:	4ba5      	ldr	r3, [pc, #660]	; (800196c <ds_twr_responder+0x4d4>)
 80016d8:	7a1a      	ldrb	r2, [r3, #8]
 80016da:	4ba7      	ldr	r3, [pc, #668]	; (8001978 <ds_twr_responder+0x4e0>)
 80016dc:	705a      	strb	r2, [r3, #1]

				// set current initiator address
				tx_resp_msg[5] = initiatorAdress[0];
 80016de:	4ba6      	ldr	r3, [pc, #664]	; (8001978 <ds_twr_responder+0x4e0>)
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	4ba6      	ldr	r3, [pc, #664]	; (800197c <ds_twr_responder+0x4e4>)
 80016e4:	715a      	strb	r2, [r3, #5]
				tx_resp_msg[6] = initiatorAdress[1];
 80016e6:	4ba4      	ldr	r3, [pc, #656]	; (8001978 <ds_twr_responder+0x4e0>)
 80016e8:	785a      	ldrb	r2, [r3, #1]
 80016ea:	4ba4      	ldr	r3, [pc, #656]	; (800197c <ds_twr_responder+0x4e4>)
 80016ec:	719a      	strb	r2, [r3, #6]
				//
				rx_poll_msg[7] = initiatorAdress[0];
 80016ee:	4ba2      	ldr	r3, [pc, #648]	; (8001978 <ds_twr_responder+0x4e0>)
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	4ba0      	ldr	r3, [pc, #640]	; (8001974 <ds_twr_responder+0x4dc>)
 80016f4:	71da      	strb	r2, [r3, #7]
				rx_poll_msg[8] = initiatorAdress[1];
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <ds_twr_responder+0x4e0>)
 80016f8:	785a      	ldrb	r2, [r3, #1]
 80016fa:	4b9e      	ldr	r3, [pc, #632]	; (8001974 <ds_twr_responder+0x4dc>)
 80016fc:	721a      	strb	r2, [r3, #8]
				//
				rx_final_msg[7] = initiatorAdress[0];
 80016fe:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <ds_twr_responder+0x4e0>)
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	4b9f      	ldr	r3, [pc, #636]	; (8001980 <ds_twr_responder+0x4e8>)
 8001704:	71da      	strb	r2, [r3, #7]
				rx_final_msg[8] = initiatorAdress[1];
 8001706:	4b9c      	ldr	r3, [pc, #624]	; (8001978 <ds_twr_responder+0x4e0>)
 8001708:	785a      	ldrb	r2, [r3, #1]
 800170a:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <ds_twr_responder+0x4e8>)
 800170c:	721a      	strb	r2, [r3, #8]
				allMSGCOMMONLEN = 10;
 800170e:	4b98      	ldr	r3, [pc, #608]	; (8001970 <ds_twr_responder+0x4d8>)
 8001710:	220a      	movs	r2, #10
 8001712:	701a      	strb	r2, [r3, #0]

				uint32_t resp_tx_time;
				int ret;

				/* Retrieve poll reception timestamp. */
				poll_rx_ts = get_rx_timestamp_u64();
 8001714:	f009 fb3d 	bl	800ad92 <get_rx_timestamp_u64>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4999      	ldr	r1, [pc, #612]	; (8001984 <ds_twr_responder+0x4ec>)
 800171e:	e9c1 2300 	strd	r2, r3, [r1]

				/* Set send time for response. See NOTE 9 below. */
				resp_tx_time = (poll_rx_ts
						+ (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8001722:	4b98      	ldr	r3, [pc, #608]	; (8001984 <ds_twr_responder+0x4ec>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	4997      	ldr	r1, [pc, #604]	; (8001988 <ds_twr_responder+0x4f0>)
 800172a:	eb12 0a01 	adds.w	sl, r2, r1
 800172e:	f143 0b00 	adc.w	fp, r3, #0
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 800173e:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
 8001742:	ea4f 231b 	mov.w	r3, fp, lsr #8
				resp_tx_time = (poll_rx_ts
 8001746:	4613      	mov	r3, r2
 8001748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				dwt_setdelayedtrxtime(resp_tx_time);
 800174c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001750:	f00a ff58 	bl	800c604 <dwt_setdelayedtrxtime>

				/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
				dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8001754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001758:	f00a fffa 	bl	800c750 <dwt_setrxaftertxdelay>
				dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 800175c:	20dc      	movs	r0, #220	; 0xdc
 800175e:	f00a ffab 	bl	800c6b8 <dwt_setrxtimeout>
				/* Set preamble timeout for expected frames. See NOTE 6 below. */
				dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8001762:	2005      	movs	r0, #5
 8001764:	f00a ffba 	bl	800c6dc <dwt_setpreambledetecttimeout>

				/* Write and send the response message. See NOTE 10 below.*/
				tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001768:	4b88      	ldr	r3, [pc, #544]	; (800198c <ds_twr_responder+0x4f4>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	4b83      	ldr	r3, [pc, #524]	; (800197c <ds_twr_responder+0x4e4>)
 800176e:	709a      	strb	r2, [r3, #2]
				dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8001770:	2200      	movs	r2, #0
 8001772:	4982      	ldr	r1, [pc, #520]	; (800197c <ds_twr_responder+0x4e4>)
 8001774:	200f      	movs	r0, #15
 8001776:	f00a ff17 	bl	800c5a8 <dwt_writetxdata>
				dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800177a:	2201      	movs	r2, #1
 800177c:	2100      	movs	r1, #0
 800177e:	200f      	movs	r0, #15
 8001780:	f00a ff20 	bl	800c5c4 <dwt_writetxfctrl>
				ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8001784:	2003      	movs	r0, #3
 8001786:	f00a ff2b 	bl	800c5e0 <dwt_starttx>
 800178a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

				/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
				if (ret == DWT_ERROR) {
 800178e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001796:	f000 83a3 	beq.w	8001ee0 <ds_twr_responder+0xa48>
					continue;
				}

				/* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
				waitforsysstatus(&status_reg, NULL,
 800179a:	2300      	movs	r3, #0
 800179c:	4a71      	ldr	r2, [pc, #452]	; (8001964 <ds_twr_responder+0x4cc>)
 800179e:	2100      	movs	r1, #0
 80017a0:	4871      	ldr	r0, [pc, #452]	; (8001968 <ds_twr_responder+0x4d0>)
 80017a2:	f009 fb84 	bl	800aeae <waitforsysstatus>
						(DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO
								| SYS_STATUS_ALL_RX_ERR), 0);

				/* Increment frame sequence number after transmission of the response message (modulo 256). */
				frame_seq_nb++;
 80017a6:	4b79      	ldr	r3, [pc, #484]	; (800198c <ds_twr_responder+0x4f4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b77      	ldr	r3, [pc, #476]	; (800198c <ds_twr_responder+0x4f4>)
 80017b0:	701a      	strb	r2, [r3, #0]
				//}
				// else if (memcmp(rx_buffer, rx_final_msg, allMSGCOMMONLEN)) {
				if (status_reg & DWT_INT_RXFCG_BIT_MASK) {
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <ds_twr_responder+0x4d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8386 	beq.w	8001ecc <ds_twr_responder+0xa34>
					/* Clear good RX frame event and TX frame sent in the DW IC status register. */
					dwt_writesysstatuslo(
 80017c0:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 80017c4:	f00b f804 	bl	800c7d0 <dwt_writesysstatuslo>
							DWT_INT_RXFCG_BIT_MASK | DWT_INT_TXFRS_BIT_MASK);

					/* A frame has been received, read it into the local buffer. */
					frame_len = dwt_getframelength();
 80017c8:	f00b f838 	bl	800c83c <dwt_getframelength>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
					if (frame_len <= RX_BUF_LEN) {
 80017d2:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80017d6:	2b18      	cmp	r3, #24
 80017d8:	d806      	bhi.n	80017e8 <ds_twr_responder+0x350>
						dwt_readrxdata(rx_buffer, frame_len, 0);
 80017da:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4862      	ldr	r0, [pc, #392]	; (800196c <ds_twr_responder+0x4d4>)
 80017e4:	f00a ffc6 	bl	800c774 <dwt_readrxdata>
					}

					/* Check that the frame is a final message sent by "DS TWR initiator" example.
					 * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
					rx_buffer[ALL_MSG_SN_IDX] = 0;
 80017e8:	4b60      	ldr	r3, [pc, #384]	; (800196c <ds_twr_responder+0x4d4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	709a      	strb	r2, [r3, #2]
					if (memcmp(rx_buffer, rx_final_msg, allMSGCOMMONLEN) == 0) {
 80017ee:	4b60      	ldr	r3, [pc, #384]	; (8001970 <ds_twr_responder+0x4d8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4962      	ldr	r1, [pc, #392]	; (8001980 <ds_twr_responder+0x4e8>)
 80017f6:	485d      	ldr	r0, [pc, #372]	; (800196c <ds_twr_responder+0x4d4>)
 80017f8:	f019 fb93 	bl	801af22 <memcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f af28 	bne.w	8001654 <ds_twr_responder+0x1bc>
						uint32_t poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
						double Ra, Rb, Da, Db;
						int64_t tof_dtu;

						/* Retrieve response transmission and final reception timestamps. */
						resp_tx_ts = get_tx_timestamp_u64();
 8001804:	f009 fa84 	bl	800ad10 <get_tx_timestamp_u64>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4960      	ldr	r1, [pc, #384]	; (8001990 <ds_twr_responder+0x4f8>)
 800180e:	e9c1 2300 	strd	r2, r3, [r1]
						final_rx_ts = get_rx_timestamp_u64();
 8001812:	f009 fabe 	bl	800ad92 <get_rx_timestamp_u64>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	495e      	ldr	r1, [pc, #376]	; (8001994 <ds_twr_responder+0x4fc>)
 800181c:	e9c1 2300 	strd	r2, r3, [r1]

						/* Get timestamps embedded in the final message. */
						final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX],
 8001820:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001824:	4619      	mov	r1, r3
 8001826:	485c      	ldr	r0, [pc, #368]	; (8001998 <ds_twr_responder+0x500>)
 8001828:	f009 faf4 	bl	800ae14 <final_msg_get_ts>
								&poll_tx_ts);
						final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX],
 800182c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001830:	4619      	mov	r1, r3
 8001832:	485a      	ldr	r0, [pc, #360]	; (800199c <ds_twr_responder+0x504>)
 8001834:	f009 faee 	bl	800ae14 <final_msg_get_ts>
								&resp_rx_ts);
						final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX],
 8001838:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800183c:	4619      	mov	r1, r3
 800183e:	4858      	ldr	r0, [pc, #352]	; (80019a0 <ds_twr_responder+0x508>)
 8001840:	f009 fae8 	bl	800ae14 <final_msg_get_ts>
								&final_tx_ts);

						/* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
						poll_rx_ts_32 = (uint32_t) poll_rx_ts;
 8001844:	4b4f      	ldr	r3, [pc, #316]	; (8001984 <ds_twr_responder+0x4ec>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	4613      	mov	r3, r2
 800184c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						resp_tx_ts_32 = (uint32_t) resp_tx_ts;
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <ds_twr_responder+0x4f8>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	4613      	mov	r3, r2
 8001858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
						final_rx_ts_32 = (uint32_t) final_rx_ts;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <ds_twr_responder+0x4fc>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	4613      	mov	r3, r2
 8001864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
						Ra = (double) (resp_rx_ts - poll_tx_ts);
 8001868:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800186c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe9e 	bl	80005b4 <__aeabi_ui2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
						Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
 8001880:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe92 	bl	80005b4 <__aeabi_ui2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
						Da = (double) (final_tx_ts - resp_rx_ts);
 8001898:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800189a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe87 	bl	80005b4 <__aeabi_ui2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
						Db = (double) (resp_tx_ts_32 - poll_rx_ts_32);
 80018ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe7b 	bl	80005b4 <__aeabi_ui2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
						tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 80018c6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80018ca:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80018ce:	f7fe feeb 	bl	80006a8 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4614      	mov	r4, r2
 80018d8:	461d      	mov	r5, r3
 80018da:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80018de:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80018e2:	f7fe fee1 	bl	80006a8 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fd23 	bl	8000338 <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
								/ (Ra + Rb + Da + Db));
 80018fa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80018fe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001902:	f7fe fd1b 	bl	800033c <__adddf3>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001912:	f7fe fd13 	bl	800033c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001922:	f7fe fd0b 	bl	800033c <__adddf3>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe ffe5 	bl	80008fc <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
						tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff fa15 	bl	8000d68 <__aeabi_d2lz>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

						tof = tof_dtu * DWT_TIME_UNITS;
 8001946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800194a:	e02b      	b.n	80019a4 <ds_twr_responder+0x50c>
 800194c:	424cb333 	.word	0x424cb333
 8001950:	40020400 	.word	0x40020400
 8001954:	20000508 	.word	0x20000508
 8001958:	20003d60 	.word	0x20003d60
 800195c:	20004050 	.word	0x20004050
 8001960:	08001499 	.word	0x08001499
 8001964:	3427d000 	.word	0x3427d000
 8001968:	2000047c 	.word	0x2000047c
 800196c:	20000464 	.word	0x20000464
 8001970:	2000008c 	.word	0x2000008c
 8001974:	20000058 	.word	0x20000058
 8001978:	20000460 	.word	0x20000460
 800197c:	20000064 	.word	0x20000064
 8001980:	20000074 	.word	0x20000074
 8001984:	20000480 	.word	0x20000480
 8001988:	036d8168 	.word	0x036d8168
 800198c:	2000045c 	.word	0x2000045c
 8001990:	20000488 	.word	0x20000488
 8001994:	20000490 	.word	0x20000490
 8001998:	2000046e 	.word	0x2000046e
 800199c:	20000472 	.word	0x20000472
 80019a0:	20000476 	.word	0x20000476
 80019a4:	f7fe fe52 	bl	800064c <__aeabi_l2d>
 80019a8:	a3a6      	add	r3, pc, #664	; (adr r3, 8001c44 <ds_twr_responder+0x7ac>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fe7b 	bl	80006a8 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4994      	ldr	r1, [pc, #592]	; (8001c08 <ds_twr_responder+0x770>)
 80019b8:	e9c1 2300 	strd	r2, r3, [r1]
						distance = tof * SPEED_OF_LIGHT;
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <ds_twr_responder+0x770>)
 80019be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c2:	a38f      	add	r3, pc, #572	; (adr r3, 8001c00 <ds_twr_responder+0x768>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe6e 	bl	80006a8 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	498e      	ldr	r1, [pc, #568]	; (8001c0c <ds_twr_responder+0x774>)
 80019d2:	e9c1 2300 	strd	r2, r3, [r1]
						//    test_run_info((unsigned char *)dist_str);
						//printf("distance (m): %0.3f \r\n", distance);
						/* as DS-TWR initiator is waiting for RNG_DELAY_MS before next poll transmission
						 * we can add a delay here before RX is re-enabled again
						 */
						allMSGCOMMONLEN = 7;
 80019d6:	4b8e      	ldr	r3, [pc, #568]	; (8001c10 <ds_twr_responder+0x778>)
 80019d8:	2207      	movs	r2, #7
 80019da:	701a      	strb	r2, [r3, #0]

						//CALCULATES RSSI with the github method (same values)
						dwt_readdiagnostics(&rx_diag);
 80019dc:	488d      	ldr	r0, [pc, #564]	; (8001c14 <ds_twr_responder+0x77c>)
 80019de:	f00a fee9 	bl	800c7b4 <dwt_readdiagnostics>
						C = rx_diag.ipatovPower;
 80019e2:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <ds_twr_responder+0x77c>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	4a8c      	ldr	r2, [pc, #560]	; (8001c18 <ds_twr_responder+0x780>)
 80019e8:	6013      	str	r3, [r2, #0]
						N = rx_diag.ipatovAccumCount;
 80019ea:	4b8a      	ldr	r3, [pc, #552]	; (8001c14 <ds_twr_responder+0x77c>)
 80019ec:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80019ee:	4b8b      	ldr	r3, [pc, #556]	; (8001c1c <ds_twr_responder+0x784>)
 80019f0:	801a      	strh	r2, [r3, #0]
						/* ====> Read DGC here <==== */
						D = dwt_get_dgcdecision();
 80019f2:	f00a fe19 	bl	800c628 <dwt_get_dgcdecision>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						/* ====> Calculate RSSI <==== */
						rssi = getRSSI(C, N, D, A);//41, 103, 4
 80019fc:	4b86      	ldr	r3, [pc, #536]	; (8001c18 <ds_twr_responder+0x780>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a86      	ldr	r2, [pc, #536]	; (8001c1c <ds_twr_responder+0x784>)
 8001a02:	8811      	ldrh	r1, [r2, #0]
 8001a04:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001c20 <ds_twr_responder+0x788>
 8001a08:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fa8d 	bl	8001f30 <getRSSI>
 8001a16:	eef0 7a40 	vmov.f32	s15, s0
 8001a1a:	4b82      	ldr	r3, [pc, #520]	; (8001c24 <ds_twr_responder+0x78c>)
 8001a1c:	edc3 7a00 	vstr	s15, [r3]

						float alpha =1;
 8001a20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
						uint8_t indexCurrent;
						if ((rx_buffer[7] == 'A') && (rx_buffer[8] == 1)) {
 8001a28:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <ds_twr_responder+0x790>)
 8001a2a:	79db      	ldrb	r3, [r3, #7]
 8001a2c:	2b41      	cmp	r3, #65	; 0x41
 8001a2e:	d107      	bne.n	8001a40 <ds_twr_responder+0x5a8>
 8001a30:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <ds_twr_responder+0x790>)
 8001a32:	7a1b      	ldrb	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d103      	bne.n	8001a40 <ds_twr_responder+0x5a8>

							indexCurrent = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a3e:	e03a      	b.n	8001ab6 <ds_twr_responder+0x61e>
							//		SendMessageCAN(rx_buffer[7], distance);

							//	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);


						} else if ((rx_buffer[7] == 'B')
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <ds_twr_responder+0x790>)
 8001a42:	79db      	ldrb	r3, [r3, #7]
 8001a44:	2b42      	cmp	r3, #66	; 0x42
 8001a46:	d107      	bne.n	8001a58 <ds_twr_responder+0x5c0>
								&& (rx_buffer[8] == 2)) {
 8001a48:	4b77      	ldr	r3, [pc, #476]	; (8001c28 <ds_twr_responder+0x790>)
 8001a4a:	7a1b      	ldrb	r3, [r3, #8]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d103      	bne.n	8001a58 <ds_twr_responder+0x5c0>

							indexCurrent = 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a56:	e02e      	b.n	8001ab6 <ds_twr_responder+0x61e>


						} else if ((rx_buffer[7] == 'C')
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <ds_twr_responder+0x790>)
 8001a5a:	79db      	ldrb	r3, [r3, #7]
 8001a5c:	2b43      	cmp	r3, #67	; 0x43
 8001a5e:	d107      	bne.n	8001a70 <ds_twr_responder+0x5d8>
								&& (rx_buffer[8] == 3)) {
 8001a60:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <ds_twr_responder+0x790>)
 8001a62:	7a1b      	ldrb	r3, [r3, #8]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d103      	bne.n	8001a70 <ds_twr_responder+0x5d8>

							indexCurrent = 2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a6e:	e022      	b.n	8001ab6 <ds_twr_responder+0x61e>


						} else if ((rx_buffer[7] == 'D')
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <ds_twr_responder+0x790>)
 8001a72:	79db      	ldrb	r3, [r3, #7]
 8001a74:	2b44      	cmp	r3, #68	; 0x44
 8001a76:	d107      	bne.n	8001a88 <ds_twr_responder+0x5f0>
								&& (rx_buffer[8] == 4)) {
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <ds_twr_responder+0x790>)
 8001a7a:	7a1b      	ldrb	r3, [r3, #8]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d103      	bne.n	8001a88 <ds_twr_responder+0x5f0>

							indexCurrent = 3;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a86:	e016      	b.n	8001ab6 <ds_twr_responder+0x61e>


						} else if ((rx_buffer[7] == 'E')
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <ds_twr_responder+0x790>)
 8001a8a:	79db      	ldrb	r3, [r3, #7]
 8001a8c:	2b45      	cmp	r3, #69	; 0x45
 8001a8e:	d107      	bne.n	8001aa0 <ds_twr_responder+0x608>
								&& (rx_buffer[8] == 5)) {
 8001a90:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <ds_twr_responder+0x790>)
 8001a92:	7a1b      	ldrb	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d103      	bne.n	8001aa0 <ds_twr_responder+0x608>

							indexCurrent = 4;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a9e:	e00a      	b.n	8001ab6 <ds_twr_responder+0x61e>


						} else if ((rx_buffer[7] == 'F')
 8001aa0:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <ds_twr_responder+0x790>)
 8001aa2:	79db      	ldrb	r3, [r3, #7]
 8001aa4:	2b46      	cmp	r3, #70	; 0x46
 8001aa6:	d106      	bne.n	8001ab6 <ds_twr_responder+0x61e>
								&& (rx_buffer[8] == 6)) {
 8001aa8:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <ds_twr_responder+0x790>)
 8001aaa:	7a1b      	ldrb	r3, [r3, #8]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d102      	bne.n	8001ab6 <ds_twr_responder+0x61e>

							indexCurrent = 5;
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


						}


						if (distance > 0) { //if distance is postive, update position with LPF distance
 8001ab6:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <ds_twr_responder+0x774>)
 8001ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f7ff f880 	bl	8000bc8 <__aeabi_dcmpgt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d036      	beq.n	8001b3c <ds_twr_responder+0x6a4>
							position[indexCurrent] = (1 - alpha) * position[indexCurrent] + (alpha) * distance;
 8001ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd8b 	bl	80005f8 <__aeabi_f2d>
 8001ae2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ae6:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <ds_twr_responder+0x794>)
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fdda 	bl	80006a8 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001b00:	f7fe fd7a 	bl	80005f8 <__aeabi_f2d>
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <ds_twr_responder+0x774>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fdcd 	bl	80006a8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
 8001b16:	4640      	mov	r0, r8
 8001b18:	4649      	mov	r1, r9
 8001b1a:	f7fe fc0f 	bl	800033c <__adddf3>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4842      	ldr	r0, [pc, #264]	; (8001c2c <ds_twr_responder+0x794>)
 8001b24:	00e1      	lsls	r1, r4, #3
 8001b26:	4401      	add	r1, r0
 8001b28:	e9c1 2300 	strd	r2, r3, [r1]

							signal_strength[indexCurrent] = rssi;
 8001b2c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b30:	4a3c      	ldr	r2, [pc, #240]	; (8001c24 <ds_twr_responder+0x78c>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	493e      	ldr	r1, [pc, #248]	; (8001c30 <ds_twr_responder+0x798>)
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	601a      	str	r2, [r3, #0]
						}

						if ((distance > 0) && (counter[indexCurrent] < NUM_MES)) { //if distance is positive and within the first 100 readings
 8001b3c:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <ds_twr_responder+0x774>)
 8001b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	f7ff f83d 	bl	8000bc8 <__aeabi_dcmpgt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d024      	beq.n	8001b9e <ds_twr_responder+0x706>
 8001b54:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b58:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <ds_twr_responder+0x79c>)
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b62:	da1c      	bge.n	8001b9e <ds_twr_responder+0x706>
							reldistance[indexCurrent][counter[indexCurrent]] = distance;
 8001b64:	f897 010f 	ldrb.w	r0, [r7, #271]	; 0x10f
 8001b68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b6c:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <ds_twr_responder+0x79c>)
 8001b6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <ds_twr_responder+0x774>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	4c2f      	ldr	r4, [pc, #188]	; (8001c38 <ds_twr_responder+0x7a0>)
 8001b7a:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001b7e:	fb05 f000 	mul.w	r0, r5, r0
 8001b82:	4401      	add	r1, r0
 8001b84:	00c9      	lsls	r1, r1, #3
 8001b86:	4421      	add	r1, r4
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
							counter[indexCurrent]++;
 8001b8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <ds_twr_responder+0x79c>)
 8001b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b96:	3201      	adds	r2, #1
 8001b98:	4926      	ldr	r1, [pc, #152]	; (8001c34 <ds_twr_responder+0x79c>)
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						}

						if (counter[indexCurrent] == NUM_MES) { //if 100 readings done, find the median distance
 8001b9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <ds_twr_responder+0x79c>)
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bac:	f040 8096 	bne.w	8001cdc <ds_twr_responder+0x844>

							qsort(reldistance[indexCurrent], NUM_MES, sizeof(double), compare); //sort the 100 readings, smallest to largest
 8001bb0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bb4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <ds_twr_responder+0x7a0>)
 8001bbe:	1898      	adds	r0, r3, r2
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <ds_twr_responder+0x7a4>)
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001bc8:	f018 f880 	bl	8019ccc <qsort>



							median[indexCurrent] = reldistance[indexCurrent][NUM_MES/2]; //take the median value from the sorted array
 8001bcc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bd0:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <ds_twr_responder+0x7a0>)
 8001bd6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8001bda:	fb00 f303 	mul.w	r3, r0, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	4815      	ldr	r0, [pc, #84]	; (8001c40 <ds_twr_responder+0x7a8>)
 8001bea:	00c9      	lsls	r1, r1, #3
 8001bec:	4401      	add	r1, r0
 8001bee:	e9c1 2300 	strd	r2, r3, [r1]


							for (int i = 0; i < NUM_MES; i++){
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001bf8:	e04d      	b.n	8001c96 <ds_twr_responder+0x7fe>
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	13000000 	.word	0x13000000
 8001c04:	41b1dd19 	.word	0x41b1dd19
 8001c08:	20000498 	.word	0x20000498
 8001c0c:	200004a0 	.word	0x200004a0
 8001c10:	2000008c 	.word	0x2000008c
 8001c14:	200003e0 	.word	0x200003e0
 8001c18:	20000450 	.word	0x20000450
 8001c1c:	20000454 	.word	0x20000454
 8001c20:	42f36666 	.word	0x42f36666
 8001c24:	20000458 	.word	0x20000458
 8001c28:	20000464 	.word	0x20000464
 8001c2c:	200004a8 	.word	0x200004a8
 8001c30:	200004d8 	.word	0x200004d8
 8001c34:	20000508 	.word	0x20000508
 8001c38:	20000520 	.word	0x20000520
 8001c3c:	0800142b 	.word	0x0800142b
 8001c40:	20003dc0 	.word	0x20003dc0
 8001c44:	3bce48fa 	.word	0x3bce48fa
 8001c48:	3db13518 	.word	0x3db13518
								avg_reldistance[indexCurrent] += reldistance[indexCurrent][i];
 8001c4c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c50:	4aab      	ldr	r2, [pc, #684]	; (8001f00 <ds_twr_responder+0xa68>)
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c5e:	4ca9      	ldr	r4, [pc, #676]	; (8001f04 <ds_twr_responder+0xa6c>)
 8001c60:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c64:	fb03 f202 	mul.w	r2, r3, r2
 8001c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4423      	add	r3, r4
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
 8001c7a:	f7fe fb5f 	bl	800033c <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	489f      	ldr	r0, [pc, #636]	; (8001f00 <ds_twr_responder+0xa68>)
 8001c84:	00e1      	lsls	r1, r4, #3
 8001c86:	4401      	add	r1, r0
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]
							for (int i = 0; i < NUM_MES; i++){
 8001c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c90:	3301      	adds	r3, #1
 8001c92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c9e:	dbd5      	blt.n	8001c4c <ds_twr_responder+0x7b4>
							}


							avg_reldistance[indexCurrent] /= NUM_MES;
 8001ca0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ca4:	4a96      	ldr	r2, [pc, #600]	; (8001f00 <ds_twr_responder+0xa68>)
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cae:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
 8001cb2:	a391      	add	r3, pc, #580	; (adr r3, 8001ef8 <ds_twr_responder+0xa60>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fe20 	bl	80008fc <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	488f      	ldr	r0, [pc, #572]	; (8001f00 <ds_twr_responder+0xa68>)
 8001cc2:	00e1      	lsls	r1, r4, #3
 8001cc4:	4401      	add	r1, r0
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]

							counter[indexCurrent]++; //increment the counter so qsort isnt called again
 8001cca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cce:	4a8e      	ldr	r2, [pc, #568]	; (8001f08 <ds_twr_responder+0xa70>)
 8001cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd4:	3201      	adds	r2, #1
 8001cd6:	498c      	ldr	r1, [pc, #560]	; (8001f08 <ds_twr_responder+0xa70>)
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


						}

						converter.float1 = (float)position[indexCurrent];
 8001cdc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ce0:	4a8a      	ldr	r2, [pc, #552]	; (8001f0c <ds_twr_responder+0xa74>)
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe ffd3 	bl	8000c98 <__aeabi_d2f>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a86      	ldr	r2, [pc, #536]	; (8001f10 <ds_twr_responder+0xa78>)
 8001cf6:	6013      	str	r3, [r2, #0]
						converter.float2 = (float)rssi;
 8001cf8:	4b86      	ldr	r3, [pc, #536]	; (8001f14 <ds_twr_responder+0xa7c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a84      	ldr	r2, [pc, #528]	; (8001f10 <ds_twr_responder+0xa78>)
 8001cfe:	6053      	str	r3, [r2, #4]


				  		HAL_CAN_AddTxMessage(&hcan1, &TxHeader[indexCurrent], converter.txBuffer, &TxMailbox);
 8001d00:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4a82      	ldr	r2, [pc, #520]	; (8001f18 <ds_twr_responder+0xa80>)
 8001d0e:	1899      	adds	r1, r3, r2
 8001d10:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <ds_twr_responder+0xa84>)
 8001d12:	4a7f      	ldr	r2, [pc, #508]	; (8001f10 <ds_twr_responder+0xa78>)
 8001d14:	4882      	ldr	r0, [pc, #520]	; (8001f20 <ds_twr_responder+0xa88>)
 8001d16:	f001 f8c4 	bl	8002ea2 <HAL_CAN_AddTxMessage>

				  		char txBuffer[100];

				  		if (printData == 1) {
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <ds_twr_responder+0xa8c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d163      	bne.n	8001dea <ds_twr_responder+0x952>
				  			 * printData = 1 send the averaged distance to USB, can be changing by
				  			 * sending command from PC to UWB board
				  			 */

				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
				  				(float)avg_reldistance[0],(float)avg_reldistance[1],(float)avg_reldistance[2],
 8001d22:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <ds_twr_responder+0xa68>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ffb4 	bl	8000c98 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fc60 	bl	80005f8 <__aeabi_f2d>
 8001d38:	e9c7 0104 	strd	r0, r1, [r7, #16]
				  				(float)avg_reldistance[0],(float)avg_reldistance[1],(float)avg_reldistance[2],
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <ds_twr_responder+0xa68>)
 8001d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ffa7 	bl	8000c98 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc53 	bl	80005f8 <__aeabi_f2d>
 8001d52:	4680      	mov	r8, r0
 8001d54:	4689      	mov	r9, r1
				  				(float)avg_reldistance[0],(float)avg_reldistance[1],(float)avg_reldistance[2],
 8001d56:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <ds_twr_responder+0xa68>)
 8001d58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff9a 	bl	8000c98 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc46 	bl	80005f8 <__aeabi_f2d>
 8001d6c:	e9c7 0102 	strd	r0, r1, [r7, #8]
								(float)avg_reldistance[3],(float)avg_reldistance[4],(float)avg_reldistance[5]);
 8001d70:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <ds_twr_responder+0xa68>)
 8001d72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe ff8d 	bl	8000c98 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc39 	bl	80005f8 <__aeabi_f2d>
 8001d86:	e9c7 0100 	strd	r0, r1, [r7]
								(float)avg_reldistance[3],(float)avg_reldistance[4],(float)avg_reldistance[5]);
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <ds_twr_responder+0xa68>)
 8001d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe ff80 	bl	8000c98 <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_f2d>
 8001da0:	4604      	mov	r4, r0
 8001da2:	460d      	mov	r5, r1
								(float)avg_reldistance[3],(float)avg_reldistance[4],(float)avg_reldistance[5]);
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <ds_twr_responder+0xa68>)
 8001da6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe ff73 	bl	8000c98 <__aeabi_d2f>
 8001db2:	4603      	mov	r3, r0
				  		sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fc1f 	bl	80005f8 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	f107 0018 	add.w	r0, r7, #24
 8001dc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001dc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001dca:	ed97 7b00 	vldr	d7, [r7]
 8001dce:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001dd2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001dda:	e9cd 8900 	strd	r8, r9, [sp]
 8001dde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001de2:	4951      	ldr	r1, [pc, #324]	; (8001f28 <ds_twr_responder+0xa90>)
 8001de4:	f019 f80c 	bl	801ae00 <siprintf>
 8001de8:	e066      	b.n	8001eb8 <ds_twr_responder+0xa20>
				  		} else if (printData == 2) {
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <ds_twr_responder+0xa8c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d162      	bne.n	8001eb8 <ds_twr_responder+0xa20>
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
				  							  				(float)position[0],(float)position[1],(float)position[2],
 8001df2:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <ds_twr_responder+0xa74>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe ff4c 	bl	8000c98 <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fbf8 	bl	80005f8 <__aeabi_f2d>
 8001e08:	e9c7 0104 	strd	r0, r1, [r7, #16]
				  							  				(float)position[0],(float)position[1],(float)position[2],
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <ds_twr_responder+0xa74>)
 8001e0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe ff3f 	bl	8000c98 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fbeb 	bl	80005f8 <__aeabi_f2d>
 8001e22:	4680      	mov	r8, r0
 8001e24:	4689      	mov	r9, r1
				  							  				(float)position[0],(float)position[1],(float)position[2],
 8001e26:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <ds_twr_responder+0xa74>)
 8001e28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe ff32 	bl	8000c98 <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fbde 	bl	80005f8 <__aeabi_f2d>
 8001e3c:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  											(float)position[3],(float)position[4],(float)position[5]);
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <ds_twr_responder+0xa74>)
 8001e42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe ff25 	bl	8000c98 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_f2d>
 8001e56:	e9c7 0100 	strd	r0, r1, [r7]
				  											(float)position[3],(float)position[4],(float)position[5]);
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <ds_twr_responder+0xa74>)
 8001e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe ff18 	bl	8000c98 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_f2d>
 8001e70:	4604      	mov	r4, r0
 8001e72:	460d      	mov	r5, r1
				  											(float)position[3],(float)position[4],(float)position[5]);
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <ds_twr_responder+0xa74>)
 8001e76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe ff0b 	bl	8000c98 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
				  			sprintf(txBuffer, "%0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f\r\n",
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fbb7 	bl	80005f8 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	f107 0018 	add.w	r0, r7, #24
 8001e92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001e96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001e9a:	ed97 7b00 	vldr	d7, [r7]
 8001e9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ea2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ea6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001eaa:	e9cd 8900 	strd	r8, r9, [sp]
 8001eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb2:	491d      	ldr	r1, [pc, #116]	; (8001f28 <ds_twr_responder+0xa90>)
 8001eb4:	f018 ffa4 	bl	801ae00 <siprintf>

				  		}

				  		test_run_info((unsigned char *)txBuffer);
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f8a7 	bl	8002010 <test_run_info>
						 D = all_diag.D * 6;

						 ip_rsl = 10 * log10((float) ip_cp / ip_n) + ip_alpha
						 + log_constant + D;*/

						Sleep(RNG_DELAY_MS - 10); // start couple of ms earlier
 8001ec2:	2005      	movs	r0, #5
 8001ec4:	f00a f814 	bl	800bef0 <Sleep>
 8001ec8:	f7ff bbc4 	b.w	8001654 <ds_twr_responder+0x1bc>
					}
				} else {
					/* Clear RX error/timeout events in the DW IC status register. */
					dwt_writesysstatuslo(
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <ds_twr_responder+0xa94>)
 8001ece:	f00a fc7f 	bl	800c7d0 <dwt_writesysstatuslo>
 8001ed2:	f7ff bbbf 	b.w	8001654 <ds_twr_responder+0x1bc>
					SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
				}
			}
		} else {
			/* Clear RX error/timeout events in the DW IC status register. */
			dwt_writesysstatuslo(SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001ed6:	4815      	ldr	r0, [pc, #84]	; (8001f2c <ds_twr_responder+0xa94>)
 8001ed8:	f00a fc7a 	bl	800c7d0 <dwt_writesysstatuslo>
 8001edc:	f7ff bbba 	b.w	8001654 <ds_twr_responder+0x1bc>
					continue;
 8001ee0:	bf00      	nop
		if 	(example_pointer != ds_twr_responder) {
 8001ee2:	f7ff bbb7 	b.w	8001654 <ds_twr_responder+0x1bc>
			break;
 8001ee6:	bf00      	nop
		}
	}
}
 8001ee8:	bf00      	nop
 8001eea:	4618      	mov	r0, r3
 8001eec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ef6:	bf00      	nop
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	4072c000 	.word	0x4072c000
 8001f00:	20003d90 	.word	0x20003d90
 8001f04:	20000520 	.word	0x20000520
 8001f08:	20000508 	.word	0x20000508
 8001f0c:	200004a8 	.word	0x200004a8
 8001f10:	20003df0 	.word	0x20003df0
 8001f14:	20000458 	.word	0x20000458
 8001f18:	20003f10 	.word	0x20003f10
 8001f1c:	20004038 	.word	0x20004038
 8001f20:	20003df8 	.word	0x20003df8
 8001f24:	2000013c 	.word	0x2000013c
 8001f28:	08020214 	.word	0x08020214
 8001f2c:	34279000 	.word	0x34279000

08001f30 <getRSSI>:
	}

	//a[temp + i] = addressTag;
}

float getRSSI(uint32_t C, uint16_t N, uint8_t D, float A) {
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f3e:	817b      	strh	r3, [r7, #10]
 8001f40:	4613      	mov	r3, r2
 8001f42:	727b      	strb	r3, [r7, #9]
	float rssi;
	rssi = 10 * log10((C * pow(2.0, 21.0)) / pow((double) N, 2.0)) + (6 * D)
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fb35 	bl	80005b4 <__aeabi_ui2d>
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <getRSSI+0xd8>)
 8001f50:	f7fe fbaa 	bl	80006a8 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4614      	mov	r4, r2
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fb28 	bl	80005b4 <__aeabi_ui2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8002000 <getRSSI+0xd0>
 8001f6c:	ec43 2b10 	vmov	d0, r2, r3
 8001f70:	f01c ff84 	bl	801ee7c <pow>
 8001f74:	ec53 2b10 	vmov	r2, r3, d0
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe fcbe 	bl	80008fc <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	ec43 2b17 	vmov	d7, r2, r3
 8001f88:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8c:	eef0 0a67 	vmov.f32	s1, s15
 8001f90:	f01c ff36 	bl	801ee00 <log10>
 8001f94:	ec51 0b10 	vmov	r0, r1, d0
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <getRSSI+0xdc>)
 8001f9e:	f7fe fb83 	bl	80006a8 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4614      	mov	r4, r2
 8001fa8:	461d      	mov	r5, r3
 8001faa:	7a7a      	ldrb	r2, [r7, #9]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fb0d 	bl	80005d4 <__aeabi_i2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe f9bb 	bl	800033c <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4614      	mov	r4, r2
 8001fcc:	461d      	mov	r5, r3
			- A;
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fb12 	bl	80005f8 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe f9ac 	bl	8000338 <__aeabi_dsub>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
	rssi = 10 * log10((C * pow(2.0, 21.0)) / pow((double) N, 2.0)) + (6 * D)
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fe56 	bl	8000c98 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	617b      	str	r3, [r7, #20]
	return rssi;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	ee07 3a90 	vmov	s15, r3
}
 8001ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	00000000 	.word	0x00000000
 8002004:	40000000 	.word	0x40000000
 8002008:	41400000 	.word	0x41400000
 800200c:	40240000 	.word	0x40240000

08002010 <test_run_info>:
 *
 * output parameters
 *
 * no return value
 */
void test_run_info(unsigned char *data) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	uint16_t data_length;

	data_length = strlen((const char*) data);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe f981 	bl	8000320 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	81fb      	strh	r3, [r7, #14]
	CDC_Transmit_FS(data, data_length); /*Transmit the data through USB - Virtual port*/
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f009 f8d4 	bl	800b1d4 <CDC_Transmit_FS>
	CDC_Transmit_FS((uint8_t*) "\n\r", 2); /*Transmit end of line through USB - Virtual port*/
 800202c:	2102      	movs	r1, #2
 800202e:	4803      	ldr	r0, [pc, #12]	; (800203c <test_run_info+0x2c>)
 8002030:	f009 f8d0 	bl	800b1d4 <CDC_Transmit_FS>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	0802023c 	.word	0x0802023c

08002040 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[8];
uint32_t              TxMailbox;
uint32_t timer;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData); //Receive CAN bus message to canRX buffer
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800204c:	2100      	movs	r1, #0
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fff7 	bl	8003042 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);// toggle PA3 LED
 8002054:	2108      	movs	r1, #8
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002058:	f001 feed 	bl	8003e36 <HAL_GPIO_TogglePin>

}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20004030 	.word	0x20004030
 8002068:	20003fa0 	.word	0x20003fa0
 800206c:	40020000 	.word	0x40020000

08002070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 * SEE "main.h" TO CHANGE ANCHOR NUMBER
 *
 */

//	deviceMode = ANCHOR;
	deviceMode = TAG_;
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <main+0xe4>)
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
	build_examples();
 800207c:	f008 fe0c 	bl	800ac98 <build_examples>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002080:	f000 fd3a 	bl	8002af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002084:	f000 f870 	bl	8002168 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002088:	f000 f8d8 	bl	800223c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208c:	f000 f9b4 	bl	80023f8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8002090:	f000 f926 	bl	80022e0 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8002094:	f000 f950 	bl	8002338 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002098:	f008 ff62 	bl	800af60 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 800209c:	f000 f8ea 	bl	8002274 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80020a0:	f000 f980 	bl	80023a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

for (int i = 0; i<6; i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e02c      	b.n	8002104 <main+0x94>
  TxHeader[i].DLC = 8; // Number of bites to be transmitted max- 8
 80020aa:	492b      	ldr	r1, [pc, #172]	; (8002158 <main+0xe8>)
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	3310      	adds	r3, #16
 80020ba:	2208      	movs	r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
  TxHeader[i].IDE = CAN_ID_STD;
 80020be:	4926      	ldr	r1, [pc, #152]	; (8002158 <main+0xe8>)
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	3308      	adds	r3, #8
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
  TxHeader[i].RTR = CAN_RTR_DATA;
 80020d2:	4921      	ldr	r1, [pc, #132]	; (8002158 <main+0xe8>)
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	330c      	adds	r3, #12
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
  TxHeader[i].StdId = 0x500+i;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	4618      	mov	r0, r3
 80020ee:	491a      	ldr	r1, [pc, #104]	; (8002158 <main+0xe8>)
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	6018      	str	r0, [r3, #0]
for (int i = 0; i<6; i++){
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3301      	adds	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b05      	cmp	r3, #5
 8002108:	ddcf      	ble.n	80020aa <main+0x3a>

}



    HAL_CAN_Start(&hcan1); //Initialize CAN Bus
 800210a:	4814      	ldr	r0, [pc, #80]	; (800215c <main+0xec>)
 800210c:	f000 fe85 	bl	8002e1a <HAL_CAN_Start>
       HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);// Initialize CAN Bus Rx Interrupt
 8002110:	2102      	movs	r1, #2
 8002112:	4812      	ldr	r0, [pc, #72]	; (800215c <main+0xec>)
 8002114:	f001 f8b7 	bl	8003286 <HAL_CAN_ActivateNotification>


        timer = HAL_GetTick();
 8002118:	f000 fd54 	bl	8002bc4 <HAL_GetTick>
 800211c:	4603      	mov	r3, r0
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <main+0xf0>)
 8002120:	6013      	str	r3, [r2, #0]


 	/* disable IRQ from DW3000*/
 	port_DisableEXT_IRQ();
 8002122:	f009 ffcf 	bl	800c0c4 <port_DisableEXT_IRQ>

 	/*Sleep to wait for USB CDC to initialise with host*/
 #ifdef WAIT_FOR_USB_CDC
 	Sleep(5000);
 8002126:	f241 3088 	movw	r0, #5000	; 0x1388
 800212a:	f009 fee1 	bl	800bef0 <Sleep>
 	if (UNIT_TEST) {
 		unit_test_main();
 	} else {


 		example_pointer();
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <main+0xf4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4798      	blx	r3
 	}

 #endif
 //	int master = 1;
 	int master = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]

 	HAL_Delay(100);
 8002138:	2064      	movs	r0, #100	; 0x64
 800213a:	f000 fd4f 	bl	8002bdc <HAL_Delay>
 	uint32_t t0 = HAL_GetTick();
 800213e:	f000 fd41 	bl	8002bc4 <HAL_GetTick>
 8002142:	6078      	str	r0, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		example_pointer();
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <main+0xf4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4798      	blx	r3

	  HAL_Delay(10);
 800214a:	200a      	movs	r0, #10
 800214c:	f000 fd46 	bl	8002bdc <HAL_Delay>
		example_pointer();
 8002150:	e7f8      	b.n	8002144 <main+0xd4>
 8002152:	bf00      	nop
 8002154:	20004040 	.word	0x20004040
 8002158:	20003f10 	.word	0x20003f10
 800215c:	20003df8 	.word	0x20003df8
 8002160:	2000403c 	.word	0x2000403c
 8002164:	20004050 	.word	0x20004050

08002168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b094      	sub	sp, #80	; 0x50
 800216c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	2234      	movs	r2, #52	; 0x34
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f018 fee3 	bl	801af42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <SystemClock_Config+0xcc>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <SystemClock_Config+0xcc>)
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <SystemClock_Config+0xcc>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a8:	2300      	movs	r3, #0
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <SystemClock_Config+0xd0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a21      	ldr	r2, [pc, #132]	; (8002238 <SystemClock_Config+0xd0>)
 80021b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <SystemClock_Config+0xd0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ce:	2302      	movs	r3, #2
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d8:	2308      	movs	r3, #8
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80021dc:	2360      	movs	r3, #96	; 0x60
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fdcb 	bl	8005d8c <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021fc:	f000 f9b0 	bl	8002560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	230f      	movs	r3, #15
 8002202:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002204:	2302      	movs	r3, #2
 8002206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2103      	movs	r1, #3
 800221c:	4618      	mov	r0, r3
 800221e:	f003 f9c9 	bl	80055b4 <HAL_RCC_ClockConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002228:	f000 f99a 	bl	8002560 <Error_Handler>
  }
}
 800222c:	bf00      	nop
 800222e:	3750      	adds	r7, #80	; 0x50
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000

0800223c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b090      	sub	sp, #64	; 0x40
 8002240:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	223c      	movs	r2, #60	; 0x3c
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f018 fe7a 	bl	801af42 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 800224e:	2304      	movs	r3, #4
 8002250:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fbc8 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8002266:	f000 f97b 	bl	8002560 <Error_Handler>
  }
}
 800226a:	bf00      	nop
 800226c:	3740      	adds	r7, #64	; 0x40
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <MX_CAN1_Init+0x64>)
 800227a:	4a18      	ldr	r2, [pc, #96]	; (80022dc <MX_CAN1_Init+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_CAN1_Init+0x64>)
 8002280:	2206      	movs	r2, #6
 8002282:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_CAN1_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_CAN1_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_CAN1_Init+0x64>)
 8002292:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002296:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_CAN1_Init+0x64>)
 800229a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800229e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <MX_CAN1_Init+0x64>)
 80022c6:	f000 fcad 	bl	8002c24 <HAL_CAN_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80022d0:	f000 f946 	bl	8002560 <Error_Handler>



  /* USER CODE END CAN1_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20003df8 	.word	0x20003df8
 80022dc:	40006400 	.word	0x40006400

080022e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <MX_QUADSPI_Init+0x50>)
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <MX_QUADSPI_Init+0x54>)
 80022e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_QUADSPI_Init+0x50>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <MX_QUADSPI_Init+0x50>)
 80022f2:	2204      	movs	r2, #4
 80022f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_QUADSPI_Init+0x50>)
 80022f8:	2210      	movs	r2, #16
 80022fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_QUADSPI_Init+0x50>)
 80022fe:	2217      	movs	r2, #23
 8002300:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <MX_QUADSPI_Init+0x50>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_QUADSPI_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <MX_QUADSPI_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_QUADSPI_Init+0x50>)
 8002316:	2200      	movs	r2, #0
 8002318:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_QUADSPI_Init+0x50>)
 800231c:	f003 f888 	bl	8005430 <HAL_QSPI_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002326:	f000 f91b 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20003e20 	.word	0x20003e20
 8002334:	a0001000 	.word	0xa0001000

08002338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <MX_SPI1_Init+0x64>)
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <MX_SPI1_Init+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <MX_SPI1_Init+0x64>)
 8002344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_SPI1_Init+0x64>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <MX_SPI1_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_SPI1_Init+0x64>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_SPI1_Init+0x64>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_SPI1_Init+0x64>)
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_SPI1_Init+0x64>)
 800236c:	2210      	movs	r2, #16
 800236e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <MX_SPI1_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_SPI1_Init+0x64>)
 8002378:	2200      	movs	r2, #0
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <MX_SPI1_Init+0x64>)
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_SPI1_Init+0x64>)
 8002384:	220a      	movs	r2, #10
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <MX_SPI1_Init+0x64>)
 800238a:	f003 ff83 	bl	8006294 <HAL_SPI_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002394:	f000 f8e4 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20003e6c 	.word	0x20003e6c
 80023a0:	40013000 	.word	0x40013000

080023a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_USART2_UART_Init+0x50>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023dc:	f004 fa10 	bl	8006800 <HAL_UART_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023e6:	f000 f8bb 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20003ec4 	.word	0x20003ec4
 80023f4:	40004400 	.word	0x40004400

080023f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <MX_GPIO_Init+0x158>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <MX_GPIO_Init+0x158>)
 8002418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <MX_GPIO_Init+0x158>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <MX_GPIO_Init+0x158>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a47      	ldr	r2, [pc, #284]	; (8002550 <MX_GPIO_Init+0x158>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <MX_GPIO_Init+0x158>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <MX_GPIO_Init+0x158>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a40      	ldr	r2, [pc, #256]	; (8002550 <MX_GPIO_Init+0x158>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <MX_GPIO_Init+0x158>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b3a      	ldr	r3, [pc, #232]	; (8002550 <MX_GPIO_Init+0x158>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a39      	ldr	r2, [pc, #228]	; (8002550 <MX_GPIO_Init+0x158>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <MX_GPIO_Init+0x158>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DW_RESET_Pin|DW_NSS_Pin, GPIO_PIN_SET);
 800247e:	2201      	movs	r2, #1
 8002480:	2111      	movs	r1, #17
 8002482:	4834      	ldr	r0, [pc, #208]	; (8002554 <MX_GPIO_Init+0x15c>)
 8002484:	f001 fcbe 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DW_NSS1_WAKEUP_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2122      	movs	r1, #34	; 0x22
 800248c:	4831      	ldr	r0, [pc, #196]	; (8002554 <MX_GPIO_Init+0x15c>)
 800248e:	f001 fcb9 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2103      	movs	r1, #3
 8002496:	4830      	ldr	r0, [pc, #192]	; (8002558 <MX_GPIO_Init+0x160>)
 8002498:	f001 fcb4 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 800249c:	2301      	movs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a8:	2302      	movs	r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4828      	ldr	r0, [pc, #160]	; (8002554 <MX_GPIO_Init+0x15c>)
 80024b4:	f001 fb12 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_NSS1_WAKEUP_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DW_NSS1_WAKEUP_Pin|LED3_Pin;
 80024b8:	2322      	movs	r3, #34	; 0x22
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	4821      	ldr	r0, [pc, #132]	; (8002554 <MX_GPIO_Init+0x15c>)
 80024d0:	f001 fb04 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80024d4:	2310      	movs	r3, #16
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2301      	movs	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024dc:	2301      	movs	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024e0:	2301      	movs	r3, #1
 80024e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	481a      	ldr	r0, [pc, #104]	; (8002554 <MX_GPIO_Init+0x15c>)
 80024ec:	f001 faf6 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80024f0:	2303      	movs	r3, #3
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4814      	ldr	r0, [pc, #80]	; (8002558 <MX_GPIO_Init+0x160>)
 8002508:	f001 fae8 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2n_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2n_Pin|DW_IRQn_Pin;
 800250c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002512:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	480e      	ldr	r0, [pc, #56]	; (800255c <MX_GPIO_Init+0x164>)
 8002524:	f001 fada 	bl	8003adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	2017      	movs	r0, #23
 800252e:	f001 f9fe 	bl	800392e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002532:	2017      	movs	r0, #23
 8002534:	f001 fa17 	bl	8003966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2028      	movs	r0, #40	; 0x28
 800253e:	f001 f9f6 	bl	800392e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002542:	2028      	movs	r0, #40	; 0x28
 8002544:	f001 fa0f 	bl	8003966 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002548:	bf00      	nop
 800254a:	3728      	adds	r7, #40	; 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	40020800 	.word	0x40020800
 8002558:	40020400 	.word	0x40020400
 800255c:	40020000 	.word	0x40020000

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002568:	e7fe      	b.n	8002568 <Error_Handler+0x8>
	...

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_MspInit+0x4c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_MspInit+0x4c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_MspInit+0x4c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_MspInit+0x4c>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_MspInit+0x4c>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_MspInit+0x4c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_CAN_MspInit+0x94>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d134      	bne.n	8002648 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_CAN_MspInit+0x98>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_CAN_MspInit+0x98>)
 80025e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_CAN_MspInit+0x98>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_CAN_MspInit+0x98>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_CAN_MspInit+0x98>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_CAN_MspInit+0x98>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8002628:	2308      	movs	r3, #8
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	4809      	ldr	r0, [pc, #36]	; (8002658 <HAL_CAN_MspInit+0x9c>)
 8002634:	f001 fa52 	bl	8003adc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	2014      	movs	r0, #20
 800263e:	f001 f976 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002642:	2014      	movs	r0, #20
 8002644:	f001 f98f 	bl	8003966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002648:	bf00      	nop
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40006400 	.word	0x40006400
 8002654:	40023800 	.word	0x40023800
 8002658:	40020400 	.word	0x40020400

0800265c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a30      	ldr	r2, [pc, #192]	; (800273c <HAL_QSPI_MspInit+0xe0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d15a      	bne.n	8002734 <HAL_QSPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	4a2e      	ldr	r2, [pc, #184]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6393      	str	r3, [r2, #56]	; 0x38
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a27      	ldr	r2, [pc, #156]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_QSPI_MspInit+0xe4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026d2:	2304      	movs	r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80026e2:	2309      	movs	r3, #9
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4815      	ldr	r0, [pc, #84]	; (8002744 <HAL_QSPI_MspInit+0xe8>)
 80026ee:	f001 f9f5 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002704:	2309      	movs	r3, #9
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	480e      	ldr	r0, [pc, #56]	; (8002748 <HAL_QSPI_MspInit+0xec>)
 8002710:	f001 f9e4 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002714:	2340      	movs	r3, #64	; 0x40
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002724:	230a      	movs	r3, #10
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_QSPI_MspInit+0xe8>)
 8002730:	f001 f9d4 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	a0001000 	.word	0xa0001000
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800

0800274c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_SPI_MspInit+0x84>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12b      	bne.n	80027c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 8002778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027a6:	23e0      	movs	r3, #224	; 0xe0
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027b6:	2305      	movs	r3, #5
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 80027c2:	f001 f98b 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40013000 	.word	0x40013000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000

080027dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_UART_MspInit+0x94>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d133      	bne.n	8002866 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_UART_MspInit+0x98>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002836:	230c      	movs	r3, #12
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002846:	2307      	movs	r3, #7
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <HAL_UART_MspInit+0x9c>)
 8002852:	f001 f943 	bl	8003adc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2026      	movs	r0, #38	; 0x26
 800285c:	f001 f867 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002860:	2026      	movs	r0, #38	; 0x26
 8002862:	f001 f880 	bl	8003966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40004400 	.word	0x40004400
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000

0800287c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002880:	e7fe      	b.n	8002880 <NMI_Handler+0x4>

08002882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <MemManage_Handler+0x4>

0800288e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <UsageFault_Handler+0x4>

0800289a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c8:	f000 f968 	bl	8002b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <CAN1_RX0_IRQHandler+0x10>)
 80028d6:	f000 fcfc 	bl	80032d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20003df8 	.word	0x20003df8

080028e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQ2n_Pin);
 80028e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028ec:	f001 fabe 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <USART2_IRQHandler+0x10>)
 80028fa:	f003 ffd1 	bl	80068a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20003ec4 	.word	0x20003ec4

08002908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 800290c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002910:	f001 faac 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <OTG_FS_IRQHandler+0x10>)
 800291e:	f001 fc08 	bl	8004132 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200055fc 	.word	0x200055fc

0800292c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_kill>:

int _kill(int pid, int sig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002946:	f018 fb5f 	bl	801b008 <__errno>
 800294a:	4603      	mov	r3, r0
 800294c:	2216      	movs	r2, #22
 800294e:	601a      	str	r2, [r3, #0]
  return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_exit>:

void _exit (int status)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffe7 	bl	800293c <_kill>
  while (1) {}    /* Make sure we hang here */
 800296e:	e7fe      	b.n	800296e <_exit+0x12>

08002970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00a      	b.n	8002998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002982:	f3af 8000 	nop.w
 8002986:	4601      	mov	r1, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60ba      	str	r2, [r7, #8]
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	dbf0      	blt.n	8002982 <_read+0x12>
  }

  return len;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d2:	605a      	str	r2, [r3, #4]
  return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <_isatty>:

int _isatty(int file)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <_sbrk+0x5c>)
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <_sbrk+0x60>)
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <_sbrk+0x64>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <_sbrk+0x68>)
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <_sbrk+0x64>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d207      	bcs.n	8002a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a44:	f018 fae0 	bl	801b008 <__errno>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e009      	b.n	8002a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <_sbrk+0x64>)
 8002a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20040000 	.word	0x20040000
 8002a74:	00000400 	.word	0x00000400
 8002a78:	20004044 	.word	0x20004044
 8002a7c:	20005eb0 	.word	0x20005eb0

08002a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <SystemInit+0x20>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <SystemInit+0x20>)
 8002a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack       /* set stack pointer */
 8002aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002aa8:	f7ff ffea 	bl	8002a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aac:	480c      	ldr	r0, [pc, #48]	; (8002ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aae:	490d      	ldr	r1, [pc, #52]	; (8002ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	; (8002af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ad2:	f018 fa9f 	bl	801b014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad6:	f7ff facb 	bl	8002070 <main>
  bx  lr    
 8002ada:	4770      	bx	lr
 ldr   sp, =_estack       /* set stack pointer */
 8002adc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae4:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8002ae8:	08020c20 	.word	0x08020c20
  ldr r2, =_sbss
 8002aec:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8002af0:	20005eac 	.word	0x20005eac

08002af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <ADC_IRQHandler>
	...

08002af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <HAL_Init+0x40>)
 8002b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_Init+0x40>)
 8002b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_Init+0x40>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b20:	2003      	movs	r0, #3
 8002b22:	f000 fef9 	bl	8003918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b26:	200f      	movs	r0, #15
 8002b28:	f000 f808 	bl	8002b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2c:	f7ff fd1e 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00

08002b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_InitTick+0x54>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_InitTick+0x58>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ff1f 	bl	800399e <HAL_SYSTICK_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00e      	b.n	8002b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d80a      	bhi.n	8002b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f000 fed9 	bl	800392e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <HAL_InitTick+0x5c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000009c 	.word	0x2000009c
 8002b94:	200000a4 	.word	0x200000a4
 8002b98:	200000a0 	.word	0x200000a0

08002b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x20>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_IncTick+0x24>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_IncTick+0x24>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	200000a4 	.word	0x200000a4
 8002bc0:	20004048 	.word	0x20004048

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20004048 	.word	0x20004048

08002bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff ffee 	bl	8002bc4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d005      	beq.n	8002c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_Delay+0x44>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c02:	bf00      	nop
 8002c04:	f7ff ffde 	bl	8002bc4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8f7      	bhi.n	8002c04 <HAL_Delay+0x28>
  {
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200000a4 	.word	0x200000a4

08002c24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0ed      	b.n	8002e12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fcba 	bl	80025bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c58:	f7ff ffb4 	bl	8002bc4 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c5e:	e012      	b.n	8002c86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c60:	f7ff ffb0 	bl	8002bc4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b0a      	cmp	r3, #10
 8002c6c:	d90b      	bls.n	8002c86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0c5      	b.n	8002e12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0e5      	beq.n	8002c60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0202 	bic.w	r2, r2, #2
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca4:	f7ff ff8e 	bl	8002bc4 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002caa:	e012      	b.n	8002cd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cac:	f7ff ff8a 	bl	8002bc4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b0a      	cmp	r3, #10
 8002cb8:	d90b      	bls.n	8002cd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2205      	movs	r2, #5
 8002cca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e09f      	b.n	8002e12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7e1b      	ldrb	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e007      	b.n	8002d0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7e5b      	ldrb	r3, [r3, #25]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e007      	b.n	8002d34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7e9b      	ldrb	r3, [r3, #26]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e007      	b.n	8002d5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0220 	bic.w	r2, r2, #32
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7edb      	ldrb	r3, [r3, #27]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d108      	bne.n	8002d78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0210 	bic.w	r2, r2, #16
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e007      	b.n	8002d88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0210 	orr.w	r2, r2, #16
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7f1b      	ldrb	r3, [r3, #28]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d108      	bne.n	8002da2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0208 	orr.w	r2, r2, #8
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e007      	b.n	8002db2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0208 	bic.w	r2, r2, #8
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7f5b      	ldrb	r3, [r3, #29]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0204 	orr.w	r2, r2, #4
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e007      	b.n	8002ddc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	ea42 0103 	orr.w	r1, r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d12e      	bne.n	8002e8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e46:	f7ff febd 	bl	8002bc4 <HAL_GetTick>
 8002e4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e4c:	e012      	b.n	8002e74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e4e:	f7ff feb9 	bl	8002bc4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b0a      	cmp	r3, #10
 8002e5a:	d90b      	bls.n	8002e74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e012      	b.n	8002e9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e5      	bne.n	8002e4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e006      	b.n	8002e9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b089      	sub	sp, #36	; 0x24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d003      	beq.n	8002ece <HAL_CAN_AddTxMessage+0x2c>
 8002ec6:	7ffb      	ldrb	r3, [r7, #31]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	f040 80ad 	bne.w	8003028 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8095 	beq.w	8003018 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	409a      	lsls	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10d      	bne.n	8002f26 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	440b      	add	r3, r1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e00f      	b.n	8002f46 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	440b      	add	r3, r1
 8002f44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3318      	adds	r3, #24
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	440b      	add	r3, r1
 8002f56:	3304      	adds	r3, #4
 8002f58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	7d1b      	ldrb	r3, [r3, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d111      	bne.n	8002f86 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3318      	adds	r3, #24
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	6811      	ldr	r1, [r2, #0]
 8002f76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	440b      	add	r3, r1
 8002f82:	3304      	adds	r3, #4
 8002f84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3307      	adds	r3, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	061a      	lsls	r2, r3, #24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3306      	adds	r3, #6
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	3204      	adds	r2, #4
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	4610      	mov	r0, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6811      	ldr	r1, [r2, #0]
 8002fae:	ea43 0200 	orr.w	r2, r3, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002fbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3303      	adds	r3, #3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	061a      	lsls	r2, r3, #24
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	4610      	mov	r0, r2
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	6811      	ldr	r1, [r2, #0]
 8002fe4:	ea43 0200 	orr.w	r2, r3, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ff2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6811      	ldr	r1, [r2, #0]
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	3318      	adds	r3, #24
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	440b      	add	r3, r1
 8003012:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e00e      	b.n	8003036 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e006      	b.n	8003036 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003056:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d003      	beq.n	8003066 <HAL_CAN_GetRxMessage+0x24>
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b02      	cmp	r3, #2
 8003062:	f040 8103 	bne.w	800326c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10e      	bne.n	800308a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d116      	bne.n	80030a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0f7      	b.n	800327a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0e8      	b.n	800327a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	331b      	adds	r3, #27
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4413      	add	r3, r2
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0204 	and.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	331b      	adds	r3, #27
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	4413      	add	r3, r2
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0d5b      	lsrs	r3, r3, #21
 80030d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	331b      	adds	r3, #27
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4413      	add	r3, r2
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	331b      	adds	r3, #27
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0202 	and.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	331b      	adds	r3, #27
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2208      	movs	r2, #8
 800312a:	611a      	str	r2, [r3, #16]
 800312c:	e00b      	b.n	8003146 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	331b      	adds	r3, #27
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	3304      	adds	r3, #4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	331b      	adds	r3, #27
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b2da      	uxtb	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	331b      	adds	r3, #27
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	4413      	add	r3, r2
 8003180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	4413      	add	r3, r2
 8003196:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0a1a      	lsrs	r2, r3, #8
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0c1a      	lsrs	r2, r3, #16
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	3302      	adds	r3, #2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e1a      	lsrs	r2, r3, #24
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3303      	adds	r3, #3
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	3304      	adds	r3, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0a1a      	lsrs	r2, r3, #8
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	3305      	adds	r3, #5
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	4413      	add	r3, r2
 8003216:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0c1a      	lsrs	r2, r3, #16
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3306      	adds	r3, #6
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0e1a      	lsrs	r2, r3, #24
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	3307      	adds	r3, #7
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0220 	orr.w	r2, r2, #32
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e007      	b.n	8003268 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0220 	orr.w	r2, r2, #32
 8003266:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e006      	b.n	800327a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003296:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <HAL_CAN_ActivateNotification+0x1e>
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d109      	bne.n	80032b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6959      	ldr	r1, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e006      	b.n	80032c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b08a      	sub	sp, #40	; 0x28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d07c      	beq.n	8003412 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d023      	beq.n	800336a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f983 	bl	8003640 <HAL_CAN_TxMailbox0CompleteCallback>
 800333a:	e016      	b.n	800336a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	e00c      	b.n	800336a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	e002      	b.n	800336a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f989 	bl	800367c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d024      	beq.n	80033be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800337c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f963 	bl	8003654 <HAL_CAN_TxMailbox1CompleteCallback>
 800338e:	e016      	b.n	80033be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	e00c      	b.n	80033be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e002      	b.n	80033be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f969 	bl	8003690 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d024      	beq.n	8003412 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f943 	bl	8003668 <HAL_CAN_TxMailbox2CompleteCallback>
 80033e2:	e016      	b.n	8003412 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e00c      	b.n	8003412 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e002      	b.n	8003412 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f949 	bl	80036a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2210      	movs	r2, #16
 8003434:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2208      	movs	r2, #8
 8003450:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f930 	bl	80036b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fe fde5 	bl	8002040 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003490:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2210      	movs	r2, #16
 8003498:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00b      	beq.n	80034bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2208      	movs	r2, #8
 80034b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f912 	bl	80036e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8f9 	bl	80036cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2210      	movs	r2, #16
 80034f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8fc 	bl	80036f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d006      	beq.n	800351e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2208      	movs	r2, #8
 8003516:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8f5 	bl	8003708 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d07b      	beq.n	8003620 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d072      	beq.n	8003618 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d043      	beq.n	8003618 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03e      	beq.n	8003618 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a0:	2b60      	cmp	r3, #96	; 0x60
 80035a2:	d02b      	beq.n	80035fc <HAL_CAN_IRQHandler+0x32a>
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d82e      	bhi.n	8003606 <HAL_CAN_IRQHandler+0x334>
 80035a8:	2b50      	cmp	r3, #80	; 0x50
 80035aa:	d022      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x320>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d82a      	bhi.n	8003606 <HAL_CAN_IRQHandler+0x334>
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d019      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x316>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d826      	bhi.n	8003606 <HAL_CAN_IRQHandler+0x334>
 80035b8:	2b30      	cmp	r3, #48	; 0x30
 80035ba:	d010      	beq.n	80035de <HAL_CAN_IRQHandler+0x30c>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d822      	bhi.n	8003606 <HAL_CAN_IRQHandler+0x334>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d002      	beq.n	80035ca <HAL_CAN_IRQHandler+0x2f8>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d005      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035c8:	e01d      	b.n	8003606 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	f043 0308 	orr.w	r3, r3, #8
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d2:	e019      	b.n	8003608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f043 0310 	orr.w	r3, r3, #16
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035dc:	e014      	b.n	8003608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f043 0320 	orr.w	r3, r3, #32
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035e6:	e00f      	b.n	8003608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035f0:	e00a      	b.n	8003608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035fa:	e005      	b.n	8003608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003604:	e000      	b.n	8003608 <HAL_CAN_IRQHandler+0x336>
            break;
 8003606:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003616:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2204      	movs	r2, #4
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f872 	bl	800371c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003638:	bf00      	nop
 800363a:	3728      	adds	r7, #40	; 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <__NVIC_SetPriorityGrouping>:
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800375c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_GetPriorityGrouping>:
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_EnableIRQ>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db0b      	blt.n	80037be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4907      	ldr	r1, [pc, #28]	; (80037cc <__NVIC_EnableIRQ+0x38>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_DisableIRQ>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db12      	blt.n	8003808 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	490a      	ldr	r1, [pc, #40]	; (8003814 <__NVIC_DisableIRQ+0x44>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	3320      	adds	r3, #32
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037fc:	f3bf 8f4f 	dsb	sy
}
 8003800:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003802:	f3bf 8f6f 	isb	sy
}
 8003806:	bf00      	nop
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000e100 	.word	0xe000e100

08003818 <__NVIC_SetPriority>:
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db0a      	blt.n	8003842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	490c      	ldr	r1, [pc, #48]	; (8003864 <__NVIC_SetPriority+0x4c>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	440b      	add	r3, r1
 800383c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003840:	e00a      	b.n	8003858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4908      	ldr	r1, [pc, #32]	; (8003868 <__NVIC_SetPriority+0x50>)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	3b04      	subs	r3, #4
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	440b      	add	r3, r1
 8003856:	761a      	strb	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <NVIC_EncodePriority>:
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf28      	it	cs
 800388a:	2304      	movcs	r3, #4
 800388c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3304      	adds	r3, #4
 8003892:	2b06      	cmp	r3, #6
 8003894:	d902      	bls.n	800389c <NVIC_EncodePriority+0x30>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3b03      	subs	r3, #3
 800389a:	e000      	b.n	800389e <NVIC_EncodePriority+0x32>
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43d9      	mvns	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	4313      	orrs	r3, r2
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <SysTick_Config>:
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e4:	d301      	bcc.n	80038ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00f      	b.n	800390a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <SysTick_Config+0x40>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f2:	210f      	movs	r1, #15
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f7ff ff8e 	bl	8003818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <SysTick_Config+0x40>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003902:	4b04      	ldr	r3, [pc, #16]	; (8003914 <SysTick_Config+0x40>)
 8003904:	2207      	movs	r2, #7
 8003906:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000e010 	.word	0xe000e010

08003918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff05 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003940:	f7ff ff1a 	bl	8003778 <__NVIC_GetPriorityGrouping>
 8003944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	6978      	ldr	r0, [r7, #20]
 800394c:	f7ff ff8e 	bl	800386c <NVIC_EncodePriority>
 8003950:	4602      	mov	r2, r0
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff5d 	bl	8003818 <__NVIC_SetPriority>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff0d 	bl	8003794 <__NVIC_EnableIRQ>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff1d 	bl	80037d0 <__NVIC_DisableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ff94 	bl	80038d4 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039c4:	f7ff f8fe 	bl	8002bc4 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d008      	beq.n	80039e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e052      	b.n	8003a8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0216 	bic.w	r2, r2, #22
 80039f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <HAL_DMA_Abort+0x62>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0208 	bic.w	r2, r2, #8
 8003a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a38:	e013      	b.n	8003a62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a3a:	f7ff f8c3 	bl	8002bc4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d90c      	bls.n	8003a62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e015      	b.n	8003a8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e4      	bne.n	8003a3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a74:	223f      	movs	r2, #63	; 0x3f
 8003a76:	409a      	lsls	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e00c      	b.n	8003ace <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2205      	movs	r2, #5
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e153      	b.n	8003da0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af8:	2201      	movs	r2, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	f040 8142 	bne.w	8003d9a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d005      	beq.n	8003b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d130      	bne.n	8003b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	2203      	movs	r2, #3
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0201 	and.w	r2, r3, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d017      	beq.n	8003bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d123      	bne.n	8003c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	220f      	movs	r2, #15
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809c 	beq.w	8003d9a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <HAL_GPIO_Init+0x2dc>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4a53      	ldr	r2, [pc, #332]	; (8003db8 <HAL_GPIO_Init+0x2dc>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c70:	6453      	str	r3, [r2, #68]	; 0x44
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_GPIO_Init+0x2dc>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c7e:	4a4f      	ldr	r2, [pc, #316]	; (8003dbc <HAL_GPIO_Init+0x2e0>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	3302      	adds	r3, #2
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a46      	ldr	r2, [pc, #280]	; (8003dc0 <HAL_GPIO_Init+0x2e4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0x1f6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a45      	ldr	r2, [pc, #276]	; (8003dc4 <HAL_GPIO_Init+0x2e8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00d      	beq.n	8003cce <HAL_GPIO_Init+0x1f2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a44      	ldr	r2, [pc, #272]	; (8003dc8 <HAL_GPIO_Init+0x2ec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <HAL_GPIO_Init+0x1ee>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a43      	ldr	r2, [pc, #268]	; (8003dcc <HAL_GPIO_Init+0x2f0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_GPIO_Init+0x1ea>
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x1f8>
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x1f8>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x1f8>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x1f8>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	; (8003dbc <HAL_GPIO_Init+0x2e0>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d16:	4a2e      	ldr	r2, [pc, #184]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d40:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6a:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d94:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <HAL_GPIO_Init+0x2f4>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f aea8 	bls.w	8003af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40013c00 	.word	0x40013c00

08003dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e001      	b.n	8003df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e20:	e003      	b.n	8003e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	041a      	lsls	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e48:	887a      	ldrh	r2, [r7, #2]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	041a      	lsls	r2, r3, #16
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	400b      	ands	r3, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d006      	beq.n	8003e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f008 f8ec 	bl	800c068 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40013c00 	.word	0x40013c00

08003e9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e108      	b.n	80040c0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f007 fadd 	bl	800b488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003edc:	d102      	bne.n	8003ee4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 fcbe 	bl	800786a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7c1a      	ldrb	r2, [r3, #16]
 8003ef6:	f88d 2000 	strb.w	r2, [sp]
 8003efa:	3304      	adds	r3, #4
 8003efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003efe:	f003 fb9d 	bl	800763c <USB_CoreInit>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0d5      	b.n	80040c0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 fcb6 	bl	800788c <USB_SetCurrentMode>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0c6      	b.n	80040c0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	e04a      	b.n	8003fce <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3315      	adds	r3, #21
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	b298      	uxth	r0, r3
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	332e      	adds	r3, #46	; 0x2e
 8003f74:	4602      	mov	r2, r0
 8003f76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3318      	adds	r3, #24
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	331c      	adds	r3, #28
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3320      	adds	r3, #32
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	791b      	ldrb	r3, [r3, #4]
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3af      	bcc.n	8003f38 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e044      	b.n	8004068 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3301      	adds	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3b5      	bcc.n	8003fde <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7c1a      	ldrb	r2, [r3, #16]
 800407a:	f88d 2000 	strb.w	r2, [sp]
 800407e:	3304      	adds	r3, #4
 8004080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004082:	f003 fc4f 	bl	8007924 <USB_DevInit>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e013      	b.n	80040c0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7b1b      	ldrb	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f001 f99a 	bl	80053e8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f004 fc86 	bl	80089ca <USB_DevDisconnect>

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_PCD_Start+0x1c>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e022      	b.n	800412a <HAL_PCD_Start+0x62>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f003 fb99 	bl	8007848 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f004 fc34 	bl	8008988 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b08d      	sub	sp, #52	; 0x34
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f004 fcf2 	bl	8008b32 <USB_GetMode>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 84b9 	bne.w	8004ac8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f004 fc56 	bl	8008a0c <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 84af 	beq.w	8004ac6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f004 fc43 	bl	8008a0c <USB_ReadInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d107      	bne.n	80041a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f002 0202 	and.w	r2, r2, #2
 800419e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f004 fc31 	bl	8008a0c <USB_ReadInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d161      	bne.n	8004278 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0210 	bic.w	r2, r2, #16
 80041c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 020f 	and.w	r2, r3, #15
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	3304      	adds	r3, #4
 80041e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	0c5b      	lsrs	r3, r3, #17
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d124      	bne.n	800423a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d035      	beq.n	8004268 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	6a38      	ldr	r0, [r7, #32]
 8004210:	f004 fa68 	bl	80086e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004220:	441a      	add	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004232:	441a      	add	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	615a      	str	r2, [r3, #20]
 8004238:	e016      	b.n	8004268 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	0c5b      	lsrs	r3, r3, #17
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	2b06      	cmp	r3, #6
 8004244:	d110      	bne.n	8004268 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800424c:	2208      	movs	r2, #8
 800424e:	4619      	mov	r1, r3
 8004250:	6a38      	ldr	r0, [r7, #32]
 8004252:	f004 fa47 	bl	80086e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004262:	441a      	add	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0210 	orr.w	r2, r2, #16
 8004276:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f004 fbc5 	bl	8008a0c <USB_ReadInterrupts>
 8004282:	4603      	mov	r3, r0
 8004284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004288:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800428c:	f040 80a7 	bne.w	80043de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f004 fbca 	bl	8008a32 <USB_ReadDevAllOutEpInterrupt>
 800429e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042a0:	e099      	b.n	80043d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 808e 	beq.w	80043ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fbee 	bl	8008a9a <USB_ReadDevOutEPInterrupt>
 80042be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	2301      	movs	r3, #1
 80042da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fefc 	bl	80050dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	461a      	mov	r2, r3
 80042fc:	2308      	movs	r3, #8
 80042fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 ffd2 	bl	80052ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	461a      	mov	r2, r3
 8004320:	2310      	movs	r3, #16
 8004322:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d030      	beq.n	8004390 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	d109      	bne.n	800434e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	3304      	adds	r3, #4
 8004362:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	78db      	ldrb	r3, [r3, #3]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d108      	bne.n	800437e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f007 f997 	bl	800b6ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	461a      	mov	r2, r3
 800438c:	2302      	movs	r3, #2
 800438e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	2320      	movs	r3, #32
 80043aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	3301      	adds	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f47f af62 	bne.w	80042a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f004 fb12 	bl	8008a0c <USB_ReadInterrupts>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043f2:	f040 80db 	bne.w	80045ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 fb33 	bl	8008a66 <USB_ReadDevAllInEpInterrupt>
 8004400:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004406:	e0cd      	b.n	80045a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80c2 	beq.w	8004598 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fb59 	bl	8008ad6 <USB_ReadDevInEPInterrupt>
 8004424:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d057      	beq.n	80044e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	2201      	movs	r2, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	43db      	mvns	r3, r3
 800444a:	69f9      	ldr	r1, [r7, #28]
 800444c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004450:	4013      	ands	r3, r2
 8004452:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	461a      	mov	r2, r3
 8004462:	2301      	movs	r3, #1
 8004464:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	799b      	ldrb	r3, [r3, #6]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d132      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3320      	adds	r3, #32
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4403      	add	r3, r0
 800448e:	331c      	adds	r3, #28
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4419      	add	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4403      	add	r3, r0
 80044a2:	3320      	adds	r3, #32
 80044a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x3a2>
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	3324      	adds	r3, #36	; 0x24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80044cc:	461a      	mov	r2, r3
 80044ce:	2101      	movs	r1, #1
 80044d0:	f004 fb60 	bl	8008b94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f007 f86b 	bl	800b5b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	461a      	mov	r2, r3
 80044f8:	2308      	movs	r3, #8
 80044fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	461a      	mov	r2, r3
 8004514:	2310      	movs	r3, #16
 8004516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	461a      	mov	r2, r3
 8004530:	2340      	movs	r3, #64	; 0x40
 8004532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d023      	beq.n	8004586 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800453e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004540:	6a38      	ldr	r0, [r7, #32]
 8004542:	f003 fb4d 	bl	8007be0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	3310      	adds	r3, #16
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	3304      	adds	r3, #4
 8004558:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	78db      	ldrb	r3, [r3, #3]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d108      	bne.n	8004574 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	b2db      	uxtb	r3, r3
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f007 f8ae 	bl	800b6d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	461a      	mov	r2, r3
 8004582:	2302      	movs	r3, #2
 8004584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fd15 	bl	8004fc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	3301      	adds	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f47f af2e 	bne.w	8004408 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fa2b 	bl	8008a0c <USB_ReadInterrupts>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c0:	d122      	bne.n	8004608 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d108      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045e8:	2100      	movs	r1, #0
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f007 fa4c 	bl	800ba88 <HAL_PCDEx_LPM_Callback>
 80045f0:	e002      	b.n	80045f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f007 f84c 	bl	800b690 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f004 f9fd 	bl	8008a0c <USB_ReadInterrupts>
 8004612:	4603      	mov	r3, r0
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461c:	d112      	bne.n	8004644 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f007 f808 	bl	800b644 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004642:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f004 f9df 	bl	8008a0c <USB_ReadInterrupts>
 800464e:	4603      	mov	r3, r0
 8004650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004658:	d121      	bne.n	800469e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004668:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800468e:	2101      	movs	r1, #1
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f007 f9f9 	bl	800ba88 <HAL_PCDEx_LPM_Callback>
 8004696:	e002      	b.n	800469e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f006 ffd3 	bl	800b644 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f004 f9b2 	bl	8008a0c <USB_ReadInterrupts>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	f040 80b7 	bne.w	8004824 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2110      	movs	r1, #16
 80046d0:	4618      	mov	r0, r3
 80046d2:	f003 fa85 	bl	8007be0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	e046      	b.n	800476a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	461a      	mov	r2, r3
 80046ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800470e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	461a      	mov	r2, r3
 800471e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004722:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004742:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004762:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	3301      	adds	r3, #1
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	791b      	ldrb	r3, [r3, #4]
 800476e:	461a      	mov	r2, r3
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	4293      	cmp	r3, r2
 8004774:	d3b2      	bcc.n	80046dc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004788:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	7bdb      	ldrb	r3, [r3, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a2:	f043 030b 	orr.w	r3, r3, #11
 80047a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b8:	f043 030b 	orr.w	r3, r3, #11
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	e015      	b.n	80047ec <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f043 030b 	orr.w	r3, r3, #11
 80047ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800480e:	461a      	mov	r2, r3
 8004810:	f004 f9c0 	bl	8008b94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004822:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f004 f8ef 	bl	8008a0c <USB_ReadInterrupts>
 800482e:	4603      	mov	r3, r0
 8004830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004838:	d123      	bne.n	8004882 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f004 f985 	bl	8008b4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fa42 	bl	8007cd2 <USB_GetDevSpeed>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681c      	ldr	r4, [r3, #0]
 800485a:	f001 f895 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 800485e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004864:	461a      	mov	r2, r3
 8004866:	4620      	mov	r0, r4
 8004868:	f002 ff4c 	bl	8007704 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f006 feca 	bl	800b606 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004880:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f004 f8c0 	bl	8008a0c <USB_ReadInterrupts>
 800488c:	4603      	mov	r3, r0
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b08      	cmp	r3, #8
 8004894:	d10a      	bne.n	80048ac <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f006 fea7 	bl	800b5ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f002 0208 	and.w	r2, r2, #8
 80048aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f004 f8ab 	bl	8008a0c <USB_ReadInterrupts>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d123      	bne.n	8004908 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048cc:	2301      	movs	r3, #1
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
 80048d0:	e014      	b.n	80048fc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fb08 	bl	8004f06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	3301      	adds	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	791b      	ldrb	r3, [r3, #4]
 8004900:	461a      	mov	r2, r3
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	4293      	cmp	r3, r2
 8004906:	d3e4      	bcc.n	80048d2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f004 f87d 	bl	8008a0c <USB_ReadInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491c:	d13c      	bne.n	8004998 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800491e:	2301      	movs	r3, #1
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	e02b      	b.n	800497c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	4613      	mov	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	3318      	adds	r3, #24
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d115      	bne.n	8004976 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800494a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800494c:	2b00      	cmp	r3, #0
 800494e:	da12      	bge.n	8004976 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3317      	adds	r3, #23
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800496c:	b2db      	uxtb	r3, r3
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fac8 	bl	8004f06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	3301      	adds	r3, #1
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	791b      	ldrb	r3, [r3, #4]
 8004980:	461a      	mov	r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	4293      	cmp	r3, r2
 8004986:	d3cd      	bcc.n	8004924 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f004 f835 	bl	8008a0c <USB_ReadInterrupts>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ac:	d156      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ae:	2301      	movs	r3, #1
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e045      	b.n	8004a40 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d12e      	bne.n	8004a3a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da2b      	bge.n	8004a3a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80049ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d121      	bne.n	8004a3a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a36:	6053      	str	r3, [r2, #4]
            break;
 8004a38:	e008      	b.n	8004a4c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d3b3      	bcc.n	80049b4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f003 ffd3 	bl	8008a0c <USB_ReadInterrupts>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d10a      	bne.n	8004a88 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f006 fe3e 	bl	800b6f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 ffbd 	bl	8008a0c <USB_ReadInterrupts>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d115      	bne.n	8004ac8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f006 fe2e 	bl	800b710 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	e000      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x996>
      return;
 8004ac6:	bf00      	nop
    }
  }
}
 8004ac8:	3734      	adds	r7, #52	; 0x34
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd90      	pop	{r4, r7, pc}

08004ace <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_PCD_SetAddress+0x1a>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e012      	b.n	8004b0e <HAL_PCD_SetAddress+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f003 ff1c 	bl	800893c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	461a      	mov	r2, r3
 8004b24:	4603      	mov	r3, r0
 8004b26:	70fb      	strb	r3, [r7, #3]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	803b      	strh	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da0f      	bge.n	8004b5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4413      	add	r3, r2
 8004b50:	3304      	adds	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	705a      	strb	r2, [r3, #1]
 8004b5a:	e00f      	b.n	8004b7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	3304      	adds	r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b88:	883a      	ldrh	r2, [r7, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	78ba      	ldrb	r2, [r7, #2]
 8004b92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ba6:	78bb      	ldrb	r3, [r7, #2]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d102      	bne.n	8004bb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_PCD_EP_Open+0xaa>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e00e      	b.n	8004bde <HAL_PCD_EP_Open+0xc8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f003 f8a4 	bl	8007d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da0f      	bge.n	8004c1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	3310      	adds	r3, #16
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3304      	adds	r3, #4
 8004c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	705a      	strb	r2, [r3, #1]
 8004c18:	e00f      	b.n	8004c3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3304      	adds	r3, #4
 8004c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_PCD_EP_Close+0x6e>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e00e      	b.n	8004c72 <HAL_PCD_EP_Close+0x8c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 f8e2 	bl	8007e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	460b      	mov	r3, r1
 8004c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c8a:	7afb      	ldrb	r3, [r7, #11]
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	799b      	ldrb	r3, [r3, #6]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	799b      	ldrb	r3, [r3, #6]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6979      	ldr	r1, [r7, #20]
 8004ce2:	f003 f97f 	bl	8007fe4 <USB_EPStartXfer>

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3310      	adds	r3, #16
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d60:	7afb      	ldrb	r3, [r7, #11]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	799b      	ldrb	r3, [r3, #6]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	799b      	ldrb	r3, [r3, #6]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6979      	ldr	r1, [r7, #20]
 8004d86:	f003 f92d 	bl	8007fe4 <USB_EPStartXfer>

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	7912      	ldrb	r2, [r2, #4]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e04f      	b.n	8004e52 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da0f      	bge.n	8004dda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 020f 	and.w	r2, r3, #15
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	3310      	adds	r3, #16
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	3304      	adds	r3, #4
 8004dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	705a      	strb	r2, [r3, #1]
 8004dd8:	e00d      	b.n	8004df6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	3304      	adds	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_PCD_EP_SetStall+0x82>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e01d      	b.n	8004e52 <HAL_PCD_EP_SetStall+0xbe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f003 fcb5 	bl	8008794 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7999      	ldrb	r1, [r3, #6]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004e42:	461a      	mov	r2, r3
 8004e44:	f003 fea6 	bl	8008b94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	7912      	ldrb	r2, [r2, #4]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e042      	b.n	8004efe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	da0f      	bge.n	8004ea0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 020f 	and.w	r2, r3, #15
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	3310      	adds	r3, #16
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	3304      	adds	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	705a      	strb	r2, [r3, #1]
 8004e9e:	e00f      	b.n	8004ec0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_PCD_EP_ClrStall+0x86>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e00e      	b.n	8004efe <HAL_PCD_EP_ClrStall+0xa4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68f9      	ldr	r1, [r7, #12]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 fcbe 	bl	8008870 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da0c      	bge.n	8004f34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3310      	adds	r3, #16
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e00c      	b.n	8004f4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	f003 020f 	and.w	r2, r3, #15
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f003 fadd 	bl	8008514 <USB_EPStopXfer>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_PCD_EP_Flush+0x1a>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e01b      	b.n	8004fba <HAL_PCD_EP_Flush+0x52>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8004f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da09      	bge.n	8004fa6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f002 fe1e 	bl	8007be0 <USB_FlushTxFifo>
 8004fa4:	e004      	b.n	8004fb0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f002 fe4a 	bl	8007c44 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	; 0x28
 8004fc6:	af02      	add	r7, sp, #8
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	3310      	adds	r3, #16
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d901      	bls.n	8004ffa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e06b      	b.n	80050d2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	429a      	cmp	r2, r3
 800500e:	d902      	bls.n	8005016 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3303      	adds	r3, #3
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800501e:	e02a      	b.n	8005076 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	429a      	cmp	r2, r3
 8005034:	d902      	bls.n	800503c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3303      	adds	r3, #3
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68d9      	ldr	r1, [r3, #12]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4603      	mov	r3, r0
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	f003 fb05 	bl	8008668 <USB_WritePacket>

    ep->xfer_buff  += len;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	441a      	add	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	429a      	cmp	r2, r3
 800508a:	d809      	bhi.n	80050a0 <PCD_WriteEmptyTxFifo+0xde>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005094:	429a      	cmp	r2, r3
 8005096:	d203      	bcs.n	80050a0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1bf      	bne.n	8005020 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d811      	bhi.n	80050d0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	2201      	movs	r2, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050cc:	4013      	ands	r3, r2
 80050ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	333c      	adds	r3, #60	; 0x3c
 80050f4:	3304      	adds	r3, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	799b      	ldrb	r3, [r3, #6]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d17b      	bne.n	800520a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4a61      	ldr	r2, [pc, #388]	; (80052a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	f240 80b9 	bls.w	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80b3 	beq.w	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005144:	6093      	str	r3, [r2, #8]
 8005146:	e0a7      	b.n	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	2320      	movs	r3, #32
 8005162:	6093      	str	r3, [r2, #8]
 8005164:	e098      	b.n	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8093 	bne.w	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4a4b      	ldr	r2, [pc, #300]	; (80052a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d90f      	bls.n	800519a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005196:	6093      	str	r3, [r2, #8]
 8005198:	e07e      	b.n	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	3304      	adds	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	0159      	lsls	r1, r3, #5
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	440b      	add	r3, r1
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d114      	bne.n	80051fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80051e4:	461a      	mov	r2, r3
 80051e6:	2101      	movs	r1, #1
 80051e8:	f003 fcd4 	bl	8008b94 <USB_EP0_OutStart>
 80051ec:	e006      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	441a      	add	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f006 f9bc 	bl	800b580 <HAL_PCD_DataOutStageCallback>
 8005208:	e046      	b.n	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d124      	bne.n	800525c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	6093      	str	r3, [r2, #8]
 8005230:	e032      	b.n	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	2320      	movs	r3, #32
 800524c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f006 f993 	bl	800b580 <HAL_PCD_DataOutStageCallback>
 800525a:	e01d      	b.n	8005298 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d114      	bne.n	800528c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005284:	461a      	mov	r2, r3
 8005286:	2100      	movs	r1, #0
 8005288:	f003 fc84 	bl	8008b94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f006 f974 	bl	800b580 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	4f54300a 	.word	0x4f54300a
 80052a8:	4f54310a 	.word	0x4f54310a

080052ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	333c      	adds	r3, #60	; 0x3c
 80052c4:	3304      	adds	r3, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a15      	ldr	r2, [pc, #84]	; (8005334 <PCD_EP_OutSetupPacket_int+0x88>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d90e      	bls.n	8005300 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	461a      	mov	r2, r3
 80052fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f006 f92b 	bl	800b55c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <PCD_EP_OutSetupPacket_int+0x88>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d90c      	bls.n	8005328 <PCD_EP_OutSetupPacket_int+0x7c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	799b      	ldrb	r3, [r3, #6]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d108      	bne.n	8005328 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005320:	461a      	mov	r2, r3
 8005322:	2101      	movs	r1, #1
 8005324:	f003 fc36 	bl	8008b94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	4f54300a 	.word	0x4f54300a

08005338 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
 8005344:	4613      	mov	r3, r2
 8005346:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005356:	883b      	ldrh	r3, [r7, #0]
 8005358:	0419      	lsls	r1, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	430a      	orrs	r2, r1
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
 8005364:	e028      	b.n	80053b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005374:	2300      	movs	r3, #0
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	e00d      	b.n	8005396 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	3340      	adds	r3, #64	; 0x40
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4413      	add	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	3301      	adds	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
 8005396:	7bfa      	ldrb	r2, [r7, #15]
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	3b01      	subs	r3, #1
 800539c:	429a      	cmp	r2, r3
 800539e:	d3ec      	bcc.n	800537a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053a0:	883b      	ldrh	r3, [r7, #0]
 80053a2:	0418      	lsls	r0, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6819      	ldr	r1, [r3, #0]
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	4302      	orrs	r2, r0
 80053b0:	3340      	adds	r3, #64	; 0x40
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	f043 0303 	orr.w	r3, r3, #3
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005438:	f7fd fbc4 	bl	8002bc4 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e069      	b.n	800551c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fd f8fd 	bl	800265c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005462:	f241 3188 	movw	r1, #5000	; 0x1388
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f85e 	bl	8005528 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	021a      	lsls	r2, r3, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	2120      	movs	r1, #32
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f856 	bl	8005544 <QSPI_WaitFlagStateUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800549c:	7afb      	ldrb	r3, [r7, #11]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d137      	bne.n	8005512 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054ac:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6852      	ldr	r2, [r2, #4]
 80054b4:	0611      	lsls	r1, r2, #24
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68d2      	ldr	r2, [r2, #12]
 80054ba:	4311      	orrs	r1, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	69d2      	ldr	r2, [r2, #28]
 80054c0:	4311      	orrs	r1, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6a12      	ldr	r2, [r2, #32]
 80054c6:	4311      	orrs	r1, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <HAL_QSPI_Init+0xf4>)
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6912      	ldr	r2, [r2, #16]
 80054de:	0411      	lsls	r1, r2, #16
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6952      	ldr	r2, [r2, #20]
 80054e4:	4311      	orrs	r1, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6992      	ldr	r2, [r2, #24]
 80054ea:	4311      	orrs	r1, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800551a:	7afb      	ldrb	r3, [r7, #11]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	ffe0f8fe 	.word	0xffe0f8fe

08005528 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005554:	e01a      	b.n	800558c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d016      	beq.n	800558c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fd fb31 	bl	8002bc4 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2204      	movs	r2, #4
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005580:	f043 0201 	orr.w	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e00e      	b.n	80055aa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d1d6      	bne.n	8005556 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0cc      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b68      	ldr	r3, [pc, #416]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90c      	bls.n	80055f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	4b63      	ldr	r3, [pc, #396]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0b8      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005608:	4b59      	ldr	r3, [pc, #356]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a58      	ldr	r2, [pc, #352]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a52      	ldr	r2, [pc, #328]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800562a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562c:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	494d      	ldr	r1, [pc, #308]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	4313      	orrs	r3, r2
 800563c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d044      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d119      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e07f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d003      	beq.n	8005672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566e:	2b03      	cmp	r3, #3
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005682:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e067      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005692:	4b37      	ldr	r3, [pc, #220]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f023 0203 	bic.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4934      	ldr	r1, [pc, #208]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a4:	f7fd fa8e 	bl	8002bc4 <HAL_GetTick>
 80056a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ac:	f7fd fa8a 	bl	8002bc4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e04f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 020c 	and.w	r2, r3, #12
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d1eb      	bne.n	80056ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d20c      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d001      	beq.n	80056fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e032      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4916      	ldr	r1, [pc, #88]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	490e      	ldr	r1, [pc, #56]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573a:	f000 f821 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 800573e:	4602      	mov	r2, r0
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	490a      	ldr	r1, [pc, #40]	; (8005774 <HAL_RCC_ClockConfig+0x1c0>)
 800574c:	5ccb      	ldrb	r3, [r1, r3]
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fd f9ee 	bl	8002b3c <HAL_InitTick>

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023c00 	.word	0x40023c00
 8005770:	40023800 	.word	0x40023800
 8005774:	080202f8 	.word	0x080202f8
 8005778:	2000009c 	.word	0x2000009c
 800577c:	200000a0 	.word	0x200000a0

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005784:	b094      	sub	sp, #80	; 0x50
 8005786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	647b      	str	r3, [r7, #68]	; 0x44
 800578c:	2300      	movs	r3, #0
 800578e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005790:	2300      	movs	r3, #0
 8005792:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005798:	4b79      	ldr	r3, [pc, #484]	; (8005980 <HAL_RCC_GetSysClockFreq+0x200>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d00d      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x40>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	f200 80e1 	bhi.w	800596c <HAL_RCC_GetSysClockFreq+0x1ec>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x34>
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d003      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x3a>
 80057b2:	e0db      	b.n	800596c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b73      	ldr	r3, [pc, #460]	; (8005984 <HAL_RCC_GetSysClockFreq+0x204>)
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057b8:	e0db      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ba:	4b72      	ldr	r3, [pc, #456]	; (8005984 <HAL_RCC_GetSysClockFreq+0x204>)
 80057bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057be:	e0d8      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c0:	4b6f      	ldr	r3, [pc, #444]	; (8005980 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ca:	4b6d      	ldr	r3, [pc, #436]	; (8005980 <HAL_RCC_GetSysClockFreq+0x200>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d063      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d6:	4b6a      	ldr	r3, [pc, #424]	; (8005980 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	2200      	movs	r2, #0
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
 80057ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057f2:	4622      	mov	r2, r4
 80057f4:	462b      	mov	r3, r5
 80057f6:	f04f 0000 	mov.w	r0, #0
 80057fa:	f04f 0100 	mov.w	r1, #0
 80057fe:	0159      	lsls	r1, r3, #5
 8005800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005804:	0150      	lsls	r0, r2, #5
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4621      	mov	r1, r4
 800580c:	1a51      	subs	r1, r2, r1
 800580e:	6139      	str	r1, [r7, #16]
 8005810:	4629      	mov	r1, r5
 8005812:	eb63 0301 	sbc.w	r3, r3, r1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005824:	4659      	mov	r1, fp
 8005826:	018b      	lsls	r3, r1, #6
 8005828:	4651      	mov	r1, sl
 800582a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800582e:	4651      	mov	r1, sl
 8005830:	018a      	lsls	r2, r1, #6
 8005832:	4651      	mov	r1, sl
 8005834:	ebb2 0801 	subs.w	r8, r2, r1
 8005838:	4659      	mov	r1, fp
 800583a:	eb63 0901 	sbc.w	r9, r3, r1
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800584a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800584e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005852:	4690      	mov	r8, r2
 8005854:	4699      	mov	r9, r3
 8005856:	4623      	mov	r3, r4
 8005858:	eb18 0303 	adds.w	r3, r8, r3
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	462b      	mov	r3, r5
 8005860:	eb49 0303 	adc.w	r3, r9, r3
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005872:	4629      	mov	r1, r5
 8005874:	028b      	lsls	r3, r1, #10
 8005876:	4621      	mov	r1, r4
 8005878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800587c:	4621      	mov	r1, r4
 800587e:	028a      	lsls	r2, r1, #10
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005886:	2200      	movs	r2, #0
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
 800588a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800588c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005890:	f7fb fa52 	bl	8000d38 <__aeabi_uldivmod>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4613      	mov	r3, r2
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	e058      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800589e:	4b38      	ldr	r3, [pc, #224]	; (8005980 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	099b      	lsrs	r3, r3, #6
 80058a4:	2200      	movs	r2, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	4611      	mov	r1, r2
 80058aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	2300      	movs	r3, #0
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
 80058b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	f04f 0000 	mov.w	r0, #0
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	0159      	lsls	r1, r3, #5
 80058c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ca:	0150      	lsls	r0, r2, #5
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4641      	mov	r1, r8
 80058d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80058d6:	4649      	mov	r1, r9
 80058d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058f0:	ebb2 040a 	subs.w	r4, r2, sl
 80058f4:	eb63 050b 	sbc.w	r5, r3, fp
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	00eb      	lsls	r3, r5, #3
 8005902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005906:	00e2      	lsls	r2, r4, #3
 8005908:	4614      	mov	r4, r2
 800590a:	461d      	mov	r5, r3
 800590c:	4643      	mov	r3, r8
 800590e:	18e3      	adds	r3, r4, r3
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	464b      	mov	r3, r9
 8005914:	eb45 0303 	adc.w	r3, r5, r3
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005926:	4629      	mov	r1, r5
 8005928:	028b      	lsls	r3, r1, #10
 800592a:	4621      	mov	r1, r4
 800592c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005930:	4621      	mov	r1, r4
 8005932:	028a      	lsls	r2, r1, #10
 8005934:	4610      	mov	r0, r2
 8005936:	4619      	mov	r1, r3
 8005938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593a:	2200      	movs	r2, #0
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	61fa      	str	r2, [r7, #28]
 8005940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005944:	f7fb f9f8 	bl	8000d38 <__aeabi_uldivmod>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4613      	mov	r3, r2
 800594e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_GetSysClockFreq+0x200>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	3301      	adds	r3, #1
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800596a:	e002      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCC_GetSysClockFreq+0x204>)
 800596e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005974:	4618      	mov	r0, r3
 8005976:	3750      	adds	r7, #80	; 0x50
 8005978:	46bd      	mov	sp, r7
 800597a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800
 8005984:	00f42400 	.word	0x00f42400

08005988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800598c:	4b03      	ldr	r3, [pc, #12]	; (800599c <HAL_RCC_GetHCLKFreq+0x14>)
 800598e:	681b      	ldr	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	2000009c 	.word	0x2000009c

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059a4:	f7ff fff0 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	0a9b      	lsrs	r3, r3, #10
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	; (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40023800 	.word	0x40023800
 80059c4:	08020308 	.word	0x08020308

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff ffdc 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0b5b      	lsrs	r3, r3, #13
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	08020308 	.word	0x08020308

080059f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005a10:	4b87      	ldr	r3, [pc, #540]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a16:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4984      	ldr	r1, [pc, #528]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005a3e:	4b7c      	ldr	r3, [pc, #496]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a44:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	4978      	ldr	r1, [pc, #480]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8083 	beq.w	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	4b6f      	ldr	r3, [pc, #444]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	4a6e      	ldr	r2, [pc, #440]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	60bb      	str	r3, [r7, #8]
 8005a88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a69      	ldr	r2, [pc, #420]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a96:	f7fd f895 	bl	8002bc4 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a9e:	f7fd f891 	bl	8002bc4 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e162      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ab0:	4b60      	ldr	r3, [pc, #384]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005abc:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ada:	4b55      	ldr	r3, [pc, #340]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ae4:	4b54      	ldr	r3, [pc, #336]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aea:	4b53      	ldr	r3, [pc, #332]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005af0:	4a4f      	ldr	r2, [pc, #316]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005af6:	4b4e      	ldr	r3, [pc, #312]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d114      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b02:	f7fd f85f 	bl	8002bc4 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b08:	e00a      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fd f85b 	bl	8002bc4 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e12a      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	4b43      	ldr	r3, [pc, #268]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ee      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b38:	d10d      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005b3a:	4b3d      	ldr	r3, [pc, #244]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4e:	4938      	ldr	r1, [pc, #224]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]
 8005b54:	e005      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005b56:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b60:	6093      	str	r3, [r2, #8]
 8005b62:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6e:	4930      	ldr	r1, [pc, #192]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005b86:	4b2d      	ldr	r3, [pc, #180]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b88:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	4922      	ldr	r1, [pc, #136]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bbe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	491a      	ldr	r1, [pc, #104]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	490e      	ldr	r1, [pc, #56]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d004      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	f040 8091 	bne.w	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c14:	f7fc ffd6 	bl	8002bc4 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c1a:	e013      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c1c:	f7fc ffd2 	bl	8002bc4 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d90c      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0a3      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40007000 	.word	0x40007000
 8005c38:	42470e40 	.word	0x42470e40
 8005c3c:	424711e0 	.word	0x424711e0
 8005c40:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c44:	4b4e      	ldr	r3, [pc, #312]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005c50:	4a4c      	ldr	r2, [pc, #304]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d023      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d019      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c94:	d00e      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d019      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d115      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb2:	d110      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	019b      	lsls	r3, r3, #6
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	061b      	lsls	r3, r3, #24
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	071b      	lsls	r3, r3, #28
 8005cce:	492c      	ldr	r1, [pc, #176]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d010      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	019b      	lsls	r3, r3, #6
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	061b      	lsls	r3, r3, #24
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	071b      	lsls	r3, r3, #28
 8005cfc:	4920      	ldr	r1, [pc, #128]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d04:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0a:	f7fc ff5b 	bl	8002bc4 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d12:	f7fc ff57 	bl	8002bc4 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e028      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d24:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d3c:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	490d      	ldr	r1, [pc, #52]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d64:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	4904      	ldr	r1, [pc, #16]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800
 8005d84:	424710d8 	.word	0x424710d8
 8005d88:	42470068 	.word	0x42470068

08005d8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e273      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d075      	beq.n	8005e96 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005daa:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d00c      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005db6:	4b85      	ldr	r3, [pc, #532]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d112      	bne.n	8005de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc2:	4b82      	ldr	r3, [pc, #520]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dce:	d10b      	bne.n	8005de8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	4b7e      	ldr	r3, [pc, #504]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d05b      	beq.n	8005e94 <HAL_RCC_OscConfig+0x108>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d157      	bne.n	8005e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e24e      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df0:	d106      	bne.n	8005e00 <HAL_RCC_OscConfig+0x74>
 8005df2:	4b76      	ldr	r3, [pc, #472]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a75      	ldr	r2, [pc, #468]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e01d      	b.n	8005e3c <HAL_RCC_OscConfig+0xb0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e08:	d10c      	bne.n	8005e24 <HAL_RCC_OscConfig+0x98>
 8005e0a:	4b70      	ldr	r3, [pc, #448]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6f      	ldr	r2, [pc, #444]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	4b6d      	ldr	r3, [pc, #436]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6c      	ldr	r2, [pc, #432]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e00b      	b.n	8005e3c <HAL_RCC_OscConfig+0xb0>
 8005e24:	4b69      	ldr	r3, [pc, #420]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a68      	ldr	r2, [pc, #416]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a65      	ldr	r2, [pc, #404]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d013      	beq.n	8005e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fc febe 	bl	8002bc4 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e4c:	f7fc feba 	bl	8002bc4 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b64      	cmp	r3, #100	; 0x64
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e213      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5e:	4b5b      	ldr	r3, [pc, #364]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0xc0>
 8005e6a:	e014      	b.n	8005e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fc feaa 	bl	8002bc4 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fc fea6 	bl	8002bc4 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e1ff      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e86:	4b51      	ldr	r3, [pc, #324]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0xe8>
 8005e92:	e000      	b.n	8005e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d063      	beq.n	8005f6a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ea2:	4b4a      	ldr	r3, [pc, #296]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d11c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eba:	4b44      	ldr	r3, [pc, #272]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d116      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec6:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_RCC_OscConfig+0x152>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d001      	beq.n	8005ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e1d3      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ede:	4b3b      	ldr	r3, [pc, #236]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4937      	ldr	r1, [pc, #220]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef2:	e03a      	b.n	8005f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d020      	beq.n	8005f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005efc:	4b34      	ldr	r3, [pc, #208]	; (8005fd0 <HAL_RCC_OscConfig+0x244>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f02:	f7fc fe5f 	bl	8002bc4 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0a:	f7fc fe5b 	bl	8002bc4 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e1b4      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0f0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f28:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4925      	ldr	r1, [pc, #148]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]
 8005f3c:	e015      	b.n	8005f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f3e:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <HAL_RCC_OscConfig+0x244>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fc fe3e 	bl	8002bc4 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4c:	f7fc fe3a 	bl	8002bc4 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e193      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d036      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f7e:	4b15      	ldr	r3, [pc, #84]	; (8005fd4 <HAL_RCC_OscConfig+0x248>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f84:	f7fc fe1e 	bl	8002bc4 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f8c:	f7fc fe1a 	bl	8002bc4 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e173      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_OscConfig+0x240>)
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x200>
 8005faa:	e01b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCC_OscConfig+0x248>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb2:	f7fc fe07 	bl	8002bc4 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb8:	e00e      	b.n	8005fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fba:	f7fc fe03 	bl	8002bc4 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d907      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e15c      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	42470000 	.word	0x42470000
 8005fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd8:	4b8a      	ldr	r3, [pc, #552]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8005fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ea      	bne.n	8005fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8097 	beq.w	8006120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff6:	4b83      	ldr	r3, [pc, #524]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10f      	bne.n	8006022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	4a7e      	ldr	r2, [pc, #504]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6413      	str	r3, [r2, #64]	; 0x40
 8006012:	4b7c      	ldr	r3, [pc, #496]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800601e:	2301      	movs	r3, #1
 8006020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006022:	4b79      	ldr	r3, [pc, #484]	; (8006208 <HAL_RCC_OscConfig+0x47c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d118      	bne.n	8006060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800602e:	4b76      	ldr	r3, [pc, #472]	; (8006208 <HAL_RCC_OscConfig+0x47c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a75      	ldr	r2, [pc, #468]	; (8006208 <HAL_RCC_OscConfig+0x47c>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603a:	f7fc fdc3 	bl	8002bc4 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006042:	f7fc fdbf 	bl	8002bc4 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e118      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006054:	4b6c      	ldr	r3, [pc, #432]	; (8006208 <HAL_RCC_OscConfig+0x47c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d106      	bne.n	8006076 <HAL_RCC_OscConfig+0x2ea>
 8006068:	4b66      	ldr	r3, [pc, #408]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	4a65      	ldr	r2, [pc, #404]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	6713      	str	r3, [r2, #112]	; 0x70
 8006074:	e01c      	b.n	80060b0 <HAL_RCC_OscConfig+0x324>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b05      	cmp	r3, #5
 800607c:	d10c      	bne.n	8006098 <HAL_RCC_OscConfig+0x30c>
 800607e:	4b61      	ldr	r3, [pc, #388]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	4a60      	ldr	r2, [pc, #384]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006084:	f043 0304 	orr.w	r3, r3, #4
 8006088:	6713      	str	r3, [r2, #112]	; 0x70
 800608a:	4b5e      	ldr	r3, [pc, #376]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	4a5d      	ldr	r2, [pc, #372]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	6713      	str	r3, [r2, #112]	; 0x70
 8006096:	e00b      	b.n	80060b0 <HAL_RCC_OscConfig+0x324>
 8006098:	4b5a      	ldr	r3, [pc, #360]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	4a59      	ldr	r2, [pc, #356]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	6713      	str	r3, [r2, #112]	; 0x70
 80060a4:	4b57      	ldr	r3, [pc, #348]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a8:	4a56      	ldr	r2, [pc, #344]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 80060aa:	f023 0304 	bic.w	r3, r3, #4
 80060ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b8:	f7fc fd84 	bl	8002bc4 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c0:	f7fc fd80 	bl	8002bc4 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e0d7      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d6:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0ee      	beq.n	80060c0 <HAL_RCC_OscConfig+0x334>
 80060e2:	e014      	b.n	800610e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fc fd6e 	bl	8002bc4 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ea:	e00a      	b.n	8006102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ec:	f7fc fd6a 	bl	8002bc4 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e0c1      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006102:	4b40      	ldr	r3, [pc, #256]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ee      	bne.n	80060ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d105      	bne.n	8006120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006114:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	4a3a      	ldr	r2, [pc, #232]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800611a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80ad 	beq.w	8006284 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800612a:	4b36      	ldr	r3, [pc, #216]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b08      	cmp	r3, #8
 8006134:	d060      	beq.n	80061f8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d145      	bne.n	80061ca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613e:	4b33      	ldr	r3, [pc, #204]	; (800620c <HAL_RCC_OscConfig+0x480>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fc fd3e 	bl	8002bc4 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614c:	f7fc fd3a 	bl	8002bc4 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e093      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b29      	ldr	r3, [pc, #164]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	019b      	lsls	r3, r3, #6
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	3b01      	subs	r3, #1
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	061b      	lsls	r3, r3, #24
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	071b      	lsls	r3, r3, #28
 8006196:	491b      	ldr	r1, [pc, #108]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 8006198:	4313      	orrs	r3, r2
 800619a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_RCC_OscConfig+0x480>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a2:	f7fc fd0f 	bl	8002bc4 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061aa:	f7fc fd0b 	bl	8002bc4 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e064      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x41e>
 80061c8:	e05c      	b.n	8006284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ca:	4b10      	ldr	r3, [pc, #64]	; (800620c <HAL_RCC_OscConfig+0x480>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fc fcf8 	bl	8002bc4 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d8:	f7fc fcf4 	bl	8002bc4 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e04d      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <HAL_RCC_OscConfig+0x478>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x44c>
 80061f6:	e045      	b.n	8006284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d107      	bne.n	8006210 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e040      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
 8006204:	40023800 	.word	0x40023800
 8006208:	40007000 	.word	0x40007000
 800620c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006210:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <HAL_RCC_OscConfig+0x504>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d030      	beq.n	8006280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d129      	bne.n	8006280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d122      	bne.n	8006280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006248:	4293      	cmp	r3, r2
 800624a:	d119      	bne.n	8006280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	3b01      	subs	r3, #1
 800625a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800625c:	429a      	cmp	r2, r3
 800625e:	d10f      	bne.n	8006280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d107      	bne.n	8006280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40023800 	.word	0x40023800

08006294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07b      	b.n	800639e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b6:	d009      	beq.n	80062cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
 80062be:	e005      	b.n	80062cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fc fa30 	bl	800274c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	ea42 0103 	orr.w	r1, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	f003 0104 	and.w	r1, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	f003 0210 	and.w	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b088      	sub	sp, #32
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_SPI_Transmit+0x22>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e12d      	b.n	8006624 <HAL_SPI_Transmit+0x27e>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d0:	f7fc fbf8 	bl	8002bc4 <HAL_GetTick>
 80063d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ea:	e116      	b.n	800661a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Transmit+0x52>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063fc:	e10d      	b.n	800661a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2203      	movs	r2, #3
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006444:	d10f      	bne.n	8006466 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d007      	beq.n	8006484 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648c:	d14f      	bne.n	800652e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_SPI_Transmit+0xf6>
 8006496:	8afb      	ldrh	r3, [r7, #22]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d142      	bne.n	8006522 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064c0:	e02f      	b.n	8006522 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d112      	bne.n	80064f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	1c9a      	adds	r2, r3, #2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064f4:	e015      	b.n	8006522 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f6:	f7fc fb65 	bl	8002bc4 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d803      	bhi.n	800650e <HAL_SPI_Transmit+0x168>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d102      	bne.n	8006514 <HAL_SPI_Transmit+0x16e>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006520:	e07b      	b.n	800661a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ca      	bne.n	80064c2 <HAL_SPI_Transmit+0x11c>
 800652c:	e050      	b.n	80065d0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0x196>
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d144      	bne.n	80065c6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006562:	e030      	b.n	80065c6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d113      	bne.n	800659a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	330c      	adds	r3, #12
 800657c:	7812      	ldrb	r2, [r2, #0]
 800657e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	86da      	strh	r2, [r3, #54]	; 0x36
 8006598:	e015      	b.n	80065c6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659a:	f7fc fb13 	bl	8002bc4 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d803      	bhi.n	80065b2 <HAL_SPI_Transmit+0x20c>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d102      	bne.n	80065b8 <HAL_SPI_Transmit+0x212>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80065c4:	e029      	b.n	800661a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1c9      	bne.n	8006564 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f8bf 	bl	8006758 <SPI_EndRxTxTransaction>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e003      	b.n	800661a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006622:	7ffb      	ldrb	r3, [r7, #31]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800663a:	b2db      	uxtb	r3, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006658:	f7fc fab4 	bl	8002bc4 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4413      	add	r3, r2
 8006666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006668:	f7fc faac 	bl	8002bc4 <HAL_GetTick>
 800666c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	015b      	lsls	r3, r3, #5
 8006674:	0d1b      	lsrs	r3, r3, #20
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	e054      	b.n	800672a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d050      	beq.n	800672a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006688:	f7fc fa9c 	bl	8002bc4 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	429a      	cmp	r2, r3
 8006696:	d902      	bls.n	800669e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d13d      	bne.n	800671a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b6:	d111      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c0:	d004      	beq.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ca:	d107      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e4:	d10f      	bne.n	8006706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e017      	b.n	800674a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3b01      	subs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4013      	ands	r3, r2
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	429a      	cmp	r2, r3
 8006746:	d19b      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2000009c 	.word	0x2000009c

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2201      	movs	r2, #1
 800676c:	2102      	movs	r1, #2
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff ff6a 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e032      	b.n	80067f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800678a:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <SPI_EndRxTxTransaction+0xa0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <SPI_EndRxTxTransaction+0xa4>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	0d5b      	lsrs	r3, r3, #21
 8006796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a8:	d112      	bne.n	80067d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ff47 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c4:	f043 0220 	orr.w	r2, r3, #32
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e00f      	b.n	80067f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	3b01      	subs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b80      	cmp	r3, #128	; 0x80
 80067e8:	d0f2      	beq.n	80067d0 <SPI_EndRxTxTransaction+0x78>
 80067ea:	e000      	b.n	80067ee <SPI_EndRxTxTransaction+0x96>
        break;
 80067ec:	bf00      	nop
  }

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	2000009c 	.word	0x2000009c
 80067fc:	165e9f81 	.word	0x165e9f81

08006800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e042      	b.n	8006898 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb ffd8 	bl	80027dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	; 0x24
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fc85 	bl	8007154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b0ba      	sub	sp, #232	; 0xe8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10f      	bne.n	8006906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_UART_IRQHandler+0x66>
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb69 	bl	8006fd6 <UART_Receive_IT>
      return;
 8006904:	e25b      	b.n	8006dbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80de 	beq.w	8006acc <HAL_UART_IRQHandler+0x22c>
 8006910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80d1 	beq.w	8006acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_UART_IRQHandler+0xae>
 8006936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <HAL_UART_IRQHandler+0xd2>
 800695a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	f043 0202 	orr.w	r2, r3, #2
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <HAL_UART_IRQHandler+0xf6>
 800697e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	f043 0204 	orr.w	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d011      	beq.n	80069c6 <HAL_UART_IRQHandler+0x126>
 80069a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	f043 0208 	orr.w	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81f2 	beq.w	8006db4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_UART_IRQHandler+0x14e>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 faf4 	bl	8006fd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <HAL_UART_IRQHandler+0x17a>
 8006a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d04f      	beq.n	8006aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9fc 	bl	8006e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d141      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3314      	adds	r3, #20
 8006a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1d9      	bne.n	8006a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	4a7e      	ldr	r2, [pc, #504]	; (8006c80 <HAL_UART_IRQHandler+0x3e0>)
 8006a88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fd f801 	bl	8003a96 <HAL_DMA_Abort_IT>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	e00e      	b.n	8006ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f99e 	bl	8006dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	e00a      	b.n	8006ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f99a 	bl	8006dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	e006      	b.n	8006ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f996 	bl	8006dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006ac6:	e175      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	bf00      	nop
    return;
 8006aca:	e173      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	f040 814f 	bne.w	8006d74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8148 	beq.w	8006d74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8141 	beq.w	8006d74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	f040 80b6 	bne.w	8006c84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8145 	beq.w	8006db8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b36:	429a      	cmp	r2, r3
 8006b38:	f080 813e 	bcs.w	8006db8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4e:	f000 8088 	beq.w	8006c62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1d9      	bne.n	8006b52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e1      	bne.n	8006b9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e3      	bne.n	8006bda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	330c      	adds	r3, #12
 8006c40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c44:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e3      	bne.n	8006c20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fc feaa 	bl	80039b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2202      	movs	r2, #2
 8006c66:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f8c1 	bl	8006e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c7e:	e09b      	b.n	8006db8 <HAL_UART_IRQHandler+0x518>
 8006c80:	08006edf 	.word	0x08006edf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 808e 	beq.w	8006dbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8089 	beq.w	8006dbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cce:	647a      	str	r2, [r7, #68]	; 0x44
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e3      	bne.n	8006caa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
 8006cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d06:	633a      	str	r2, [r7, #48]	; 0x30
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e3      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0310 	bic.w	r3, r3, #16
 8006d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d4c:	61fa      	str	r2, [r7, #28]
 8006d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	69b9      	ldr	r1, [r7, #24]
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	617b      	str	r3, [r7, #20]
   return(result);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e3      	bne.n	8006d28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f847 	bl	8006e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d72:	e023      	b.n	8006dbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <HAL_UART_IRQHandler+0x4f4>
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8ba 	bl	8006f06 <UART_Transmit_IT>
    return;
 8006d92:	e014      	b.n	8006dbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00e      	beq.n	8006dbe <HAL_UART_IRQHandler+0x51e>
 8006da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f8fa 	bl	8006fa6 <UART_EndTransmit_IT>
    return;
 8006db2:	e004      	b.n	8006dbe <HAL_UART_IRQHandler+0x51e>
    return;
 8006db4:	bf00      	nop
 8006db6:	e002      	b.n	8006dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8006dbc:	bf00      	nop
  }
}
 8006dbe:	37e8      	adds	r7, #232	; 0xe8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b095      	sub	sp, #84	; 0x54
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e40:	643a      	str	r2, [r7, #64]	; 0x40
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e5      	bne.n	8006e54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d119      	bne.n	8006ec4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0310 	bic.w	r3, r3, #16
 8006ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb0:	61ba      	str	r2, [r7, #24]
 8006eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6979      	ldr	r1, [r7, #20]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ed2:	bf00      	nop
 8006ed4:	3754      	adds	r7, #84	; 0x54
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ff77 	bl	8006dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b21      	cmp	r3, #33	; 0x21
 8006f18:	d13e      	bne.n	8006f98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d114      	bne.n	8006f4e <UART_Transmit_IT+0x48>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d110      	bne.n	8006f4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	1c9a      	adds	r2, r3, #2
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	621a      	str	r2, [r3, #32]
 8006f4c:	e008      	b.n	8006f60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6211      	str	r1, [r2, #32]
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10f      	bne.n	8006f94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	e000      	b.n	8006f9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f98:	2302      	movs	r3, #2
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fefc 	bl	8006dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b08c      	sub	sp, #48	; 0x30
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b22      	cmp	r3, #34	; 0x22
 8006fe8:	f040 80ae 	bne.w	8007148 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff4:	d117      	bne.n	8007026 <UART_Receive_IT+0x50>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d113      	bne.n	8007026 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	b29a      	uxth	r2, r3
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	1c9a      	adds	r2, r3, #2
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	; 0x28
 8007024:	e026      	b.n	8007074 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007038:	d007      	beq.n	800704a <UART_Receive_IT+0x74>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10a      	bne.n	8007058 <UART_Receive_IT+0x82>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e008      	b.n	800706a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007064:	b2da      	uxtb	r2, r3
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29b      	uxth	r3, r3
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	4619      	mov	r1, r3
 8007082:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007084:	2b00      	cmp	r3, #0
 8007086:	d15d      	bne.n	8007144 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0220 	bic.w	r2, r2, #32
 8007096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d135      	bne.n	800713a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	613b      	str	r3, [r7, #16]
   return(result);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f023 0310 	bic.w	r3, r3, #16
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f4:	623a      	str	r2, [r7, #32]
 80070f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	6a3a      	ldr	r2, [r7, #32]
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	61bb      	str	r3, [r7, #24]
   return(result);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b10      	cmp	r3, #16
 8007114:	d10a      	bne.n	800712c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fe64 	bl	8006e00 <HAL_UARTEx_RxEventCallback>
 8007138:	e002      	b.n	8007140 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fe4c 	bl	8006dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e002      	b.n	800714a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	e000      	b.n	800714a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3730      	adds	r7, #48	; 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007158:	b0c0      	sub	sp, #256	; 0x100
 800715a:	af00      	add	r7, sp, #0
 800715c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	68d9      	ldr	r1, [r3, #12]
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	ea40 0301 	orr.w	r3, r0, r1
 800717c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	431a      	orrs	r2, r3
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	431a      	orrs	r2, r3
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071ac:	f021 010c 	bic.w	r1, r1, #12
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071ba:	430b      	orrs	r3, r1
 80071bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ce:	6999      	ldr	r1, [r3, #24]
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	ea40 0301 	orr.w	r3, r0, r1
 80071da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b8f      	ldr	r3, [pc, #572]	; (8007420 <UART_SetConfig+0x2cc>)
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d005      	beq.n	80071f4 <UART_SetConfig+0xa0>
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b8d      	ldr	r3, [pc, #564]	; (8007424 <UART_SetConfig+0x2d0>)
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d104      	bne.n	80071fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071f4:	f7fe fbe8 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 80071f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071fc:	e003      	b.n	8007206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071fe:	f7fe fbcf 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8007202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007210:	f040 810c 	bne.w	800742c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800721e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007226:	4622      	mov	r2, r4
 8007228:	462b      	mov	r3, r5
 800722a:	1891      	adds	r1, r2, r2
 800722c:	65b9      	str	r1, [r7, #88]	; 0x58
 800722e:	415b      	adcs	r3, r3
 8007230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007236:	4621      	mov	r1, r4
 8007238:	eb12 0801 	adds.w	r8, r2, r1
 800723c:	4629      	mov	r1, r5
 800723e:	eb43 0901 	adc.w	r9, r3, r1
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800724e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007256:	4690      	mov	r8, r2
 8007258:	4699      	mov	r9, r3
 800725a:	4623      	mov	r3, r4
 800725c:	eb18 0303 	adds.w	r3, r8, r3
 8007260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007264:	462b      	mov	r3, r5
 8007266:	eb49 0303 	adc.w	r3, r9, r3
 800726a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800727a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800727e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007282:	460b      	mov	r3, r1
 8007284:	18db      	adds	r3, r3, r3
 8007286:	653b      	str	r3, [r7, #80]	; 0x50
 8007288:	4613      	mov	r3, r2
 800728a:	eb42 0303 	adc.w	r3, r2, r3
 800728e:	657b      	str	r3, [r7, #84]	; 0x54
 8007290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007298:	f7f9 fd4e 	bl	8000d38 <__aeabi_uldivmod>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4b61      	ldr	r3, [pc, #388]	; (8007428 <UART_SetConfig+0x2d4>)
 80072a2:	fba3 2302 	umull	r2, r3, r3, r2
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	011c      	lsls	r4, r3, #4
 80072aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072bc:	4642      	mov	r2, r8
 80072be:	464b      	mov	r3, r9
 80072c0:	1891      	adds	r1, r2, r2
 80072c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80072c4:	415b      	adcs	r3, r3
 80072c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072cc:	4641      	mov	r1, r8
 80072ce:	eb12 0a01 	adds.w	sl, r2, r1
 80072d2:	4649      	mov	r1, r9
 80072d4:	eb43 0b01 	adc.w	fp, r3, r1
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ec:	4692      	mov	sl, r2
 80072ee:	469b      	mov	fp, r3
 80072f0:	4643      	mov	r3, r8
 80072f2:	eb1a 0303 	adds.w	r3, sl, r3
 80072f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072fa:	464b      	mov	r3, r9
 80072fc:	eb4b 0303 	adc.w	r3, fp, r3
 8007300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007318:	460b      	mov	r3, r1
 800731a:	18db      	adds	r3, r3, r3
 800731c:	643b      	str	r3, [r7, #64]	; 0x40
 800731e:	4613      	mov	r3, r2
 8007320:	eb42 0303 	adc.w	r3, r2, r3
 8007324:	647b      	str	r3, [r7, #68]	; 0x44
 8007326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800732a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800732e:	f7f9 fd03 	bl	8000d38 <__aeabi_uldivmod>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4611      	mov	r1, r2
 8007338:	4b3b      	ldr	r3, [pc, #236]	; (8007428 <UART_SetConfig+0x2d4>)
 800733a:	fba3 2301 	umull	r2, r3, r3, r1
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	2264      	movs	r2, #100	; 0x64
 8007342:	fb02 f303 	mul.w	r3, r2, r3
 8007346:	1acb      	subs	r3, r1, r3
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800734e:	4b36      	ldr	r3, [pc, #216]	; (8007428 <UART_SetConfig+0x2d4>)
 8007350:	fba3 2302 	umull	r2, r3, r3, r2
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800735c:	441c      	add	r4, r3
 800735e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007362:	2200      	movs	r2, #0
 8007364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800736c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007370:	4642      	mov	r2, r8
 8007372:	464b      	mov	r3, r9
 8007374:	1891      	adds	r1, r2, r2
 8007376:	63b9      	str	r1, [r7, #56]	; 0x38
 8007378:	415b      	adcs	r3, r3
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800737c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007380:	4641      	mov	r1, r8
 8007382:	1851      	adds	r1, r2, r1
 8007384:	6339      	str	r1, [r7, #48]	; 0x30
 8007386:	4649      	mov	r1, r9
 8007388:	414b      	adcs	r3, r1
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007398:	4659      	mov	r1, fp
 800739a:	00cb      	lsls	r3, r1, #3
 800739c:	4651      	mov	r1, sl
 800739e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a2:	4651      	mov	r1, sl
 80073a4:	00ca      	lsls	r2, r1, #3
 80073a6:	4610      	mov	r0, r2
 80073a8:	4619      	mov	r1, r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	4642      	mov	r2, r8
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073b4:	464b      	mov	r3, r9
 80073b6:	460a      	mov	r2, r1
 80073b8:	eb42 0303 	adc.w	r3, r2, r3
 80073bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073d4:	460b      	mov	r3, r1
 80073d6:	18db      	adds	r3, r3, r3
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073da:	4613      	mov	r3, r2
 80073dc:	eb42 0303 	adc.w	r3, r2, r3
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ea:	f7f9 fca5 	bl	8000d38 <__aeabi_uldivmod>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <UART_SetConfig+0x2d4>)
 80073f4:	fba3 1302 	umull	r1, r3, r3, r2
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	2164      	movs	r1, #100	; 0x64
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	3332      	adds	r3, #50	; 0x32
 8007406:	4a08      	ldr	r2, [pc, #32]	; (8007428 <UART_SetConfig+0x2d4>)
 8007408:	fba2 2303 	umull	r2, r3, r2, r3
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	f003 0207 	and.w	r2, r3, #7
 8007412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4422      	add	r2, r4
 800741a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800741c:	e106      	b.n	800762c <UART_SetConfig+0x4d8>
 800741e:	bf00      	nop
 8007420:	40011000 	.word	0x40011000
 8007424:	40011400 	.word	0x40011400
 8007428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800742c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007430:	2200      	movs	r2, #0
 8007432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800743a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800743e:	4642      	mov	r2, r8
 8007440:	464b      	mov	r3, r9
 8007442:	1891      	adds	r1, r2, r2
 8007444:	6239      	str	r1, [r7, #32]
 8007446:	415b      	adcs	r3, r3
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
 800744a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800744e:	4641      	mov	r1, r8
 8007450:	1854      	adds	r4, r2, r1
 8007452:	4649      	mov	r1, r9
 8007454:	eb43 0501 	adc.w	r5, r3, r1
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	00eb      	lsls	r3, r5, #3
 8007462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007466:	00e2      	lsls	r2, r4, #3
 8007468:	4614      	mov	r4, r2
 800746a:	461d      	mov	r5, r3
 800746c:	4643      	mov	r3, r8
 800746e:	18e3      	adds	r3, r4, r3
 8007470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007474:	464b      	mov	r3, r9
 8007476:	eb45 0303 	adc.w	r3, r5, r3
 800747a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800748a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	f04f 0300 	mov.w	r3, #0
 8007496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800749a:	4629      	mov	r1, r5
 800749c:	008b      	lsls	r3, r1, #2
 800749e:	4621      	mov	r1, r4
 80074a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a4:	4621      	mov	r1, r4
 80074a6:	008a      	lsls	r2, r1, #2
 80074a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074ac:	f7f9 fc44 	bl	8000d38 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4b60      	ldr	r3, [pc, #384]	; (8007638 <UART_SetConfig+0x4e4>)
 80074b6:	fba3 2302 	umull	r2, r3, r3, r2
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	011c      	lsls	r4, r3, #4
 80074be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	1891      	adds	r1, r2, r2
 80074d6:	61b9      	str	r1, [r7, #24]
 80074d8:	415b      	adcs	r3, r3
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e0:	4641      	mov	r1, r8
 80074e2:	1851      	adds	r1, r2, r1
 80074e4:	6139      	str	r1, [r7, #16]
 80074e6:	4649      	mov	r1, r9
 80074e8:	414b      	adcs	r3, r1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074f8:	4659      	mov	r1, fp
 80074fa:	00cb      	lsls	r3, r1, #3
 80074fc:	4651      	mov	r1, sl
 80074fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007502:	4651      	mov	r1, sl
 8007504:	00ca      	lsls	r2, r1, #3
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	4603      	mov	r3, r0
 800750c:	4642      	mov	r2, r8
 800750e:	189b      	adds	r3, r3, r2
 8007510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007514:	464b      	mov	r3, r9
 8007516:	460a      	mov	r2, r1
 8007518:	eb42 0303 	adc.w	r3, r2, r3
 800751c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	67bb      	str	r3, [r7, #120]	; 0x78
 800752a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007538:	4649      	mov	r1, r9
 800753a:	008b      	lsls	r3, r1, #2
 800753c:	4641      	mov	r1, r8
 800753e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007542:	4641      	mov	r1, r8
 8007544:	008a      	lsls	r2, r1, #2
 8007546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800754a:	f7f9 fbf5 	bl	8000d38 <__aeabi_uldivmod>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4611      	mov	r1, r2
 8007554:	4b38      	ldr	r3, [pc, #224]	; (8007638 <UART_SetConfig+0x4e4>)
 8007556:	fba3 2301 	umull	r2, r3, r3, r1
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	2264      	movs	r2, #100	; 0x64
 800755e:	fb02 f303 	mul.w	r3, r2, r3
 8007562:	1acb      	subs	r3, r1, r3
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	3332      	adds	r3, #50	; 0x32
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <UART_SetConfig+0x4e4>)
 800756a:	fba2 2303 	umull	r2, r3, r2, r3
 800756e:	095b      	lsrs	r3, r3, #5
 8007570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007574:	441c      	add	r4, r3
 8007576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757a:	2200      	movs	r2, #0
 800757c:	673b      	str	r3, [r7, #112]	; 0x70
 800757e:	677a      	str	r2, [r7, #116]	; 0x74
 8007580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007584:	4642      	mov	r2, r8
 8007586:	464b      	mov	r3, r9
 8007588:	1891      	adds	r1, r2, r2
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	415b      	adcs	r3, r3
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007594:	4641      	mov	r1, r8
 8007596:	1851      	adds	r1, r2, r1
 8007598:	6039      	str	r1, [r7, #0]
 800759a:	4649      	mov	r1, r9
 800759c:	414b      	adcs	r3, r1
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075ac:	4659      	mov	r1, fp
 80075ae:	00cb      	lsls	r3, r1, #3
 80075b0:	4651      	mov	r1, sl
 80075b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b6:	4651      	mov	r1, sl
 80075b8:	00ca      	lsls	r2, r1, #3
 80075ba:	4610      	mov	r0, r2
 80075bc:	4619      	mov	r1, r3
 80075be:	4603      	mov	r3, r0
 80075c0:	4642      	mov	r2, r8
 80075c2:	189b      	adds	r3, r3, r2
 80075c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80075c6:	464b      	mov	r3, r9
 80075c8:	460a      	mov	r2, r1
 80075ca:	eb42 0303 	adc.w	r3, r2, r3
 80075ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	663b      	str	r3, [r7, #96]	; 0x60
 80075da:	667a      	str	r2, [r7, #100]	; 0x64
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075e8:	4649      	mov	r1, r9
 80075ea:	008b      	lsls	r3, r1, #2
 80075ec:	4641      	mov	r1, r8
 80075ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f2:	4641      	mov	r1, r8
 80075f4:	008a      	lsls	r2, r1, #2
 80075f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075fa:	f7f9 fb9d 	bl	8000d38 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <UART_SetConfig+0x4e4>)
 8007604:	fba3 1302 	umull	r1, r3, r3, r2
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	2164      	movs	r1, #100	; 0x64
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	3332      	adds	r3, #50	; 0x32
 8007616:	4a08      	ldr	r2, [pc, #32]	; (8007638 <UART_SetConfig+0x4e4>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	f003 020f 	and.w	r2, r3, #15
 8007622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4422      	add	r2, r4
 800762a:	609a      	str	r2, [r3, #8]
}
 800762c:	bf00      	nop
 800762e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007632:	46bd      	mov	sp, r7
 8007634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007638:	51eb851f 	.word	0x51eb851f

0800763c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800763c:	b084      	sub	sp, #16
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	f107 001c 	add.w	r0, r7, #28
 800764a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800764e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007652:	2b01      	cmp	r3, #1
 8007654:	d123      	bne.n	800769e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800766a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800767e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fadc 	bl	8008c50 <USB_CoreReset>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e01b      	b.n	80076d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fad0 	bl	8008c50 <USB_CoreReset>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
 80076c8:	e005      	b.n	80076d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076d6:	7fbb      	ldrb	r3, [r7, #30]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d10b      	bne.n	80076f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f043 0206 	orr.w	r2, r3, #6
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007700:	b004      	add	sp, #16
 8007702:	4770      	bx	lr

08007704 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	4613      	mov	r3, r2
 8007710:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d165      	bne.n	80077e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4a41      	ldr	r2, [pc, #260]	; (8007820 <USB_SetTurnaroundTime+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d906      	bls.n	800772e <USB_SetTurnaroundTime+0x2a>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a40      	ldr	r2, [pc, #256]	; (8007824 <USB_SetTurnaroundTime+0x120>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d202      	bcs.n	800772e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007728:	230f      	movs	r3, #15
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e062      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4a3c      	ldr	r2, [pc, #240]	; (8007824 <USB_SetTurnaroundTime+0x120>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d306      	bcc.n	8007744 <USB_SetTurnaroundTime+0x40>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a3b      	ldr	r2, [pc, #236]	; (8007828 <USB_SetTurnaroundTime+0x124>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d202      	bcs.n	8007744 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800773e:	230e      	movs	r3, #14
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e057      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4a38      	ldr	r2, [pc, #224]	; (8007828 <USB_SetTurnaroundTime+0x124>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d306      	bcc.n	800775a <USB_SetTurnaroundTime+0x56>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a37      	ldr	r2, [pc, #220]	; (800782c <USB_SetTurnaroundTime+0x128>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d202      	bcs.n	800775a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007754:	230d      	movs	r3, #13
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e04c      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a33      	ldr	r2, [pc, #204]	; (800782c <USB_SetTurnaroundTime+0x128>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d306      	bcc.n	8007770 <USB_SetTurnaroundTime+0x6c>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a32      	ldr	r2, [pc, #200]	; (8007830 <USB_SetTurnaroundTime+0x12c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d802      	bhi.n	8007770 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800776a:	230c      	movs	r3, #12
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	e041      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4a2f      	ldr	r2, [pc, #188]	; (8007830 <USB_SetTurnaroundTime+0x12c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d906      	bls.n	8007786 <USB_SetTurnaroundTime+0x82>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a2e      	ldr	r2, [pc, #184]	; (8007834 <USB_SetTurnaroundTime+0x130>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d802      	bhi.n	8007786 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007780:	230b      	movs	r3, #11
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	e036      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a2a      	ldr	r2, [pc, #168]	; (8007834 <USB_SetTurnaroundTime+0x130>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d906      	bls.n	800779c <USB_SetTurnaroundTime+0x98>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a29      	ldr	r2, [pc, #164]	; (8007838 <USB_SetTurnaroundTime+0x134>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d802      	bhi.n	800779c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007796:	230a      	movs	r3, #10
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	e02b      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4a26      	ldr	r2, [pc, #152]	; (8007838 <USB_SetTurnaroundTime+0x134>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d906      	bls.n	80077b2 <USB_SetTurnaroundTime+0xae>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4a25      	ldr	r2, [pc, #148]	; (800783c <USB_SetTurnaroundTime+0x138>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d202      	bcs.n	80077b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077ac:	2309      	movs	r3, #9
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e020      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a21      	ldr	r2, [pc, #132]	; (800783c <USB_SetTurnaroundTime+0x138>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d306      	bcc.n	80077c8 <USB_SetTurnaroundTime+0xc4>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4a20      	ldr	r2, [pc, #128]	; (8007840 <USB_SetTurnaroundTime+0x13c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d802      	bhi.n	80077c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077c2:	2308      	movs	r3, #8
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e015      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <USB_SetTurnaroundTime+0x13c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d906      	bls.n	80077de <USB_SetTurnaroundTime+0xda>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <USB_SetTurnaroundTime+0x140>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d202      	bcs.n	80077de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077d8:	2307      	movs	r3, #7
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	e00a      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077de:	2306      	movs	r3, #6
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	e007      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077ea:	2309      	movs	r3, #9
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	e001      	b.n	80077f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077f0:	2309      	movs	r3, #9
 80077f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	029b      	lsls	r3, r3, #10
 8007808:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800780c:	431a      	orrs	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	00d8acbf 	.word	0x00d8acbf
 8007824:	00e4e1c0 	.word	0x00e4e1c0
 8007828:	00f42400 	.word	0x00f42400
 800782c:	01067380 	.word	0x01067380
 8007830:	011a499f 	.word	0x011a499f
 8007834:	01312cff 	.word	0x01312cff
 8007838:	014ca43f 	.word	0x014ca43f
 800783c:	016e3600 	.word	0x016e3600
 8007840:	01a6ab1f 	.word	0x01a6ab1f
 8007844:	01e84800 	.word	0x01e84800

08007848 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f043 0201 	orr.w	r2, r3, #1
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f023 0201 	bic.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d115      	bne.n	80078da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078ba:	200a      	movs	r0, #10
 80078bc:	f7fb f98e 	bl	8002bdc <HAL_Delay>
      ms += 10U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	330a      	adds	r3, #10
 80078c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f933 	bl	8008b32 <USB_GetMode>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d01e      	beq.n	8007910 <USB_SetCurrentMode+0x84>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2bc7      	cmp	r3, #199	; 0xc7
 80078d6:	d9f0      	bls.n	80078ba <USB_SetCurrentMode+0x2e>
 80078d8:	e01a      	b.n	8007910 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d115      	bne.n	800790c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078ec:	200a      	movs	r0, #10
 80078ee:	f7fb f975 	bl	8002bdc <HAL_Delay>
      ms += 10U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	330a      	adds	r3, #10
 80078f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f91a 	bl	8008b32 <USB_GetMode>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <USB_SetCurrentMode+0x84>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2bc7      	cmp	r3, #199	; 0xc7
 8007908:	d9f0      	bls.n	80078ec <USB_SetCurrentMode+0x60>
 800790a:	e001      	b.n	8007910 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e005      	b.n	800791c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2bc8      	cmp	r3, #200	; 0xc8
 8007914:	d101      	bne.n	800791a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007924:	b084      	sub	sp, #16
 8007926:	b580      	push	{r7, lr}
 8007928:	b086      	sub	sp, #24
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e009      	b.n	8007958 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3340      	adds	r3, #64	; 0x40
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	2200      	movs	r2, #0
 8007950:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3301      	adds	r3, #1
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b0e      	cmp	r3, #14
 800795c:	d9f2      	bls.n	8007944 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800795e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007962:	2b00      	cmp	r3, #0
 8007964:	d11c      	bne.n	80079a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007974:	f043 0302 	orr.w	r3, r3, #2
 8007978:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e005      	b.n	80079ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b2:	461a      	mov	r2, r3
 80079b4:	2300      	movs	r3, #0
 80079b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079b8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10d      	bne.n	80079dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079c8:	2100      	movs	r1, #0
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f968 	bl	8007ca0 <USB_SetDevSpeed>
 80079d0:	e008      	b.n	80079e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079d2:	2101      	movs	r1, #1
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f963 	bl	8007ca0 <USB_SetDevSpeed>
 80079da:	e003      	b.n	80079e4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079dc:	2103      	movs	r1, #3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f95e 	bl	8007ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079e4:	2110      	movs	r1, #16
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f8fa 	bl	8007be0 <USB_FlushTxFifo>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f924 	bl	8007c44 <USB_FlushRxFifo>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a24:	461a      	mov	r2, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	e043      	b.n	8007ab8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a46:	d118      	bne.n	8007a7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e013      	b.n	8007a8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	461a      	mov	r2, r3
 8007a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e008      	b.n	8007a8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	461a      	mov	r2, r3
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007abc:	461a      	mov	r2, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d3b5      	bcc.n	8007a30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	e043      	b.n	8007b52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ae0:	d118      	bne.n	8007b14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	461a      	mov	r2, r3
 8007af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e013      	b.n	8007b26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	e008      	b.n	8007b26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b20:	461a      	mov	r2, r3
 8007b22:	2300      	movs	r3, #0
 8007b24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	461a      	mov	r2, r3
 8007b34:	2300      	movs	r3, #0
 8007b36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	461a      	mov	r2, r3
 8007b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b56:	461a      	mov	r2, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d3b5      	bcc.n	8007aca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f043 0210 	orr.w	r2, r3, #16
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <USB_DevInit+0x2b8>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ba0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f043 0208 	orr.w	r2, r3, #8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d107      	bne.n	8007bcc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc4:	f043 0304 	orr.w	r3, r3, #4
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bd8:	b004      	add	sp, #16
 8007bda:	4770      	bx	lr
 8007bdc:	803c3800 	.word	0x803c3800

08007be0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007bfa:	d901      	bls.n	8007c00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e01b      	b.n	8007c38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	daf2      	bge.n	8007bee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	019b      	lsls	r3, r3, #6
 8007c10:	f043 0220 	orr.w	r2, r3, #32
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c24:	d901      	bls.n	8007c2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e006      	b.n	8007c38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d0f0      	beq.n	8007c18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c5c:	d901      	bls.n	8007c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e018      	b.n	8007c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	daf2      	bge.n	8007c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2210      	movs	r2, #16
 8007c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c80:	d901      	bls.n	8007c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e006      	b.n	8007c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d0f0      	beq.n	8007c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	68f9      	ldr	r1, [r7, #12]
 8007cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b087      	sub	sp, #28
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
 8007cf6:	e00a      	b.n	8007d0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d002      	beq.n	8007d04 <USB_GetDevSpeed+0x32>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b06      	cmp	r3, #6
 8007d02:	d102      	bne.n	8007d0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d04:	2302      	movs	r3, #2
 8007d06:	75fb      	strb	r3, [r7, #23]
 8007d08:	e001      	b.n	8007d0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d0a:	230f      	movs	r3, #15
 8007d0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	371c      	adds	r7, #28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d13a      	bne.n	8007dae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	2101      	movs	r1, #1
 8007d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	68f9      	ldr	r1, [r7, #12]
 8007d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d155      	bne.n	8007e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	791b      	ldrb	r3, [r3, #4]
 8007d8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	059b      	lsls	r3, r3, #22
 8007d92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d94:	4313      	orrs	r3, r2
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	e036      	b.n	8007e1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	69da      	ldr	r2, [r3, #28]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d11a      	bne.n	8007e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	791b      	ldrb	r3, [r3, #4]
 8007e00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e02:	430b      	orrs	r3, r1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d161      	bne.n	8007f0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e5e:	d11f      	bne.n	8007ea0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	43db      	mvns	r3, r3
 8007ede:	68f9      	ldr	r1, [r7, #12]
 8007ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	0159      	lsls	r1, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	440b      	add	r3, r1
 8007efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f02:	4619      	mov	r1, r3
 8007f04:	4b35      	ldr	r3, [pc, #212]	; (8007fdc <USB_DeactivateEndpoint+0x1b0>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	600b      	str	r3, [r1, #0]
 8007f0a:	e060      	b.n	8007fce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f22:	d11f      	bne.n	8007f64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f84:	4013      	ands	r3, r2
 8007f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	69da      	ldr	r2, [r3, #28]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	2101      	movs	r1, #1
 8007f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa8:	4013      	ands	r3, r2
 8007faa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	0159      	lsls	r1, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	440b      	add	r3, r1
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <USB_DeactivateEndpoint+0x1b4>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	ec337800 	.word	0xec337800
 8007fe0:	eff37800 	.word	0xeff37800

08007fe4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b01      	cmp	r3, #1
 8008002:	f040 817a 	bne.w	80082fa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d132      	bne.n	8008074 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008028:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800802c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806c:	0cdb      	lsrs	r3, r3, #19
 800806e:	04db      	lsls	r3, r3, #19
 8008070:	6113      	str	r3, [r2, #16]
 8008072:	e092      	b.n	800819a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808e:	0cdb      	lsrs	r3, r3, #19
 8008090:	04db      	lsls	r3, r3, #19
 8008092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	0151      	lsls	r1, r2, #5
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	440a      	add	r2, r1
 80080aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11a      	bne.n	80080f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d903      	bls.n	80080d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080f0:	6113      	str	r3, [r2, #16]
 80080f2:	e01b      	b.n	800812c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008100:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6919      	ldr	r1, [r3, #16]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	440b      	add	r3, r1
 800810c:	1e59      	subs	r1, r3, #1
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	fbb1 f3f3 	udiv	r3, r1, r3
 8008116:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008118:	4ba2      	ldr	r3, [pc, #648]	; (80083a4 <USB_EPStartXfer+0x3c0>)
 800811a:	400b      	ands	r3, r1
 800811c:	69b9      	ldr	r1, [r7, #24]
 800811e:	0148      	lsls	r0, r1, #5
 8008120:	69f9      	ldr	r1, [r7, #28]
 8008122:	4401      	add	r1, r0
 8008124:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008128:	4313      	orrs	r3, r2
 800812a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008142:	69b9      	ldr	r1, [r7, #24]
 8008144:	0148      	lsls	r0, r1, #5
 8008146:	69f9      	ldr	r1, [r7, #28]
 8008148:	4401      	add	r1, r0
 800814a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800814e:	4313      	orrs	r3, r2
 8008150:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d11f      	bne.n	800819a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	0151      	lsls	r1, r2, #5
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	440a      	add	r2, r1
 8008170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008174:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008178:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	440a      	add	r2, r1
 8008190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008198:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d14b      	bne.n	8008238 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b4:	461a      	mov	r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	791b      	ldrb	r3, [r3, #4]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d128      	bne.n	8008216 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d110      	bne.n	80081f6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e00f      	b.n	8008216 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	69fa      	ldr	r2, [r7, #28]
 800820a:	440a      	add	r2, r1
 800820c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008214:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	440a      	add	r2, r1
 800822c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	e165      	b.n	8008504 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	440a      	add	r2, r1
 800824e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008256:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d015      	beq.n	800828c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 814d 	beq.w	8008504 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	2101      	movs	r1, #1
 800827c:	fa01 f303 	lsl.w	r3, r1, r3
 8008280:	69f9      	ldr	r1, [r7, #28]
 8008282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008286:	4313      	orrs	r3, r2
 8008288:	634b      	str	r3, [r1, #52]	; 0x34
 800828a:	e13b      	b.n	8008504 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008298:	2b00      	cmp	r3, #0
 800829a:	d110      	bne.n	80082be <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	e00f      	b.n	80082de <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	68d9      	ldr	r1, [r3, #12]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	b298      	uxth	r0, r3
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	4603      	mov	r3, r0
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f9b8 	bl	8008668 <USB_WritePacket>
 80082f8:	e104      	b.n	8008504 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008314:	0cdb      	lsrs	r3, r3, #19
 8008316:	04db      	lsls	r3, r3, #19
 8008318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	440a      	add	r2, r1
 8008330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800833c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d131      	bne.n	80083a8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008372:	69b9      	ldr	r1, [r7, #24]
 8008374:	0148      	lsls	r0, r1, #5
 8008376:	69f9      	ldr	r1, [r7, #28]
 8008378:	4401      	add	r1, r0
 800837a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800837e:	4313      	orrs	r3, r2
 8008380:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	0151      	lsls	r1, r2, #5
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	440a      	add	r2, r1
 8008398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a0:	6113      	str	r3, [r2, #16]
 80083a2:	e061      	b.n	8008468 <USB_EPStartXfer+0x484>
 80083a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d123      	bne.n	80083f8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c6:	69b9      	ldr	r1, [r7, #24]
 80083c8:	0148      	lsls	r0, r1, #5
 80083ca:	69f9      	ldr	r1, [r7, #28]
 80083cc:	4401      	add	r1, r0
 80083ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083d2:	4313      	orrs	r3, r2
 80083d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	0151      	lsls	r1, r2, #5
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	440a      	add	r2, r1
 80083ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083f4:	6113      	str	r3, [r2, #16]
 80083f6:	e037      	b.n	8008468 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4413      	add	r3, r2
 8008402:	1e5a      	subs	r2, r3, #1
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	8afa      	ldrh	r2, [r7, #22]
 8008414:	fb03 f202 	mul.w	r2, r3, r2
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	8afb      	ldrh	r3, [r7, #22]
 800842c:	04d9      	lsls	r1, r3, #19
 800842e:	4b38      	ldr	r3, [pc, #224]	; (8008510 <USB_EPStartXfer+0x52c>)
 8008430:	400b      	ands	r3, r1
 8008432:	69b9      	ldr	r1, [r7, #24]
 8008434:	0148      	lsls	r0, r1, #5
 8008436:	69f9      	ldr	r1, [r7, #28]
 8008438:	4401      	add	r1, r0
 800843a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800843e:	4313      	orrs	r3, r2
 8008440:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008458:	69b9      	ldr	r1, [r7, #24]
 800845a:	0148      	lsls	r0, r1, #5
 800845c:	69f9      	ldr	r1, [r7, #28]
 800845e:	4401      	add	r1, r0
 8008460:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008464:	4313      	orrs	r3, r2
 8008466:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d10d      	bne.n	800848a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d009      	beq.n	800848a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	68d9      	ldr	r1, [r3, #12]
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008486:	460a      	mov	r2, r1
 8008488:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	791b      	ldrb	r3, [r3, #4]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d128      	bne.n	80084e4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d110      	bne.n	80084c4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	69fa      	ldr	r2, [r7, #28]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	e00f      	b.n	80084e4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3720      	adds	r7, #32
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	1ff80000 	.word	0x1ff80000

08008514 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d14a      	bne.n	80085c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800854a:	f040 8086 	bne.w	800865a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	7812      	ldrb	r2, [r2, #0]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	440a      	add	r2, r1
 8008568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008570:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008594:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f242 7210 	movw	r2, #10000	; 0x2710
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d902      	bls.n	80085ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	75fb      	strb	r3, [r7, #23]
          break;
 80085aa:	e056      	b.n	800865a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085c4:	d0e7      	beq.n	8008596 <USB_EPStopXfer+0x82>
 80085c6:	e048      	b.n	800865a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085e0:	d13b      	bne.n	800865a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	7812      	ldrb	r2, [r2, #0]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008600:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008604:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	440a      	add	r2, r1
 8008620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008628:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3301      	adds	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f242 7210 	movw	r2, #10000	; 0x2710
 8008636:	4293      	cmp	r3, r2
 8008638:	d902      	bls.n	8008640 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
          break;
 800863e:	e00c      	b.n	800865a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008658:	d0e7      	beq.n	800862a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008668:	b480      	push	{r7}
 800866a:	b089      	sub	sp, #36	; 0x24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4611      	mov	r1, r2
 8008674:	461a      	mov	r2, r3
 8008676:	460b      	mov	r3, r1
 8008678:	71fb      	strb	r3, [r7, #7]
 800867a:	4613      	mov	r3, r2
 800867c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008686:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d123      	bne.n	80086d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800868e:	88bb      	ldrh	r3, [r7, #4]
 8008690:	3303      	adds	r3, #3
 8008692:	089b      	lsrs	r3, r3, #2
 8008694:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008696:	2300      	movs	r3, #0
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	e018      	b.n	80086ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	031a      	lsls	r2, r3, #12
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a8:	461a      	mov	r2, r3
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	3301      	adds	r3, #1
 80086b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	3301      	adds	r3, #1
 80086ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	3301      	adds	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	3301      	adds	r3, #1
 80086c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	3301      	adds	r3, #1
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d3e2      	bcc.n	800869c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3724      	adds	r7, #36	; 0x24
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b08b      	sub	sp, #44	; 0x2c
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	089b      	lsrs	r3, r3, #2
 80086fe:	b29b      	uxth	r3, r3
 8008700:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800870a:	2300      	movs	r3, #0
 800870c:	623b      	str	r3, [r7, #32]
 800870e:	e014      	b.n	800873a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	601a      	str	r2, [r3, #0]
    pDest++;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	3301      	adds	r3, #1
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	3301      	adds	r3, #1
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	3301      	adds	r3, #1
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	3301      	adds	r3, #1
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	3301      	adds	r3, #1
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	6a3a      	ldr	r2, [r7, #32]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	429a      	cmp	r2, r3
 8008740:	d3e6      	bcc.n	8008710 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008742:	8bfb      	ldrh	r3, [r7, #30]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01e      	beq.n	8008786 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008752:	461a      	mov	r2, r3
 8008754:	f107 0310 	add.w	r3, r7, #16
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	fa22 f303 	lsr.w	r3, r2, r3
 8008768:	b2da      	uxtb	r2, r3
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	701a      	strb	r2, [r3, #0]
      i++;
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	3301      	adds	r3, #1
 8008772:	623b      	str	r3, [r7, #32]
      pDest++;
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	3301      	adds	r3, #1
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800877a:	8bfb      	ldrh	r3, [r7, #30]
 800877c:	3b01      	subs	r3, #1
 800877e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008780:	8bfb      	ldrh	r3, [r7, #30]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1ea      	bne.n	800875c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008788:	4618      	mov	r0, r3
 800878a:	372c      	adds	r7, #44	; 0x2c
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d12c      	bne.n	800880a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	db12      	blt.n	80087e8 <USB_EPSetStall+0x54>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00f      	beq.n	80087e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	e02b      	b.n	8008862 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	db12      	blt.n	8008842 <USB_EPSetStall+0xae>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00f      	beq.n	8008842 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	0151      	lsls	r1, r2, #5
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	440a      	add	r2, r1
 8008838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800883c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008840:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	440a      	add	r2, r1
 8008858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008860:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	785b      	ldrb	r3, [r3, #1]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d128      	bne.n	80088de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	791b      	ldrb	r3, [r3, #4]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d003      	beq.n	80088bc <USB_EPClearStall+0x4c>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	791b      	ldrb	r3, [r3, #4]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d138      	bne.n	800892e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	e027      	b.n	800892e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	791b      	ldrb	r3, [r3, #4]
 8008902:	2b03      	cmp	r3, #3
 8008904:	d003      	beq.n	800890e <USB_EPClearStall+0x9e>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	791b      	ldrb	r3, [r3, #4]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d10f      	bne.n	800892e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800895a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800895e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008976:	4313      	orrs	r3, r2
 8008978:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b6:	f023 0302 	bic.w	r3, r3, #2
 80089ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089f8:	f043 0302 	orr.w	r3, r3, #2
 80089fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4013      	ands	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a24:	68fb      	ldr	r3, [r7, #12]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	0c1b      	lsrs	r3, r3, #16
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	4013      	ands	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	b29b      	uxth	r3, r3
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b087      	sub	sp, #28
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	01db      	lsls	r3, r3, #7
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4013      	ands	r3, r2
 8008b22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b24:	68bb      	ldr	r3, [r7, #8]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	333c      	adds	r3, #60	; 0x3c
 8008baa:	3304      	adds	r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	4a26      	ldr	r2, [pc, #152]	; (8008c4c <USB_EP0_OutStart+0xb8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d90a      	bls.n	8008bce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc8:	d101      	bne.n	8008bce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e037      	b.n	8008c3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfc:	f043 0318 	orr.w	r3, r3, #24
 8008c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d10f      	bne.n	8008c3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	4f54300a 	.word	0x4f54300a

08008c50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c68:	d901      	bls.n	8008c6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e01b      	b.n	8008ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	daf2      	bge.n	8008c5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f043 0201 	orr.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c92:	d901      	bls.n	8008c98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e006      	b.n	8008ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d0f0      	beq.n	8008c86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cc4:	f002 ff2e 	bl	800bb24 <USBD_static_malloc>
 8008cc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d109      	bne.n	8008ce4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	32b0      	adds	r2, #176	; 0xb0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e0d4      	b.n	8008e8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008ce4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008ce8:	2100      	movs	r1, #0
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f012 f929 	bl	801af42 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	32b0      	adds	r2, #176	; 0xb0
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	32b0      	adds	r2, #176	; 0xb0
 8008d0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7c1b      	ldrb	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d138      	bne.n	8008d8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d1c:	4b5e      	ldr	r3, [pc, #376]	; (8008e98 <USBD_CDC_Init+0x1e4>)
 8008d1e:	7819      	ldrb	r1, [r3, #0]
 8008d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d24:	2202      	movs	r2, #2
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f002 fd6b 	bl	800b802 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d2c:	4b5a      	ldr	r3, [pc, #360]	; (8008e98 <USBD_CDC_Init+0x1e4>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f003 020f 	and.w	r2, r3, #15
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	3324      	adds	r3, #36	; 0x24
 8008d42:	2201      	movs	r2, #1
 8008d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d46:	4b55      	ldr	r3, [pc, #340]	; (8008e9c <USBD_CDC_Init+0x1e8>)
 8008d48:	7819      	ldrb	r1, [r3, #0]
 8008d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4e:	2202      	movs	r2, #2
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f002 fd56 	bl	800b802 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d56:	4b51      	ldr	r3, [pc, #324]	; (8008e9c <USBD_CDC_Init+0x1e8>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	f003 020f 	and.w	r2, r3, #15
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d6e:	2201      	movs	r2, #1
 8008d70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d72:	4b4b      	ldr	r3, [pc, #300]	; (8008ea0 <USBD_CDC_Init+0x1ec>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f003 020f 	and.w	r2, r3, #15
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	3326      	adds	r3, #38	; 0x26
 8008d88:	2210      	movs	r2, #16
 8008d8a:	801a      	strh	r2, [r3, #0]
 8008d8c:	e035      	b.n	8008dfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d8e:	4b42      	ldr	r3, [pc, #264]	; (8008e98 <USBD_CDC_Init+0x1e4>)
 8008d90:	7819      	ldrb	r1, [r3, #0]
 8008d92:	2340      	movs	r3, #64	; 0x40
 8008d94:	2202      	movs	r2, #2
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f002 fd33 	bl	800b802 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d9c:	4b3e      	ldr	r3, [pc, #248]	; (8008e98 <USBD_CDC_Init+0x1e4>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f003 020f 	and.w	r2, r3, #15
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	3324      	adds	r3, #36	; 0x24
 8008db2:	2201      	movs	r2, #1
 8008db4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008db6:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <USBD_CDC_Init+0x1e8>)
 8008db8:	7819      	ldrb	r1, [r3, #0]
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f002 fd1f 	bl	800b802 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008dc4:	4b35      	ldr	r3, [pc, #212]	; (8008e9c <USBD_CDC_Init+0x1e8>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ddc:	2201      	movs	r2, #1
 8008dde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008de0:	4b2f      	ldr	r3, [pc, #188]	; (8008ea0 <USBD_CDC_Init+0x1ec>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3326      	adds	r3, #38	; 0x26
 8008df6:	2210      	movs	r2, #16
 8008df8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008dfa:	4b29      	ldr	r3, [pc, #164]	; (8008ea0 <USBD_CDC_Init+0x1ec>)
 8008dfc:	7819      	ldrb	r1, [r3, #0]
 8008dfe:	2308      	movs	r3, #8
 8008e00:	2203      	movs	r2, #3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f002 fcfd 	bl	800b802 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <USBD_CDC_Init+0x1ec>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	3324      	adds	r3, #36	; 0x24
 8008e1e:	2201      	movs	r2, #1
 8008e20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	33b0      	adds	r3, #176	; 0xb0
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e018      	b.n	8008e8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7c1b      	ldrb	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e64:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <USBD_CDC_Init+0x1e8>)
 8008e66:	7819      	ldrb	r1, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f002 fdd3 	bl	800ba1e <USBD_LL_PrepareReceive>
 8008e78:	e008      	b.n	8008e8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e7a:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <USBD_CDC_Init+0x1e8>)
 8008e7c:	7819      	ldrb	r1, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f002 fdc9 	bl	800ba1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	2000012f 	.word	0x2000012f
 8008e9c:	20000130 	.word	0x20000130
 8008ea0:	20000131 	.word	0x20000131

08008ea4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008eb0:	4b3a      	ldr	r3, [pc, #232]	; (8008f9c <USBD_CDC_DeInit+0xf8>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f002 fcc9 	bl	800b84e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ebc:	4b37      	ldr	r3, [pc, #220]	; (8008f9c <USBD_CDC_DeInit+0xf8>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f003 020f 	and.w	r2, r3, #15
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	3324      	adds	r3, #36	; 0x24
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008ed6:	4b32      	ldr	r3, [pc, #200]	; (8008fa0 <USBD_CDC_DeInit+0xfc>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f002 fcb6 	bl	800b84e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	; (8008fa0 <USBD_CDC_DeInit+0xfc>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	f003 020f 	and.w	r2, r3, #15
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008efa:	2200      	movs	r2, #0
 8008efc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008efe:	4b29      	ldr	r3, [pc, #164]	; (8008fa4 <USBD_CDC_DeInit+0x100>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f002 fca2 	bl	800b84e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f0a:	4b26      	ldr	r3, [pc, #152]	; (8008fa4 <USBD_CDC_DeInit+0x100>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	f003 020f 	and.w	r2, r3, #15
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3324      	adds	r3, #36	; 0x24
 8008f20:	2200      	movs	r2, #0
 8008f22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f24:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <USBD_CDC_DeInit+0x100>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	3326      	adds	r3, #38	; 0x26
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32b0      	adds	r2, #176	; 0xb0
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01f      	beq.n	8008f90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	33b0      	adds	r3, #176	; 0xb0
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	32b0      	adds	r2, #176	; 0xb0
 8008f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f002 fde4 	bl	800bb40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	32b0      	adds	r2, #176	; 0xb0
 8008f82:	2100      	movs	r1, #0
 8008f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	2000012f 	.word	0x2000012f
 8008fa0:	20000130 	.word	0x20000130
 8008fa4:	20000131 	.word	0x20000131

08008fa8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	32b0      	adds	r2, #176	; 0xb0
 8008fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e0bf      	b.n	8009158 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d050      	beq.n	8009086 <USBD_CDC_Setup+0xde>
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	f040 80af 	bne.w	8009148 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d03a      	beq.n	8009068 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b25b      	sxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	da1b      	bge.n	8009034 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	33b0      	adds	r3, #176	; 0xb0
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009012:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	88d2      	ldrh	r2, [r2, #6]
 8009018:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	2b07      	cmp	r3, #7
 8009020:	bf28      	it	cs
 8009022:	2307      	movcs	r3, #7
 8009024:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	89fa      	ldrh	r2, [r7, #14]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fdb3 	bl	800ab98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009032:	e090      	b.n	8009156 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	785a      	ldrb	r2, [r3, #1]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	88db      	ldrh	r3, [r3, #6]
 8009042:	2b3f      	cmp	r3, #63	; 0x3f
 8009044:	d803      	bhi.n	800904e <USBD_CDC_Setup+0xa6>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	88db      	ldrh	r3, [r3, #6]
 800904a:	b2da      	uxtb	r2, r3
 800904c:	e000      	b.n	8009050 <USBD_CDC_Setup+0xa8>
 800904e:	2240      	movs	r2, #64	; 0x40
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009056:	6939      	ldr	r1, [r7, #16]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800905e:	461a      	mov	r2, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 fdc5 	bl	800abf0 <USBD_CtlPrepareRx>
      break;
 8009066:	e076      	b.n	8009156 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	33b0      	adds	r3, #176	; 0xb0
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	7850      	ldrb	r0, [r2, #1]
 800907e:	2200      	movs	r2, #0
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	4798      	blx	r3
      break;
 8009084:	e067      	b.n	8009156 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b0b      	cmp	r3, #11
 800908c:	d851      	bhi.n	8009132 <USBD_CDC_Setup+0x18a>
 800908e:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <USBD_CDC_Setup+0xec>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090c5 	.word	0x080090c5
 8009098:	08009141 	.word	0x08009141
 800909c:	08009133 	.word	0x08009133
 80090a0:	08009133 	.word	0x08009133
 80090a4:	08009133 	.word	0x08009133
 80090a8:	08009133 	.word	0x08009133
 80090ac:	08009133 	.word	0x08009133
 80090b0:	08009133 	.word	0x08009133
 80090b4:	08009133 	.word	0x08009133
 80090b8:	08009133 	.word	0x08009133
 80090bc:	080090ef 	.word	0x080090ef
 80090c0:	08009119 	.word	0x08009119
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d107      	bne.n	80090e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090d0:	f107 030a 	add.w	r3, r7, #10
 80090d4:	2202      	movs	r2, #2
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fd5d 	bl	800ab98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090de:	e032      	b.n	8009146 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fce7 	bl	800aab6 <USBD_CtlError>
            ret = USBD_FAIL;
 80090e8:	2303      	movs	r3, #3
 80090ea:	75fb      	strb	r3, [r7, #23]
          break;
 80090ec:	e02b      	b.n	8009146 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d107      	bne.n	800910a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80090fa:	f107 030d 	add.w	r3, r7, #13
 80090fe:	2201      	movs	r2, #1
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 fd48 	bl	800ab98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009108:	e01d      	b.n	8009146 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fcd2 	bl	800aab6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009112:	2303      	movs	r3, #3
 8009114:	75fb      	strb	r3, [r7, #23]
          break;
 8009116:	e016      	b.n	8009146 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b03      	cmp	r3, #3
 8009122:	d00f      	beq.n	8009144 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fcc5 	bl	800aab6 <USBD_CtlError>
            ret = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009130:	e008      	b.n	8009144 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 fcbe 	bl	800aab6 <USBD_CtlError>
          ret = USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	75fb      	strb	r3, [r7, #23]
          break;
 800913e:	e002      	b.n	8009146 <USBD_CDC_Setup+0x19e>
          break;
 8009140:	bf00      	nop
 8009142:	e008      	b.n	8009156 <USBD_CDC_Setup+0x1ae>
          break;
 8009144:	bf00      	nop
      }
      break;
 8009146:	e006      	b.n	8009156 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 fcb3 	bl	800aab6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009150:	2303      	movs	r3, #3
 8009152:	75fb      	strb	r3, [r7, #23]
      break;
 8009154:	bf00      	nop
  }

  return (uint8_t)ret;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	32b0      	adds	r2, #176	; 0xb0
 800917e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009186:	2303      	movs	r3, #3
 8009188:	e065      	b.n	8009256 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	32b0      	adds	r2, #176	; 0xb0
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	f003 020f 	and.w	r2, r3, #15
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	3318      	adds	r3, #24
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d02f      	beq.n	8009214 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	f003 020f 	and.w	r2, r3, #15
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	3318      	adds	r3, #24
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	f003 010f 	and.w	r1, r3, #15
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	460b      	mov	r3, r1
 80091d4:	00db      	lsls	r3, r3, #3
 80091d6:	440b      	add	r3, r1
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4403      	add	r3, r0
 80091dc:	331c      	adds	r3, #28
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d112      	bne.n	8009214 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	f003 020f 	and.w	r2, r3, #15
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	3318      	adds	r3, #24
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009206:	78f9      	ldrb	r1, [r7, #3]
 8009208:	2300      	movs	r3, #0
 800920a:	2200      	movs	r2, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f002 fbe5 	bl	800b9dc <USBD_LL_Transmit>
 8009212:	e01f      	b.n	8009254 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	33b0      	adds	r3, #176	; 0xb0
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d010      	beq.n	8009254 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	33b0      	adds	r3, #176	; 0xb0
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	32b0      	adds	r2, #176	; 0xb0
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	32b0      	adds	r2, #176	; 0xb0
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	e01a      	b.n	80092c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f002 fbe3 	bl	800ba60 <USBD_LL_GetRxDataSize>
 800929a:	4602      	mov	r2, r0
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	33b0      	adds	r3, #176	; 0xb0
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092c0:	4611      	mov	r1, r2
 80092c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	32b0      	adds	r2, #176	; 0xb0
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e025      	b.n	800933c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	33b0      	adds	r3, #176	; 0xb0
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01a      	beq.n	800933a <USBD_CDC_EP0_RxReady+0x6c>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800930a:	2bff      	cmp	r3, #255	; 0xff
 800930c:	d015      	beq.n	800933a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	33b0      	adds	r3, #176	; 0xb0
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009326:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800932e:	b292      	uxth	r2, r2
 8009330:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	22ff      	movs	r2, #255	; 0xff
 8009336:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800934c:	2182      	movs	r1, #130	; 0x82
 800934e:	4818      	ldr	r0, [pc, #96]	; (80093b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009350:	f000 fd4f 	bl	8009df2 <USBD_GetEpDesc>
 8009354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009356:	2101      	movs	r1, #1
 8009358:	4815      	ldr	r0, [pc, #84]	; (80093b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800935a:	f000 fd4a 	bl	8009df2 <USBD_GetEpDesc>
 800935e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009360:	2181      	movs	r1, #129	; 0x81
 8009362:	4813      	ldr	r0, [pc, #76]	; (80093b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009364:	f000 fd45 	bl	8009df2 <USBD_GetEpDesc>
 8009368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2210      	movs	r2, #16
 8009374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2200      	movs	r2, #0
 8009380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009384:	711a      	strb	r2, [r3, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009398:	711a      	strb	r2, [r3, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2243      	movs	r2, #67	; 0x43
 80093a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200000ec 	.word	0x200000ec

080093b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093bc:	2182      	movs	r1, #130	; 0x82
 80093be:	4818      	ldr	r0, [pc, #96]	; (8009420 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093c0:	f000 fd17 	bl	8009df2 <USBD_GetEpDesc>
 80093c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093c6:	2101      	movs	r1, #1
 80093c8:	4815      	ldr	r0, [pc, #84]	; (8009420 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093ca:	f000 fd12 	bl	8009df2 <USBD_GetEpDesc>
 80093ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093d0:	2181      	movs	r1, #129	; 0x81
 80093d2:	4813      	ldr	r0, [pc, #76]	; (8009420 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093d4:	f000 fd0d 	bl	8009df2 <USBD_GetEpDesc>
 80093d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2210      	movs	r2, #16
 80093e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2200      	movs	r2, #0
 80093f0:	711a      	strb	r2, [r3, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f042 0202 	orr.w	r2, r2, #2
 80093f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	711a      	strb	r2, [r3, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f042 0202 	orr.w	r2, r2, #2
 800940c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2243      	movs	r2, #67	; 0x43
 8009412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009414:	4b02      	ldr	r3, [pc, #8]	; (8009420 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	200000ec 	.word	0x200000ec

08009424 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800942c:	2182      	movs	r1, #130	; 0x82
 800942e:	4818      	ldr	r0, [pc, #96]	; (8009490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009430:	f000 fcdf 	bl	8009df2 <USBD_GetEpDesc>
 8009434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009436:	2101      	movs	r1, #1
 8009438:	4815      	ldr	r0, [pc, #84]	; (8009490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800943a:	f000 fcda 	bl	8009df2 <USBD_GetEpDesc>
 800943e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009440:	2181      	movs	r1, #129	; 0x81
 8009442:	4813      	ldr	r0, [pc, #76]	; (8009490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009444:	f000 fcd5 	bl	8009df2 <USBD_GetEpDesc>
 8009448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2210      	movs	r2, #16
 8009454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d006      	beq.n	800946a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2200      	movs	r2, #0
 8009460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009464:	711a      	strb	r2, [r3, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009478:	711a      	strb	r2, [r3, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2243      	movs	r2, #67	; 0x43
 8009482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200000ec 	.word	0x200000ec

08009494 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	220a      	movs	r2, #10
 80094a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094a2:	4b03      	ldr	r3, [pc, #12]	; (80094b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	200000a8 	.word	0x200000a8

080094b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e009      	b.n	80094dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	33b0      	adds	r3, #176	; 0xb0
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	32b0      	adds	r2, #176	; 0xb0
 80094fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009502:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800950a:	2303      	movs	r3, #3
 800950c:	e008      	b.n	8009520 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	371c      	adds	r7, #28
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	32b0      	adds	r2, #176	; 0xb0
 8009540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009544:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800954c:	2303      	movs	r3, #3
 800954e:	e004      	b.n	800955a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	32b0      	adds	r2, #176	; 0xb0
 800957a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009580:	2301      	movs	r3, #1
 8009582:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800958a:	2303      	movs	r3, #3
 800958c:	e025      	b.n	80095da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11f      	bne.n	80095d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2201      	movs	r2, #1
 800959c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80095a0:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <USBD_CDC_TransmitPacket+0x7c>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 020f 	and.w	r2, r3, #15
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4403      	add	r3, r0
 80095ba:	3318      	adds	r3, #24
 80095bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80095be:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <USBD_CDC_TransmitPacket+0x7c>)
 80095c0:	7819      	ldrb	r1, [r3, #0]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f002 fa04 	bl	800b9dc <USBD_LL_Transmit>

    ret = USBD_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	2000012f 	.word	0x2000012f

080095e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32b0      	adds	r2, #176	; 0xb0
 80095fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	32b0      	adds	r2, #176	; 0xb0
 800960a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009612:	2303      	movs	r3, #3
 8009614:	e018      	b.n	8009648 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7c1b      	ldrb	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10a      	bne.n	8009634 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <USBD_CDC_ReceivePacket+0x68>)
 8009620:	7819      	ldrb	r1, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f002 f9f6 	bl	800ba1e <USBD_LL_PrepareReceive>
 8009632:	e008      	b.n	8009646 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <USBD_CDC_ReceivePacket+0x68>)
 8009636:	7819      	ldrb	r1, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800963e:	2340      	movs	r3, #64	; 0x40
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 f9ec 	bl	800ba1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000130 	.word	0x20000130

08009654 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	e01f      	b.n	80096ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	79fa      	ldrb	r2, [r7, #7]
 800969e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f002 f843 	bl	800b72c <USBD_LL_Init>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e025      	b.n	8009718 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32ae      	adds	r2, #174	; 0xae
 80096de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00f      	beq.n	8009708 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	32ae      	adds	r2, #174	; 0xae
 80096f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	f107 020e 	add.w	r2, r7, #14
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	4602      	mov	r2, r0
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f002 f84f 	bl	800b7cc <USBD_LL_Start>
 800972e:	4603      	mov	r3, r0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	2b00      	cmp	r3, #0
 8009766:	d009      	beq.n	800977c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	4611      	mov	r1, r2
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	4798      	blx	r3
 8009778:	4603      	mov	r3, r0
 800977a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800977c:	7bfb      	ldrb	r3, [r7, #15]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	78fa      	ldrb	r2, [r7, #3]
 80097a0:	4611      	mov	r1, r2
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 f938 	bl	800aa42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097e0:	461a      	mov	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097ee:	f003 031f 	and.w	r3, r3, #31
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d01a      	beq.n	800982c <USBD_LL_SetupStage+0x72>
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d822      	bhi.n	8009840 <USBD_LL_SetupStage+0x86>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <USBD_LL_SetupStage+0x4a>
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d00a      	beq.n	8009818 <USBD_LL_SetupStage+0x5e>
 8009802:	e01d      	b.n	8009840 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fb65 	bl	8009edc <USBD_StdDevReq>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
      break;
 8009816:	e020      	b.n	800985a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fbcd 	bl	8009fc0 <USBD_StdItfReq>
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]
      break;
 800982a:	e016      	b.n	800985a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc2f 	bl	800a098 <USBD_StdEPReq>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]
      break;
 800983e:	e00c      	b.n	800985a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800984a:	b2db      	uxtb	r3, r3
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f002 f83b 	bl	800b8ca <USBD_LL_StallEP>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
      break;
 8009858:	bf00      	nop
  }

  return ret;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	460b      	mov	r3, r1
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009876:	7afb      	ldrb	r3, [r7, #11]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d16e      	bne.n	800995a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009882:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800988a:	2b03      	cmp	r3, #3
 800988c:	f040 8098 	bne.w	80099c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	429a      	cmp	r2, r3
 800989a:	d913      	bls.n	80098c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	1ad2      	subs	r2, r2, r3
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bf28      	it	cs
 80098b6:	4613      	movcs	r3, r2
 80098b8:	461a      	mov	r2, r3
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f001 f9b4 	bl	800ac2a <USBD_CtlContinueRx>
 80098c2:	e07d      	b.n	80099c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d014      	beq.n	80098fc <USBD_LL_DataOutStage+0x98>
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d81d      	bhi.n	8009912 <USBD_LL_DataOutStage+0xae>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <USBD_LL_DataOutStage+0x7c>
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d003      	beq.n	80098e6 <USBD_LL_DataOutStage+0x82>
 80098de:	e018      	b.n	8009912 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75bb      	strb	r3, [r7, #22]
            break;
 80098e4:	e018      	b.n	8009918 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	4619      	mov	r1, r3
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fa64 	bl	8009dbe <USBD_CoreFindIF>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75bb      	strb	r3, [r7, #22]
            break;
 80098fa:	e00d      	b.n	8009918 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4619      	mov	r1, r3
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fa66 	bl	8009dd8 <USBD_CoreFindEP>
 800990c:	4603      	mov	r3, r0
 800990e:	75bb      	strb	r3, [r7, #22]
            break;
 8009910:	e002      	b.n	8009918 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	75bb      	strb	r3, [r7, #22]
            break;
 8009916:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009918:	7dbb      	ldrb	r3, [r7, #22]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d119      	bne.n	8009952 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b03      	cmp	r3, #3
 8009928:	d113      	bne.n	8009952 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800992a:	7dba      	ldrb	r2, [r7, #22]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	32ae      	adds	r2, #174	; 0xae
 8009930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00b      	beq.n	8009952 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800993a:	7dba      	ldrb	r2, [r7, #22]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009942:	7dba      	ldrb	r2, [r7, #22]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	32ae      	adds	r2, #174	; 0xae
 8009948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f001 f97a 	bl	800ac4c <USBD_CtlSendStatus>
 8009958:	e032      	b.n	80099c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009960:	b2db      	uxtb	r3, r3
 8009962:	4619      	mov	r1, r3
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 fa37 	bl	8009dd8 <USBD_CoreFindEP>
 800996a:	4603      	mov	r3, r0
 800996c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800996e:	7dbb      	ldrb	r3, [r7, #22]
 8009970:	2bff      	cmp	r3, #255	; 0xff
 8009972:	d025      	beq.n	80099c0 <USBD_LL_DataOutStage+0x15c>
 8009974:	7dbb      	ldrb	r3, [r7, #22]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d122      	bne.n	80099c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b03      	cmp	r3, #3
 8009984:	d117      	bne.n	80099b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009986:	7dba      	ldrb	r2, [r7, #22]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	32ae      	adds	r2, #174	; 0xae
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00f      	beq.n	80099b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009996:	7dba      	ldrb	r2, [r7, #22]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800999e:	7dba      	ldrb	r2, [r7, #22]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	32ae      	adds	r2, #174	; 0xae
 80099a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	7afa      	ldrb	r2, [r7, #11]
 80099ac:	4611      	mov	r1, r2
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	4798      	blx	r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	e000      	b.n	80099c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b086      	sub	sp, #24
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	460b      	mov	r3, r1
 80099d4:	607a      	str	r2, [r7, #4]
 80099d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d16f      	bne.n	8009abe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3314      	adds	r3, #20
 80099e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d15a      	bne.n	8009aa4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d914      	bls.n	8009a24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	1ad2      	subs	r2, r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f001 f8dc 	bl	800abce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a16:	2300      	movs	r3, #0
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f001 fffe 	bl	800ba1e <USBD_LL_PrepareReceive>
 8009a22:	e03f      	b.n	8009aa4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d11c      	bne.n	8009a6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d316      	bcc.n	8009a6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d20f      	bcs.n	8009a6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f001 f8bd 	bl	800abce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2100      	movs	r1, #0
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f001 ffdb 	bl	800ba1e <USBD_LL_PrepareReceive>
 8009a68:	e01c      	b.n	8009aa4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d10f      	bne.n	8009a96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d009      	beq.n	8009a96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a96:	2180      	movs	r1, #128	; 0x80
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f001 ff16 	bl	800b8ca <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f001 f8e7 	bl	800ac72 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d03a      	beq.n	8009b24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff fe42 	bl	8009738 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009abc:	e032      	b.n	8009b24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009abe:	7afb      	ldrb	r3, [r7, #11]
 8009ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 f985 	bl	8009dd8 <USBD_CoreFindEP>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	2bff      	cmp	r3, #255	; 0xff
 8009ad6:	d025      	beq.n	8009b24 <USBD_LL_DataInStage+0x15a>
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d122      	bne.n	8009b24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d11c      	bne.n	8009b24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009aea:	7dfa      	ldrb	r2, [r7, #23]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	32ae      	adds	r2, #174	; 0xae
 8009af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d014      	beq.n	8009b24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009afa:	7dfa      	ldrb	r2, [r7, #23]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b02:	7dfa      	ldrb	r2, [r7, #23]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	32ae      	adds	r2, #174	; 0xae
 8009b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	7afa      	ldrb	r2, [r7, #11]
 8009b10:	4611      	mov	r1, r2
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	4798      	blx	r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b1a:	7dbb      	ldrb	r3, [r7, #22]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b20:	7dbb      	ldrb	r3, [r7, #22]
 8009b22:	e000      	b.n	8009b26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d014      	beq.n	8009b94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00e      	beq.n	8009b94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	6852      	ldr	r2, [r2, #4]
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	4611      	mov	r1, r2
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009b90:	2303      	movs	r3, #3
 8009b92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b94:	2340      	movs	r3, #64	; 0x40
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 fe31 	bl	800b802 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2240      	movs	r2, #64	; 0x40
 8009bac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2180      	movs	r1, #128	; 0x80
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fe23 	bl	800b802 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2240      	movs	r2, #64	; 0x40
 8009bc6:	621a      	str	r2, [r3, #32]

  return ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d006      	beq.n	8009c14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2204      	movs	r2, #4
 8009c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d106      	bne.n	8009c4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d110      	bne.n	8009c90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	32ae      	adds	r2, #174	; 0xae
 8009cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e01c      	b.n	8009cf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d115      	bne.n	8009cf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	32ae      	adds	r2, #174	; 0xae
 8009cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	32ae      	adds	r2, #174	; 0xae
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	4611      	mov	r1, r2
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	32ae      	adds	r2, #174	; 0xae
 8009d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e01c      	b.n	8009d5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d115      	bne.n	8009d58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32ae      	adds	r2, #174	; 0xae
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	4611      	mov	r1, r2
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00e      	beq.n	8009db4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6852      	ldr	r2, [r2, #4]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	4611      	mov	r1, r2
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009de4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b086      	sub	sp, #24
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	885b      	ldrh	r3, [r3, #2]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d920      	bls.n	8009e5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e22:	e013      	b.n	8009e4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e24:	f107 030a 	add.w	r3, r7, #10
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6978      	ldr	r0, [r7, #20]
 8009e2c:	f000 f81b 	bl	8009e66 <USBD_GetNextDesc>
 8009e30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	2b05      	cmp	r3, #5
 8009e38:	d108      	bne.n	8009e4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	789b      	ldrb	r3, [r3, #2]
 8009e42:	78fa      	ldrb	r2, [r7, #3]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d008      	beq.n	8009e5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	885b      	ldrh	r3, [r3, #2]
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	897b      	ldrh	r3, [r7, #10]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d8e5      	bhi.n	8009e24 <USBD_GetEpDesc+0x32>
 8009e58:	e000      	b.n	8009e5c <USBD_GetEpDesc+0x6a>
          break;
 8009e5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e5c:	693b      	ldr	r3, [r7, #16]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	881a      	ldrh	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4413      	add	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e92:	68fb      	ldr	r3, [r7, #12]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ebe:	8a3b      	ldrh	r3, [r7, #16]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	b21a      	sxth	r2, r3
 8009ec4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	b21b      	sxth	r3, r3
 8009ecc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ece:	89fb      	ldrh	r3, [r7, #14]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	d005      	beq.n	8009f02 <USBD_StdDevReq+0x26>
 8009ef6:	2b40      	cmp	r3, #64	; 0x40
 8009ef8:	d857      	bhi.n	8009faa <USBD_StdDevReq+0xce>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00f      	beq.n	8009f1e <USBD_StdDevReq+0x42>
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	d153      	bne.n	8009faa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	32ae      	adds	r2, #174	; 0xae
 8009f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	4798      	blx	r3
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1c:	e04a      	b.n	8009fb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	2b09      	cmp	r3, #9
 8009f24:	d83b      	bhi.n	8009f9e <USBD_StdDevReq+0xc2>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <USBD_StdDevReq+0x50>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f81 	.word	0x08009f81
 8009f30:	08009f95 	.word	0x08009f95
 8009f34:	08009f9f 	.word	0x08009f9f
 8009f38:	08009f8b 	.word	0x08009f8b
 8009f3c:	08009f9f 	.word	0x08009f9f
 8009f40:	08009f5f 	.word	0x08009f5f
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f9f 	.word	0x08009f9f
 8009f4c:	08009f77 	.word	0x08009f77
 8009f50:	08009f69 	.word	0x08009f69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa3c 	bl	800a3d4 <USBD_GetDescriptor>
          break;
 8009f5c:	e024      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fbcb 	bl	800a6fc <USBD_SetAddress>
          break;
 8009f66:	e01f      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fc0a 	bl	800a784 <USBD_SetConfig>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73fb      	strb	r3, [r7, #15]
          break;
 8009f74:	e018      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fcad 	bl	800a8d8 <USBD_GetConfig>
          break;
 8009f7e:	e013      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fcde 	bl	800a944 <USBD_GetStatus>
          break;
 8009f88:	e00e      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fd0d 	bl	800a9ac <USBD_SetFeature>
          break;
 8009f92:	e009      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fd31 	bl	800a9fe <USBD_ClrFeature>
          break;
 8009f9c:	e004      	b.n	8009fa8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fd88 	bl	800aab6 <USBD_CtlError>
          break;
 8009fa6:	bf00      	nop
      }
      break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fd82 	bl	800aab6 <USBD_CtlError>
      break;
 8009fb2:	bf00      	nop
  }

  return ret;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop

08009fc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fd6:	2b40      	cmp	r3, #64	; 0x40
 8009fd8:	d005      	beq.n	8009fe6 <USBD_StdItfReq+0x26>
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	d852      	bhi.n	800a084 <USBD_StdItfReq+0xc4>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <USBD_StdItfReq+0x26>
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d14e      	bne.n	800a084 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d840      	bhi.n	800a076 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	889b      	ldrh	r3, [r3, #4]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d836      	bhi.n	800a06c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	889b      	ldrh	r3, [r3, #4]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fed9 	bl	8009dbe <USBD_CoreFindIF>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	2bff      	cmp	r3, #255	; 0xff
 800a014:	d01d      	beq.n	800a052 <USBD_StdItfReq+0x92>
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d11a      	bne.n	800a052 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a01c:	7bba      	ldrb	r2, [r7, #14]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	32ae      	adds	r2, #174	; 0xae
 800a022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00f      	beq.n	800a04c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a02c:	7bba      	ldrb	r2, [r7, #14]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a034:	7bba      	ldrb	r2, [r7, #14]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	32ae      	adds	r2, #174	; 0xae
 800a03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
 800a046:	4603      	mov	r3, r0
 800a048:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a04a:	e004      	b.n	800a056 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a050:	e001      	b.n	800a056 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	88db      	ldrh	r3, [r3, #6]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d110      	bne.n	800a080 <USBD_StdItfReq+0xc0>
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10d      	bne.n	800a080 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fdf1 	bl	800ac4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a06a:	e009      	b.n	800a080 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fd21 	bl	800aab6 <USBD_CtlError>
          break;
 800a074:	e004      	b.n	800a080 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fd1c 	bl	800aab6 <USBD_CtlError>
          break;
 800a07e:	e000      	b.n	800a082 <USBD_StdItfReq+0xc2>
          break;
 800a080:	bf00      	nop
      }
      break;
 800a082:	e004      	b.n	800a08e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fd15 	bl	800aab6 <USBD_CtlError>
      break;
 800a08c:	bf00      	nop
  }

  return ret;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	889b      	ldrh	r3, [r3, #4]
 800a0aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d007      	beq.n	800a0c8 <USBD_StdEPReq+0x30>
 800a0b8:	2b40      	cmp	r3, #64	; 0x40
 800a0ba:	f200 817f 	bhi.w	800a3bc <USBD_StdEPReq+0x324>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d02a      	beq.n	800a118 <USBD_StdEPReq+0x80>
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	f040 817a 	bne.w	800a3bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff fe83 	bl	8009dd8 <USBD_CoreFindEP>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0d6:	7b7b      	ldrb	r3, [r7, #13]
 800a0d8:	2bff      	cmp	r3, #255	; 0xff
 800a0da:	f000 8174 	beq.w	800a3c6 <USBD_StdEPReq+0x32e>
 800a0de:	7b7b      	ldrb	r3, [r7, #13]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f040 8170 	bne.w	800a3c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a0e6:	7b7a      	ldrb	r2, [r7, #13]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a0ee:	7b7a      	ldrb	r2, [r7, #13]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	32ae      	adds	r2, #174	; 0xae
 800a0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 8163 	beq.w	800a3c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a100:	7b7a      	ldrb	r2, [r7, #13]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	32ae      	adds	r2, #174	; 0xae
 800a106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	4798      	blx	r3
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a116:	e156      	b.n	800a3c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d008      	beq.n	800a132 <USBD_StdEPReq+0x9a>
 800a120:	2b03      	cmp	r3, #3
 800a122:	f300 8145 	bgt.w	800a3b0 <USBD_StdEPReq+0x318>
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 809b 	beq.w	800a262 <USBD_StdEPReq+0x1ca>
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d03c      	beq.n	800a1aa <USBD_StdEPReq+0x112>
 800a130:	e13e      	b.n	800a3b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d002      	beq.n	800a144 <USBD_StdEPReq+0xac>
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d016      	beq.n	800a170 <USBD_StdEPReq+0xd8>
 800a142:	e02c      	b.n	800a19e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00d      	beq.n	800a166 <USBD_StdEPReq+0xce>
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	2b80      	cmp	r3, #128	; 0x80
 800a14e:	d00a      	beq.n	800a166 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 fbb8 	bl	800b8ca <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a15a:	2180      	movs	r1, #128	; 0x80
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f001 fbb4 	bl	800b8ca <USBD_LL_StallEP>
 800a162:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a164:	e020      	b.n	800a1a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fca4 	bl	800aab6 <USBD_CtlError>
              break;
 800a16e:	e01b      	b.n	800a1a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	885b      	ldrh	r3, [r3, #2]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10e      	bne.n	800a196 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00b      	beq.n	800a196 <USBD_StdEPReq+0xfe>
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b80      	cmp	r3, #128	; 0x80
 800a182:	d008      	beq.n	800a196 <USBD_StdEPReq+0xfe>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	88db      	ldrh	r3, [r3, #6]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 fb9a 	bl	800b8ca <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fd58 	bl	800ac4c <USBD_CtlSendStatus>

              break;
 800a19c:	e004      	b.n	800a1a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fc88 	bl	800aab6 <USBD_CtlError>
              break;
 800a1a6:	bf00      	nop
          }
          break;
 800a1a8:	e107      	b.n	800a3ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d002      	beq.n	800a1bc <USBD_StdEPReq+0x124>
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d016      	beq.n	800a1e8 <USBD_StdEPReq+0x150>
 800a1ba:	e04b      	b.n	800a254 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <USBD_StdEPReq+0x146>
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b80      	cmp	r3, #128	; 0x80
 800a1c6:	d00a      	beq.n	800a1de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 fb7c 	bl	800b8ca <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1d2:	2180      	movs	r1, #128	; 0x80
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 fb78 	bl	800b8ca <USBD_LL_StallEP>
 800a1da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1dc:	e040      	b.n	800a260 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fc68 	bl	800aab6 <USBD_CtlError>
              break;
 800a1e6:	e03b      	b.n	800a260 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	885b      	ldrh	r3, [r3, #2]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d136      	bne.n	800a25e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fb82 	bl	800b908 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fd21 	bl	800ac4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff fde2 	bl	8009dd8 <USBD_CoreFindEP>
 800a214:	4603      	mov	r3, r0
 800a216:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a218:	7b7b      	ldrb	r3, [r7, #13]
 800a21a:	2bff      	cmp	r3, #255	; 0xff
 800a21c:	d01f      	beq.n	800a25e <USBD_StdEPReq+0x1c6>
 800a21e:	7b7b      	ldrb	r3, [r7, #13]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d11c      	bne.n	800a25e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a224:	7b7a      	ldrb	r2, [r7, #13]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a22c:	7b7a      	ldrb	r2, [r7, #13]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	32ae      	adds	r2, #174	; 0xae
 800a232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d010      	beq.n	800a25e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a23c:	7b7a      	ldrb	r2, [r7, #13]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	; 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a252:	e004      	b.n	800a25e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fc2d 	bl	800aab6 <USBD_CtlError>
              break;
 800a25c:	e000      	b.n	800a260 <USBD_StdEPReq+0x1c8>
              break;
 800a25e:	bf00      	nop
          }
          break;
 800a260:	e0ab      	b.n	800a3ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d002      	beq.n	800a274 <USBD_StdEPReq+0x1dc>
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d032      	beq.n	800a2d8 <USBD_StdEPReq+0x240>
 800a272:	e097      	b.n	800a3a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d007      	beq.n	800a28a <USBD_StdEPReq+0x1f2>
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
 800a27c:	2b80      	cmp	r3, #128	; 0x80
 800a27e:	d004      	beq.n	800a28a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fc17 	bl	800aab6 <USBD_CtlError>
                break;
 800a288:	e091      	b.n	800a3ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a28a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da0b      	bge.n	800a2aa <USBD_StdEPReq+0x212>
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	3310      	adds	r3, #16
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	e00b      	b.n	800a2c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	4413      	add	r3, r2
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fc61 	bl	800ab98 <USBD_CtlSendData>
              break;
 800a2d6:	e06a      	b.n	800a3ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	da11      	bge.n	800a304 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	f003 020f 	and.w	r2, r3, #15
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d117      	bne.n	800a32a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fbda 	bl	800aab6 <USBD_CtlError>
                  break;
 800a302:	e054      	b.n	800a3ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a304:	7bbb      	ldrb	r3, [r7, #14]
 800a306:	f003 020f 	and.w	r2, r3, #15
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a31a:	881b      	ldrh	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fbc7 	bl	800aab6 <USBD_CtlError>
                  break;
 800a328:	e041      	b.n	800a3ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a32a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	da0b      	bge.n	800a34a <USBD_StdEPReq+0x2b2>
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	3310      	adds	r3, #16
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	4413      	add	r3, r2
 800a346:	3304      	adds	r3, #4
 800a348:	e00b      	b.n	800a362 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	4413      	add	r3, r2
 800a360:	3304      	adds	r3, #4
 800a362:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <USBD_StdEPReq+0x2d8>
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b80      	cmp	r3, #128	; 0x80
 800a36e:	d103      	bne.n	800a378 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	e00e      	b.n	800a396 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 fae2 	bl	800b946 <USBD_LL_IsStallEP>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2201      	movs	r2, #1
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	e002      	b.n	800a396 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2202      	movs	r2, #2
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fbfb 	bl	800ab98 <USBD_CtlSendData>
              break;
 800a3a2:	e004      	b.n	800a3ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fb85 	bl	800aab6 <USBD_CtlError>
              break;
 800a3ac:	bf00      	nop
          }
          break;
 800a3ae:	e004      	b.n	800a3ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fb7f 	bl	800aab6 <USBD_CtlError>
          break;
 800a3b8:	bf00      	nop
      }
      break;
 800a3ba:	e005      	b.n	800a3c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fb79 	bl	800aab6 <USBD_CtlError>
      break;
 800a3c4:	e000      	b.n	800a3c8 <USBD_StdEPReq+0x330>
      break;
 800a3c6:	bf00      	nop
  }

  return ret;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	885b      	ldrh	r3, [r3, #2]
 800a3ee:	0a1b      	lsrs	r3, r3, #8
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	2b0e      	cmp	r3, #14
 800a3f6:	f200 8152 	bhi.w	800a69e <USBD_GetDescriptor+0x2ca>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <USBD_GetDescriptor+0x2c>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a471 	.word	0x0800a471
 800a404:	0800a489 	.word	0x0800a489
 800a408:	0800a4c9 	.word	0x0800a4c9
 800a40c:	0800a69f 	.word	0x0800a69f
 800a410:	0800a69f 	.word	0x0800a69f
 800a414:	0800a63f 	.word	0x0800a63f
 800a418:	0800a66b 	.word	0x0800a66b
 800a41c:	0800a69f 	.word	0x0800a69f
 800a420:	0800a69f 	.word	0x0800a69f
 800a424:	0800a69f 	.word	0x0800a69f
 800a428:	0800a69f 	.word	0x0800a69f
 800a42c:	0800a69f 	.word	0x0800a69f
 800a430:	0800a69f 	.word	0x0800a69f
 800a434:	0800a69f 	.word	0x0800a69f
 800a438:	0800a43d 	.word	0x0800a43d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00b      	beq.n	800a460 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	7c12      	ldrb	r2, [r2, #16]
 800a454:	f107 0108 	add.w	r1, r7, #8
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
 800a45c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a45e:	e126      	b.n	800a6ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fb27 	bl	800aab6 <USBD_CtlError>
        err++;
 800a468:	7afb      	ldrb	r3, [r7, #11]
 800a46a:	3301      	adds	r3, #1
 800a46c:	72fb      	strb	r3, [r7, #11]
      break;
 800a46e:	e11e      	b.n	800a6ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	7c12      	ldrb	r2, [r2, #16]
 800a47c:	f107 0108 	add.w	r1, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
      break;
 800a486:	e112      	b.n	800a6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	7c1b      	ldrb	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10d      	bne.n	800a4ac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a498:	f107 0208 	add.w	r2, r7, #8
 800a49c:	4610      	mov	r0, r2
 800a49e:	4798      	blx	r3
 800a4a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4aa:	e100      	b.n	800a6ae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	f107 0208 	add.w	r2, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	701a      	strb	r2, [r3, #0]
      break;
 800a4c6:	e0f2      	b.n	800a6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	885b      	ldrh	r3, [r3, #2]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	f200 80ac 	bhi.w	800a62c <USBD_GetDescriptor+0x258>
 800a4d4:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <USBD_GetDescriptor+0x108>)
 800a4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4da:	bf00      	nop
 800a4dc:	0800a4f5 	.word	0x0800a4f5
 800a4e0:	0800a529 	.word	0x0800a529
 800a4e4:	0800a55d 	.word	0x0800a55d
 800a4e8:	0800a591 	.word	0x0800a591
 800a4ec:	0800a5c5 	.word	0x0800a5c5
 800a4f0:	0800a5f9 	.word	0x0800a5f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7c12      	ldrb	r2, [r2, #16]
 800a50c:	f107 0108 	add.w	r1, r7, #8
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a516:	e091      	b.n	800a63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 facb 	bl	800aab6 <USBD_CtlError>
            err++;
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	3301      	adds	r3, #1
 800a524:	72fb      	strb	r3, [r7, #11]
          break;
 800a526:	e089      	b.n	800a63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	7c12      	ldrb	r2, [r2, #16]
 800a540:	f107 0108 	add.w	r1, r7, #8
 800a544:	4610      	mov	r0, r2
 800a546:	4798      	blx	r3
 800a548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a54a:	e077      	b.n	800a63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fab1 	bl	800aab6 <USBD_CtlError>
            err++;
 800a554:	7afb      	ldrb	r3, [r7, #11]
 800a556:	3301      	adds	r3, #1
 800a558:	72fb      	strb	r3, [r7, #11]
          break;
 800a55a:	e06f      	b.n	800a63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00b      	beq.n	800a580 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	7c12      	ldrb	r2, [r2, #16]
 800a574:	f107 0108 	add.w	r1, r7, #8
 800a578:	4610      	mov	r0, r2
 800a57a:	4798      	blx	r3
 800a57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a57e:	e05d      	b.n	800a63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa97 	bl	800aab6 <USBD_CtlError>
            err++;
 800a588:	7afb      	ldrb	r3, [r7, #11]
 800a58a:	3301      	adds	r3, #1
 800a58c:	72fb      	strb	r3, [r7, #11]
          break;
 800a58e:	e055      	b.n	800a63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	7c12      	ldrb	r2, [r2, #16]
 800a5a8:	f107 0108 	add.w	r1, r7, #8
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5b2:	e043      	b.n	800a63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa7d 	bl	800aab6 <USBD_CtlError>
            err++;
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5c2:	e03b      	b.n	800a63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7c12      	ldrb	r2, [r2, #16]
 800a5dc:	f107 0108 	add.w	r1, r7, #8
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e6:	e029      	b.n	800a63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa63 	bl	800aab6 <USBD_CtlError>
            err++;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5f6:	e021      	b.n	800a63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7c12      	ldrb	r2, [r2, #16]
 800a610:	f107 0108 	add.w	r1, r7, #8
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a61a:	e00f      	b.n	800a63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa49 	bl	800aab6 <USBD_CtlError>
            err++;
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	3301      	adds	r3, #1
 800a628:	72fb      	strb	r3, [r7, #11]
          break;
 800a62a:	e007      	b.n	800a63c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fa41 	bl	800aab6 <USBD_CtlError>
          err++;
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	3301      	adds	r3, #1
 800a638:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a63a:	bf00      	nop
      }
      break;
 800a63c:	e037      	b.n	800a6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7c1b      	ldrb	r3, [r3, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d109      	bne.n	800a65a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64e:	f107 0208 	add.w	r2, r7, #8
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
 800a656:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a658:	e029      	b.n	800a6ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fa2a 	bl	800aab6 <USBD_CtlError>
        err++;
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	3301      	adds	r3, #1
 800a666:	72fb      	strb	r3, [r7, #11]
      break;
 800a668:	e021      	b.n	800a6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	7c1b      	ldrb	r3, [r3, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10d      	bne.n	800a68e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f107 0208 	add.w	r2, r7, #8
 800a67e:	4610      	mov	r0, r2
 800a680:	4798      	blx	r3
 800a682:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3301      	adds	r3, #1
 800a688:	2207      	movs	r2, #7
 800a68a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a68c:	e00f      	b.n	800a6ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fa10 	bl	800aab6 <USBD_CtlError>
        err++;
 800a696:	7afb      	ldrb	r3, [r7, #11]
 800a698:	3301      	adds	r3, #1
 800a69a:	72fb      	strb	r3, [r7, #11]
      break;
 800a69c:	e007      	b.n	800a6ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fa08 	bl	800aab6 <USBD_CtlError>
      err++;
 800a6a6:	7afb      	ldrb	r3, [r7, #11]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a6ac:	bf00      	nop
  }

  if (err != 0U)
 800a6ae:	7afb      	ldrb	r3, [r7, #11]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d11e      	bne.n	800a6f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	88db      	ldrh	r3, [r3, #6]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d016      	beq.n	800a6ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a6bc:	893b      	ldrh	r3, [r7, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00e      	beq.n	800a6e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	88da      	ldrh	r2, [r3, #6]
 800a6c6:	893b      	ldrh	r3, [r7, #8]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bf28      	it	cs
 800a6cc:	4613      	movcs	r3, r2
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6d2:	893b      	ldrh	r3, [r7, #8]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68f9      	ldr	r1, [r7, #12]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fa5d 	bl	800ab98 <USBD_CtlSendData>
 800a6de:	e009      	b.n	800a6f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f9e7 	bl	800aab6 <USBD_CtlError>
 800a6e8:	e004      	b.n	800a6f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 faae 	bl	800ac4c <USBD_CtlSendStatus>
 800a6f0:	e000      	b.n	800a6f4 <USBD_GetDescriptor+0x320>
    return;
 800a6f2:	bf00      	nop
  }
}
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop

0800a6fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	889b      	ldrh	r3, [r3, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d131      	bne.n	800a772 <USBD_SetAddress+0x76>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	88db      	ldrh	r3, [r3, #6]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d12d      	bne.n	800a772 <USBD_SetAddress+0x76>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	885b      	ldrh	r3, [r3, #2]
 800a71a:	2b7f      	cmp	r3, #127	; 0x7f
 800a71c:	d829      	bhi.n	800a772 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a728:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b03      	cmp	r3, #3
 800a734:	d104      	bne.n	800a740 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f9bc 	bl	800aab6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73e:	e01d      	b.n	800a77c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	7bfa      	ldrb	r2, [r7, #15]
 800a744:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 f926 	bl	800b99e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa7a 	bl	800ac4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a766:	e009      	b.n	800a77c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a770:	e004      	b.n	800a77c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f99e 	bl	800aab6 <USBD_CtlError>
  }
}
 800a77a:	bf00      	nop
 800a77c:	bf00      	nop
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	885b      	ldrh	r3, [r3, #2]
 800a796:	b2da      	uxtb	r2, r3
 800a798:	4b4e      	ldr	r3, [pc, #312]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a79a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a79c:	4b4d      	ldr	r3, [pc, #308]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d905      	bls.n	800a7b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f985 	bl	800aab6 <USBD_CtlError>
    return USBD_FAIL;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e08c      	b.n	800a8ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d002      	beq.n	800a7c2 <USBD_SetConfig+0x3e>
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d029      	beq.n	800a814 <USBD_SetConfig+0x90>
 800a7c0:	e075      	b.n	800a8ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7c2:	4b44      	ldr	r3, [pc, #272]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d020      	beq.n	800a80c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7ca:	4b42      	ldr	r3, [pc, #264]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7d4:	4b3f      	ldr	r3, [pc, #252]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7fe ffb7 	bl	800974e <USBD_SetClassConfig>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d008      	beq.n	800a7fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f962 	bl	800aab6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7fa:	e065      	b.n	800a8c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fa25 	bl	800ac4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2203      	movs	r2, #3
 800a806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a80a:	e05d      	b.n	800a8c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa1d 	bl	800ac4c <USBD_CtlSendStatus>
      break;
 800a812:	e059      	b.n	800a8c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a814:	4b2f      	ldr	r3, [pc, #188]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d112      	bne.n	800a842 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2202      	movs	r2, #2
 800a820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a824:	4b2b      	ldr	r3, [pc, #172]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a82e:	4b29      	ldr	r3, [pc, #164]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7fe ffa6 	bl	8009786 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa06 	bl	800ac4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a840:	e042      	b.n	800a8c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a842:	4b24      	ldr	r3, [pc, #144]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d02a      	beq.n	800a8a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7fe ff94 	bl	8009786 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a85e:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a868:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7fe ff6d 	bl	800974e <USBD_SetClassConfig>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00f      	beq.n	800a89e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f918 	bl	800aab6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7fe ff79 	bl	8009786 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2202      	movs	r2, #2
 800a898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a89c:	e014      	b.n	800a8c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f9d4 	bl	800ac4c <USBD_CtlSendStatus>
      break;
 800a8a4:	e010      	b.n	800a8c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f9d0 	bl	800ac4c <USBD_CtlSendStatus>
      break;
 800a8ac:	e00c      	b.n	800a8c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f900 	bl	800aab6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8b6:	4b07      	ldr	r3, [pc, #28]	; (800a8d4 <USBD_SetConfig+0x150>)
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7fe ff62 	bl	8009786 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c6:	bf00      	nop
  }

  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000404c 	.word	0x2000404c

0800a8d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	88db      	ldrh	r3, [r3, #6]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d004      	beq.n	800a8f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f8e2 	bl	800aab6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8f2:	e023      	b.n	800a93c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	dc02      	bgt.n	800a906 <USBD_GetConfig+0x2e>
 800a900:	2b00      	cmp	r3, #0
 800a902:	dc03      	bgt.n	800a90c <USBD_GetConfig+0x34>
 800a904:	e015      	b.n	800a932 <USBD_GetConfig+0x5a>
 800a906:	2b03      	cmp	r3, #3
 800a908:	d00b      	beq.n	800a922 <USBD_GetConfig+0x4a>
 800a90a:	e012      	b.n	800a932 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3308      	adds	r3, #8
 800a916:	2201      	movs	r2, #1
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f93c 	bl	800ab98 <USBD_CtlSendData>
        break;
 800a920:	e00c      	b.n	800a93c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3304      	adds	r3, #4
 800a926:	2201      	movs	r2, #1
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f934 	bl	800ab98 <USBD_CtlSendData>
        break;
 800a930:	e004      	b.n	800a93c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f8be 	bl	800aab6 <USBD_CtlError>
        break;
 800a93a:	bf00      	nop
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a954:	b2db      	uxtb	r3, r3
 800a956:	3b01      	subs	r3, #1
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d81e      	bhi.n	800a99a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	88db      	ldrh	r3, [r3, #6]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d004      	beq.n	800a96e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8a5 	bl	800aab6 <USBD_CtlError>
        break;
 800a96c:	e01a      	b.n	800a9a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	f043 0202 	orr.w	r2, r3, #2
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	330c      	adds	r3, #12
 800a98e:	2202      	movs	r2, #2
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f900 	bl	800ab98 <USBD_CtlSendData>
      break;
 800a998:	e004      	b.n	800a9a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f88a 	bl	800aab6 <USBD_CtlError>
      break;
 800a9a2:	bf00      	nop
  }
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	885b      	ldrh	r3, [r3, #2]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d107      	bne.n	800a9ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f940 	bl	800ac4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9cc:	e013      	b.n	800a9f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	885b      	ldrh	r3, [r3, #2]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d10b      	bne.n	800a9ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	889b      	ldrh	r3, [r3, #4]
 800a9da:	0a1b      	lsrs	r3, r3, #8
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f930 	bl	800ac4c <USBD_CtlSendStatus>
}
 800a9ec:	e003      	b.n	800a9f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f860 	bl	800aab6 <USBD_CtlError>
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	3b01      	subs	r3, #1
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d80b      	bhi.n	800aa2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	885b      	ldrh	r3, [r3, #2]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d10c      	bne.n	800aa38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f910 	bl	800ac4c <USBD_CtlSendStatus>
      }
      break;
 800aa2c:	e004      	b.n	800aa38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f840 	bl	800aab6 <USBD_CtlError>
      break;
 800aa36:	e000      	b.n	800aa3a <USBD_ClrFeature+0x3c>
      break;
 800aa38:	bf00      	nop
  }
}
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	781a      	ldrb	r2, [r3, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	781a      	ldrb	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7ff fa17 	bl	8009ea0 <SWAPBYTE>
 800aa72:	4603      	mov	r3, r0
 800aa74:	461a      	mov	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff fa0a 	bl	8009ea0 <SWAPBYTE>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	461a      	mov	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff f9fd 	bl	8009ea0 <SWAPBYTE>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	80da      	strh	r2, [r3, #6]
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aac0:	2180      	movs	r1, #128	; 0x80
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 ff01 	bl	800b8ca <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aac8:	2100      	movs	r1, #0
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fefd 	bl	800b8ca <USBD_LL_StallEP>
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d036      	beq.n	800ab5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aaf2:	6938      	ldr	r0, [r7, #16]
 800aaf4:	f000 f836 	bl	800ab64 <USBD_GetLen>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	3301      	adds	r3, #1
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7812      	ldrb	r2, [r2, #0]
 800ab10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	3301      	adds	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	2203      	movs	r2, #3
 800ab20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	3301      	adds	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab28:	e013      	b.n	800ab52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	4413      	add	r3, r2
 800ab30:	693a      	ldr	r2, [r7, #16]
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	613b      	str	r3, [r7, #16]
    idx++;
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	4413      	add	r3, r2
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e7      	bne.n	800ab2a <USBD_GetString+0x52>
 800ab5a:	e000      	b.n	800ab5e <USBD_GetString+0x86>
    return;
 800ab5c:	bf00      	nop
  }
}
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab74:	e005      	b.n	800ab82 <USBD_GetLen+0x1e>
  {
    len++;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1f5      	bne.n	800ab76 <USBD_GetLen+0x12>
  }

  return len;
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	2100      	movs	r1, #0
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f000 ff0c 	bl	800b9dc <USBD_LL_Transmit>

  return USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	60b9      	str	r1, [r7, #8]
 800abd8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	2100      	movs	r1, #0
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fefb 	bl	800b9dc <USBD_LL_Transmit>

  return USBD_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2203      	movs	r2, #3
 800ac00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	2100      	movs	r1, #0
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 feff 	bl	800ba1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	60f8      	str	r0, [r7, #12]
 800ac32:	60b9      	str	r1, [r7, #8]
 800ac34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 feee 	bl	800ba1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2204      	movs	r2, #4
 800ac58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2100      	movs	r1, #0
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 feba 	bl	800b9dc <USBD_LL_Transmit>

  return USBD_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac82:	2300      	movs	r3, #0
 800ac84:	2200      	movs	r2, #0
 800ac86:	2100      	movs	r1, #0
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fec8 	bl	800ba1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <build_examples>:

extern int deviceMode;


void build_examples(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
    unsigned char test_cnt = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	71fb      	strb	r3, [r7, #7]
    test_cnt++;
#endif

#ifdef TEST_DS_TWR_INITIATOR

    if (deviceMode == 1){
 800aca2:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <build_examples+0x5c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d109      	bne.n	800acbe <build_examples+0x26>
    extern int ds_twr_initiator(void);

    example_pointer = ds_twr_initiator;
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <build_examples+0x60>)
 800acac:	4a13      	ldr	r2, [pc, #76]	; (800acfc <build_examples+0x64>)
 800acae:	601a      	str	r2, [r3, #0]
    test_cnt++;
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	3301      	adds	r3, #1
 800acb4:	71fb      	strb	r3, [r7, #7]
    deviceMode = 1;
 800acb6:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <build_examples+0x5c>)
 800acb8:	2201      	movs	r2, #1
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	e00c      	b.n	800acd8 <build_examples+0x40>
    } else if (deviceMode == 2){
 800acbe:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <build_examples+0x5c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d108      	bne.n	800acd8 <build_examples+0x40>
#endif

#ifdef TEST_DS_TWR_RESPONDER
    extern int ds_twr_responder(void);

    example_pointer = ds_twr_responder;
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <build_examples+0x60>)
 800acc8:	4a0d      	ldr	r2, [pc, #52]	; (800ad00 <build_examples+0x68>)
 800acca:	601a      	str	r2, [r3, #0]
    test_cnt++;
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	3301      	adds	r3, #1
 800acd0:	71fb      	strb	r3, [r7, #7]
    deviceMode = 2;
 800acd2:	4b08      	ldr	r3, [pc, #32]	; (800acf4 <build_examples+0x5c>)
 800acd4:	2202      	movs	r2, #2
 800acd6:	601a      	str	r2, [r3, #0]

    example_pointer = simple_aes;
    test_cnt++;
#endif
    // Check that only 1 test was enabled in test_selection.h file
    assert(test_cnt == 1);
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d006      	beq.n	800acec <build_examples+0x54>
 800acde:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <build_examples+0x6c>)
 800ace0:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <build_examples+0x70>)
 800ace2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800ace6:	4809      	ldr	r0, [pc, #36]	; (800ad0c <build_examples+0x74>)
 800ace8:	f00e fee6 	bl	8019ab8 <__assert_func>
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	20004040 	.word	0x20004040
 800acf8:	20004050 	.word	0x20004050
 800acfc:	080010a1 	.word	0x080010a1
 800ad00:	08001499 	.word	0x08001499
 800ad04:	08020240 	.word	0x08020240
 800ad08:	08020310 	.word	0x08020310
 800ad0c:	08020250 	.word	0x08020250

0800ad10 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 800ad10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 800ad18:	f04f 0200 	mov.w	r2, #0
 800ad1c:	f04f 0300 	mov.w	r3, #0
 800ad20:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 800ad24:	463b      	mov	r3, r7
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 fc92 	bl	800c650 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	71fb      	strb	r3, [r7, #7]
 800ad30:	e023      	b.n	800ad7a <get_tx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 800ad32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	020b      	lsls	r3, r1, #8
 800ad40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad44:	0202      	lsls	r2, r0, #8
 800ad46:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 800ad4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad4e:	3310      	adds	r3, #16
 800ad50:	443b      	add	r3, r7
 800ad52:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2200      	movs	r2, #0
 800ad5a:	461c      	mov	r4, r3
 800ad5c:	4615      	mov	r5, r2
 800ad5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad62:	ea42 0804 	orr.w	r8, r2, r4
 800ad66:	ea43 0905 	orr.w	r9, r3, r5
 800ad6a:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 800ad6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	3b01      	subs	r3, #1
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	71fb      	strb	r3, [r7, #7]
 800ad7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	dad7      	bge.n	800ad32 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 800ad82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800ad86:	4610      	mov	r0, r2
 800ad88:	4619      	mov	r1, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ad92 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 800ad92:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 800ad9a:	f04f 0200 	mov.w	r2, #0
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 800ada6:	463b      	mov	r3, r7
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 fc5f 	bl	800c66c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 800adae:	2304      	movs	r3, #4
 800adb0:	71fb      	strb	r3, [r7, #7]
 800adb2:	e023      	b.n	800adfc <get_rx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 800adb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adb8:	f04f 0200 	mov.w	r2, #0
 800adbc:	f04f 0300 	mov.w	r3, #0
 800adc0:	020b      	lsls	r3, r1, #8
 800adc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800adc6:	0202      	lsls	r2, r0, #8
 800adc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 800adcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800add0:	3310      	adds	r3, #16
 800add2:	443b      	add	r3, r7
 800add4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2200      	movs	r2, #0
 800addc:	461c      	mov	r4, r3
 800adde:	4615      	mov	r5, r2
 800ade0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ade4:	ea42 0804 	orr.w	r8, r2, r4
 800ade8:	ea43 0905 	orr.w	r9, r3, r5
 800adec:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 800adf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	3b01      	subs	r3, #1
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	71fb      	strb	r3, [r7, #7]
 800adfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	dad7      	bge.n	800adb4 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 800ae04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ae14 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
    uint8_t i;
    *ts = 0;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2200      	movs	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	e010      	b.n	800ae4c <final_msg_get_ts+0x38>
    {
        *ts += ((uint32_t)ts_field[i] << (i * 8));
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	440b      	add	r3, r1
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4619      	mov	r1, r3
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae40:	441a      	add	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d9eb      	bls.n	800ae2a <final_msg_get_ts+0x16>
    }
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_set_ts(uint8_t *ts_field, uint64_t ts)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	75fb      	strb	r3, [r7, #23]
 800ae70:	e013      	b.n	800ae9a <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8_t)ts;
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4413      	add	r3, r2
 800ae78:	783a      	ldrb	r2, [r7, #0]
 800ae7a:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 800ae7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae80:	f04f 0200 	mov.w	r2, #0
 800ae84:	f04f 0300 	mov.w	r3, #0
 800ae88:	0a02      	lsrs	r2, r0, #8
 800ae8a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ae8e:	0a0b      	lsrs	r3, r1, #8
 800ae90:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	3301      	adds	r3, #1
 800ae98:	75fb      	strb	r3, [r7, #23]
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d9e8      	bls.n	800ae72 <final_msg_set_ts+0x12>
    }
}
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b088      	sub	sp, #32
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
 800aeba:	603b      	str	r3, [r7, #0]
	uint32_t StartTime = HAL_GetTick();
 800aebc:	f7f7 fe82 	bl	8002bc4 <HAL_GetTick>
 800aec0:	6178      	str	r0, [r7, #20]
    uint32_t lo_result_tmp = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	61fb      	str	r3, [r7, #28]
    uint32_t hi_result_tmp = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	61bb      	str	r3, [r7, #24]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01c      	beq.n	800af0a <waitforsysstatus+0x5c>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 800aed0:	e012      	b.n	800aef8 <waitforsysstatus+0x4a>
        {
        	if ((HAL_GetTick() - StartTime)>500){
 800aed2:	f7f7 fe77 	bl	8002bc4 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800aee0:	d828      	bhi.n	800af34 <waitforsysstatus+0x86>
        		break;
        	}
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <waitforsysstatus+0x4a>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 800aee8:	f001 fc96 	bl	800c818 <dwt_readsysstatushi>
 800aeec:	61b8      	str	r0, [r7, #24]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	4013      	ands	r3, r2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11f      	bne.n	800af38 <waitforsysstatus+0x8a>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 800aef8:	f001 fc7c 	bl	800c7f4 <dwt_readsysstatuslo>
 800aefc:	61f8      	str	r0, [r7, #28]
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4013      	ands	r3, r2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0e4      	beq.n	800aed2 <waitforsysstatus+0x24>
 800af08:	e019      	b.n	800af3e <waitforsysstatus+0x90>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d016      	beq.n	800af3e <waitforsysstatus+0x90>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) {
 800af10:	e007      	b.n	800af22 <waitforsysstatus+0x74>
        	if ((HAL_GetTick() - StartTime)>500){
 800af12:	f7f7 fe57 	bl	8002bc4 <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800af20:	d80c      	bhi.n	800af3c <waitforsysstatus+0x8e>
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) {
 800af22:	f001 fc79 	bl	800c818 <dwt_readsysstatushi>
 800af26:	61b8      	str	r0, [r7, #24]
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	4013      	ands	r3, r2
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0ef      	beq.n	800af12 <waitforsysstatus+0x64>
 800af32:	e004      	b.n	800af3e <waitforsysstatus+0x90>
        		break;
 800af34:	bf00      	nop
 800af36:	e002      	b.n	800af3e <waitforsysstatus+0x90>
                    break;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <waitforsysstatus+0x90>
        	        		break;
 800af3c:	bf00      	nop
        	        	}

        };
    }

    if (lo_result != NULL)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <waitforsysstatus+0x9c>
    {
        *lo_result = lo_result_tmp;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <waitforsysstatus+0xa8>
    {
        *hi_result = hi_result_tmp;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	601a      	str	r2, [r3, #0]
    }
}
 800af56:	bf00      	nop
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af64:	2200      	movs	r2, #0
 800af66:	4912      	ldr	r1, [pc, #72]	; (800afb0 <MX_USB_DEVICE_Init+0x50>)
 800af68:	4812      	ldr	r0, [pc, #72]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af6a:	f7fe fb73 	bl	8009654 <USBD_Init>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af74:	f7f7 faf4 	bl	8002560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af78:	490f      	ldr	r1, [pc, #60]	; (800afb8 <MX_USB_DEVICE_Init+0x58>)
 800af7a:	480e      	ldr	r0, [pc, #56]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af7c:	f7fe fb9a 	bl	80096b4 <USBD_RegisterClass>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af86:	f7f7 faeb 	bl	8002560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af8a:	490c      	ldr	r1, [pc, #48]	; (800afbc <MX_USB_DEVICE_Init+0x5c>)
 800af8c:	4809      	ldr	r0, [pc, #36]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af8e:	f7fe fa91 	bl	80094b4 <USBD_CDC_RegisterInterface>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af98:	f7f7 fae2 	bl	8002560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af9c:	4805      	ldr	r0, [pc, #20]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af9e:	f7fe fbbf 	bl	8009720 <USBD_Start>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afa8:	f7f7 fada 	bl	8002560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afac:	bf00      	nop
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000154 	.word	0x20000154
 800afb4:	20004054 	.word	0x20004054
 800afb8:	200000b4 	.word	0x200000b4
 800afbc:	20000140 	.word	0x20000140

0800afc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afc4:	2200      	movs	r2, #0
 800afc6:	4905      	ldr	r1, [pc, #20]	; (800afdc <CDC_Init_FS+0x1c>)
 800afc8:	4805      	ldr	r0, [pc, #20]	; (800afe0 <CDC_Init_FS+0x20>)
 800afca:	f7fe fa8d 	bl	80094e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afce:	4905      	ldr	r1, [pc, #20]	; (800afe4 <CDC_Init_FS+0x24>)
 800afd0:	4803      	ldr	r0, [pc, #12]	; (800afe0 <CDC_Init_FS+0x20>)
 800afd2:	f7fe faab 	bl	800952c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afd8:	4618      	mov	r0, r3
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20004b30 	.word	0x20004b30
 800afe0:	20004054 	.word	0x20004054
 800afe4:	20004330 	.word	0x20004330

0800afe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800afec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800afee:	4618      	mov	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
 800b004:	4613      	mov	r3, r2
 800b006:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	2b23      	cmp	r3, #35	; 0x23
 800b00c:	d84a      	bhi.n	800b0a4 <CDC_Control_FS+0xac>
 800b00e:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <CDC_Control_FS+0x1c>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b0a5 	.word	0x0800b0a5
 800b018:	0800b0a5 	.word	0x0800b0a5
 800b01c:	0800b0a5 	.word	0x0800b0a5
 800b020:	0800b0a5 	.word	0x0800b0a5
 800b024:	0800b0a5 	.word	0x0800b0a5
 800b028:	0800b0a5 	.word	0x0800b0a5
 800b02c:	0800b0a5 	.word	0x0800b0a5
 800b030:	0800b0a5 	.word	0x0800b0a5
 800b034:	0800b0a5 	.word	0x0800b0a5
 800b038:	0800b0a5 	.word	0x0800b0a5
 800b03c:	0800b0a5 	.word	0x0800b0a5
 800b040:	0800b0a5 	.word	0x0800b0a5
 800b044:	0800b0a5 	.word	0x0800b0a5
 800b048:	0800b0a5 	.word	0x0800b0a5
 800b04c:	0800b0a5 	.word	0x0800b0a5
 800b050:	0800b0a5 	.word	0x0800b0a5
 800b054:	0800b0a5 	.word	0x0800b0a5
 800b058:	0800b0a5 	.word	0x0800b0a5
 800b05c:	0800b0a5 	.word	0x0800b0a5
 800b060:	0800b0a5 	.word	0x0800b0a5
 800b064:	0800b0a5 	.word	0x0800b0a5
 800b068:	0800b0a5 	.word	0x0800b0a5
 800b06c:	0800b0a5 	.word	0x0800b0a5
 800b070:	0800b0a5 	.word	0x0800b0a5
 800b074:	0800b0a5 	.word	0x0800b0a5
 800b078:	0800b0a5 	.word	0x0800b0a5
 800b07c:	0800b0a5 	.word	0x0800b0a5
 800b080:	0800b0a5 	.word	0x0800b0a5
 800b084:	0800b0a5 	.word	0x0800b0a5
 800b088:	0800b0a5 	.word	0x0800b0a5
 800b08c:	0800b0a5 	.word	0x0800b0a5
 800b090:	0800b0a5 	.word	0x0800b0a5
 800b094:	0800b0a5 	.word	0x0800b0a5
 800b098:	0800b0a5 	.word	0x0800b0a5
 800b09c:	0800b0a5 	.word	0x0800b0a5
 800b0a0:	0800b0a5 	.word	0x0800b0a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0a4:	bf00      	nop
  }

  return (USBD_OK);
 800b0a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	4836      	ldr	r0, [pc, #216]	; (800b19c <CDC_Receive_FS+0xe8>)
 800b0c2:	f7fe fa33 	bl	800952c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0c6:	4835      	ldr	r0, [pc, #212]	; (800b19c <CDC_Receive_FS+0xe8>)
 800b0c8:	f7fe fa8e 	bl	80095e8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	73fb      	strb	r3, [r7, #15]

    memcpy(buffer_USB_Rx+cdc_offset, Buf, len);
 800b0d2:	4b33      	ldr	r3, [pc, #204]	; (800b1a0 <CDC_Receive_FS+0xec>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b0da:	4413      	add	r3, r2
 800b0dc:	7bfa      	ldrb	r2, [r7, #15]
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f00f ffbe 	bl	801b062 <memcpy>
    memset(Buf, 0, 64);
 800b0e6:	2240      	movs	r2, #64	; 0x40
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f00f ff29 	bl	801af42 <memset>

 	cdc_offset += len;
 800b0f0:	4b2b      	ldr	r3, [pc, #172]	; (800b1a0 <CDC_Receive_FS+0xec>)
 800b0f2:	781a      	ldrb	r2, [r3, #0]
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	4b29      	ldr	r3, [pc, #164]	; (800b1a0 <CDC_Receive_FS+0xec>)
 800b0fc:	701a      	strb	r2, [r3, #0]


 if (len != 64) {
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	2b40      	cmp	r3, #64	; 0x40
 800b102:	d042      	beq.n	800b18a <CDC_Receive_FS+0xd6>

 		if (strcmp((char *)buffer_USB_Rx, "ANCHOR") == 0) {
 800b104:	4928      	ldr	r1, [pc, #160]	; (800b1a8 <CDC_Receive_FS+0xf4>)
 800b106:	4827      	ldr	r0, [pc, #156]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b108:	f7f5 f8ac 	bl	8000264 <strcmp>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d106      	bne.n	800b120 <CDC_Receive_FS+0x6c>

 			deviceMode = 1;
 800b112:	4b26      	ldr	r3, [pc, #152]	; (800b1ac <CDC_Receive_FS+0xf8>)
 800b114:	2201      	movs	r2, #1
 800b116:	601a      	str	r2, [r3, #0]
 		    extern int ds_twr_initiator(void);

 			example_pointer = ds_twr_initiator;
 800b118:	4b25      	ldr	r3, [pc, #148]	; (800b1b0 <CDC_Receive_FS+0xfc>)
 800b11a:	4a26      	ldr	r2, [pc, #152]	; (800b1b4 <CDC_Receive_FS+0x100>)
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e028      	b.n	800b172 <CDC_Receive_FS+0xbe>

 		} else if (strcmp((char *)buffer_USB_Rx, "TAG") == 0){
 800b120:	4925      	ldr	r1, [pc, #148]	; (800b1b8 <CDC_Receive_FS+0x104>)
 800b122:	4820      	ldr	r0, [pc, #128]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b124:	f7f5 f89e 	bl	8000264 <strcmp>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <CDC_Receive_FS+0x88>
 			deviceMode = 2;
 800b12e:	4b1f      	ldr	r3, [pc, #124]	; (800b1ac <CDC_Receive_FS+0xf8>)
 800b130:	2202      	movs	r2, #2
 800b132:	601a      	str	r2, [r3, #0]

 		    extern int ds_twr_responder(void);
 		    example_pointer = ds_twr_responder;
 800b134:	4b1e      	ldr	r3, [pc, #120]	; (800b1b0 <CDC_Receive_FS+0xfc>)
 800b136:	4a21      	ldr	r2, [pc, #132]	; (800b1bc <CDC_Receive_FS+0x108>)
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	e01a      	b.n	800b172 <CDC_Receive_FS+0xbe>


 		} else if ((strcmp((char *)buffer_USB_Rx, "AVERAGE") == 0)) {
 800b13c:	4920      	ldr	r1, [pc, #128]	; (800b1c0 <CDC_Receive_FS+0x10c>)
 800b13e:	4819      	ldr	r0, [pc, #100]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b140:	f7f5 f890 	bl	8000264 <strcmp>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d103      	bne.n	800b152 <CDC_Receive_FS+0x9e>

 			printData = 1; //prints the average data
 800b14a:	4b1e      	ldr	r3, [pc, #120]	; (800b1c4 <CDC_Receive_FS+0x110>)
 800b14c:	2201      	movs	r2, #1
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e00f      	b.n	800b172 <CDC_Receive_FS+0xbe>
 		} else if ((strcmp((char *)buffer_USB_Rx, "REALTIME") == 0)) {
 800b152:	491d      	ldr	r1, [pc, #116]	; (800b1c8 <CDC_Receive_FS+0x114>)
 800b154:	4813      	ldr	r0, [pc, #76]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b156:	f7f5 f885 	bl	8000264 <strcmp>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d103      	bne.n	800b168 <CDC_Receive_FS+0xb4>
 			printData = 2; //prints the continuous data
 800b160:	4b18      	ldr	r3, [pc, #96]	; (800b1c4 <CDC_Receive_FS+0x110>)
 800b162:	2202      	movs	r2, #2
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	e004      	b.n	800b172 <CDC_Receive_FS+0xbe>
 		}
 		else {

 			 sscanf((char *)buffer_USB_Rx, "%d", &AggregateDelay);
 800b168:	4a18      	ldr	r2, [pc, #96]	; (800b1cc <CDC_Receive_FS+0x118>)
 800b16a:	4919      	ldr	r1, [pc, #100]	; (800b1d0 <CDC_Receive_FS+0x11c>)
 800b16c:	480d      	ldr	r0, [pc, #52]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b16e:	f00f fe67 	bl	801ae40 <siscanf>


 		}

 		 memset(buffer_USB_Rx, 0, strlen(buffer_USB_Rx));
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b174:	f7f5 f8d4 	bl	8000320 <strlen>
 800b178:	4603      	mov	r3, r0
 800b17a:	461a      	mov	r2, r3
 800b17c:	2100      	movs	r1, #0
 800b17e:	4809      	ldr	r0, [pc, #36]	; (800b1a4 <CDC_Receive_FS+0xf0>)
 800b180:	f00f fedf 	bl	801af42 <memset>
 		 cdc_offset = 0;
 800b184:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <CDC_Receive_FS+0xec>)
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]

 }

 USBD_LL_FlushEP(&hUsbDeviceFS, (uint8_t)81);
 800b18a:	2151      	movs	r1, #81	; 0x51
 800b18c:	4803      	ldr	r0, [pc, #12]	; (800b19c <CDC_Receive_FS+0xe8>)
 800b18e:	f000 fb7d 	bl	800b88c <USBD_LL_FlushEP>


  return (USBD_OK);
 800b192:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	20004054 	.word	0x20004054
 800b1a0:	20005330 	.word	0x20005330
 800b1a4:	20005334 	.word	0x20005334
 800b1a8:	08020280 	.word	0x08020280
 800b1ac:	20004040 	.word	0x20004040
 800b1b0:	20004050 	.word	0x20004050
 800b1b4:	080010a1 	.word	0x080010a1
 800b1b8:	08020288 	.word	0x08020288
 800b1bc:	08001499 	.word	0x08001499
 800b1c0:	0802028c 	.word	0x0802028c
 800b1c4:	2000013c 	.word	0x2000013c
 800b1c8:	08020294 	.word	0x08020294
 800b1cc:	20000090 	.word	0x20000090
 800b1d0:	080202a0 	.word	0x080202a0

0800b1d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e00b      	b.n	800b212 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1fa:	887b      	ldrh	r3, [r7, #2]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	4806      	ldr	r0, [pc, #24]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b202:	f7fe f971 	bl	80094e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b206:	4805      	ldr	r0, [pc, #20]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b208:	f7fe f9ae 	bl	8009568 <USBD_CDC_TransmitPacket>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20004054 	.word	0x20004054

0800b220 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	4613      	mov	r3, r2
 800b22c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b236:	4618      	mov	r0, r3
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
	...

0800b244 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2212      	movs	r2, #18
 800b254:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b256:	4b03      	ldr	r3, [pc, #12]	; (800b264 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	20000174 	.word	0x20000174

0800b268 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2204      	movs	r2, #4
 800b278:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b27a:	4b03      	ldr	r3, [pc, #12]	; (800b288 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000194 	.word	0x20000194

0800b28c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	4603      	mov	r3, r0
 800b294:	6039      	str	r1, [r7, #0]
 800b296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d105      	bne.n	800b2aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	4907      	ldr	r1, [pc, #28]	; (800b2c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2a2:	4808      	ldr	r0, [pc, #32]	; (800b2c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2a4:	f7ff fc18 	bl	800aad8 <USBD_GetString>
 800b2a8:	e004      	b.n	800b2b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	4904      	ldr	r1, [pc, #16]	; (800b2c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2ae:	4805      	ldr	r0, [pc, #20]	; (800b2c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2b0:	f7ff fc12 	bl	800aad8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2b4:	4b02      	ldr	r3, [pc, #8]	; (800b2c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200053fc 	.word	0x200053fc
 800b2c4:	080202a4 	.word	0x080202a4

0800b2c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	4904      	ldr	r1, [pc, #16]	; (800b2e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2d8:	4804      	ldr	r0, [pc, #16]	; (800b2ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2da:	f7ff fbfd 	bl	800aad8 <USBD_GetString>
  return USBD_StrDesc;
 800b2de:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	200053fc 	.word	0x200053fc
 800b2ec:	080202bc 	.word	0x080202bc

0800b2f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	221a      	movs	r2, #26
 800b300:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b302:	f000 f855 	bl	800b3b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b306:	4b02      	ldr	r3, [pc, #8]	; (800b310 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	20000198 	.word	0x20000198

0800b314 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	6039      	str	r1, [r7, #0]
 800b31e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d105      	bne.n	800b332 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	4907      	ldr	r1, [pc, #28]	; (800b348 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b32a:	4808      	ldr	r0, [pc, #32]	; (800b34c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b32c:	f7ff fbd4 	bl	800aad8 <USBD_GetString>
 800b330:	e004      	b.n	800b33c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	4904      	ldr	r1, [pc, #16]	; (800b348 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b336:	4805      	ldr	r0, [pc, #20]	; (800b34c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b338:	f7ff fbce 	bl	800aad8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	200053fc 	.word	0x200053fc
 800b34c:	080202d0 	.word	0x080202d0

0800b350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d105      	bne.n	800b36e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	4907      	ldr	r1, [pc, #28]	; (800b384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b366:	4808      	ldr	r0, [pc, #32]	; (800b388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b368:	f7ff fbb6 	bl	800aad8 <USBD_GetString>
 800b36c:	e004      	b.n	800b378 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	4904      	ldr	r1, [pc, #16]	; (800b384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b372:	4805      	ldr	r0, [pc, #20]	; (800b388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b374:	f7ff fbb0 	bl	800aad8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	200053fc 	.word	0x200053fc
 800b388:	080202dc 	.word	0x080202dc

0800b38c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	6039      	str	r1, [r7, #0]
 800b396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	220c      	movs	r2, #12
 800b39c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b39e:	4b03      	ldr	r3, [pc, #12]	; (800b3ac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	20000188 	.word	0x20000188

0800b3b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3b6:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <Get_SerialNum+0x44>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3bc:	4b0e      	ldr	r3, [pc, #56]	; (800b3f8 <Get_SerialNum+0x48>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3c2:	4b0e      	ldr	r3, [pc, #56]	; (800b3fc <Get_SerialNum+0x4c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d009      	beq.n	800b3ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3d6:	2208      	movs	r2, #8
 800b3d8:	4909      	ldr	r1, [pc, #36]	; (800b400 <Get_SerialNum+0x50>)
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f814 	bl	800b408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3e0:	2204      	movs	r2, #4
 800b3e2:	4908      	ldr	r1, [pc, #32]	; (800b404 <Get_SerialNum+0x54>)
 800b3e4:	68b8      	ldr	r0, [r7, #8]
 800b3e6:	f000 f80f 	bl	800b408 <IntToUnicode>
  }
}
 800b3ea:	bf00      	nop
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	1fff7a10 	.word	0x1fff7a10
 800b3f8:	1fff7a14 	.word	0x1fff7a14
 800b3fc:	1fff7a18 	.word	0x1fff7a18
 800b400:	2000019a 	.word	0x2000019a
 800b404:	200001aa 	.word	0x200001aa

0800b408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b41a:	2300      	movs	r3, #0
 800b41c:	75fb      	strb	r3, [r7, #23]
 800b41e:	e027      	b.n	800b470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	0f1b      	lsrs	r3, r3, #28
 800b424:	2b09      	cmp	r3, #9
 800b426:	d80b      	bhi.n	800b440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	0f1b      	lsrs	r3, r3, #28
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	4619      	mov	r1, r3
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	440b      	add	r3, r1
 800b438:	3230      	adds	r2, #48	; 0x30
 800b43a:	b2d2      	uxtb	r2, r2
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	e00a      	b.n	800b456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	0f1b      	lsrs	r3, r3, #28
 800b444:	b2da      	uxtb	r2, r3
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	4619      	mov	r1, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	440b      	add	r3, r1
 800b450:	3237      	adds	r2, #55	; 0x37
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	011b      	lsls	r3, r3, #4
 800b45a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	3301      	adds	r3, #1
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	4413      	add	r3, r2
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	3301      	adds	r3, #1
 800b46e:	75fb      	strb	r3, [r7, #23]
 800b470:	7dfa      	ldrb	r2, [r7, #23]
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	429a      	cmp	r2, r3
 800b476:	d3d3      	bcc.n	800b420 <IntToUnicode+0x18>
  }
}
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
	...

0800b488 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b098      	sub	sp, #96	; 0x60
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	609a      	str	r2, [r3, #8]
 800b49c:	60da      	str	r2, [r3, #12]
 800b49e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b4a0:	f107 0310 	add.w	r3, r7, #16
 800b4a4:	223c      	movs	r2, #60	; 0x3c
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f00f fd4a 	bl	801af42 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4b6:	d148      	bne.n	800b54a <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b4c0:	f107 0310 	add.w	r3, r7, #16
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fa fa93 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800b4d0:	f7f7 f846 	bl	8002560 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	4a1d      	ldr	r2, [pc, #116]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b4de:	f043 0301 	orr.w	r3, r3, #1
 800b4e2:	6313      	str	r3, [r2, #48]	; 0x30
 800b4e4:	4b1b      	ldr	r3, [pc, #108]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b4f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4fe:	2303      	movs	r3, #3
 800b500:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b502:	230a      	movs	r3, #10
 800b504:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b506:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b50a:	4619      	mov	r1, r3
 800b50c:	4812      	ldr	r0, [pc, #72]	; (800b558 <HAL_PCD_MspInit+0xd0>)
 800b50e:	f7f8 fae5 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b512:	4b10      	ldr	r3, [pc, #64]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b516:	4a0f      	ldr	r2, [pc, #60]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51c:	6353      	str	r3, [r2, #52]	; 0x34
 800b51e:	2300      	movs	r3, #0
 800b520:	60bb      	str	r3, [r7, #8]
 800b522:	4b0c      	ldr	r3, [pc, #48]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b526:	4a0b      	ldr	r2, [pc, #44]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b52c:	6453      	str	r3, [r2, #68]	; 0x44
 800b52e:	4b09      	ldr	r3, [pc, #36]	; (800b554 <HAL_PCD_MspInit+0xcc>)
 800b530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b536:	60bb      	str	r3, [r7, #8]
 800b538:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b53a:	2200      	movs	r2, #0
 800b53c:	2100      	movs	r1, #0
 800b53e:	2043      	movs	r0, #67	; 0x43
 800b540:	f7f8 f9f5 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b544:	2043      	movs	r0, #67	; 0x43
 800b546:	f7f8 fa0e 	bl	8003966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b54a:	bf00      	nop
 800b54c:	3760      	adds	r7, #96	; 0x60
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	40023800 	.word	0x40023800
 800b558:	40020000 	.word	0x40020000

0800b55c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b570:	4619      	mov	r1, r3
 800b572:	4610      	mov	r0, r2
 800b574:	f7fe f921 	bl	80097ba <USBD_LL_SetupStage>
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b592:	78fa      	ldrb	r2, [r7, #3]
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	4613      	mov	r3, r2
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	440b      	add	r3, r1
 800b5a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f7fe f95b 	bl	8009864 <USBD_LL_DataOutStage>
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b5c8:	78fa      	ldrb	r2, [r7, #3]
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	440b      	add	r3, r1
 800b5d6:	3320      	adds	r3, #32
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f7fe f9f4 	bl	80099ca <USBD_LL_DataInStage>
}
 800b5e2:	bf00      	nop
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe fb2e 	bl	8009c5a <USBD_LL_SOF>
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b60e:	2301      	movs	r3, #1
 800b610:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	79db      	ldrb	r3, [r3, #7]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d001      	beq.n	800b61e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b61a:	f7f6 ffa1 	bl	8002560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b624:	7bfa      	ldrb	r2, [r7, #15]
 800b626:	4611      	mov	r1, r2
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe fad2 	bl	8009bd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b634:	4618      	mov	r0, r3
 800b636:	f7fe fa7a 	bl	8009b2e <USBD_LL_Reset>
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe facd 	bl	8009bf2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6812      	ldr	r2, [r2, #0]
 800b666:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b66a:	f043 0301 	orr.w	r3, r3, #1
 800b66e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	7adb      	ldrb	r3, [r3, #11]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b678:	4b04      	ldr	r3, [pc, #16]	; (800b68c <HAL_PCD_SuspendCallback+0x48>)
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	4a03      	ldr	r2, [pc, #12]	; (800b68c <HAL_PCD_SuspendCallback+0x48>)
 800b67e:	f043 0306 	orr.w	r3, r3, #6
 800b682:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	e000ed00 	.word	0xe000ed00

0800b690 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fac3 	bl	8009c2a <USBD_LL_Resume>
}
 800b6a4:	bf00      	nop
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b6be:	78fa      	ldrb	r2, [r7, #3]
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fb1b 	bl	8009cfe <USBD_LL_IsoOUTIncomplete>
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fad7 	bl	8009c9a <USBD_LL_IsoINIncomplete>
}
 800b6ec:	bf00      	nop
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe fb2d 	bl	8009d62 <USBD_LL_DevConnected>
}
 800b708:	bf00      	nop
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe fb2a 	bl	8009d78 <USBD_LL_DevDisconnected>
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d13f      	bne.n	800b7bc <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b73c:	4a22      	ldr	r2, [pc, #136]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a20      	ldr	r2, [pc, #128]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b748:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b74c:	4b1e      	ldr	r3, [pc, #120]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b74e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b752:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b754:	4b1c      	ldr	r3, [pc, #112]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b756:	2206      	movs	r2, #6
 800b758:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b75a:	4b1b      	ldr	r3, [pc, #108]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b75c:	2202      	movs	r2, #2
 800b75e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b760:	4b19      	ldr	r3, [pc, #100]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b762:	2200      	movs	r2, #0
 800b764:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b766:	4b18      	ldr	r3, [pc, #96]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b768:	2202      	movs	r2, #2
 800b76a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b76c:	4b16      	ldr	r3, [pc, #88]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b76e:	2200      	movs	r2, #0
 800b770:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b774:	2200      	movs	r2, #0
 800b776:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b778:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b77e:	4b12      	ldr	r3, [pc, #72]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b780:	2200      	movs	r2, #0
 800b782:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b784:	4b10      	ldr	r3, [pc, #64]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b786:	2200      	movs	r2, #0
 800b788:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b78a:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b790:	480d      	ldr	r0, [pc, #52]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b792:	f7f8 fb83 	bl	8003e9c <HAL_PCD_Init>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800b79c:	f7f6 fee0 	bl	8002560 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b7a0:	2180      	movs	r1, #128	; 0x80
 800b7a2:	4809      	ldr	r0, [pc, #36]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b7a4:	f7f9 fe0f 	bl	80053c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b7a8:	2240      	movs	r2, #64	; 0x40
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	4806      	ldr	r0, [pc, #24]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b7ae:	f7f9 fdc3 	bl	8005338 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b7b2:	2280      	movs	r2, #128	; 0x80
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	4804      	ldr	r0, [pc, #16]	; (800b7c8 <USBD_LL_Init+0x9c>)
 800b7b8:	f7f9 fdbe 	bl	8005338 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	200055fc 	.word	0x200055fc

0800b7cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7f8 fc70 	bl	80040c8 <HAL_PCD_Start>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 f9b0 	bl	800bb54 <USBD_Get_USB_Status>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	4608      	mov	r0, r1
 800b80c:	4611      	mov	r1, r2
 800b80e:	461a      	mov	r2, r3
 800b810:	4603      	mov	r3, r0
 800b812:	70fb      	strb	r3, [r7, #3]
 800b814:	460b      	mov	r3, r1
 800b816:	70bb      	strb	r3, [r7, #2]
 800b818:	4613      	mov	r3, r2
 800b81a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b82a:	78bb      	ldrb	r3, [r7, #2]
 800b82c:	883a      	ldrh	r2, [r7, #0]
 800b82e:	78f9      	ldrb	r1, [r7, #3]
 800b830:	f7f9 f971 	bl	8004b16 <HAL_PCD_EP_Open>
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f98a 	bl	800bb54 <USBD_Get_USB_Status>
 800b840:	4603      	mov	r3, r0
 800b842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b844:	7bbb      	ldrb	r3, [r7, #14]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b868:	78fa      	ldrb	r2, [r7, #3]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7f9 f9ba 	bl	8004be6 <HAL_PCD_EP_Close>
 800b872:	4603      	mov	r3, r0
 800b874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b876:	7bfb      	ldrb	r3, [r7, #15]
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 f96b 	bl	800bb54 <USBD_Get_USB_Status>
 800b87e:	4603      	mov	r3, r0
 800b880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b882:	7bbb      	ldrb	r3, [r7, #14]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7f9 fb5c 	bl	8004f68 <HAL_PCD_EP_Flush>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f94c 	bl	800bb54 <USBD_Get_USB_Status>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f9 fa53 	bl	8004d94 <HAL_PCD_EP_SetStall>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 f92d 	bl	800bb54 <USBD_Get_USB_Status>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	460b      	mov	r3, r1
 800b912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b922:	78fa      	ldrb	r2, [r7, #3]
 800b924:	4611      	mov	r1, r2
 800b926:	4618      	mov	r0, r3
 800b928:	f7f9 fa97 	bl	8004e5a <HAL_PCD_EP_ClrStall>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f90e 	bl	800bb54 <USBD_Get_USB_Status>
 800b938:	4603      	mov	r3, r0
 800b93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b958:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b95a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da0b      	bge.n	800b97a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b962:	78fb      	ldrb	r3, [r7, #3]
 800b964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b968:	68f9      	ldr	r1, [r7, #12]
 800b96a:	4613      	mov	r3, r2
 800b96c:	00db      	lsls	r3, r3, #3
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	440b      	add	r3, r1
 800b974:	3316      	adds	r3, #22
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	e00b      	b.n	800b992 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b980:	68f9      	ldr	r1, [r7, #12]
 800b982:	4613      	mov	r3, r2
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	4413      	add	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	440b      	add	r3, r1
 800b98c:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b990:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b084      	sub	sp, #16
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9b8:	78fa      	ldrb	r2, [r7, #3]
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7f9 f886 	bl	8004ace <HAL_PCD_SetAddress>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 f8c3 	bl	800bb54 <USBD_Get_USB_Status>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9fa:	7af9      	ldrb	r1, [r7, #11]
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f7f9 f98e 	bl	8004d20 <HAL_PCD_EP_Transmit>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f8a2 	bl	800bb54 <USBD_Get_USB_Status>
 800ba10:	4603      	mov	r3, r0
 800ba12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba14:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b086      	sub	sp, #24
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba3c:	7af9      	ldrb	r1, [r7, #11]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	f7f9 f91a 	bl	8004c7a <HAL_PCD_EP_Receive>
 800ba46:	4603      	mov	r3, r0
 800ba48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 f881 	bl	800bb54 <USBD_Get_USB_Status>
 800ba52:	4603      	mov	r3, r0
 800ba54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba72:	78fa      	ldrb	r2, [r7, #3]
 800ba74:	4611      	mov	r1, r2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7f9 f93a 	bl	8004cf0 <HAL_PCD_EP_GetRxCount>
 800ba7c:	4603      	mov	r3, r0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ba94:	78fb      	ldrb	r3, [r7, #3]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <HAL_PCDEx_LPM_Callback+0x18>
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d01f      	beq.n	800bade <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ba9e:	e03b      	b.n	800bb18 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	7adb      	ldrb	r3, [r3, #11]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800baa8:	f7f6 fb5e 	bl	8002168 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baac:	4b1c      	ldr	r3, [pc, #112]	; (800bb20 <HAL_PCDEx_LPM_Callback+0x98>)
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	4a1b      	ldr	r2, [pc, #108]	; (800bb20 <HAL_PCDEx_LPM_Callback+0x98>)
 800bab2:	f023 0306 	bic.w	r3, r3, #6
 800bab6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800baca:	f023 0301 	bic.w	r3, r3, #1
 800bace:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe f8a7 	bl	8009c2a <USBD_LL_Resume>
    break;
 800badc:	e01c      	b.n	800bb18 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	6812      	ldr	r2, [r2, #0]
 800baec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800baf0:	f043 0301 	orr.w	r3, r3, #1
 800baf4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe f878 	bl	8009bf2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	7adb      	ldrb	r3, [r3, #11]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d005      	beq.n	800bb16 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb0a:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <HAL_PCDEx_LPM_Callback+0x98>)
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	4a04      	ldr	r2, [pc, #16]	; (800bb20 <HAL_PCDEx_LPM_Callback+0x98>)
 800bb10:	f043 0306 	orr.w	r3, r3, #6
 800bb14:	6113      	str	r3, [r2, #16]
    break;
 800bb16:	bf00      	nop
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	e000ed00 	.word	0xe000ed00

0800bb24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb2c:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <USBD_static_malloc+0x18>)
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20005ae0 	.word	0x20005ae0

0800bb40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]

}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d817      	bhi.n	800bb98 <USBD_Get_USB_Status+0x44>
 800bb68:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <USBD_Get_USB_Status+0x1c>)
 800bb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6e:	bf00      	nop
 800bb70:	0800bb81 	.word	0x0800bb81
 800bb74:	0800bb87 	.word	0x0800bb87
 800bb78:	0800bb8d 	.word	0x0800bb8d
 800bb7c:	0800bb93 	.word	0x0800bb93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
    break;
 800bb84:	e00b      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb86:	2303      	movs	r3, #3
 800bb88:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8a:	e008      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb90:	e005      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb92:	2303      	movs	r3, #3
 800bb94:	73fb      	strb	r3, [r7, #15]
    break;
 800bb96:	e002      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9c:	bf00      	nop
  }
  return usb_status;
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800bbb2:	f000 faab 	bl	800c10c <port_GetEXT_IRQStatus>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	607b      	str	r3, [r7, #4]

    if (s)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 800bbc0:	f000 fa80 	bl	800c0c4 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 800bbc4:	687b      	ldr	r3, [r7, #4]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
    if (s)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 800bbdc:	f000 fa84 	bl	800c0e8 <port_EnableEXT_IRQ>
    }
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <deca_sleep>:

#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f97d 	bl	800bef0 <Sleep>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us) {
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
	usleep(time_us);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f956 	bl	800beb8 <usleep>
}
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	607b      	str	r3, [r7, #4]
 800bc1e:	4603      	mov	r3, r0
 800bc20:	81fb      	strh	r3, [r7, #14]
 800bc22:	4613      	mov	r3, r2
 800bc24:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800bc26:	f7ff ffc1 	bl	800bbac <decamutexon>
 800bc2a:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 800bc2c:	bf00      	nop
 800bc2e:	4b1d      	ldr	r3, [pc, #116]	; (800bca4 <writetospiwithcrc+0x90>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fa fcfa 	bl	800662c <HAL_SPI_GetState>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d1f7      	bne.n	800bc2e <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800bc3e:	4b1a      	ldr	r3, [pc, #104]	; (800bca8 <writetospiwithcrc+0x94>)
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	4a1a      	ldr	r2, [pc, #104]	; (800bcac <writetospiwithcrc+0x98>)
 800bc44:	7812      	ldrb	r2, [r2, #0]
 800bc46:	4619      	mov	r1, r3
 800bc48:	4819      	ldr	r0, [pc, #100]	; (800bcb0 <writetospiwithcrc+0x9c>)
 800bc4a:	f7f8 f8db 	bl	8003e04 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 800bc4e:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <writetospiwithcrc+0x90>)
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	89fa      	ldrh	r2, [r7, #14]
 800bc54:	230a      	movs	r3, #10
 800bc56:	68b9      	ldr	r1, [r7, #8]
 800bc58:	f7fa fba5 	bl	80063a6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 800bc5c:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <writetospiwithcrc+0x90>)
 800bc5e:	6818      	ldr	r0, [r3, #0]
 800bc60:	89ba      	ldrh	r2, [r7, #12]
 800bc62:	230a      	movs	r3, #10
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	f7fa fb9e 	bl	80063a6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 800bc6a:	4b0e      	ldr	r3, [pc, #56]	; (800bca4 <writetospiwithcrc+0x90>)
 800bc6c:	6818      	ldr	r0, [r3, #0]
 800bc6e:	230a      	movs	r3, #10
 800bc70:	2201      	movs	r2, #1
 800bc72:	f107 0120 	add.w	r1, r7, #32
 800bc76:	f7fa fb96 	bl	80063a6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800bc7a:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <writetospiwithcrc+0x94>)
 800bc7c:	8819      	ldrh	r1, [r3, #0]
 800bc7e:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <writetospiwithcrc+0x98>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bf0c      	ite	eq
 800bc86:	2301      	moveq	r3, #1
 800bc88:	2300      	movne	r3, #0
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4808      	ldr	r0, [pc, #32]	; (800bcb0 <writetospiwithcrc+0x9c>)
 800bc90:	f7f8 f8b8 	bl	8003e04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800bc94:	6978      	ldr	r0, [r7, #20]
 800bc96:	f7ff ff9a 	bl	800bbce <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 800bc9a:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	20000094 	.word	0x20000094
 800bca8:	20000098 	.word	0x20000098
 800bcac:	20003f0c 	.word	0x20003f0c
 800bcb0:	40020800 	.word	0x40020800

0800bcb4 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	81fb      	strh	r3, [r7, #14]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 800bcc6:	f7ff ff71 	bl	800bbac <decamutexon>
 800bcca:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 800bccc:	bf00      	nop
 800bcce:	4b1c      	ldr	r3, [pc, #112]	; (800bd40 <writetospi+0x8c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fa fcaa 	bl	800662c <HAL_SPI_GetState>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d1f7      	bne.n	800bcce <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800bcde:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <writetospi+0x90>)
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	4a19      	ldr	r2, [pc, #100]	; (800bd48 <writetospi+0x94>)
 800bce4:	7812      	ldrb	r2, [r2, #0]
 800bce6:	4619      	mov	r1, r3
 800bce8:	4818      	ldr	r0, [pc, #96]	; (800bd4c <writetospi+0x98>)
 800bcea:	f7f8 f88b 	bl	8003e04 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 800bcee:	4b14      	ldr	r3, [pc, #80]	; (800bd40 <writetospi+0x8c>)
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	89fa      	ldrh	r2, [r7, #14]
 800bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	f7fa fb54 	bl	80063a6 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 800bcfe:	89bb      	ldrh	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 800bd04:	4b0e      	ldr	r3, [pc, #56]	; (800bd40 <writetospi+0x8c>)
 800bd06:	6818      	ldr	r0, [r3, #0]
 800bd08:	89ba      	ldrh	r2, [r7, #12]
 800bd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	f7fa fb49 	bl	80063a6 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800bd14:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <writetospi+0x90>)
 800bd16:	8819      	ldrh	r1, [r3, #0]
 800bd18:	4b0b      	ldr	r3, [pc, #44]	; (800bd48 <writetospi+0x94>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bf0c      	ite	eq
 800bd20:	2301      	moveq	r3, #1
 800bd22:	2300      	movne	r3, #0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	461a      	mov	r2, r3
 800bd28:	4808      	ldr	r0, [pc, #32]	; (800bd4c <writetospi+0x98>)
 800bd2a:	f7f8 f86b 	bl	8003e04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800bd2e:	6978      	ldr	r0, [r7, #20]
 800bd30:	f7ff ff4d 	bl	800bbce <decamutexoff>

    return 0;
 800bd34:	2300      	movs	r3, #0
} // end writetospi()
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000094 	.word	0x20000094
 800bd44:	20000098 	.word	0x20000098
 800bd48:	20003f0c 	.word	0x20003f0c
 800bd4c:	40020800 	.word	0x40020800

0800bd50 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607b      	str	r3, [r7, #4]
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	81fb      	strh	r3, [r7, #14]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 800bd62:	f7ff ff23 	bl	800bbac <decamutexon>
 800bd66:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 800bd68:	bf00      	nop
 800bd6a:	4b2e      	ldr	r3, [pc, #184]	; (800be24 <readfromspi+0xd4>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fa fc5c 	bl	800662c <HAL_SPI_GetState>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d1f7      	bne.n	800bd6a <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800bd7a:	4b2b      	ldr	r3, [pc, #172]	; (800be28 <readfromspi+0xd8>)
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	4a2b      	ldr	r2, [pc, #172]	; (800be2c <readfromspi+0xdc>)
 800bd80:	7812      	ldrb	r2, [r2, #0]
 800bd82:	4619      	mov	r1, r3
 800bd84:	482a      	ldr	r0, [pc, #168]	; (800be30 <readfromspi+0xe0>)
 800bd86:	f7f8 f83d 	bl	8003e04 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 800bd8a:	4b26      	ldr	r3, [pc, #152]	; (800be24 <readfromspi+0xd4>)
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	89fa      	ldrh	r2, [r7, #14]
 800bd90:	f04f 33ff 	mov.w	r3, #4294967295
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	f7fa fb06 	bl	80063a6 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 800bd9a:	bf00      	nop
 800bd9c:	4b21      	ldr	r3, [pc, #132]	; (800be24 <readfromspi+0xd4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d1f7      	bne.n	800bd9c <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 800bdac:	e01f      	b.n	800bdee <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 800bdae:	bf00      	nop
 800bdb0:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <readfromspi+0xd4>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f003 0302 	and.w	r3, r3, #2
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d1f7      	bne.n	800bdb0 <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 800bdc0:	4b18      	ldr	r3, [pc, #96]	; (800be24 <readfromspi+0xd4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 800bdca:	bf00      	nop
 800bdcc:	4b15      	ldr	r3, [pc, #84]	; (800be24 <readfromspi+0xd4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d1f7      	bne.n	800bdcc <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 800bddc:	4b11      	ldr	r3, [pc, #68]	; (800be24 <readfromspi+0xd4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68d9      	ldr	r1, [r3, #12]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	607a      	str	r2, [r7, #4]
 800bdea:	b2ca      	uxtb	r2, r1
 800bdec:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 800bdee:	89bb      	ldrh	r3, [r7, #12]
 800bdf0:	1e5a      	subs	r2, r3, #1
 800bdf2:	81ba      	strh	r2, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1da      	bne.n	800bdae <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800bdf8:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <readfromspi+0xd8>)
 800bdfa:	8819      	ldrh	r1, [r3, #0]
 800bdfc:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <readfromspi+0xdc>)
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	bf0c      	ite	eq
 800be04:	2301      	moveq	r3, #1
 800be06:	2300      	movne	r3, #0
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	4808      	ldr	r0, [pc, #32]	; (800be30 <readfromspi+0xe0>)
 800be0e:	f7f7 fff9 	bl	8003e04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800be12:	6978      	ldr	r0, [r7, #20]
 800be14:	f7ff fedb 	bl	800bbce <decamutexoff>

    return 0;
 800be18:	2300      	movs	r3, #0
} // end readfromspi()
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20000094 	.word	0x20000094
 800be28:	20000098 	.word	0x20000098
 800be2c:	20003f0c 	.word	0x20003f0c
 800be30:	40020800 	.word	0x40020800

0800be34 <__NVIC_EnableIRQ>:
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be42:	2b00      	cmp	r3, #0
 800be44:	db0b      	blt.n	800be5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	f003 021f 	and.w	r2, r3, #31
 800be4c:	4907      	ldr	r1, [pc, #28]	; (800be6c <__NVIC_EnableIRQ+0x38>)
 800be4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be52:	095b      	lsrs	r3, r3, #5
 800be54:	2001      	movs	r0, #1
 800be56:	fa00 f202 	lsl.w	r2, r0, r2
 800be5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800be5e:	bf00      	nop
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	e000e100 	.word	0xe000e100

0800be70 <__NVIC_DisableIRQ>:
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	db12      	blt.n	800bea8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be82:	79fb      	ldrb	r3, [r7, #7]
 800be84:	f003 021f 	and.w	r2, r3, #31
 800be88:	490a      	ldr	r1, [pc, #40]	; (800beb4 <__NVIC_DisableIRQ+0x44>)
 800be8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be8e:	095b      	lsrs	r3, r3, #5
 800be90:	2001      	movs	r0, #1
 800be92:	fa00 f202 	lsl.w	r2, r0, r2
 800be96:	3320      	adds	r3, #32
 800be98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800be9c:	f3bf 8f4f 	dsb	sy
}
 800bea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bea2:	f3bf 8f6f 	isb	sy
}
 800bea6:	bf00      	nop
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	e000e100 	.word	0xe000e100

0800beb8 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	4613      	mov	r3, r2
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e003      	b.n	800beda <usleep+0x22>
    {
        __NOP();
 800bed2:	bf00      	nop
    for (i = 0; i < usec; i++)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d3f7      	bcc.n	800bed2 <usleep+0x1a>
    }
    return 0;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7f6 fe6f 	bl	8002bdc <HAL_Delay>
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 800bf12:	4a0c      	ldr	r2, [pc, #48]	; (800bf44 <EXTI_GetITEnStatus+0x3c>)
 800bf14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf18:	095b      	lsrs	r3, r3, #5
 800bf1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	f003 031f 	and.w	r3, r3, #31
 800bf24:	fa22 f303 	lsr.w	r3, r2, r3
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	bf14      	ite	ne
 800bf30:	2301      	movne	r3, #1
 800bf32:	2300      	moveq	r3, #0
 800bf34:	b2db      	uxtb	r3, r3
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	e000e100 	.word	0xe000e100

0800bf48 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bf52:	2311      	movs	r3, #17
 800bf54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf56:	2300      	movs	r3, #0
 800bf58:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800bf5a:	1d3b      	adds	r3, r7, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	480a      	ldr	r0, [pc, #40]	; (800bf88 <reset_DWIC+0x40>)
 800bf60:	f7f7 fdbc 	bl	8003adc <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800bf64:	2200      	movs	r2, #0
 800bf66:	2101      	movs	r1, #1
 800bf68:	4807      	ldr	r0, [pc, #28]	; (800bf88 <reset_DWIC+0x40>)
 800bf6a:	f7f7 ff4b 	bl	8003e04 <HAL_GPIO_WritePin>

    usleep(1);
 800bf6e:	2001      	movs	r0, #1
 800bf70:	f7ff ffa2 	bl	800beb8 <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 800bf74:	2000      	movs	r0, #0
 800bf76:	f000 f809 	bl	800bf8c <setup_DWICRSTnIRQ>
    Sleep(2);
 800bf7a:	2002      	movs	r0, #2
 800bf7c:	f7ff ffb8 	bl	800bef0 <Sleep>
}
 800bf80:	bf00      	nop
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	40020800 	.word	0x40020800

0800bf8c <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d015      	beq.n	800bfc6 <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bf9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800bfa2:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800bfa8:	f107 030c 	add.w	r3, r7, #12
 800bfac:	4619      	mov	r1, r3
 800bfae:	4813      	ldr	r0, [pc, #76]	; (800bffc <setup_DWICRSTnIRQ+0x70>)
 800bfb0:	f7f7 fd94 	bl	8003adc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 800bfb4:	2006      	movs	r0, #6
 800bfb6:	f7f7 fcd6 	bl	8003966 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2105      	movs	r1, #5
 800bfbe:	2006      	movs	r0, #6
 800bfc0:	f7f7 fcb5 	bl	800392e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800bfc4:	e015      	b.n	800bff2 <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 800bfc6:	2006      	movs	r0, #6
 800bfc8:	f7f7 fcdb 	bl	8003982 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bfd0:	2311      	movs	r3, #17
 800bfd2:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800bfdc:	f107 030c 	add.w	r3, r7, #12
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4806      	ldr	r0, [pc, #24]	; (800bffc <setup_DWICRSTnIRQ+0x70>)
 800bfe4:	f7f7 fd7a 	bl	8003adc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800bfe8:	2201      	movs	r2, #1
 800bfea:	2101      	movs	r1, #1
 800bfec:	4803      	ldr	r0, [pc, #12]	; (800bffc <setup_DWICRSTnIRQ+0x70>)
 800bfee:	f7f7 ff09 	bl	8003e04 <HAL_GPIO_WritePin>
}
 800bff2:	bf00      	nop
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	40020800 	.word	0x40020800

0800c000 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 800c004:	2201      	movs	r2, #1
 800c006:	2102      	movs	r1, #2
 800c008:	4806      	ldr	r0, [pc, #24]	; (800c024 <wakeup_device_with_io+0x24>)
 800c00a:	f7f7 fefb 	bl	8003e04 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 800c00e:	2001      	movs	r0, #1
 800c010:	f7ff ff6e 	bl	800bef0 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 800c014:	2200      	movs	r2, #0
 800c016:	2102      	movs	r1, #2
 800c018:	4802      	ldr	r0, [pc, #8]	; (800c024 <wakeup_device_with_io+0x24>)
 800c01a:	f7f7 fef3 	bl	8003e04 <HAL_GPIO_WritePin>
}
 800c01e:	bf00      	nop
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	40020800 	.word	0x40020800

0800c028 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 800c02c:	4b05      	ldr	r3, [pc, #20]	; (800c044 <port_set_dw_ic_spi_slowrate+0x1c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2218      	movs	r2, #24
 800c032:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 800c034:	4b03      	ldr	r3, [pc, #12]	; (800c044 <port_set_dw_ic_spi_slowrate+0x1c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fa f92b 	bl	8006294 <HAL_SPI_Init>
}
 800c03e:	bf00      	nop
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000094 	.word	0x20000094

0800c048 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_8;
 800c04c:	4b05      	ldr	r3, [pc, #20]	; (800c064 <port_set_dw_ic_spi_fastrate+0x1c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2210      	movs	r2, #16
 800c052:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 800c054:	4b03      	ldr	r3, [pc, #12]	; (800c064 <port_set_dw_ic_spi_fastrate+0x1c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fa f91b 	bl	8006294 <HAL_SPI_Init>
}
 800c05e:	bf00      	nop
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20000094 	.word	0x20000094

0800c068 <HAL_GPIO_EXTI_Callback>:
 * @brief      EXTI line detection callback from HAL layer
 * @param      GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 *             i.e. DW_RESET_Pin and DW_IRQn_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 800c072:	88fb      	ldrh	r3, [r7, #6]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d003      	beq.n	800c080 <HAL_GPIO_EXTI_Callback+0x18>
 800c078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c07c:	d004      	beq.n	800c088 <HAL_GPIO_EXTI_Callback+0x20>

        break;
    }

    default:
        break;
 800c07e:	e006      	b.n	800c08e <HAL_GPIO_EXTI_Callback+0x26>
        signalResetDone = 1;
 800c080:	4b05      	ldr	r3, [pc, #20]	; (800c098 <HAL_GPIO_EXTI_Callback+0x30>)
 800c082:	2201      	movs	r2, #1
 800c084:	601a      	str	r2, [r3, #0]
        break;
 800c086:	e002      	b.n	800c08e <HAL_GPIO_EXTI_Callback+0x26>
                process_deca_irq();
 800c088:	f000 f808 	bl	800c09c <process_deca_irq>
        break;
 800c08c:	bf00      	nop
    }
}
 800c08e:	bf00      	nop
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20005d00 	.word	0x20005d00

0800c09c <process_deca_irq>:
 * @brief   main call-back for processing of DW3000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW3000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	af00      	add	r7, sp, #0
    while (port_CheckEXT_IRQ() != 0)
 800c0a0:	e006      	b.n	800c0b0 <process_deca_irq+0x14>
    {
        if (port_dwic_isr)
 800c0a2:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <process_deca_irq+0x24>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <process_deca_irq+0x14>
        {
            port_dwic_isr();
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <process_deca_irq+0x24>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4798      	blx	r3
    while (port_CheckEXT_IRQ() != 0)
 800c0b0:	f000 f846 	bl	800c140 <port_CheckEXT_IRQ>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1f3      	bne.n	800c0a2 <process_deca_irq+0x6>
        }
    } // while DW3000 IRQ line active
}
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20005d04 	.word	0x20005d04

0800c0c4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 800c0c8:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <port_DisableEXT_IRQ+0x20>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d103      	bne.n	800c0d8 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800c0d0:	2028      	movs	r0, #40	; 0x28
 800c0d2:	f7ff fecd 	bl	800be70 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 800c0d6:	e002      	b.n	800c0de <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 800c0d8:	2017      	movs	r0, #23
 800c0da:	f7ff fec9 	bl	800be70 <__NVIC_DisableIRQ>
}
 800c0de:	bf00      	nop
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20003f0d 	.word	0x20003f0d

0800c0e8 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 800c0ec:	4b06      	ldr	r3, [pc, #24]	; (800c108 <port_EnableEXT_IRQ+0x20>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800c0f4:	2028      	movs	r0, #40	; 0x28
 800c0f6:	f7ff fe9d 	bl	800be34 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 800c0fa:	e002      	b.n	800c102 <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 800c0fc:	2017      	movs	r0, #23
 800c0fe:	f7ff fe99 	bl	800be34 <__NVIC_EnableIRQ>
}
 800c102:	bf00      	nop
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20003f0d 	.word	0x20003f0d

0800c10c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <port_GetEXT_IRQStatus+0x30>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d105      	bne.n	800c126 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800c11a:	2028      	movs	r0, #40	; 0x28
 800c11c:	f7ff fef4 	bl	800bf08 <EXTI_GetITEnStatus>
 800c120:	4603      	mov	r3, r0
 800c122:	607b      	str	r3, [r7, #4]
 800c124:	e004      	b.n	800c130 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 800c126:	2017      	movs	r0, #23
 800c128:	f7ff feee 	bl	800bf08 <EXTI_GetITEnStatus>
 800c12c:	4603      	mov	r3, r0
 800c12e:	607b      	str	r3, [r7, #4]
    }
    return status;
 800c130:	687b      	ldr	r3, [r7, #4]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20003f0d 	.word	0x20003f0d

0800c140 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 800c146:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <port_CheckEXT_IRQ+0x38>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d107      	bne.n	800c15e <port_CheckEXT_IRQ+0x1e>
    {
        status = HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);;
 800c14e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c152:	480a      	ldr	r0, [pc, #40]	; (800c17c <port_CheckEXT_IRQ+0x3c>)
 800c154:	f7f7 fe3e 	bl	8003dd4 <HAL_GPIO_ReadPin>
 800c158:	4603      	mov	r3, r0
 800c15a:	607b      	str	r3, [r7, #4]
 800c15c:	e006      	b.n	800c16c <port_CheckEXT_IRQ+0x2c>
    }
    else
    {
        status = HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800c15e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c162:	4806      	ldr	r0, [pc, #24]	; (800c17c <port_CheckEXT_IRQ+0x3c>)
 800c164:	f7f7 fe36 	bl	8003dd4 <HAL_GPIO_ReadPin>
 800c168:	4603      	mov	r3, r0
 800c16a:	607b      	str	r3, [r7, #4]
    }
    return status;
 800c16c:	687b      	ldr	r3, [r7, #4]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	20003f0d 	.word	0x20003f0d
 800c17c:	40020000 	.word	0x40020000

0800c180 <interface_tx_frame>:
 800c180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c184:	b085      	sub	sp, #20
 800c186:	4605      	mov	r5, r0
 800c188:	461c      	mov	r4, r3
 800c18a:	6883      	ldr	r3, [r0, #8]
 800c18c:	695e      	ldr	r6, [r3, #20]
 800c18e:	b1e2      	cbz	r2, 800c1ca <interface_tx_frame+0x4a>
 800c190:	9102      	str	r1, [sp, #8]
 800c192:	fa1f f882 	uxth.w	r8, r2
 800c196:	f8ad 800c 	strh.w	r8, [sp, #12]
 800c19a:	f04f 0900 	mov.w	r9, #0
 800c19e:	f8ad 900e 	strh.w	r9, [sp, #14]
 800c1a2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c1a4:	ab02      	add	r3, sp, #8
 800c1a6:	464a      	mov	r2, r9
 800c1a8:	2120      	movs	r1, #32
 800c1aa:	47b8      	blx	r7
 800c1ac:	f8ad 8000 	strh.w	r8, [sp]
 800c1b0:	f8ad 9002 	strh.w	r9, [sp, #2]
 800c1b4:	68e3      	ldr	r3, [r4, #12]
 800c1b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c1ba:	f88d 3004 	strb.w	r3, [sp, #4]
 800c1be:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c1c0:	466b      	mov	r3, sp
 800c1c2:	464a      	mov	r2, r9
 800c1c4:	2137      	movs	r1, #55	; 0x37
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	47b8      	blx	r7
 800c1ca:	68e3      	ldr	r3, [r4, #12]
 800c1cc:	f013 0f1d 	tst.w	r3, #29
 800c1d0:	d005      	beq.n	800c1de <interface_tx_frame+0x5e>
 800c1d2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c1d4:	4623      	mov	r3, r4
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2105      	movs	r1, #5
 800c1da:	4628      	mov	r0, r5
 800c1dc:	47b8      	blx	r7
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	db0c      	blt.n	800c1fe <interface_tx_frame+0x7e>
 800c1e4:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c1e6:	1d23      	adds	r3, r4, #4
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2110      	movs	r1, #16
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47b8      	blx	r7
 800c1f0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c1f2:	f104 0308 	add.w	r3, r4, #8
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	2151      	movs	r1, #81	; 0x51
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b8      	blx	r7
 800c1fe:	6b76      	ldr	r6, [r6, #52]	; 0x34
 800c200:	f104 030c 	add.w	r3, r4, #12
 800c204:	2200      	movs	r2, #0
 800c206:	2104      	movs	r1, #4
 800c208:	4628      	mov	r0, r5
 800c20a:	47b0      	blx	r6
 800c20c:	b005      	add	sp, #20
 800c20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c212 <interface_get_timestamp>:
 800c212:	b530      	push	{r4, r5, lr}
 800c214:	b083      	sub	sp, #12
 800c216:	ab02      	add	r3, sp, #8
 800c218:	2400      	movs	r4, #0
 800c21a:	2500      	movs	r5, #0
 800c21c:	e963 4502 	strd	r4, r5, [r3, #-8]!
 800c220:	6882      	ldr	r2, [r0, #8]
 800c222:	6952      	ldr	r2, [r2, #20]
 800c224:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c226:	2200      	movs	r2, #0
 800c228:	215f      	movs	r1, #95	; 0x5f
 800c22a:	47a0      	blx	r4
 800c22c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c230:	b003      	add	sp, #12
 800c232:	bd30      	pop	{r4, r5, pc}

0800c234 <interface_rx_disable>:
 800c234:	b510      	push	{r4, lr}
 800c236:	6883      	ldr	r3, [r0, #8]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c23c:	2300      	movs	r3, #0
 800c23e:	461a      	mov	r2, r3
 800c240:	2103      	movs	r1, #3
 800c242:	47a0      	blx	r4
 800c244:	bd10      	pop	{r4, pc}
	...

0800c248 <interface_rx_enable>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	4604      	mov	r4, r0
 800c250:	6883      	ldr	r3, [r0, #8]
 800c252:	695d      	ldr	r5, [r3, #20]
 800c254:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800c258:	680b      	ldr	r3, [r1, #0]
 800c25a:	9303      	str	r3, [sp, #12]
 800c25c:	684a      	ldr	r2, [r1, #4]
 800c25e:	ab04      	add	r3, sp, #16
 800c260:	f843 2d08 	str.w	r2, [r3, #-8]!
 800c264:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800c266:	2200      	movs	r2, #0
 800c268:	214f      	movs	r1, #79	; 0x4f
 800c26a:	47b8      	blx	r7
 800c26c:	4607      	mov	r7, r0
 800c26e:	b118      	cbz	r0, 800c278 <interface_rx_enable+0x30>
 800c270:	4638      	mov	r0, r7
 800c272:	b004      	add	sp, #16
 800c274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c278:	68a3      	ldr	r3, [r4, #8]
 800c27a:	695a      	ldr	r2, [r3, #20]
 800c27c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800c280:	2b00      	cmp	r3, #0
 800c282:	db3c      	blt.n	800c2fe <interface_rx_enable+0xb6>
 800c284:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800c286:	ab01      	add	r3, sp, #4
 800c288:	2200      	movs	r2, #0
 800c28a:	2157      	movs	r1, #87	; 0x57
 800c28c:	4620      	mov	r0, r4
 800c28e:	47b8      	blx	r7
 800c290:	bba8      	cbnz	r0, 800c2fe <interface_rx_enable+0xb6>
 800c292:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c296:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c29a:	041b      	lsls	r3, r3, #16
 800c29c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c2a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c2ae:	f1ba 0f00 	cmp.w	sl, #0
 800c2b2:	d131      	bne.n	800c318 <interface_rx_enable+0xd0>
 800c2b4:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 800c2b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	f04f 0a01 	mov.w	sl, #1
 800c2c2:	68a3      	ldr	r3, [r4, #8]
 800c2c4:	695f      	ldr	r7, [r3, #20]
 800c2c6:	f10d 0302 	add.w	r3, sp, #2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	217b      	movs	r1, #123	; 0x7b
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800c2d2:	47b0      	blx	r6
 800c2d4:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d04e      	beq.n	800c37a <interface_rx_enable+0x132>
 800c2dc:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c2ea:	ea22 0203 	bic.w	r2, r2, r3
 800c2ee:	ab04      	add	r3, sp, #16
 800c2f0:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 800c2f4:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	216b      	movs	r1, #107	; 0x6b
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	47b8      	blx	r7
 800c2fe:	f1ba 0f00 	cmp.w	sl, #0
 800c302:	d14a      	bne.n	800c39a <interface_rx_enable+0x152>
 800c304:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c306:	2300      	movs	r3, #0
 800c308:	461a      	mov	r2, r3
 800c30a:	211f      	movs	r1, #31
 800c30c:	4620      	mov	r0, r4
 800c30e:	47a8      	blx	r5
 800c310:	4607      	mov	r7, r0
 800c312:	2800      	cmp	r0, #0
 800c314:	d150      	bne.n	800c3b8 <interface_rx_enable+0x170>
 800c316:	e7ab      	b.n	800c270 <interface_rx_enable+0x28>
 800c318:	9a03      	ldr	r2, [sp, #12]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	4698      	mov	r8, r3
 800c31e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800c322:	ea4f 1249 	mov.w	r2, r9, lsl #5
 800c326:	0158      	lsls	r0, r3, #5
 800c328:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 800c32c:	1ac0      	subs	r0, r0, r3
 800c32e:	eb61 0109 	sbc.w	r1, r1, r9
 800c332:	024b      	lsls	r3, r1, #9
 800c334:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800c338:	0242      	lsls	r2, r0, #9
 800c33a:	eb12 0008 	adds.w	r0, r2, r8
 800c33e:	eb43 0109 	adc.w	r1, r3, r9
 800c342:	018b      	lsls	r3, r1, #6
 800c344:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c348:	0182      	lsls	r2, r0, #6
 800c34a:	1a12      	subs	r2, r2, r0
 800c34c:	eb63 0301 	sbc.w	r3, r3, r1
 800c350:	4616      	mov	r6, r2
 800c352:	461f      	mov	r7, r3
 800c354:	4a31      	ldr	r2, [pc, #196]	; (800c41c <interface_rx_enable+0x1d4>)
 800c356:	2300      	movs	r3, #0
 800c358:	eb16 0008 	adds.w	r0, r6, r8
 800c35c:	eb47 0109 	adc.w	r1, r7, r9
 800c360:	f7f4 fcea 	bl	8000d38 <__aeabi_uldivmod>
 800c364:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 800c368:	ddab      	ble.n	800c2c2 <interface_rx_enable+0x7a>
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	695f      	ldr	r7, [r3, #20]
 800c36e:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 800c372:	d0a8      	beq.n	800c2c6 <interface_rx_enable+0x7e>
 800c374:	f7ff fc43 	bl	800bbfe <deca_usleep>
 800c378:	e7a5      	b.n	800c2c6 <interface_rx_enable+0x7e>
 800c37a:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800c37e:	2201      	movs	r2, #1
 800c380:	409a      	lsls	r2, r3
 800c382:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c386:	431a      	orrs	r2, r3
 800c388:	ab04      	add	r3, sp, #16
 800c38a:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 800c38e:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800c390:	2200      	movs	r2, #0
 800c392:	216b      	movs	r1, #107	; 0x6b
 800c394:	4620      	mov	r0, r4
 800c396:	47b8      	blx	r7
 800c398:	e7b1      	b.n	800c2fe <interface_rx_enable+0xb6>
 800c39a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800c39c:	ab03      	add	r3, sp, #12
 800c39e:	2200      	movs	r2, #0
 800c3a0:	2105      	movs	r1, #5
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	47b0      	blx	r6
 800c3a6:	4607      	mov	r7, r0
 800c3a8:	b930      	cbnz	r0, 800c3b8 <interface_rx_enable+0x170>
 800c3aa:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	211f      	movs	r1, #31
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	47a8      	blx	r5
 800c3b6:	4607      	mov	r7, r0
 800c3b8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f6ff af57 	blt.w	800c270 <interface_rx_enable+0x28>
 800c3c2:	68a3      	ldr	r3, [r4, #8]
 800c3c4:	695d      	ldr	r5, [r3, #20]
 800c3c6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800c3c8:	ab01      	add	r3, sp, #4
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	217b      	movs	r1, #123	; 0x7b
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	47b0      	blx	r6
 800c3d2:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800c3d6:	b18b      	cbz	r3, 800c3fc <interface_rx_enable+0x1b4>
 800c3d8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800c3dc:	2201      	movs	r2, #1
 800c3de:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800c3e6:	ea22 0203 	bic.w	r2, r2, r3
 800c3ea:	ab04      	add	r3, sp, #16
 800c3ec:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 800c3f0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	216b      	movs	r1, #107	; 0x6b
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	47a8      	blx	r5
 800c3fa:	e739      	b.n	800c270 <interface_rx_enable+0x28>
 800c3fc:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800c400:	2201      	movs	r2, #1
 800c402:	409a      	lsls	r2, r3
 800c404:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c408:	431a      	orrs	r2, r3
 800c40a:	ab04      	add	r3, sp, #16
 800c40c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 800c410:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c412:	2200      	movs	r2, #0
 800c414:	216b      	movs	r1, #107	; 0x6b
 800c416:	4620      	mov	r0, r4
 800c418:	47a8      	blx	r5
 800c41a:	e729      	b.n	800c270 <interface_rx_enable+0x28>
 800c41c:	0ee09800 	.word	0x0ee09800

0800c420 <interface_read_rx_frame>:
 800c420:	b510      	push	{r4, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	9100      	str	r1, [sp, #0]
 800c426:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c430:	6883      	ldr	r3, [r0, #8]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c436:	466b      	mov	r3, sp
 800c438:	2121      	movs	r1, #33	; 0x21
 800c43a:	47a0      	blx	r4
 800c43c:	b002      	add	sp, #8
 800c43e:	bd10      	pop	{r4, pc}

0800c440 <dwt_probe>:
 800c440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c442:	b083      	sub	sp, #12
 800c444:	6803      	ldr	r3, [r0, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d037      	beq.n	800c4ba <dwt_probe+0x7a>
 800c44a:	4a1f      	ldr	r2, [pc, #124]	; (800c4c8 <dwt_probe+0x88>)
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	4b1e      	ldr	r3, [pc, #120]	; (800c4c8 <dwt_probe+0x88>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6842      	ldr	r2, [r0, #4]
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	6882      	ldr	r2, [r0, #8]
 800c458:	605a      	str	r2, [r3, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f88d 2003 	strb.w	r2, [sp, #3]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681c      	ldr	r4, [r3, #0]
 800c464:	ab01      	add	r3, sp, #4
 800c466:	2204      	movs	r2, #4
 800c468:	f10d 0103 	add.w	r1, sp, #3
 800c46c:	2001      	movs	r0, #1
 800c46e:	47a0      	blx	r4
 800c470:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c474:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800c478:	0409      	lsls	r1, r1, #16
 800c47a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800c47e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c482:	4319      	orrs	r1, r3
 800c484:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c488:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800c48c:	4a0f      	ldr	r2, [pc, #60]	; (800c4cc <dwt_probe+0x8c>)
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <dwt_probe+0x90>)
 800c490:	429a      	cmp	r2, r3
 800c492:	d216      	bcs.n	800c4c2 <dwt_probe+0x82>
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <dwt_probe+0x88>)
 800c496:	681f      	ldr	r7, [r3, #0]
 800c498:	4613      	mov	r3, r2
 800c49a:	f04f 30ff 	mov.w	r0, #4294967295
 800c49e:	2600      	movs	r6, #0
 800c4a0:	4d0b      	ldr	r5, [pc, #44]	; (800c4d0 <dwt_probe+0x90>)
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	404a      	eors	r2, r1
 800c4a6:	685c      	ldr	r4, [r3, #4]
 800c4a8:	4222      	tst	r2, r4
 800c4aa:	bf04      	itt	eq
 800c4ac:	60bb      	streq	r3, [r7, #8]
 800c4ae:	4630      	moveq	r0, r6
 800c4b0:	331c      	adds	r3, #28
 800c4b2:	42ab      	cmp	r3, r5
 800c4b4:	d3f5      	bcc.n	800c4a2 <dwt_probe+0x62>
 800c4b6:	b003      	add	sp, #12
 800c4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ba:	4b03      	ldr	r3, [pc, #12]	; (800c4c8 <dwt_probe+0x88>)
 800c4bc:	4a05      	ldr	r2, [pc, #20]	; (800c4d4 <dwt_probe+0x94>)
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	e7c5      	b.n	800c44e <dwt_probe+0xe>
 800c4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c6:	e7f6      	b.n	800c4b6 <dwt_probe+0x76>
 800c4c8:	20005d08 	.word	0x20005d08
 800c4cc:	080001d0 	.word	0x080001d0
 800c4d0:	08000224 	.word	0x08000224
 800c4d4:	20005d0c 	.word	0x20005d0c

0800c4d8 <dwt_readdevid>:
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	2100      	movs	r1, #0
 800c4de:	ab02      	add	r3, sp, #8
 800c4e0:	f843 1d04 	str.w	r1, [r3, #-4]!
 800c4e4:	4a04      	ldr	r2, [pc, #16]	; (800c4f8 <dwt_readdevid+0x20>)
 800c4e6:	6810      	ldr	r0, [r2, #0]
 800c4e8:	6882      	ldr	r2, [r0, #8]
 800c4ea:	6912      	ldr	r2, [r2, #16]
 800c4ec:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c4ee:	460a      	mov	r2, r1
 800c4f0:	47a0      	blx	r4
 800c4f2:	9801      	ldr	r0, [sp, #4]
 800c4f4:	b002      	add	sp, #8
 800c4f6:	bd10      	pop	{r4, pc}
 800c4f8:	20005d08 	.word	0x20005d08

0800c4fc <dwt_setlnapamode>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4b05      	ldr	r3, [pc, #20]	; (800c514 <dwt_setlnapamode+0x18>)
 800c500:	681c      	ldr	r4, [r3, #0]
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800c508:	2300      	movs	r3, #0
 800c50a:	4602      	mov	r2, r0
 800c50c:	2113      	movs	r1, #19
 800c50e:	4620      	mov	r0, r4
 800c510:	47a8      	blx	r5
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	20005d08 	.word	0x20005d08

0800c518 <dwt_initialise>:
 800c518:	b508      	push	{r3, lr}
 800c51a:	4b04      	ldr	r3, [pc, #16]	; (800c52c <dwt_initialise+0x14>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	6912      	ldr	r2, [r2, #16]
 800c522:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c524:	4601      	mov	r1, r0
 800c526:	4618      	mov	r0, r3
 800c528:	4790      	blx	r2
 800c52a:	bd08      	pop	{r3, pc}
 800c52c:	20005d08 	.word	0x20005d08

0800c530 <dwt_configure>:
 800c530:	b508      	push	{r3, lr}
 800c532:	4b04      	ldr	r3, [pc, #16]	; (800c544 <dwt_configure+0x14>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	6912      	ldr	r2, [r2, #16]
 800c53a:	6812      	ldr	r2, [r2, #0]
 800c53c:	4601      	mov	r1, r0
 800c53e:	4618      	mov	r0, r3
 800c540:	4790      	blx	r2
 800c542:	bd08      	pop	{r3, pc}
 800c544:	20005d08 	.word	0x20005d08

0800c548 <dwt_configuretxrf>:
 800c548:	b508      	push	{r3, lr}
 800c54a:	4b04      	ldr	r3, [pc, #16]	; (800c55c <dwt_configuretxrf+0x14>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	6912      	ldr	r2, [r2, #16]
 800c552:	6992      	ldr	r2, [r2, #24]
 800c554:	4601      	mov	r1, r0
 800c556:	4618      	mov	r0, r3
 800c558:	4790      	blx	r2
 800c55a:	bd08      	pop	{r3, pc}
 800c55c:	20005d08 	.word	0x20005d08

0800c560 <dwt_setrxantennadelay>:
 800c560:	b510      	push	{r4, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	ab02      	add	r3, sp, #8
 800c566:	f823 0d02 	strh.w	r0, [r3, #-2]!
 800c56a:	4a05      	ldr	r2, [pc, #20]	; (800c580 <dwt_setrxantennadelay+0x20>)
 800c56c:	6810      	ldr	r0, [r2, #0]
 800c56e:	6882      	ldr	r2, [r0, #8]
 800c570:	6912      	ldr	r2, [r2, #16]
 800c572:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c574:	2200      	movs	r2, #0
 800c576:	211b      	movs	r1, #27
 800c578:	47a0      	blx	r4
 800c57a:	b002      	add	sp, #8
 800c57c:	bd10      	pop	{r4, pc}
 800c57e:	bf00      	nop
 800c580:	20005d08 	.word	0x20005d08

0800c584 <dwt_settxantennadelay>:
 800c584:	b510      	push	{r4, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	ab02      	add	r3, sp, #8
 800c58a:	f823 0d02 	strh.w	r0, [r3, #-2]!
 800c58e:	4a05      	ldr	r2, [pc, #20]	; (800c5a4 <dwt_settxantennadelay+0x20>)
 800c590:	6810      	ldr	r0, [r2, #0]
 800c592:	6882      	ldr	r2, [r0, #8]
 800c594:	6912      	ldr	r2, [r2, #16]
 800c596:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c598:	2200      	movs	r2, #0
 800c59a:	211d      	movs	r1, #29
 800c59c:	47a0      	blx	r4
 800c59e:	b002      	add	sp, #8
 800c5a0:	bd10      	pop	{r4, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20005d08 	.word	0x20005d08

0800c5a8 <dwt_writetxdata>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <dwt_writetxdata+0x18>)
 800c5ac:	681c      	ldr	r4, [r3, #0]
 800c5ae:	68a3      	ldr	r3, [r4, #8]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	685d      	ldr	r5, [r3, #4]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	460a      	mov	r2, r1
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	47a8      	blx	r5
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	20005d08 	.word	0x20005d08

0800c5c4 <dwt_writetxfctrl>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <dwt_writetxfctrl+0x18>)
 800c5c8:	681c      	ldr	r4, [r3, #0]
 800c5ca:	68a3      	ldr	r3, [r4, #8]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	689d      	ldr	r5, [r3, #8]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	460a      	mov	r2, r1
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	47a8      	blx	r5
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20005d08 	.word	0x20005d08

0800c5e0 <dwt_starttx>:
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	ab02      	add	r3, sp, #8
 800c5e6:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800c5ea:	4a05      	ldr	r2, [pc, #20]	; (800c600 <dwt_starttx+0x20>)
 800c5ec:	6810      	ldr	r0, [r2, #0]
 800c5ee:	6882      	ldr	r2, [r0, #8]
 800c5f0:	6912      	ldr	r2, [r2, #16]
 800c5f2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2104      	movs	r1, #4
 800c5f8:	47a0      	blx	r4
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	bf00      	nop
 800c600:	20005d08 	.word	0x20005d08

0800c604 <dwt_setdelayedtrxtime>:
 800c604:	b510      	push	{r4, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	ab02      	add	r3, sp, #8
 800c60a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c60e:	4a05      	ldr	r2, [pc, #20]	; (800c624 <dwt_setdelayedtrxtime+0x20>)
 800c610:	6810      	ldr	r0, [r2, #0]
 800c612:	6882      	ldr	r2, [r0, #8]
 800c614:	6912      	ldr	r2, [r2, #16]
 800c616:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c618:	2200      	movs	r2, #0
 800c61a:	2105      	movs	r1, #5
 800c61c:	47a0      	blx	r4
 800c61e:	b002      	add	sp, #8
 800c620:	bd10      	pop	{r4, pc}
 800c622:	bf00      	nop
 800c624:	20005d08 	.word	0x20005d08

0800c628 <dwt_get_dgcdecision>:
 800c628:	b510      	push	{r4, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	2200      	movs	r2, #0
 800c62e:	ab02      	add	r3, sp, #8
 800c630:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800c634:	4905      	ldr	r1, [pc, #20]	; (800c64c <dwt_get_dgcdecision+0x24>)
 800c636:	6808      	ldr	r0, [r1, #0]
 800c638:	6881      	ldr	r1, [r0, #8]
 800c63a:	6909      	ldr	r1, [r1, #16]
 800c63c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c63e:	216c      	movs	r1, #108	; 0x6c
 800c640:	47a0      	blx	r4
 800c642:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c646:	b002      	add	sp, #8
 800c648:	bd10      	pop	{r4, pc}
 800c64a:	bf00      	nop
 800c64c:	20005d08 	.word	0x20005d08

0800c650 <dwt_readtxtimestamp>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4b05      	ldr	r3, [pc, #20]	; (800c668 <dwt_readtxtimestamp+0x18>)
 800c654:	681c      	ldr	r4, [r3, #0]
 800c656:	68a3      	ldr	r3, [r4, #8]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800c65c:	4603      	mov	r3, r0
 800c65e:	2200      	movs	r2, #0
 800c660:	2132      	movs	r1, #50	; 0x32
 800c662:	4620      	mov	r0, r4
 800c664:	47a8      	blx	r5
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	20005d08 	.word	0x20005d08

0800c66c <dwt_readrxtimestamp>:
 800c66c:	b508      	push	{r3, lr}
 800c66e:	4b04      	ldr	r3, [pc, #16]	; (800c680 <dwt_readrxtimestamp+0x14>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	6912      	ldr	r2, [r2, #16]
 800c676:	6952      	ldr	r2, [r2, #20]
 800c678:	4601      	mov	r1, r0
 800c67a:	4618      	mov	r0, r3
 800c67c:	4790      	blx	r2
 800c67e:	bd08      	pop	{r3, pc}
 800c680:	20005d08 	.word	0x20005d08

0800c684 <dwt_forcetrxoff>:
 800c684:	b510      	push	{r4, lr}
 800c686:	4b05      	ldr	r3, [pc, #20]	; (800c69c <dwt_forcetrxoff+0x18>)
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	6883      	ldr	r3, [r0, #8]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c690:	2300      	movs	r3, #0
 800c692:	461a      	mov	r2, r3
 800c694:	2103      	movs	r1, #3
 800c696:	47a0      	blx	r4
 800c698:	bd10      	pop	{r4, pc}
 800c69a:	bf00      	nop
 800c69c:	20005d08 	.word	0x20005d08

0800c6a0 <dwt_rxenable>:
 800c6a0:	b508      	push	{r3, lr}
 800c6a2:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <dwt_rxenable+0x14>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	6912      	ldr	r2, [r2, #16]
 800c6aa:	6a12      	ldr	r2, [r2, #32]
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	4790      	blx	r2
 800c6b2:	bd08      	pop	{r3, pc}
 800c6b4:	20005d08 	.word	0x20005d08

0800c6b8 <dwt_setrxtimeout>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	ab02      	add	r3, sp, #8
 800c6be:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c6c2:	4a05      	ldr	r2, [pc, #20]	; (800c6d8 <dwt_setrxtimeout+0x20>)
 800c6c4:	6810      	ldr	r0, [r2, #0]
 800c6c6:	6882      	ldr	r2, [r0, #8]
 800c6c8:	6912      	ldr	r2, [r2, #16]
 800c6ca:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2151      	movs	r1, #81	; 0x51
 800c6d0:	47a0      	blx	r4
 800c6d2:	b002      	add	sp, #8
 800c6d4:	bd10      	pop	{r4, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20005d08 	.word	0x20005d08

0800c6dc <dwt_setpreambledetecttimeout>:
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	ab02      	add	r3, sp, #8
 800c6e2:	f823 0d02 	strh.w	r0, [r3, #-2]!
 800c6e6:	4a05      	ldr	r2, [pc, #20]	; (800c6fc <dwt_setpreambledetecttimeout+0x20>)
 800c6e8:	6810      	ldr	r0, [r2, #0]
 800c6ea:	6882      	ldr	r2, [r0, #8]
 800c6ec:	6912      	ldr	r2, [r2, #16]
 800c6ee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	214f      	movs	r1, #79	; 0x4f
 800c6f4:	47a0      	blx	r4
 800c6f6:	b002      	add	sp, #8
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20005d08 	.word	0x20005d08

0800c700 <dwt_checkidlerc>:
 800c700:	b510      	push	{r4, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	2200      	movs	r2, #0
 800c706:	ab02      	add	r3, sp, #8
 800c708:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800c70c:	4905      	ldr	r1, [pc, #20]	; (800c724 <dwt_checkidlerc+0x24>)
 800c70e:	6808      	ldr	r0, [r1, #0]
 800c710:	6881      	ldr	r1, [r0, #8]
 800c712:	6909      	ldr	r1, [r1, #16]
 800c714:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c716:	2158      	movs	r1, #88	; 0x58
 800c718:	47a0      	blx	r4
 800c71a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c71e:	b002      	add	sp, #8
 800c720:	bd10      	pop	{r4, pc}
 800c722:	bf00      	nop
 800c724:	20005d08 	.word	0x20005d08

0800c728 <dwt_generatecrc8>:
 800c728:	2900      	cmp	r1, #0
 800c72a:	dd0d      	ble.n	800c748 <dwt_generatecrc8+0x20>
 800c72c:	b410      	push	{r4}
 800c72e:	1e43      	subs	r3, r0, #1
 800c730:	4419      	add	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	4c05      	ldr	r4, [pc, #20]	; (800c74c <dwt_generatecrc8+0x24>)
 800c736:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c73a:	4050      	eors	r0, r2
 800c73c:	5c20      	ldrb	r0, [r4, r0]
 800c73e:	428b      	cmp	r3, r1
 800c740:	d1f9      	bne.n	800c736 <dwt_generatecrc8+0xe>
 800c742:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c746:	4770      	bx	lr
 800c748:	4610      	mov	r0, r2
 800c74a:	4770      	bx	lr
 800c74c:	08020340 	.word	0x08020340

0800c750 <dwt_setrxaftertxdelay>:
 800c750:	b510      	push	{r4, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	ab02      	add	r3, sp, #8
 800c756:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c75a:	4a05      	ldr	r2, [pc, #20]	; (800c770 <dwt_setrxaftertxdelay+0x20>)
 800c75c:	6810      	ldr	r0, [r2, #0]
 800c75e:	6882      	ldr	r2, [r0, #8]
 800c760:	6912      	ldr	r2, [r2, #16]
 800c762:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c764:	2200      	movs	r2, #0
 800c766:	2110      	movs	r1, #16
 800c768:	47a0      	blx	r4
 800c76a:	b002      	add	sp, #8
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	bf00      	nop
 800c770:	20005d08 	.word	0x20005d08

0800c774 <dwt_readrxdata>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4b05      	ldr	r3, [pc, #20]	; (800c78c <dwt_readrxdata+0x18>)
 800c778:	681c      	ldr	r4, [r3, #0]
 800c77a:	68a3      	ldr	r3, [r4, #8]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	68dd      	ldr	r5, [r3, #12]
 800c780:	4613      	mov	r3, r2
 800c782:	460a      	mov	r2, r1
 800c784:	4601      	mov	r1, r0
 800c786:	4620      	mov	r0, r4
 800c788:	47a8      	blx	r5
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	20005d08 	.word	0x20005d08

0800c790 <dwt_configciadiag>:
 800c790:	b510      	push	{r4, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	ab02      	add	r3, sp, #8
 800c796:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800c79a:	4a05      	ldr	r2, [pc, #20]	; (800c7b0 <dwt_configciadiag+0x20>)
 800c79c:	6810      	ldr	r0, [r2, #0]
 800c79e:	6882      	ldr	r2, [r0, #8]
 800c7a0:	6912      	ldr	r2, [r2, #16]
 800c7a2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2127      	movs	r1, #39	; 0x27
 800c7a8:	47a0      	blx	r4
 800c7aa:	b002      	add	sp, #8
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20005d08 	.word	0x20005d08

0800c7b4 <dwt_readdiagnostics>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <dwt_readdiagnostics+0x18>)
 800c7b8:	681c      	ldr	r4, [r3, #0]
 800c7ba:	68a3      	ldr	r3, [r4, #8]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	212f      	movs	r1, #47	; 0x2f
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	47a8      	blx	r5
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	20005d08 	.word	0x20005d08

0800c7d0 <dwt_writesysstatuslo>:
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	ab02      	add	r3, sp, #8
 800c7d6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c7da:	4a05      	ldr	r2, [pc, #20]	; (800c7f0 <dwt_writesysstatuslo+0x20>)
 800c7dc:	6810      	ldr	r0, [r2, #0]
 800c7de:	6882      	ldr	r2, [r0, #8]
 800c7e0:	6912      	ldr	r2, [r2, #16]
 800c7e2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2174      	movs	r1, #116	; 0x74
 800c7e8:	47a0      	blx	r4
 800c7ea:	b002      	add	sp, #8
 800c7ec:	bd10      	pop	{r4, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20005d08 	.word	0x20005d08

0800c7f4 <dwt_readsysstatuslo>:
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	ab02      	add	r3, sp, #8
 800c7fc:	f843 2d04 	str.w	r2, [r3, #-4]!
 800c800:	4904      	ldr	r1, [pc, #16]	; (800c814 <dwt_readsysstatuslo+0x20>)
 800c802:	6808      	ldr	r0, [r1, #0]
 800c804:	6881      	ldr	r1, [r0, #8]
 800c806:	6909      	ldr	r1, [r1, #16]
 800c808:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c80a:	2176      	movs	r1, #118	; 0x76
 800c80c:	47a0      	blx	r4
 800c80e:	9801      	ldr	r0, [sp, #4]
 800c810:	b002      	add	sp, #8
 800c812:	bd10      	pop	{r4, pc}
 800c814:	20005d08 	.word	0x20005d08

0800c818 <dwt_readsysstatushi>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	2200      	movs	r2, #0
 800c81e:	ab02      	add	r3, sp, #8
 800c820:	f843 2d04 	str.w	r2, [r3, #-4]!
 800c824:	4904      	ldr	r1, [pc, #16]	; (800c838 <dwt_readsysstatushi+0x20>)
 800c826:	6808      	ldr	r0, [r1, #0]
 800c828:	6881      	ldr	r1, [r0, #8]
 800c82a:	6909      	ldr	r1, [r1, #16]
 800c82c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c82e:	2177      	movs	r1, #119	; 0x77
 800c830:	47a0      	blx	r4
 800c832:	9801      	ldr	r0, [sp, #4]
 800c834:	b002      	add	sp, #8
 800c836:	bd10      	pop	{r4, pc}
 800c838:	20005d08 	.word	0x20005d08

0800c83c <dwt_getframelength>:
 800c83c:	b510      	push	{r4, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	2200      	movs	r2, #0
 800c842:	ab02      	add	r3, sp, #8
 800c844:	f823 2d02 	strh.w	r2, [r3, #-2]!
 800c848:	4905      	ldr	r1, [pc, #20]	; (800c860 <dwt_getframelength+0x24>)
 800c84a:	6808      	ldr	r0, [r1, #0]
 800c84c:	6881      	ldr	r1, [r0, #8]
 800c84e:	6909      	ldr	r1, [r1, #16]
 800c850:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c852:	217a      	movs	r1, #122	; 0x7a
 800c854:	47a0      	blx	r4
 800c856:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800c85a:	b002      	add	sp, #8
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	bf00      	nop
 800c860:	20005d08 	.word	0x20005d08

0800c864 <dwt_dbg_fn>:
 800c864:	2998      	cmp	r1, #152	; 0x98
 800c866:	4802      	ldr	r0, [pc, #8]	; (800c870 <dwt_dbg_fn+0xc>)
 800c868:	bf18      	it	ne
 800c86a:	2000      	movne	r0, #0
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	08020538 	.word	0x08020538

0800c874 <_deinit>:
 800c874:	4770      	bx	lr

0800c876 <dwt_xfer3xxx>:
 800c876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	4605      	mov	r5, r0
 800c87e:	460e      	mov	r6, r1
 800c880:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800c884:	1990      	adds	r0, r2, r6
 800c886:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c88a:	4432      	add	r2, r6
 800c88c:	f3c2 4204 	ubfx	r2, r2, #16, #5
 800c890:	0084      	lsls	r4, r0, #2
 800c892:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 800c896:	ea41 0204 	orr.w	r2, r1, r4
 800c89a:	0a12      	lsrs	r2, r2, #8
 800c89c:	f88d 200c 	strb.w	r2, [sp, #12]
 800c8a0:	f001 0703 	and.w	r7, r1, #3
 800c8a4:	433c      	orrs	r4, r7
 800c8a6:	f88d 400d 	strb.w	r4, [sp, #13]
 800c8aa:	461f      	mov	r7, r3
 800c8ac:	b973      	cbnz	r3, 800c8cc <dwt_xfer3xxx+0x56>
 800c8ae:	2900      	cmp	r1, #0
 800c8b0:	d05c      	beq.n	800c96c <dwt_xfer3xxx+0xf6>
 800c8b2:	0073      	lsls	r3, r6, #1
 800c8b4:	f063 037e 	orn	r3, r3, #126	; 0x7e
 800c8b8:	f88d 300c 	strb.w	r3, [sp, #12]
 800c8bc:	2401      	movs	r4, #1
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	d02f      	beq.n	800c922 <dwt_xfer3xxx+0xac>
 800c8c2:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800c8c6:	2903      	cmp	r1, #3
 800c8c8:	d90a      	bls.n	800c8e0 <dwt_xfer3xxx+0x6a>
 800c8ca:	e7fe      	b.n	800c8ca <dwt_xfer3xxx+0x54>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d14f      	bne.n	800c970 <dwt_xfer3xxx+0xfa>
 800c8d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c8d4:	d003      	beq.n	800c8de <dwt_xfer3xxx+0x68>
 800c8d6:	2900      	cmp	r1, #0
 800c8d8:	d14a      	bne.n	800c970 <dwt_xfer3xxx+0xfa>
 800c8da:	2401      	movs	r4, #1
 800c8dc:	e021      	b.n	800c922 <dwt_xfer3xxx+0xac>
 800c8de:	2401      	movs	r4, #1
 800c8e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c8e2:	7d9b      	ldrb	r3, [r3, #22]
 800c8e4:	b94b      	cbnz	r3, 800c8fa <dwt_xfer3xxx+0x84>
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	685d      	ldr	r5, [r3, #4]
 800c8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ec:	463a      	mov	r2, r7
 800c8ee:	a903      	add	r1, sp, #12
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	47a8      	blx	r5
 800c8f4:	b004      	add	sp, #16
 800c8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	a803      	add	r0, sp, #12
 800c900:	f7ff ff12 	bl	800c728 <dwt_generatecrc8>
 800c904:	4602      	mov	r2, r0
 800c906:	4639      	mov	r1, r7
 800c908:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c90a:	f7ff ff0d 	bl	800c728 <dwt_generatecrc8>
 800c90e:	682b      	ldr	r3, [r5, #0]
 800c910:	9000      	str	r0, [sp, #0]
 800c912:	689d      	ldr	r5, [r3, #8]
 800c914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c916:	463a      	mov	r2, r7
 800c918:	a903      	add	r1, sp, #12
 800c91a:	4620      	mov	r0, r4
 800c91c:	47a8      	blx	r5
 800c91e:	e7e9      	b.n	800c8f4 <dwt_xfer3xxx+0x7e>
 800c920:	2401      	movs	r4, #1
 800c922:	682b      	ldr	r3, [r5, #0]
 800c924:	f8d3 8000 	ldr.w	r8, [r3]
 800c928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c92a:	463a      	mov	r2, r7
 800c92c:	a903      	add	r1, sp, #12
 800c92e:	4620      	mov	r0, r4
 800c930:	47c0      	blx	r8
 800c932:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c934:	7d9b      	ldrb	r3, [r3, #22]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d1dc      	bne.n	800c8f4 <dwt_xfer3xxx+0x7e>
 800c93a:	2e18      	cmp	r6, #24
 800c93c:	d0da      	beq.n	800c8f4 <dwt_xfer3xxx+0x7e>
 800c93e:	2200      	movs	r2, #0
 800c940:	4621      	mov	r1, r4
 800c942:	a803      	add	r0, sp, #12
 800c944:	f7ff fef0 	bl	800c728 <dwt_generatecrc8>
 800c948:	4602      	mov	r2, r0
 800c94a:	4639      	mov	r1, r7
 800c94c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c94e:	f7ff feeb 	bl	800c728 <dwt_generatecrc8>
 800c952:	4604      	mov	r4, r0
 800c954:	2200      	movs	r2, #0
 800c956:	2118      	movs	r1, #24
 800c958:	4628      	mov	r0, r5
 800c95a:	f000 f841 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800c95e:	4284      	cmp	r4, r0
 800c960:	d0c8      	beq.n	800c8f4 <dwt_xfer3xxx+0x7e>
 800c962:	68eb      	ldr	r3, [r5, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d0c5      	beq.n	800c8f4 <dwt_xfer3xxx+0x7e>
 800c968:	4798      	blx	r3
 800c96a:	e7c3      	b.n	800c8f4 <dwt_xfer3xxx+0x7e>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d0d7      	beq.n	800c920 <dwt_xfer3xxx+0xaa>
 800c970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c974:	f88d 200c 	strb.w	r2, [sp, #12]
 800c978:	2402      	movs	r4, #2
 800c97a:	e7a0      	b.n	800c8be <dwt_xfer3xxx+0x48>

0800c97c <dwt_readfromdevice>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	2400      	movs	r4, #0
 800c982:	9401      	str	r4, [sp, #4]
 800c984:	9c04      	ldr	r4, [sp, #16]
 800c986:	9400      	str	r4, [sp, #0]
 800c988:	f7ff ff75 	bl	800c876 <dwt_xfer3xxx>
 800c98c:	b002      	add	sp, #8
 800c98e:	bd10      	pop	{r4, pc}

0800c990 <dwt_read32bitoffsetreg>:
 800c990:	b500      	push	{lr}
 800c992:	b085      	sub	sp, #20
 800c994:	ab03      	add	r3, sp, #12
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	2304      	movs	r3, #4
 800c99a:	b292      	uxth	r2, r2
 800c99c:	f7ff ffee 	bl	800c97c <dwt_readfromdevice>
 800c9a0:	f10d 030f 	add.w	r3, sp, #15
 800c9a4:	f10d 010b 	add.w	r1, sp, #11
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	f813 2901 	ldrb.w	r2, [r3], #-1
 800c9ae:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800c9b2:	428b      	cmp	r3, r1
 800c9b4:	d1f9      	bne.n	800c9aa <dwt_read32bitoffsetreg+0x1a>
 800c9b6:	b005      	add	sp, #20
 800c9b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c9bc <dwt_read16bitoffsetreg>:
 800c9bc:	b500      	push	{lr}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	ab03      	add	r3, sp, #12
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	b292      	uxth	r2, r2
 800c9c8:	f7ff ffd8 	bl	800c97c <dwt_readfromdevice>
 800c9cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800c9d0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800c9d4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800c9d8:	b280      	uxth	r0, r0
 800c9da:	b005      	add	sp, #20
 800c9dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800c9e0 <dwt_read8bitoffsetreg>:
 800c9e0:	b500      	push	{lr}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	f10d 030f 	add.w	r3, sp, #15
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	b292      	uxth	r2, r2
 800c9ee:	f7ff ffc5 	bl	800c97c <dwt_readfromdevice>
 800c9f2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800c9f6:	b005      	add	sp, #20
 800c9f8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c9fc <ull_readdiagnostics>:
 800c9fc:	b530      	push	{r4, r5, lr}
 800c9fe:	b0bd      	sub	sp, #244	; 0xf4
 800ca00:	4605      	mov	r5, r0
 800ca02:	460c      	mov	r4, r1
 800ca04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ca06:	7bda      	ldrb	r2, [r3, #15]
 800ca08:	2a01      	cmp	r2, #1
 800ca0a:	d01c      	beq.n	800ca46 <ull_readdiagnostics+0x4a>
 800ca0c:	2a03      	cmp	r2, #3
 800ca0e:	f040 81d4 	bne.w	800cdba <ull_readdiagnostics+0x3be>
 800ca12:	7e1b      	ldrb	r3, [r3, #24]
 800ca14:	f013 0f08 	tst.w	r3, #8
 800ca18:	d10c      	bne.n	800ca34 <ull_readdiagnostics+0x38>
 800ca1a:	f013 0f04 	tst.w	r3, #4
 800ca1e:	ab02      	add	r3, sp, #8
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	bf14      	ite	ne
 800ca24:	2338      	movne	r3, #56	; 0x38
 800ca26:	2320      	moveq	r3, #32
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ca2e:	f7ff ffa5 	bl	800c97c <dwt_readfromdevice>
 800ca32:	e019      	b.n	800ca68 <ull_readdiagnostics+0x6c>
 800ca34:	ab02      	add	r3, sp, #8
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	23e8      	movs	r3, #232	; 0xe8
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ca40:	f7ff ff9c 	bl	800c97c <dwt_readfromdevice>
 800ca44:	e010      	b.n	800ca68 <ull_readdiagnostics+0x6c>
 800ca46:	7e1b      	ldrb	r3, [r3, #24]
 800ca48:	f013 0f08 	tst.w	r3, #8
 800ca4c:	f040 81ac 	bne.w	800cda8 <ull_readdiagnostics+0x3ac>
 800ca50:	f013 0f04 	tst.w	r3, #4
 800ca54:	ab02      	add	r3, sp, #8
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	bf14      	ite	ne
 800ca5a:	2338      	movne	r3, #56	; 0x38
 800ca5c:	2320      	moveq	r3, #32
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800ca64:	f7ff ff8a 	bl	800c97c <dwt_readfromdevice>
 800ca68:	f10d 0217 	add.w	r2, sp, #23
 800ca6c:	f104 031a 	add.w	r3, r4, #26
 800ca70:	f104 0020 	add.w	r0, r4, #32
 800ca74:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ca78:	f803 1b01 	strb.w	r1, [r3], #1
 800ca7c:	4283      	cmp	r3, r0
 800ca7e:	d1f9      	bne.n	800ca74 <ull_readdiagnostics+0x78>
 800ca80:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800ca84:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ca88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ca8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca90:	8463      	strh	r3, [r4, #34]	; 0x22
 800ca92:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ca96:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ca9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ca9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800caa2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800caa6:	bf1c      	itt	ne
 800caa8:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800caac:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800cab0:	8423      	strh	r3, [r4, #32]
 800cab2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800cab6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800caba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cabe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cac2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800cac4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cac6:	7e1b      	ldrb	r3, [r3, #24]
 800cac8:	f013 0f02 	tst.w	r3, #2
 800cacc:	f040 816a 	bne.w	800cda4 <ull_readdiagnostics+0x3a8>
 800cad0:	aa0a      	add	r2, sp, #40	; 0x28
 800cad2:	1e63      	subs	r3, r4, #1
 800cad4:	1d20      	adds	r0, r4, #4
 800cad6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cada:	f803 1f01 	strb.w	r1, [r3, #1]!
 800cade:	79d1      	ldrb	r1, [r2, #7]
 800cae0:	7219      	strb	r1, [r3, #8]
 800cae2:	7bd1      	ldrb	r1, [r2, #15]
 800cae4:	7459      	strb	r1, [r3, #17]
 800cae6:	4283      	cmp	r3, r0
 800cae8:	d1f5      	bne.n	800cad6 <ull_readdiagnostics+0xda>
 800caea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800caee:	7163      	strb	r3, [r4, #5]
 800caf0:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800caf4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800caf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cafc:	80e3      	strh	r3, [r4, #6]
 800cafe:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800cb02:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800cb06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cb0a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800cb0e:	f8a4 300d 	strh.w	r3, [r4, #13]
 800cb12:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800cb16:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800cb1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cb1e:	f8a4 300f 	strh.w	r3, [r4, #15]
 800cb22:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800cb26:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800cb2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cb2e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800cb32:	82e3      	strh	r3, [r4, #22]
 800cb34:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800cb38:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800cb3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cb40:	8323      	strh	r3, [r4, #24]
 800cb42:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cb44:	7e1b      	ldrb	r3, [r3, #24]
 800cb46:	f013 0f04 	tst.w	r3, #4
 800cb4a:	f040 812b 	bne.w	800cda4 <ull_readdiagnostics+0x3a8>
 800cb4e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800cb52:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800cb56:	041b      	lsls	r3, r3, #16
 800cb58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cb5c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800cb60:	4313      	orrs	r3, r2
 800cb62:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800cb66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cb6a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800cb6e:	6263      	str	r3, [r4, #36]	; 0x24
 800cb70:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800cb74:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800cb78:	041b      	lsls	r3, r3, #16
 800cb7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cb7e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800cb82:	4313      	orrs	r3, r2
 800cb84:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800cb88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cb8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb90:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb92:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800cb96:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800cb9a:	041b      	lsls	r3, r3, #16
 800cb9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cba0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800cba4:	4313      	orrs	r3, r2
 800cba6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800cbaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cbae:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cbb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cbb4:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800cbb8:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800cbbc:	041b      	lsls	r3, r3, #16
 800cbbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cbc2:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800cbcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cbd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cbd4:	6323      	str	r3, [r4, #48]	; 0x30
 800cbd6:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800cbda:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800cbde:	041b      	lsls	r3, r3, #16
 800cbe0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cbe4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800cbee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cbf2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cbf6:	6363      	str	r3, [r4, #52]	; 0x34
 800cbf8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800cbfc:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800cc00:	041b      	lsls	r3, r3, #16
 800cc02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cc06:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800cc10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc18:	63a3      	str	r3, [r4, #56]	; 0x38
 800cc1a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800cc1e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800cc22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc26:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800cc28:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800cc2c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800cc30:	041b      	lsls	r3, r3, #16
 800cc32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cc36:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800cc40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cc48:	6423      	str	r3, [r4, #64]	; 0x40
 800cc4a:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800cc4e:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800cc52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc56:	6463      	str	r3, [r4, #68]	; 0x44
 800cc58:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800cc5c:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800cc60:	041b      	lsls	r3, r3, #16
 800cc62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cc66:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800cc70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc78:	64a3      	str	r3, [r4, #72]	; 0x48
 800cc7a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800cc7e:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800cc82:	041b      	lsls	r3, r3, #16
 800cc84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cc88:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800cc92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc96:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cc9c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800cca0:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800cca4:	041b      	lsls	r3, r3, #16
 800cca6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ccaa:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800ccb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ccb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ccbc:	6523      	str	r3, [r4, #80]	; 0x50
 800ccbe:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800ccc2:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800ccc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ccca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ccce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800ccd2:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800ccd6:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800ccda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ccde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cce2:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800cce6:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800ccea:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800ccee:	041b      	lsls	r3, r3, #16
 800ccf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ccf4:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800ccfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cd06:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd08:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800cd0c:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800cd10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd14:	65e3      	str	r3, [r4, #92]	; 0x5c
 800cd16:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800cd1a:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800cd1e:	041b      	lsls	r3, r3, #16
 800cd20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cd24:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800cd2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd36:	6623      	str	r3, [r4, #96]	; 0x60
 800cd38:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800cd3c:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800cd40:	041b      	lsls	r3, r3, #16
 800cd42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cd46:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800cd50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd58:	6663      	str	r3, [r4, #100]	; 0x64
 800cd5a:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800cd5e:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800cd62:	041b      	lsls	r3, r3, #16
 800cd64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cd68:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800cd72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd76:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd7a:	66a3      	str	r3, [r4, #104]	; 0x68
 800cd7c:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800cd80:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800cd84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cd8c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800cd90:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800cd94:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800cd98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cda0:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800cda4:	b03d      	add	sp, #244	; 0xf4
 800cda6:	bd30      	pop	{r4, r5, pc}
 800cda8:	ab02      	add	r3, sp, #8
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	23e8      	movs	r3, #232	; 0xe8
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800cdb4:	f7ff fde2 	bl	800c97c <dwt_readfromdevice>
 800cdb8:	e656      	b.n	800ca68 <ull_readdiagnostics+0x6c>
 800cdba:	7e1b      	ldrb	r3, [r3, #24]
 800cdbc:	f013 0f01 	tst.w	r3, #1
 800cdc0:	f000 819f 	beq.w	800d102 <ull_readdiagnostics+0x706>
 800cdc4:	ab02      	add	r3, sp, #8
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	236c      	movs	r3, #108	; 0x6c
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800cdd0:	f7ff fdd4 	bl	800c97c <dwt_readfromdevice>
 800cdd4:	ab1d      	add	r3, sp, #116	; 0x74
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	236c      	movs	r3, #108	; 0x6c
 800cdda:	2200      	movs	r2, #0
 800cddc:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7ff fdcb 	bl	800c97c <dwt_readfromdevice>
 800cde6:	aa02      	add	r2, sp, #8
 800cde8:	1e63      	subs	r3, r4, #1
 800cdea:	1d20      	adds	r0, r4, #4
 800cdec:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cdf0:	f803 1f01 	strb.w	r1, [r3, #1]!
 800cdf4:	79d1      	ldrb	r1, [r2, #7]
 800cdf6:	7219      	strb	r1, [r3, #8]
 800cdf8:	7bd1      	ldrb	r1, [r2, #15]
 800cdfa:	7459      	strb	r1, [r3, #17]
 800cdfc:	7dd1      	ldrb	r1, [r2, #23]
 800cdfe:	7699      	strb	r1, [r3, #26]
 800ce00:	4283      	cmp	r3, r0
 800ce02:	d1f3      	bne.n	800cdec <ull_readdiagnostics+0x3f0>
 800ce04:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800ce08:	77e3      	strb	r3, [r4, #31]
 800ce0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ce0e:	7163      	strb	r3, [r4, #5]
 800ce10:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ce14:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ce18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce1c:	80e3      	strh	r3, [r4, #6]
 800ce1e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800ce22:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ce26:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800ce2a:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800ce2e:	f8a4 200d 	strh.w	r2, [r4, #13]
 800ce32:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800ce36:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800ce3a:	f8a4 200f 	strh.w	r2, [r4, #15]
 800ce3e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ce42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce46:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800ce4a:	82e3      	strh	r3, [r4, #22]
 800ce4c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800ce50:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ce54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce58:	8323      	strh	r3, [r4, #24]
 800ce5a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800ce5e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800ce62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce66:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ce6a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800ce6e:	bf1c      	itt	ne
 800ce70:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800ce74:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800ce78:	8423      	strh	r3, [r4, #32]
 800ce7a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800ce7e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800ce82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce8a:	8463      	strh	r3, [r4, #34]	; 0x22
 800ce8c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800ce90:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800ce94:	041b      	lsls	r3, r3, #16
 800ce96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ce9a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800cea4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cea8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800ceac:	6263      	str	r3, [r4, #36]	; 0x24
 800ceae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ceb0:	7e1b      	ldrb	r3, [r3, #24]
 800ceb2:	f013 0f01 	tst.w	r3, #1
 800ceb6:	f43f af75 	beq.w	800cda4 <ull_readdiagnostics+0x3a8>
 800ceba:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800cebe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800cec2:	041b      	lsls	r3, r3, #16
 800cec4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cec8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800cecc:	4313      	orrs	r3, r2
 800cece:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800ced2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ced6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceda:	62a3      	str	r3, [r4, #40]	; 0x28
 800cedc:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800cee0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800cee4:	041b      	lsls	r3, r3, #16
 800cee6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ceea:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800ceee:	4313      	orrs	r3, r2
 800cef0:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800cef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cef8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cefc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cefe:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800cf02:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800cf06:	041b      	lsls	r3, r3, #16
 800cf08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf0c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800cf10:	4313      	orrs	r3, r2
 800cf12:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800cf16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf1a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf1e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf20:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800cf24:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800cf28:	041b      	lsls	r3, r3, #16
 800cf2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf2e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800cf32:	4313      	orrs	r3, r2
 800cf34:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800cf38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf40:	6363      	str	r3, [r4, #52]	; 0x34
 800cf42:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800cf46:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800cf4a:	041b      	lsls	r3, r3, #16
 800cf4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf50:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800cf54:	4313      	orrs	r3, r2
 800cf56:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800cf5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf5e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf62:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf64:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800cf68:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800cf6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf70:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800cf72:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800cf76:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800cf7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf82:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800cf84:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800cf88:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800cf8c:	041b      	lsls	r3, r3, #16
 800cf8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf92:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800cf9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cfa0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cfa4:	6423      	str	r3, [r4, #64]	; 0x40
 800cfa6:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800cfaa:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800cfae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cfb2:	6463      	str	r3, [r4, #68]	; 0x44
 800cfb4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800cfb8:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800cfbc:	041b      	lsls	r3, r3, #16
 800cfbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cfc2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800cfcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cfd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cfd4:	64a3      	str	r3, [r4, #72]	; 0x48
 800cfd6:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800cfda:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800cfde:	041b      	lsls	r3, r3, #16
 800cfe0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cfe4:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800cfee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cff2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cff6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cff8:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800cffc:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d000:	041b      	lsls	r3, r3, #16
 800d002:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d006:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d00a:	4313      	orrs	r3, r2
 800d00c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d014:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d018:	6523      	str	r3, [r4, #80]	; 0x50
 800d01a:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d01e:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800d022:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d026:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d02a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d02e:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d032:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d03e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d042:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800d046:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800d04a:	041b      	lsls	r3, r3, #16
 800d04c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d050:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800d054:	4313      	orrs	r3, r2
 800d056:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800d05a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d05e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d062:	65a3      	str	r3, [r4, #88]	; 0x58
 800d064:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800d068:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 800d06c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d070:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d072:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800d076:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800d07a:	041b      	lsls	r3, r3, #16
 800d07c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d080:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800d084:	4313      	orrs	r3, r2
 800d086:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800d08a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d08e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d092:	6623      	str	r3, [r4, #96]	; 0x60
 800d094:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800d098:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800d09c:	041b      	lsls	r3, r3, #16
 800d09e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d0a2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800d0ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d0b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d0b4:	6663      	str	r3, [r4, #100]	; 0x64
 800d0b6:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d0ba:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d0be:	041b      	lsls	r3, r3, #16
 800d0c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d0c4:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d0ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d0d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d0d6:	66a3      	str	r3, [r4, #104]	; 0x68
 800d0d8:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d0dc:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800d0e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d0e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d0e8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d0ec:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d0f0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d0f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d0f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0fc:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d100:	e650      	b.n	800cda4 <ull_readdiagnostics+0x3a8>
 800d102:	ab02      	add	r3, sp, #8
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	2328      	movs	r3, #40	; 0x28
 800d108:	2200      	movs	r2, #0
 800d10a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d10e:	f7ff fc35 	bl	800c97c <dwt_readfromdevice>
 800d112:	e668      	b.n	800cde6 <ull_readdiagnostics+0x3ea>

0800d114 <ull_readrxtimestamp>:
 800d114:	b500      	push	{lr}
 800d116:	b083      	sub	sp, #12
 800d118:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d11a:	7bdb      	ldrb	r3, [r3, #15]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d00b      	beq.n	800d138 <ull_readrxtimestamp+0x24>
 800d120:	2b03      	cmp	r3, #3
 800d122:	d110      	bne.n	800d146 <ull_readrxtimestamp+0x32>
 800d124:	9100      	str	r1, [sp, #0]
 800d126:	2305      	movs	r3, #5
 800d128:	2204      	movs	r2, #4
 800d12a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d12e:	f7ff fc25 	bl	800c97c <dwt_readfromdevice>
 800d132:	b003      	add	sp, #12
 800d134:	f85d fb04 	ldr.w	pc, [sp], #4
 800d138:	9100      	str	r1, [sp, #0]
 800d13a:	2305      	movs	r3, #5
 800d13c:	2200      	movs	r2, #0
 800d13e:	4905      	ldr	r1, [pc, #20]	; (800d154 <ull_readrxtimestamp+0x40>)
 800d140:	f7ff fc1c 	bl	800c97c <dwt_readfromdevice>
 800d144:	e7f5      	b.n	800d132 <ull_readrxtimestamp+0x1e>
 800d146:	9100      	str	r1, [sp, #0]
 800d148:	2305      	movs	r3, #5
 800d14a:	2200      	movs	r2, #0
 800d14c:	2164      	movs	r1, #100	; 0x64
 800d14e:	f7ff fc15 	bl	800c97c <dwt_readfromdevice>
 800d152:	e7ee      	b.n	800d132 <ull_readrxtimestamp+0x1e>
 800d154:	00180004 	.word	0x00180004

0800d158 <dwt_writetodevice>:
 800d158:	b510      	push	{r4, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800d160:	9401      	str	r4, [sp, #4]
 800d162:	9c04      	ldr	r4, [sp, #16]
 800d164:	9400      	str	r4, [sp, #0]
 800d166:	f7ff fb86 	bl	800c876 <dwt_xfer3xxx>
 800d16a:	b002      	add	sp, #8
 800d16c:	bd10      	pop	{r4, pc}

0800d16e <dwt_write8bitoffsetreg>:
 800d16e:	b510      	push	{r4, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	ac04      	add	r4, sp, #16
 800d174:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800d178:	9400      	str	r4, [sp, #0]
 800d17a:	2301      	movs	r3, #1
 800d17c:	b292      	uxth	r2, r2
 800d17e:	f7ff ffeb 	bl	800d158 <dwt_writetodevice>
 800d182:	b004      	add	sp, #16
 800d184:	bd10      	pop	{r4, pc}
	...

0800d188 <ull_getframelength>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	4604      	mov	r4, r0
 800d18c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d18e:	7bdb      	ldrb	r3, [r3, #15]
 800d190:	2b01      	cmp	r3, #1
 800d192:	d013      	beq.n	800d1bc <ull_getframelength+0x34>
 800d194:	2b03      	cmp	r3, #3
 800d196:	d11d      	bne.n	800d1d4 <ull_getframelength+0x4c>
 800d198:	23f0      	movs	r3, #240	; 0xf0
 800d19a:	2200      	movs	r2, #0
 800d19c:	4912      	ldr	r1, [pc, #72]	; (800d1e8 <ull_getframelength+0x60>)
 800d19e:	f7ff ffe6 	bl	800d16e <dwt_write8bitoffsetreg>
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f7ff fc07 	bl	800c9bc <dwt_read16bitoffsetreg>
 800d1ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d1b0:	7b1a      	ldrb	r2, [r3, #12]
 800d1b2:	b1a2      	cbz	r2, 800d1de <ull_getframelength+0x56>
 800d1b4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d1b8:	8458      	strh	r0, [r3, #34]	; 0x22
 800d1ba:	bd10      	pop	{r4, pc}
 800d1bc:	230f      	movs	r3, #15
 800d1be:	2200      	movs	r2, #0
 800d1c0:	4909      	ldr	r1, [pc, #36]	; (800d1e8 <ull_getframelength+0x60>)
 800d1c2:	f7ff ffd4 	bl	800d16e <dwt_write8bitoffsetreg>
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f7ff fbf5 	bl	800c9bc <dwt_read16bitoffsetreg>
 800d1d2:	e7ec      	b.n	800d1ae <ull_getframelength+0x26>
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	214c      	movs	r1, #76	; 0x4c
 800d1d8:	f7ff fbf0 	bl	800c9bc <dwt_read16bitoffsetreg>
 800d1dc:	e7e7      	b.n	800d1ae <ull_getframelength+0x26>
 800d1de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d1e2:	8458      	strh	r0, [r3, #34]	; 0x22
 800d1e4:	e7e9      	b.n	800d1ba <ull_getframelength+0x32>
 800d1e6:	bf00      	nop
 800d1e8:	00010024 	.word	0x00010024

0800d1ec <ull_configeventcounters>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	2302      	movs	r3, #2
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800d1fa:	f7ff ffb8 	bl	800d16e <dwt_write8bitoffsetreg>
 800d1fe:	b904      	cbnz	r4, 800d202 <ull_configeventcounters+0x16>
 800d200:	bd38      	pop	{r3, r4, r5, pc}
 800d202:	2301      	movs	r3, #1
 800d204:	2200      	movs	r2, #0
 800d206:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800d20a:	4628      	mov	r0, r5
 800d20c:	f7ff ffaf 	bl	800d16e <dwt_write8bitoffsetreg>
 800d210:	e7f6      	b.n	800d200 <ull_configeventcounters+0x14>

0800d212 <dwt_write16bitoffsetreg>:
 800d212:	b500      	push	{lr}
 800d214:	b085      	sub	sp, #20
 800d216:	f88d 300c 	strb.w	r3, [sp, #12]
 800d21a:	0a1b      	lsrs	r3, r3, #8
 800d21c:	f88d 300d 	strb.w	r3, [sp, #13]
 800d220:	ab03      	add	r3, sp, #12
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	2302      	movs	r3, #2
 800d226:	b292      	uxth	r2, r2
 800d228:	f7ff ff96 	bl	800d158 <dwt_writetodevice>
 800d22c:	b005      	add	sp, #20
 800d22e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d234 <ull_clearaonconfig>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4604      	mov	r4, r0
 800d238:	2300      	movs	r3, #0
 800d23a:	461a      	mov	r2, r3
 800d23c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800d240:	f7ff ffe7 	bl	800d212 <dwt_write16bitoffsetreg>
 800d244:	2300      	movs	r3, #0
 800d246:	461a      	mov	r2, r3
 800d248:	4908      	ldr	r1, [pc, #32]	; (800d26c <ull_clearaonconfig+0x38>)
 800d24a:	4620      	mov	r0, r4
 800d24c:	f7ff ff8f 	bl	800d16e <dwt_write8bitoffsetreg>
 800d250:	4d07      	ldr	r5, [pc, #28]	; (800d270 <ull_clearaonconfig+0x3c>)
 800d252:	2300      	movs	r3, #0
 800d254:	461a      	mov	r2, r3
 800d256:	4629      	mov	r1, r5
 800d258:	4620      	mov	r0, r4
 800d25a:	f7ff ff88 	bl	800d16e <dwt_write8bitoffsetreg>
 800d25e:	2302      	movs	r3, #2
 800d260:	2200      	movs	r2, #0
 800d262:	4629      	mov	r1, r5
 800d264:	4620      	mov	r0, r4
 800d266:	f7ff ff82 	bl	800d16e <dwt_write8bitoffsetreg>
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	000a0014 	.word	0x000a0014
 800d270:	000a0004 	.word	0x000a0004

0800d274 <ull_force_clocks>:
 800d274:	b508      	push	{r3, lr}
 800d276:	2901      	cmp	r1, #1
 800d278:	d002      	beq.n	800d280 <ull_force_clocks+0xc>
 800d27a:	2905      	cmp	r1, #5
 800d27c:	d007      	beq.n	800d28e <ull_force_clocks+0x1a>
 800d27e:	bd08      	pop	{r3, pc}
 800d280:	f641 0322 	movw	r3, #6178	; 0x1822
 800d284:	2200      	movs	r2, #0
 800d286:	4905      	ldr	r1, [pc, #20]	; (800d29c <ull_force_clocks+0x28>)
 800d288:	f7ff ffc3 	bl	800d212 <dwt_write16bitoffsetreg>
 800d28c:	e7f7      	b.n	800d27e <ull_force_clocks+0xa>
 800d28e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d292:	2200      	movs	r2, #0
 800d294:	4901      	ldr	r1, [pc, #4]	; (800d29c <ull_force_clocks+0x28>)
 800d296:	f7ff ffbc 	bl	800d212 <dwt_write16bitoffsetreg>
 800d29a:	e7f0      	b.n	800d27e <ull_force_clocks+0xa>
 800d29c:	00110004 	.word	0x00110004

0800d2a0 <__dwt_otp_write_wdata_id_reg>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	460c      	mov	r4, r1
 800d2a6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800d2b2:	f7ff ffae 	bl	800d212 <dwt_write16bitoffsetreg>
 800d2b6:	b2a3      	uxth	r3, r4
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800d2be:	4628      	mov	r0, r5
 800d2c0:	f7ff ffa7 	bl	800d212 <dwt_write16bitoffsetreg>
 800d2c4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d2c8 <_dwt_otpread>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	460e      	mov	r6, r1
 800d2ce:	4d0c      	ldr	r5, [pc, #48]	; (800d300 <_dwt_otpread+0x38>)
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7ff ff9c 	bl	800d212 <dwt_write16bitoffsetreg>
 800d2da:	4633      	mov	r3, r6
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4909      	ldr	r1, [pc, #36]	; (800d304 <_dwt_otpread+0x3c>)
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f7ff ff96 	bl	800d212 <dwt_write16bitoffsetreg>
 800d2e6:	2302      	movs	r3, #2
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f7ff ff90 	bl	800d212 <dwt_write16bitoffsetreg>
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	4904      	ldr	r1, [pc, #16]	; (800d308 <_dwt_otpread+0x40>)
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f7ff fb4a 	bl	800c990 <dwt_read32bitoffsetreg>
 800d2fc:	bd70      	pop	{r4, r5, r6, pc}
 800d2fe:	bf00      	nop
 800d300:	000b0008 	.word	0x000b0008
 800d304:	000b0004 	.word	0x000b0004
 800d308:	000b0010 	.word	0x000b0010

0800d30c <ull_aon_read>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4604      	mov	r4, r0
 800d310:	460b      	mov	r3, r1
 800d312:	2200      	movs	r2, #0
 800d314:	490a      	ldr	r1, [pc, #40]	; (800d340 <ull_aon_read+0x34>)
 800d316:	f7ff ff7c 	bl	800d212 <dwt_write16bitoffsetreg>
 800d31a:	4d0a      	ldr	r5, [pc, #40]	; (800d344 <ull_aon_read+0x38>)
 800d31c:	2388      	movs	r3, #136	; 0x88
 800d31e:	2200      	movs	r2, #0
 800d320:	4629      	mov	r1, r5
 800d322:	4620      	mov	r0, r4
 800d324:	f7ff ff23 	bl	800d16e <dwt_write8bitoffsetreg>
 800d328:	2300      	movs	r3, #0
 800d32a:	461a      	mov	r2, r3
 800d32c:	4629      	mov	r1, r5
 800d32e:	4620      	mov	r0, r4
 800d330:	f7ff ff1d 	bl	800d16e <dwt_write8bitoffsetreg>
 800d334:	2200      	movs	r2, #0
 800d336:	4904      	ldr	r1, [pc, #16]	; (800d348 <ull_aon_read+0x3c>)
 800d338:	4620      	mov	r0, r4
 800d33a:	f7ff fb51 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800d33e:	bd38      	pop	{r3, r4, r5, pc}
 800d340:	000a000c 	.word	0x000a000c
 800d344:	000a0004 	.word	0x000a0004
 800d348:	000a0008 	.word	0x000a0008

0800d34c <ull_aon_write>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	4604      	mov	r4, r0
 800d350:	460b      	mov	r3, r1
 800d352:	4615      	mov	r5, r2
 800d354:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d358:	bf34      	ite	cc
 800d35a:	2600      	movcc	r6, #0
 800d35c:	2620      	movcs	r6, #32
 800d35e:	2200      	movs	r2, #0
 800d360:	490b      	ldr	r1, [pc, #44]	; (800d390 <ull_aon_write+0x44>)
 800d362:	f7ff ff56 	bl	800d212 <dwt_write16bitoffsetreg>
 800d366:	462b      	mov	r3, r5
 800d368:	2200      	movs	r2, #0
 800d36a:	490a      	ldr	r1, [pc, #40]	; (800d394 <ull_aon_write+0x48>)
 800d36c:	4620      	mov	r0, r4
 800d36e:	f7ff fefe 	bl	800d16e <dwt_write8bitoffsetreg>
 800d372:	4d09      	ldr	r5, [pc, #36]	; (800d398 <ull_aon_write+0x4c>)
 800d374:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800d378:	2200      	movs	r2, #0
 800d37a:	4629      	mov	r1, r5
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7ff fef6 	bl	800d16e <dwt_write8bitoffsetreg>
 800d382:	2300      	movs	r3, #0
 800d384:	461a      	mov	r2, r3
 800d386:	4629      	mov	r1, r5
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff fef0 	bl	800d16e <dwt_write8bitoffsetreg>
 800d38e:	bd70      	pop	{r4, r5, r6, pc}
 800d390:	000a000c 	.word	0x000a000c
 800d394:	000a0010 	.word	0x000a0010
 800d398:	000a0004 	.word	0x000a0004

0800d39c <ull_configuresleep>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	4604      	mov	r4, r0
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	4616      	mov	r6, r2
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f240 110b 	movw	r1, #267	; 0x10b
 800d3aa:	f7ff ffcf 	bl	800d34c <ull_aon_write>
 800d3ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f7ff ffaa 	bl	800d30c <ull_aon_read>
 800d3b8:	f000 021f 	and.w	r2, r0, #31
 800d3bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f7ff ffc3 	bl	800d34c <ull_aon_write>
 800d3c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d3c8:	8a5a      	ldrh	r2, [r3, #18]
 800d3ca:	4315      	orrs	r5, r2
 800d3cc:	825d      	strh	r5, [r3, #18]
 800d3ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d3d0:	8a5b      	ldrh	r3, [r3, #18]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7ff ff1a 	bl	800d212 <dwt_write16bitoffsetreg>
 800d3de:	4633      	mov	r3, r6
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	4902      	ldr	r1, [pc, #8]	; (800d3ec <ull_configuresleep+0x50>)
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f7ff fec2 	bl	800d16e <dwt_write8bitoffsetreg>
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
 800d3ec:	000a0014 	.word	0x000a0014

0800d3f0 <ull_signal_rx_buff_free>:
 800d3f0:	b510      	push	{r4, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	9200      	str	r2, [sp, #0]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	2113      	movs	r1, #19
 800d3fe:	f7ff feab 	bl	800d158 <dwt_writetodevice>
 800d402:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d404:	7bda      	ldrb	r2, [r3, #15]
 800d406:	2a03      	cmp	r2, #3
 800d408:	bf0c      	ite	eq
 800d40a:	2201      	moveq	r2, #1
 800d40c:	2203      	movne	r2, #3
 800d40e:	73da      	strb	r2, [r3, #15]
 800d410:	b002      	add	sp, #8
 800d412:	bd10      	pop	{r4, pc}

0800d414 <dwt_write32bitoffsetreg>:
 800d414:	b510      	push	{r4, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	f88d 300c 	strb.w	r3, [sp, #12]
 800d41c:	0a1c      	lsrs	r4, r3, #8
 800d41e:	f88d 400d 	strb.w	r4, [sp, #13]
 800d422:	0c1c      	lsrs	r4, r3, #16
 800d424:	f88d 400e 	strb.w	r4, [sp, #14]
 800d428:	0e1b      	lsrs	r3, r3, #24
 800d42a:	f88d 300f 	strb.w	r3, [sp, #15]
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	2304      	movs	r3, #4
 800d434:	b292      	uxth	r2, r2
 800d436:	f7ff fe8f 	bl	800d158 <dwt_writetodevice>
 800d43a:	b004      	add	sp, #16
 800d43c:	bd10      	pop	{r4, pc}
	...

0800d440 <ull_isr>:
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	2200      	movs	r2, #0
 800d446:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800d44a:	f7ff fac9 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800d44e:	4605      	mov	r5, r0
 800d450:	2200      	movs	r2, #0
 800d452:	2144      	movs	r1, #68	; 0x44
 800d454:	4620      	mov	r0, r4
 800d456:	f7ff fa9b 	bl	800c990 <dwt_read32bitoffsetreg>
 800d45a:	4606      	mov	r6, r0
 800d45c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d45e:	2200      	movs	r2, #0
 800d460:	845a      	strh	r2, [r3, #34]	; 0x22
 800d462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d466:	61da      	str	r2, [r3, #28]
 800d468:	841a      	strh	r2, [r3, #32]
 800d46a:	629a      	str	r2, [r3, #40]	; 0x28
 800d46c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d46e:	629c      	str	r4, [r3, #40]	; 0x28
 800d470:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d472:	61d8      	str	r0, [r3, #28]
 800d474:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d476:	7dd3      	ldrb	r3, [r2, #23]
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d079      	beq.n	800d574 <ull_isr+0x134>
 800d480:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800d484:	d005      	beq.n	800d492 <ull_isr+0x52>
 800d486:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800d48a:	f043 0304 	orr.w	r3, r3, #4
 800d48e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800d492:	f015 0f80 	tst.w	r5, #128	; 0x80
 800d496:	d174      	bne.n	800d582 <ull_isr+0x142>
 800d498:	f015 0f01 	tst.w	r5, #1
 800d49c:	f040 80a3 	bne.w	800d5e6 <ull_isr+0x1a6>
 800d4a0:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d4a4:	d00b      	beq.n	800d4be <ull_isr+0x7e>
 800d4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4a8:	b113      	cbz	r3, 800d4b0 <ull_isr+0x70>
 800d4aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d4ac:	301c      	adds	r0, #28
 800d4ae:	4798      	blx	r3
 800d4b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800d4b4:	2202      	movs	r2, #2
 800d4b6:	2144      	movs	r1, #68	; 0x44
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f7ff feaa 	bl	800d212 <dwt_write16bitoffsetreg>
 800d4be:	f015 0f08 	tst.w	r5, #8
 800d4c2:	f000 80ea 	beq.w	800d69a <ull_isr+0x25a>
 800d4c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d4ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d4d0:	7bdb      	ldrb	r3, [r3, #15]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f040 8095 	bne.w	800d602 <ull_isr+0x1c2>
 800d4d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d4da:	61de      	str	r6, [r3, #28]
 800d4dc:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800d4e0:	f000 80a9 	beq.w	800d636 <ull_isr+0x1f6>
 800d4e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d4e6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800d4ea:	f043 0308 	orr.w	r3, r3, #8
 800d4ee:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800d4f2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800d4f6:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800d4fa:	d008      	beq.n	800d50e <ull_isr+0xce>
 800d4fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d4fe:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800d502:	f043 0310 	orr.w	r3, r3, #16
 800d506:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800d50a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800d50e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800d512:	d006      	beq.n	800d522 <ull_isr+0xe2>
 800d514:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d516:	7dd3      	ldrb	r3, [r2, #23]
 800d518:	f003 0303 	and.w	r3, r3, #3
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	f000 8096 	beq.w	800d64e <ull_isr+0x20e>
 800d522:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800d526:	f040 809e 	bne.w	800d666 <ull_isr+0x226>
 800d52a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800d52e:	2200      	movs	r2, #0
 800d530:	2144      	movs	r1, #68	; 0x44
 800d532:	4620      	mov	r0, r4
 800d534:	f7ff ff6e 	bl	800d414 <dwt_write32bitoffsetreg>
 800d538:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d53a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f040 80a1 	bne.w	800d684 <ull_isr+0x244>
 800d542:	7dc3      	ldrb	r3, [r0, #23]
 800d544:	f003 0303 	and.w	r3, r3, #3
 800d548:	2b03      	cmp	r3, #3
 800d54a:	f000 809b 	beq.w	800d684 <ull_isr+0x244>
 800d54e:	69c3      	ldr	r3, [r0, #28]
 800d550:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800d554:	61c3      	str	r3, [r0, #28]
 800d556:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d558:	69d3      	ldr	r3, [r2, #28]
 800d55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d55e:	61d3      	str	r3, [r2, #28]
 800d560:	69e3      	ldr	r3, [r4, #28]
 800d562:	b113      	cbz	r3, 800d56a <ull_isr+0x12a>
 800d564:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d566:	301c      	adds	r0, #28
 800d568:	4798      	blx	r3
 800d56a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d572:	e08b      	b.n	800d68c <ull_isr+0x24c>
 800d574:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800d578:	bf1c      	itt	ne
 800d57a:	f045 0508 	orrne.w	r5, r5, #8
 800d57e:	b2ed      	uxtbne	r5, r5
 800d580:	e77e      	b.n	800d480 <ull_isr+0x40>
 800d582:	6d27      	ldr	r7, [r4, #80]	; 0x50
 800d584:	2200      	movs	r2, #0
 800d586:	2148      	movs	r1, #72	; 0x48
 800d588:	4620      	mov	r0, r4
 800d58a:	f7ff fa17 	bl	800c9bc <dwt_read16bitoffsetreg>
 800d58e:	8438      	strh	r0, [r7, #32]
 800d590:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d592:	7d9a      	ldrb	r2, [r3, #22]
 800d594:	b11a      	cbz	r2, 800d59e <ull_isr+0x15e>
 800d596:	69da      	ldr	r2, [r3, #28]
 800d598:	f012 0f04 	tst.w	r2, #4
 800d59c:	d103      	bne.n	800d5a6 <ull_isr+0x166>
 800d59e:	8c1b      	ldrh	r3, [r3, #32]
 800d5a0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800d5a4:	b18b      	cbz	r3, 800d5ca <ull_isr+0x18a>
 800d5a6:	2304      	movs	r3, #4
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2144      	movs	r1, #68	; 0x44
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7ff fdde 	bl	800d16e <dwt_write8bitoffsetreg>
 800d5b2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2148      	movs	r1, #72	; 0x48
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff fe29 	bl	800d212 <dwt_write16bitoffsetreg>
 800d5c0:	6a23      	ldr	r3, [r4, #32]
 800d5c2:	b113      	cbz	r3, 800d5ca <ull_isr+0x18a>
 800d5c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d5c6:	301c      	adds	r0, #28
 800d5c8:	4798      	blx	r3
 800d5ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d5cc:	8c1b      	ldrh	r3, [r3, #32]
 800d5ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d5d2:	f43f af61 	beq.w	800d498 <ull_isr+0x58>
 800d5d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2148      	movs	r1, #72	; 0x48
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff fe17 	bl	800d212 <dwt_write16bitoffsetreg>
 800d5e4:	e758      	b.n	800d498 <ull_isr+0x58>
 800d5e6:	23f8      	movs	r3, #248	; 0xf8
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2144      	movs	r1, #68	; 0x44
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f7ff fdbe 	bl	800d16e <dwt_write8bitoffsetreg>
 800d5f2:	6923      	ldr	r3, [r4, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f43f af53 	beq.w	800d4a0 <ull_isr+0x60>
 800d5fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d5fc:	301c      	adds	r0, #28
 800d5fe:	4798      	blx	r3
 800d600:	e74e      	b.n	800d4a0 <ull_isr+0x60>
 800d602:	493b      	ldr	r1, [pc, #236]	; (800d6f0 <ull_isr+0x2b0>)
 800d604:	4620      	mov	r0, r4
 800d606:	f7ff f9eb 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800d60a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d60c:	7bdb      	ldrb	r3, [r3, #15]
 800d60e:	2b03      	cmp	r3, #3
 800d610:	bf08      	it	eq
 800d612:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 800d616:	f010 0f01 	tst.w	r0, #1
 800d61a:	bf18      	it	ne
 800d61c:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800d620:	f010 0f02 	tst.w	r0, #2
 800d624:	bf18      	it	ne
 800d626:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800d62a:	f010 0f04 	tst.w	r0, #4
 800d62e:	bf18      	it	ne
 800d630:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800d634:	e750      	b.n	800d4d8 <ull_isr+0x98>
 800d636:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800d63a:	bf1f      	itttt	ne
 800d63c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800d63e:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 800d642:	f043 0304 	orrne.w	r3, r3, #4
 800d646:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 800d64a:	2700      	movs	r7, #0
 800d64c:	e753      	b.n	800d4f6 <ull_isr+0xb6>
 800d64e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800d652:	f043 0302 	orr.w	r3, r3, #2
 800d656:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800d65a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d65c:	2200      	movs	r2, #0
 800d65e:	845a      	strh	r2, [r3, #34]	; 0x22
 800d660:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800d664:	e761      	b.n	800d52a <ull_isr+0xea>
 800d666:	4620      	mov	r0, r4
 800d668:	f7ff fd8e 	bl	800d188 <ull_getframelength>
 800d66c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800d670:	f43f af5b 	beq.w	800d52a <ull_isr+0xea>
 800d674:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d676:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800d67a:	f043 0301 	orr.w	r3, r3, #1
 800d67e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800d682:	e752      	b.n	800d52a <ull_isr+0xea>
 800d684:	6963      	ldr	r3, [r4, #20]
 800d686:	b10b      	cbz	r3, 800d68c <ull_isr+0x24c>
 800d688:	301c      	adds	r0, #28
 800d68a:	4798      	blx	r3
 800d68c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d68e:	7bdb      	ldrb	r3, [r3, #15]
 800d690:	b953      	cbnz	r3, 800d6a8 <ull_isr+0x268>
 800d692:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d69a:	f015 0f10 	tst.w	r5, #16
 800d69e:	d107      	bne.n	800d6b0 <ull_isr+0x270>
 800d6a0:	f015 0f20 	tst.w	r5, #32
 800d6a4:	d114      	bne.n	800d6d0 <ull_isr+0x290>
 800d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7ff fea1 	bl	800d3f0 <ull_signal_rx_buff_free>
 800d6ae:	e7f0      	b.n	800d692 <ull_isr+0x252>
 800d6b0:	4b10      	ldr	r3, [pc, #64]	; (800d6f4 <ull_isr+0x2b4>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	2144      	movs	r1, #68	; 0x44
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f7ff feac 	bl	800d414 <dwt_write32bitoffsetreg>
 800d6bc:	69e3      	ldr	r3, [r4, #28]
 800d6be:	b113      	cbz	r3, 800d6c6 <ull_isr+0x286>
 800d6c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d6c2:	301c      	adds	r0, #28
 800d6c4:	4798      	blx	r3
 800d6c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d6ce:	e7e7      	b.n	800d6a0 <ull_isr+0x260>
 800d6d0:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <ull_isr+0x2b8>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2144      	movs	r1, #68	; 0x44
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7ff fe9c 	bl	800d414 <dwt_write32bitoffsetreg>
 800d6dc:	69a3      	ldr	r3, [r4, #24]
 800d6de:	b113      	cbz	r3, 800d6e6 <ull_isr+0x2a6>
 800d6e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d6e2:	301c      	adds	r0, #28
 800d6e4:	4798      	blx	r3
 800d6e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d6ee:	e7da      	b.n	800d6a6 <ull_isr+0x266>
 800d6f0:	00010024 	.word	0x00010024
 800d6f4:	34059400 	.word	0x34059400
 800d6f8:	10220400 	.word	0x10220400

0800d6fc <_dwt_adjust_delaytime>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4604      	mov	r4, r0
 800d700:	b989      	cbnz	r1, 800d726 <_dwt_adjust_delaytime+0x2a>
 800d702:	2200      	movs	r2, #0
 800d704:	212c      	movs	r1, #44	; 0x2c
 800d706:	f7ff f943 	bl	800c990 <dwt_read32bitoffsetreg>
 800d70a:	4605      	mov	r5, r0
 800d70c:	2201      	movs	r2, #1
 800d70e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d712:	4620      	mov	r0, r4
 800d714:	f7ff f964 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800d718:	1a2b      	subs	r3, r5, r0
 800d71a:	2200      	movs	r2, #0
 800d71c:	212c      	movs	r1, #44	; 0x2c
 800d71e:	4620      	mov	r0, r4
 800d720:	f7ff fe78 	bl	800d414 <dwt_write32bitoffsetreg>
 800d724:	bd38      	pop	{r3, r4, r5, pc}
 800d726:	2200      	movs	r2, #0
 800d728:	212c      	movs	r1, #44	; 0x2c
 800d72a:	f7ff f931 	bl	800c990 <dwt_read32bitoffsetreg>
 800d72e:	4605      	mov	r5, r0
 800d730:	2201      	movs	r2, #1
 800d732:	4905      	ldr	r1, [pc, #20]	; (800d748 <_dwt_adjust_delaytime+0x4c>)
 800d734:	4620      	mov	r0, r4
 800d736:	f7ff f953 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800d73a:	1a2b      	subs	r3, r5, r0
 800d73c:	2200      	movs	r2, #0
 800d73e:	212c      	movs	r1, #44	; 0x2c
 800d740:	4620      	mov	r0, r4
 800d742:	f7ff fe67 	bl	800d414 <dwt_write32bitoffsetreg>
 800d746:	e7ed      	b.n	800d724 <_dwt_adjust_delaytime+0x28>
 800d748:	00010004 	.word	0x00010004

0800d74c <ull_setrxaftertxdelay>:
 800d74c:	b570      	push	{r4, r5, r6, lr}
 800d74e:	4606      	mov	r6, r0
 800d750:	460c      	mov	r4, r1
 800d752:	4d08      	ldr	r5, [pc, #32]	; (800d774 <ull_setrxaftertxdelay+0x28>)
 800d754:	2200      	movs	r2, #0
 800d756:	4629      	mov	r1, r5
 800d758:	f7ff f91a 	bl	800c990 <dwt_read32bitoffsetreg>
 800d75c:	0d00      	lsrs	r0, r0, #20
 800d75e:	0500      	lsls	r0, r0, #20
 800d760:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d764:	4303      	orrs	r3, r0
 800d766:	2200      	movs	r2, #0
 800d768:	4629      	mov	r1, r5
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7ff fe52 	bl	800d414 <dwt_write32bitoffsetreg>
 800d770:	bd70      	pop	{r4, r5, r6, pc}
 800d772:	bf00      	nop
 800d774:	00010008 	.word	0x00010008

0800d778 <ull_setlnapamode>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	4605      	mov	r5, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	2200      	movs	r2, #0
 800d780:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d784:	f7ff f904 	bl	800c990 <dwt_read32bitoffsetreg>
 800d788:	4b0b      	ldr	r3, [pc, #44]	; (800d7b8 <ull_setlnapamode+0x40>)
 800d78a:	4003      	ands	r3, r0
 800d78c:	f014 0f01 	tst.w	r4, #1
 800d790:	bf18      	it	ne
 800d792:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 800d796:	f014 0f02 	tst.w	r4, #2
 800d79a:	bf18      	it	ne
 800d79c:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 800d7a0:	f014 0f04 	tst.w	r4, #4
 800d7a4:	bf18      	it	ne
 800d7a6:	f043 0312 	orrne.w	r3, r3, #18
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f7ff fe2f 	bl	800d414 <dwt_write32bitoffsetreg>
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	ffe00fc0 	.word	0xffe00fc0

0800d7bc <ull_configurestskey>:
 800d7bc:	b538      	push	{r3, r4, r5, lr}
 800d7be:	4605      	mov	r5, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	680b      	ldr	r3, [r1, #0]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	490b      	ldr	r1, [pc, #44]	; (800d7f4 <ull_configurestskey+0x38>)
 800d7c8:	f7ff fe24 	bl	800d414 <dwt_write32bitoffsetreg>
 800d7cc:	6863      	ldr	r3, [r4, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4909      	ldr	r1, [pc, #36]	; (800d7f8 <ull_configurestskey+0x3c>)
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f7ff fe1e 	bl	800d414 <dwt_write32bitoffsetreg>
 800d7d8:	68a3      	ldr	r3, [r4, #8]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	4907      	ldr	r1, [pc, #28]	; (800d7fc <ull_configurestskey+0x40>)
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f7ff fe18 	bl	800d414 <dwt_write32bitoffsetreg>
 800d7e4:	68e3      	ldr	r3, [r4, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	4905      	ldr	r1, [pc, #20]	; (800d800 <ull_configurestskey+0x44>)
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f7ff fe12 	bl	800d414 <dwt_write32bitoffsetreg>
 800d7f0:	bd38      	pop	{r3, r4, r5, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0002000c 	.word	0x0002000c
 800d7f8:	00020010 	.word	0x00020010
 800d7fc:	00020014 	.word	0x00020014
 800d800:	00020018 	.word	0x00020018

0800d804 <ull_configurestsiv>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4605      	mov	r5, r0
 800d808:	460c      	mov	r4, r1
 800d80a:	680b      	ldr	r3, [r1, #0]
 800d80c:	2200      	movs	r2, #0
 800d80e:	490b      	ldr	r1, [pc, #44]	; (800d83c <ull_configurestsiv+0x38>)
 800d810:	f7ff fe00 	bl	800d414 <dwt_write32bitoffsetreg>
 800d814:	6863      	ldr	r3, [r4, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	4909      	ldr	r1, [pc, #36]	; (800d840 <ull_configurestsiv+0x3c>)
 800d81a:	4628      	mov	r0, r5
 800d81c:	f7ff fdfa 	bl	800d414 <dwt_write32bitoffsetreg>
 800d820:	68a3      	ldr	r3, [r4, #8]
 800d822:	2200      	movs	r2, #0
 800d824:	4907      	ldr	r1, [pc, #28]	; (800d844 <ull_configurestsiv+0x40>)
 800d826:	4628      	mov	r0, r5
 800d828:	f7ff fdf4 	bl	800d414 <dwt_write32bitoffsetreg>
 800d82c:	68e3      	ldr	r3, [r4, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	4905      	ldr	r1, [pc, #20]	; (800d848 <ull_configurestsiv+0x44>)
 800d832:	4628      	mov	r0, r5
 800d834:	f7ff fdee 	bl	800d414 <dwt_write32bitoffsetreg>
 800d838:	bd38      	pop	{r3, r4, r5, pc}
 800d83a:	bf00      	nop
 800d83c:	0002001c 	.word	0x0002001c
 800d840:	00020020 	.word	0x00020020
 800d844:	00020024 	.word	0x00020024
 800d848:	00020028 	.word	0x00020028

0800d84c <ull_configmrxlut>:
 800d84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d850:	4604      	mov	r4, r0
 800d852:	2905      	cmp	r1, #5
 800d854:	d040      	beq.n	800d8d8 <ull_configmrxlut+0x8c>
 800d856:	4d26      	ldr	r5, [pc, #152]	; (800d8f0 <ull_configmrxlut+0xa4>)
 800d858:	462e      	mov	r6, r5
 800d85a:	4f26      	ldr	r7, [pc, #152]	; (800d8f4 <ull_configmrxlut+0xa8>)
 800d85c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800d938 <ull_configmrxlut+0xec>
 800d860:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800d93c <ull_configmrxlut+0xf0>
 800d864:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d940 <ull_configmrxlut+0xf4>
 800d868:	4b23      	ldr	r3, [pc, #140]	; (800d8f8 <ull_configmrxlut+0xac>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	4923      	ldr	r1, [pc, #140]	; (800d8fc <ull_configmrxlut+0xb0>)
 800d86e:	4620      	mov	r0, r4
 800d870:	f7ff fdd0 	bl	800d414 <dwt_write32bitoffsetreg>
 800d874:	4653      	mov	r3, sl
 800d876:	2200      	movs	r2, #0
 800d878:	4921      	ldr	r1, [pc, #132]	; (800d900 <ull_configmrxlut+0xb4>)
 800d87a:	4620      	mov	r0, r4
 800d87c:	f7ff fdca 	bl	800d414 <dwt_write32bitoffsetreg>
 800d880:	464b      	mov	r3, r9
 800d882:	2200      	movs	r2, #0
 800d884:	491f      	ldr	r1, [pc, #124]	; (800d904 <ull_configmrxlut+0xb8>)
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff fdc4 	bl	800d414 <dwt_write32bitoffsetreg>
 800d88c:	4643      	mov	r3, r8
 800d88e:	2200      	movs	r2, #0
 800d890:	491d      	ldr	r1, [pc, #116]	; (800d908 <ull_configmrxlut+0xbc>)
 800d892:	4620      	mov	r0, r4
 800d894:	f7ff fdbe 	bl	800d414 <dwt_write32bitoffsetreg>
 800d898:	463b      	mov	r3, r7
 800d89a:	2200      	movs	r2, #0
 800d89c:	491b      	ldr	r1, [pc, #108]	; (800d90c <ull_configmrxlut+0xc0>)
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7ff fdb8 	bl	800d414 <dwt_write32bitoffsetreg>
 800d8a4:	4633      	mov	r3, r6
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	4919      	ldr	r1, [pc, #100]	; (800d910 <ull_configmrxlut+0xc4>)
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f7ff fdb2 	bl	800d414 <dwt_write32bitoffsetreg>
 800d8b0:	462b      	mov	r3, r5
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	4917      	ldr	r1, [pc, #92]	; (800d914 <ull_configmrxlut+0xc8>)
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f7ff fdac 	bl	800d414 <dwt_write32bitoffsetreg>
 800d8bc:	4b16      	ldr	r3, [pc, #88]	; (800d918 <ull_configmrxlut+0xcc>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	4916      	ldr	r1, [pc, #88]	; (800d91c <ull_configmrxlut+0xd0>)
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7ff fda6 	bl	800d414 <dwt_write32bitoffsetreg>
 800d8c8:	4b15      	ldr	r3, [pc, #84]	; (800d920 <ull_configmrxlut+0xd4>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	4915      	ldr	r1, [pc, #84]	; (800d924 <ull_configmrxlut+0xd8>)
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f7ff fda0 	bl	800d414 <dwt_write32bitoffsetreg>
 800d8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d8:	4d13      	ldr	r5, [pc, #76]	; (800d928 <ull_configmrxlut+0xdc>)
 800d8da:	4e14      	ldr	r6, [pc, #80]	; (800d92c <ull_configmrxlut+0xe0>)
 800d8dc:	4f14      	ldr	r7, [pc, #80]	; (800d930 <ull_configmrxlut+0xe4>)
 800d8de:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800d944 <ull_configmrxlut+0xf8>
 800d8e2:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800d948 <ull_configmrxlut+0xfc>
 800d8e6:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d94c <ull_configmrxlut+0x100>
 800d8ea:	4b12      	ldr	r3, [pc, #72]	; (800d934 <ull_configmrxlut+0xe8>)
 800d8ec:	e7bd      	b.n	800d86a <ull_configmrxlut+0x1e>
 800d8ee:	bf00      	nop
 800d8f0:	0002afb5 	.word	0x0002afb5
 800d8f4:	0002af7d 	.word	0x0002af7d
 800d8f8:	0002a8fe 	.word	0x0002a8fe
 800d8fc:	00030038 	.word	0x00030038
 800d900:	0003003c 	.word	0x0003003c
 800d904:	00030040 	.word	0x00030040
 800d908:	00030044 	.word	0x00030044
 800d90c:	00030048 	.word	0x00030048
 800d910:	0003004c 	.word	0x0003004c
 800d914:	00030050 	.word	0x00030050
 800d918:	10000240 	.word	0x10000240
 800d91c:	0003001c 	.word	0x0003001c
 800d920:	1b6da489 	.word	0x1b6da489
 800d924:	00030020 	.word	0x00030020
 800d928:	0001cff5 	.word	0x0001cff5
 800d92c:	0001cfb5 	.word	0x0001cfb5
 800d930:	0001cf36 	.word	0x0001cf36
 800d934:	0001c0fd 	.word	0x0001c0fd
 800d938:	0002af3e 	.word	0x0002af3e
 800d93c:	0002a5fe 	.word	0x0002a5fe
 800d940:	0002ac36 	.word	0x0002ac36
 800d944:	0001c77e 	.word	0x0001c77e
 800d948:	0001c6be 	.word	0x0001c6be
 800d94c:	0001c43e 	.word	0x0001c43e

0800d950 <ull_disable_rftx_blocks>:
 800d950:	b508      	push	{r3, lr}
 800d952:	2300      	movs	r3, #0
 800d954:	461a      	mov	r2, r3
 800d956:	4902      	ldr	r1, [pc, #8]	; (800d960 <ull_disable_rftx_blocks+0x10>)
 800d958:	f7ff fd5c 	bl	800d414 <dwt_write32bitoffsetreg>
 800d95c:	bd08      	pop	{r3, pc}
 800d95e:	bf00      	nop
 800d960:	00070004 	.word	0x00070004

0800d964 <ull_disable_rf_tx>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4604      	mov	r4, r0
 800d968:	460d      	mov	r5, r1
 800d96a:	2300      	movs	r3, #0
 800d96c:	461a      	mov	r2, r3
 800d96e:	490a      	ldr	r1, [pc, #40]	; (800d998 <ull_disable_rf_tx+0x34>)
 800d970:	f7ff fd50 	bl	800d414 <dwt_write32bitoffsetreg>
 800d974:	2300      	movs	r3, #0
 800d976:	461a      	mov	r2, r3
 800d978:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800d97c:	4620      	mov	r0, r4
 800d97e:	f7ff fd49 	bl	800d414 <dwt_write32bitoffsetreg>
 800d982:	b905      	cbnz	r5, 800d986 <ull_disable_rf_tx+0x22>
 800d984:	bd38      	pop	{r3, r4, r5, pc}
 800d986:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800d98a:	2200      	movs	r2, #0
 800d98c:	4903      	ldr	r1, [pc, #12]	; (800d99c <ull_disable_rf_tx+0x38>)
 800d98e:	4620      	mov	r0, r4
 800d990:	f7ff fd40 	bl	800d414 <dwt_write32bitoffsetreg>
 800d994:	e7f6      	b.n	800d984 <ull_disable_rf_tx+0x20>
 800d996:	bf00      	nop
 800d998:	00070048 	.word	0x00070048
 800d99c:	00070014 	.word	0x00070014

0800d9a0 <ull_readrxdata>:
 800d9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800d9a6:	7be4      	ldrb	r4, [r4, #15]
 800d9a8:	2c03      	cmp	r4, #3
 800d9aa:	bf0c      	ite	eq
 800d9ac:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800d9b0:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800d9b4:	189c      	adds	r4, r3, r2
 800d9b6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d9ba:	da19      	bge.n	800d9f0 <ull_readrxdata+0x50>
 800d9bc:	461d      	mov	r5, r3
 800d9be:	4616      	mov	r6, r2
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	2b7f      	cmp	r3, #127	; 0x7f
 800d9c6:	d915      	bls.n	800d9f4 <ull_readrxdata+0x54>
 800d9c8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	490d      	ldr	r1, [pc, #52]	; (800da04 <ull_readrxdata+0x64>)
 800d9d0:	f7ff fd20 	bl	800d414 <dwt_write32bitoffsetreg>
 800d9d4:	462b      	mov	r3, r5
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	490b      	ldr	r1, [pc, #44]	; (800da08 <ull_readrxdata+0x68>)
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f7ff fd1a 	bl	800d414 <dwt_write32bitoffsetreg>
 800d9e0:	9700      	str	r7, [sp, #0]
 800d9e2:	4633      	mov	r3, r6
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f7fe ffc6 	bl	800c97c <dwt_readfromdevice>
 800d9f0:	b003      	add	sp, #12
 800d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f4:	9100      	str	r1, [sp, #0]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	4661      	mov	r1, ip
 800d9fc:	f7fe ffbe 	bl	800c97c <dwt_readfromdevice>
 800da00:	e7f6      	b.n	800d9f0 <ull_readrxdata+0x50>
 800da02:	bf00      	nop
 800da04:	001f0004 	.word	0x001f0004
 800da08:	001f0008 	.word	0x001f0008

0800da0c <ull_rxenable>:
 800da0c:	b530      	push	{r4, r5, lr}
 800da0e:	b083      	sub	sp, #12
 800da10:	4605      	mov	r5, r0
 800da12:	460c      	mov	r4, r1
 800da14:	b171      	cbz	r1, 800da34 <ull_rxenable+0x28>
 800da16:	f021 0302 	bic.w	r3, r1, #2
 800da1a:	3b01      	subs	r3, #1
 800da1c:	2b0f      	cmp	r3, #15
 800da1e:	d856      	bhi.n	800dace <ull_rxenable+0xc2>
 800da20:	e8df f003 	tbb	[pc, r3]
 800da24:	21555510 	.word	0x21555510
 800da28:	28555555 	.word	0x28555555
 800da2c:	55555555 	.word	0x55555555
 800da30:	33555555 	.word	0x33555555
 800da34:	2200      	movs	r2, #0
 800da36:	9200      	str	r2, [sp, #0]
 800da38:	4613      	mov	r3, r2
 800da3a:	2102      	movs	r1, #2
 800da3c:	f7ff fb8c 	bl	800d158 <dwt_writetodevice>
 800da40:	4620      	mov	r0, r4
 800da42:	e00e      	b.n	800da62 <ull_rxenable+0x56>
 800da44:	2200      	movs	r2, #0
 800da46:	9200      	str	r2, [sp, #0]
 800da48:	4613      	mov	r3, r2
 800da4a:	2104      	movs	r1, #4
 800da4c:	f7ff fb84 	bl	800d158 <dwt_writetodevice>
 800da50:	2203      	movs	r2, #3
 800da52:	2144      	movs	r1, #68	; 0x44
 800da54:	4628      	mov	r0, r5
 800da56:	f7fe ffc3 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800da5a:	f010 0f08 	tst.w	r0, #8
 800da5e:	d11f      	bne.n	800daa0 <ull_rxenable+0x94>
 800da60:	2000      	movs	r0, #0
 800da62:	b003      	add	sp, #12
 800da64:	bd30      	pop	{r4, r5, pc}
 800da66:	2200      	movs	r2, #0
 800da68:	9200      	str	r2, [sp, #0]
 800da6a:	4613      	mov	r3, r2
 800da6c:	210a      	movs	r1, #10
 800da6e:	f7ff fb73 	bl	800d158 <dwt_writetodevice>
 800da72:	e7ed      	b.n	800da50 <ull_rxenable+0x44>
 800da74:	2100      	movs	r1, #0
 800da76:	f7ff fe41 	bl	800d6fc <_dwt_adjust_delaytime>
 800da7a:	2200      	movs	r2, #0
 800da7c:	9200      	str	r2, [sp, #0]
 800da7e:	4613      	mov	r3, r2
 800da80:	2108      	movs	r1, #8
 800da82:	4628      	mov	r0, r5
 800da84:	f7ff fb68 	bl	800d158 <dwt_writetodevice>
 800da88:	e7e2      	b.n	800da50 <ull_rxenable+0x44>
 800da8a:	2101      	movs	r1, #1
 800da8c:	f7ff fe36 	bl	800d6fc <_dwt_adjust_delaytime>
 800da90:	2200      	movs	r2, #0
 800da92:	9200      	str	r2, [sp, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	2106      	movs	r1, #6
 800da98:	4628      	mov	r0, r5
 800da9a:	f7ff fb5d 	bl	800d158 <dwt_writetodevice>
 800da9e:	e7d7      	b.n	800da50 <ull_rxenable+0x44>
 800daa0:	2100      	movs	r1, #0
 800daa2:	9100      	str	r1, [sp, #0]
 800daa4:	460b      	mov	r3, r1
 800daa6:	460a      	mov	r2, r1
 800daa8:	4628      	mov	r0, r5
 800daaa:	f7ff fb55 	bl	800d158 <dwt_writetodevice>
 800daae:	f014 0f02 	tst.w	r4, #2
 800dab2:	d002      	beq.n	800daba <ull_rxenable+0xae>
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295
 800dab8:	e7d3      	b.n	800da62 <ull_rxenable+0x56>
 800daba:	2200      	movs	r2, #0
 800dabc:	9200      	str	r2, [sp, #0]
 800dabe:	4613      	mov	r3, r2
 800dac0:	2102      	movs	r1, #2
 800dac2:	4628      	mov	r0, r5
 800dac4:	f7ff fb48 	bl	800d158 <dwt_writetodevice>
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	e7c9      	b.n	800da62 <ull_rxenable+0x56>
 800dace:	f04f 30ff 	mov.w	r0, #4294967295
 800dad2:	e7c6      	b.n	800da62 <ull_rxenable+0x56>

0800dad4 <ull_writetxdata>:
 800dad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dad6:	b083      	sub	sp, #12
 800dad8:	185c      	adds	r4, r3, r1
 800dada:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dade:	da24      	bge.n	800db2a <ull_writetxdata+0x56>
 800dae0:	461c      	mov	r4, r3
 800dae2:	4617      	mov	r7, r2
 800dae4:	460e      	mov	r6, r1
 800dae6:	4605      	mov	r5, r0
 800dae8:	2b7f      	cmp	r3, #127	; 0x7f
 800daea:	d915      	bls.n	800db18 <ull_writetxdata+0x44>
 800daec:	2314      	movs	r3, #20
 800daee:	2200      	movs	r2, #0
 800daf0:	490f      	ldr	r1, [pc, #60]	; (800db30 <ull_writetxdata+0x5c>)
 800daf2:	f7ff fc8f 	bl	800d414 <dwt_write32bitoffsetreg>
 800daf6:	4623      	mov	r3, r4
 800daf8:	2200      	movs	r2, #0
 800dafa:	490e      	ldr	r1, [pc, #56]	; (800db34 <ull_writetxdata+0x60>)
 800dafc:	4628      	mov	r0, r5
 800dafe:	f7ff fc89 	bl	800d414 <dwt_write32bitoffsetreg>
 800db02:	9700      	str	r7, [sp, #0]
 800db04:	4633      	mov	r3, r6
 800db06:	2200      	movs	r2, #0
 800db08:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800db0c:	4628      	mov	r0, r5
 800db0e:	f7ff fb23 	bl	800d158 <dwt_writetodevice>
 800db12:	2000      	movs	r0, #0
 800db14:	b003      	add	sp, #12
 800db16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db18:	9200      	str	r2, [sp, #0]
 800db1a:	460b      	mov	r3, r1
 800db1c:	4622      	mov	r2, r4
 800db1e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800db22:	f7ff fb19 	bl	800d158 <dwt_writetodevice>
 800db26:	2000      	movs	r0, #0
 800db28:	e7f4      	b.n	800db14 <ull_writetxdata+0x40>
 800db2a:	f04f 30ff 	mov.w	r0, #4294967295
 800db2e:	e7f1      	b.n	800db14 <ull_writetxdata+0x40>
 800db30:	001f0004 	.word	0x001f0004
 800db34:	001f0008 	.word	0x001f0008

0800db38 <dwt_modify32bitoffsetreg>:
 800db38:	b530      	push	{r4, r5, lr}
 800db3a:	b085      	sub	sp, #20
 800db3c:	9c08      	ldr	r4, [sp, #32]
 800db3e:	f88d 3008 	strb.w	r3, [sp, #8]
 800db42:	0a1d      	lsrs	r5, r3, #8
 800db44:	f88d 5009 	strb.w	r5, [sp, #9]
 800db48:	0c1d      	lsrs	r5, r3, #16
 800db4a:	f88d 500a 	strb.w	r5, [sp, #10]
 800db4e:	0e1b      	lsrs	r3, r3, #24
 800db50:	f88d 300b 	strb.w	r3, [sp, #11]
 800db54:	f88d 400c 	strb.w	r4, [sp, #12]
 800db58:	0a23      	lsrs	r3, r4, #8
 800db5a:	f88d 300d 	strb.w	r3, [sp, #13]
 800db5e:	0c23      	lsrs	r3, r4, #16
 800db60:	f88d 300e 	strb.w	r3, [sp, #14]
 800db64:	0e24      	lsrs	r4, r4, #24
 800db66:	f88d 400f 	strb.w	r4, [sp, #15]
 800db6a:	f248 0303 	movw	r3, #32771	; 0x8003
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	ab02      	add	r3, sp, #8
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	2308      	movs	r3, #8
 800db76:	b292      	uxth	r2, r2
 800db78:	f7fe fe7d 	bl	800c876 <dwt_xfer3xxx>
 800db7c:	b005      	add	sp, #20
 800db7e:	bd30      	pop	{r4, r5, pc}

0800db80 <_dwt_kick_dgc_on_wakeup>:
 800db80:	b500      	push	{lr}
 800db82:	b083      	sub	sp, #12
 800db84:	2905      	cmp	r1, #5
 800db86:	d004      	beq.n	800db92 <_dwt_kick_dgc_on_wakeup+0x12>
 800db88:	2909      	cmp	r1, #9
 800db8a:	d00b      	beq.n	800dba4 <_dwt_kick_dgc_on_wakeup+0x24>
 800db8c:	b003      	add	sp, #12
 800db8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800db92:	2340      	movs	r3, #64	; 0x40
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 800db9a:	2200      	movs	r2, #0
 800db9c:	4906      	ldr	r1, [pc, #24]	; (800dbb8 <_dwt_kick_dgc_on_wakeup+0x38>)
 800db9e:	f7ff ffcb 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dba2:	e7f3      	b.n	800db8c <_dwt_kick_dgc_on_wakeup+0xc>
 800dba4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 800dbae:	2200      	movs	r2, #0
 800dbb0:	4901      	ldr	r1, [pc, #4]	; (800dbb8 <_dwt_kick_dgc_on_wakeup+0x38>)
 800dbb2:	f7ff ffc1 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dbb6:	e7e9      	b.n	800db8c <_dwt_kick_dgc_on_wakeup+0xc>
 800dbb8:	000b0008 	.word	0x000b0008

0800dbbc <ull_enable_rf_tx>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	460e      	mov	r6, r1
 800dbc4:	4d13      	ldr	r5, [pc, #76]	; (800dc14 <ull_enable_rf_tx+0x58>)
 800dbc6:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	f7ff ffb0 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dbd8:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f7ff ffa6 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dbec:	4b0a      	ldr	r3, [pc, #40]	; (800dc18 <ull_enable_rf_tx+0x5c>)
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f7ff ff9c 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dc00:	b90e      	cbnz	r6, 800dc06 <ull_enable_rf_tx+0x4a>
 800dc02:	b002      	add	sp, #8
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <ull_enable_rf_tx+0x60>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	4905      	ldr	r1, [pc, #20]	; (800dc20 <ull_enable_rf_tx+0x64>)
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f7ff fc01 	bl	800d414 <dwt_write32bitoffsetreg>
 800dc12:	e7f6      	b.n	800dc02 <ull_enable_rf_tx+0x46>
 800dc14:	00070048 	.word	0x00070048
 800dc18:	02003c00 	.word	0x02003c00
 800dc1c:	01011100 	.word	0x01011100
 800dc20:	00070014 	.word	0x00070014

0800dc24 <ull_enable_rftx_blocks>:
 800dc24:	b500      	push	{lr}
 800dc26:	b083      	sub	sp, #12
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <ull_enable_rftx_blocks+0x1c>)
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc30:	2200      	movs	r2, #0
 800dc32:	4904      	ldr	r1, [pc, #16]	; (800dc44 <ull_enable_rftx_blocks+0x20>)
 800dc34:	f7ff ff80 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dc38:	b003      	add	sp, #12
 800dc3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc3e:	bf00      	nop
 800dc40:	02003c00 	.word	0x02003c00
 800dc44:	00070004 	.word	0x00070004

0800dc48 <_dwt_otpprogword32>:
 800dc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	4604      	mov	r4, r0
 800dc50:	460d      	mov	r5, r1
 800dc52:	4617      	mov	r7, r2
 800dc54:	4e56      	ldr	r6, [pc, #344]	; (800ddb0 <_dwt_otpprogword32+0x168>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	4631      	mov	r1, r6
 800dc5a:	f7fe fe99 	bl	800c990 <dwt_read32bitoffsetreg>
 800dc5e:	4681      	mov	r9, r0
 800dc60:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f7ff ff62 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dc74:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800ddb4 <_dwt_otpprogword32+0x16c>
 800dc78:	2318      	movs	r3, #24
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4641      	mov	r1, r8
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f7ff fac7 	bl	800d212 <dwt_write16bitoffsetreg>
 800dc84:	2125      	movs	r1, #37	; 0x25
 800dc86:	4620      	mov	r0, r4
 800dc88:	f7ff fb0a 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dc8c:	2102      	movs	r1, #2
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f7ff fb06 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dc94:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f7ff fb01 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dc9e:	b2f9      	uxtb	r1, r7
 800dca0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dca4:	4620      	mov	r0, r4
 800dca6:	f7ff fafb 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f7ff faf6 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f7ff faf2 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcbc:	2102      	movs	r1, #2
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7ff faee 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcc4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f7ff fae9 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcce:	b2e9      	uxtb	r1, r5
 800dcd0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7ff fae3 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcda:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800dcde:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dce2:	4620      	mov	r0, r4
 800dce4:	f7ff fadc 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dce8:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800dcec:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f7ff fad5 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dcf6:	0e29      	lsrs	r1, r5, #24
 800dcf8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f7ff facf 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd02:	2100      	movs	r1, #0
 800dd04:	4620      	mov	r0, r4
 800dd06:	f7ff facb 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd0a:	213a      	movs	r1, #58	; 0x3a
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f7ff fac7 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd12:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff fac2 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd1c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800dd20:	4620      	mov	r0, r4
 800dd22:	f7ff fabd 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd26:	2100      	movs	r1, #0
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f7ff fab9 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd2e:	213a      	movs	r1, #58	; 0x3a
 800dd30:	4620      	mov	r0, r4
 800dd32:	f7ff fab5 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd36:	f240 1101 	movw	r1, #257	; 0x101
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff fab0 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd40:	2302      	movs	r3, #2
 800dd42:	2200      	movs	r2, #0
 800dd44:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f7ff fa62 	bl	800d212 <dwt_write16bitoffsetreg>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	461a      	mov	r2, r3
 800dd52:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7ff fa5b 	bl	800d212 <dwt_write16bitoffsetreg>
 800dd5c:	2002      	movs	r0, #2
 800dd5e:	f7fd ff43 	bl	800bbe8 <deca_sleep>
 800dd62:	213a      	movs	r1, #58	; 0x3a
 800dd64:	4620      	mov	r0, r4
 800dd66:	f7ff fa9b 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd6a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7ff fa96 	bl	800d2a0 <__dwt_otp_write_wdata_id_reg>
 800dd74:	2302      	movs	r3, #2
 800dd76:	2200      	movs	r2, #0
 800dd78:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f7ff fa48 	bl	800d212 <dwt_write16bitoffsetreg>
 800dd82:	2300      	movs	r3, #0
 800dd84:	461a      	mov	r2, r3
 800dd86:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff fa41 	bl	800d212 <dwt_write16bitoffsetreg>
 800dd90:	2300      	movs	r3, #0
 800dd92:	461a      	mov	r2, r3
 800dd94:	4641      	mov	r1, r8
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7ff fa3b 	bl	800d212 <dwt_write16bitoffsetreg>
 800dd9c:	464b      	mov	r3, r9
 800dd9e:	2200      	movs	r2, #0
 800dda0:	4631      	mov	r1, r6
 800dda2:	4620      	mov	r0, r4
 800dda4:	f7ff fb36 	bl	800d414 <dwt_write32bitoffsetreg>
 800dda8:	b003      	add	sp, #12
 800ddaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddae:	bf00      	nop
 800ddb0:	00070044 	.word	0x00070044
 800ddb4:	000b0008 	.word	0x000b0008

0800ddb8 <ull_setgpiomode>:
 800ddb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	2400      	movs	r4, #0
 800ddbe:	4623      	mov	r3, r4
 800ddc0:	2601      	movs	r6, #1
 800ddc2:	2707      	movs	r7, #7
 800ddc4:	e002      	b.n	800ddcc <ull_setgpiomode+0x14>
 800ddc6:	3401      	adds	r4, #1
 800ddc8:	2c09      	cmp	r4, #9
 800ddca:	d009      	beq.n	800dde0 <ull_setgpiomode+0x28>
 800ddcc:	fa06 f504 	lsl.w	r5, r6, r4
 800ddd0:	420d      	tst	r5, r1
 800ddd2:	d0f8      	beq.n	800ddc6 <ull_setgpiomode+0xe>
 800ddd4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800ddd8:	fa07 f505 	lsl.w	r5, r7, r5
 800dddc:	432b      	orrs	r3, r5
 800ddde:	e7f2      	b.n	800ddc6 <ull_setgpiomode+0xe>
 800dde0:	401a      	ands	r2, r3
 800dde2:	9200      	str	r2, [sp, #0]
 800dde4:	43db      	mvns	r3, r3
 800dde6:	2200      	movs	r2, #0
 800dde8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ddec:	f7ff fea4 	bl	800db38 <dwt_modify32bitoffsetreg>
 800ddf0:	b003      	add	sp, #12
 800ddf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddf4 <ull_setinterrupt>:
 800ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf8:	b082      	sub	sp, #8
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	4688      	mov	r8, r1
 800ddfe:	4617      	mov	r7, r2
 800de00:	461d      	mov	r5, r3
 800de02:	f7fd fed3 	bl	800bbac <decamutexon>
 800de06:	4606      	mov	r6, r0
 800de08:	2d02      	cmp	r5, #2
 800de0a:	d02d      	beq.n	800de68 <ull_setinterrupt+0x74>
 800de0c:	2d01      	cmp	r5, #1
 800de0e:	d038      	beq.n	800de82 <ull_setinterrupt+0x8e>
 800de10:	2500      	movs	r5, #0
 800de12:	9500      	str	r5, [sp, #0]
 800de14:	ea6f 0308 	mvn.w	r3, r8
 800de18:	462a      	mov	r2, r5
 800de1a:	213c      	movs	r1, #60	; 0x3c
 800de1c:	4620      	mov	r0, r4
 800de1e:	f7ff fe8b 	bl	800db38 <dwt_modify32bitoffsetreg>
 800de22:	9500      	str	r5, [sp, #0]
 800de24:	43fb      	mvns	r3, r7
 800de26:	462a      	mov	r2, r5
 800de28:	2140      	movs	r1, #64	; 0x40
 800de2a:	4620      	mov	r0, r4
 800de2c:	f7ff fe84 	bl	800db38 <dwt_modify32bitoffsetreg>
 800de30:	2200      	movs	r2, #0
 800de32:	213c      	movs	r1, #60	; 0x3c
 800de34:	4620      	mov	r0, r4
 800de36:	f7fe fdab 	bl	800c990 <dwt_read32bitoffsetreg>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2200      	movs	r2, #0
 800de3e:	2144      	movs	r1, #68	; 0x44
 800de40:	4620      	mov	r0, r4
 800de42:	f7ff fae7 	bl	800d414 <dwt_write32bitoffsetreg>
 800de46:	2200      	movs	r2, #0
 800de48:	2140      	movs	r1, #64	; 0x40
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7fe fda0 	bl	800c990 <dwt_read32bitoffsetreg>
 800de50:	4603      	mov	r3, r0
 800de52:	2200      	movs	r2, #0
 800de54:	2148      	movs	r1, #72	; 0x48
 800de56:	4620      	mov	r0, r4
 800de58:	f7ff fadc 	bl	800d414 <dwt_write32bitoffsetreg>
 800de5c:	4630      	mov	r0, r6
 800de5e:	f7fd feb6 	bl	800bbce <decamutexoff>
 800de62:	b002      	add	sp, #8
 800de64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de68:	4643      	mov	r3, r8
 800de6a:	2200      	movs	r2, #0
 800de6c:	213c      	movs	r1, #60	; 0x3c
 800de6e:	4620      	mov	r0, r4
 800de70:	f7ff fad0 	bl	800d414 <dwt_write32bitoffsetreg>
 800de74:	463b      	mov	r3, r7
 800de76:	2200      	movs	r2, #0
 800de78:	2140      	movs	r1, #64	; 0x40
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7ff faca 	bl	800d414 <dwt_write32bitoffsetreg>
 800de80:	e7d6      	b.n	800de30 <ull_setinterrupt+0x3c>
 800de82:	f8cd 8000 	str.w	r8, [sp]
 800de86:	f04f 33ff 	mov.w	r3, #4294967295
 800de8a:	2200      	movs	r2, #0
 800de8c:	213c      	movs	r1, #60	; 0x3c
 800de8e:	4620      	mov	r0, r4
 800de90:	f7ff fe52 	bl	800db38 <dwt_modify32bitoffsetreg>
 800de94:	9700      	str	r7, [sp, #0]
 800de96:	f04f 33ff 	mov.w	r3, #4294967295
 800de9a:	2200      	movs	r2, #0
 800de9c:	2140      	movs	r1, #64	; 0x40
 800de9e:	4620      	mov	r0, r4
 800dea0:	f7ff fe4a 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dea4:	e7c4      	b.n	800de30 <ull_setinterrupt+0x3c>
	...

0800dea8 <ull_writetxfctrl>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	4604      	mov	r4, r0
 800deae:	2a7f      	cmp	r2, #127	; 0x7f
 800deb0:	d912      	bls.n	800ded8 <ull_writetxfctrl+0x30>
 800deb2:	3280      	adds	r2, #128	; 0x80
 800deb4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800deb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800debc:	9100      	str	r1, [sp, #0]
 800debe:	4b0c      	ldr	r3, [pc, #48]	; (800def0 <ull_writetxfctrl+0x48>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	2124      	movs	r1, #36	; 0x24
 800dec4:	f7ff fe38 	bl	800db38 <dwt_modify32bitoffsetreg>
 800dec8:	2200      	movs	r2, #0
 800deca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dece:	4620      	mov	r0, r4
 800ded0:	f7fe fd86 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800ded4:	b002      	add	sp, #8
 800ded6:	bd10      	pop	{r4, pc}
 800ded8:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800dedc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dee0:	9100      	str	r1, [sp, #0]
 800dee2:	4b03      	ldr	r3, [pc, #12]	; (800def0 <ull_writetxfctrl+0x48>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	2124      	movs	r1, #36	; 0x24
 800dee8:	f7ff fe26 	bl	800db38 <dwt_modify32bitoffsetreg>
 800deec:	e7f2      	b.n	800ded4 <ull_writetxfctrl+0x2c>
 800deee:	bf00      	nop
 800def0:	fc00f400 	.word	0xfc00f400

0800def4 <prs_sys_status_and_or>:
 800def4:	b500      	push	{lr}
 800def6:	b083      	sub	sp, #12
 800def8:	9200      	str	r2, [sp, #0]
 800defa:	460b      	mov	r3, r1
 800defc:	2200      	movs	r2, #0
 800defe:	2144      	movs	r1, #68	; 0x44
 800df00:	f7ff fe1a 	bl	800db38 <dwt_modify32bitoffsetreg>
 800df04:	2000      	movs	r0, #0
 800df06:	b003      	add	sp, #12
 800df08:	f85d fb04 	ldr.w	pc, [sp], #4

0800df0c <dwt_modify8bitoffsetreg>:
 800df0c:	b500      	push	{lr}
 800df0e:	b085      	sub	sp, #20
 800df10:	f88d 300c 	strb.w	r3, [sp, #12]
 800df14:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800df18:	f88d 300d 	strb.w	r3, [sp, #13]
 800df1c:	f248 0301 	movw	r3, #32769	; 0x8001
 800df20:	9301      	str	r3, [sp, #4]
 800df22:	ab03      	add	r3, sp, #12
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	2302      	movs	r3, #2
 800df28:	b292      	uxth	r2, r2
 800df2a:	f7fe fca4 	bl	800c876 <dwt_xfer3xxx>
 800df2e:	b005      	add	sp, #20
 800df30:	f85d fb04 	ldr.w	pc, [sp], #4

0800df34 <ull_configciadiag>:
 800df34:	b530      	push	{r4, r5, lr}
 800df36:	b083      	sub	sp, #12
 800df38:	4604      	mov	r4, r0
 800df3a:	460d      	mov	r5, r1
 800df3c:	f011 0f01 	tst.w	r1, #1
 800df40:	d015      	beq.n	800df6e <ull_configciadiag+0x3a>
 800df42:	2300      	movs	r3, #0
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	23ef      	movs	r3, #239	; 0xef
 800df48:	2202      	movs	r2, #2
 800df4a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800df4e:	f7ff ffdd 	bl	800df0c <dwt_modify8bitoffsetreg>
 800df52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df54:	761d      	strb	r5, [r3, #24]
 800df56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df58:	7e1b      	ldrb	r3, [r3, #24]
 800df5a:	085b      	lsrs	r3, r3, #1
 800df5c:	d010      	beq.n	800df80 <ull_configciadiag+0x4c>
 800df5e:	086b      	lsrs	r3, r5, #1
 800df60:	2200      	movs	r2, #0
 800df62:	490e      	ldr	r1, [pc, #56]	; (800df9c <ull_configciadiag+0x68>)
 800df64:	4620      	mov	r0, r4
 800df66:	f7ff f902 	bl	800d16e <dwt_write8bitoffsetreg>
 800df6a:	b003      	add	sp, #12
 800df6c:	bd30      	pop	{r4, r5, pc}
 800df6e:	2310      	movs	r3, #16
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	23ff      	movs	r3, #255	; 0xff
 800df74:	2202      	movs	r2, #2
 800df76:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800df7a:	f7ff ffc7 	bl	800df0c <dwt_modify8bitoffsetreg>
 800df7e:	e7e8      	b.n	800df52 <ull_configciadiag+0x1e>
 800df80:	2301      	movs	r3, #1
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	23ff      	movs	r3, #255	; 0xff
 800df86:	2200      	movs	r2, #0
 800df88:	4904      	ldr	r1, [pc, #16]	; (800df9c <ull_configciadiag+0x68>)
 800df8a:	4620      	mov	r0, r4
 800df8c:	f7ff ffbe 	bl	800df0c <dwt_modify8bitoffsetreg>
 800df90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800df92:	7e13      	ldrb	r3, [r2, #24]
 800df94:	f043 0302 	orr.w	r3, r3, #2
 800df98:	7613      	strb	r3, [r2, #24]
 800df9a:	e7e6      	b.n	800df6a <ull_configciadiag+0x36>
 800df9c:	00010028 	.word	0x00010028

0800dfa0 <ull_calcbandwidthadj>:
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	460d      	mov	r5, r1
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	f7ff f963 	bl	800d274 <ull_force_clocks>
 800dfae:	2100      	movs	r1, #0
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7ff fe03 	bl	800dbbc <ull_enable_rf_tx>
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7ff fe34 	bl	800dc24 <ull_enable_rftx_blocks>
 800dfbc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4915      	ldr	r1, [pc, #84]	; (800e018 <ull_calcbandwidthadj+0x78>)
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f7ff f924 	bl	800d212 <dwt_write16bitoffsetreg>
 800dfca:	2303      	movs	r3, #3
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	23ff      	movs	r3, #255	; 0xff
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	4912      	ldr	r1, [pc, #72]	; (800e01c <ull_calcbandwidthadj+0x7c>)
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f7ff ff99 	bl	800df0c <dwt_modify8bitoffsetreg>
 800dfda:	4e10      	ldr	r6, [pc, #64]	; (800e01c <ull_calcbandwidthadj+0x7c>)
 800dfdc:	2500      	movs	r5, #0
 800dfde:	462a      	mov	r2, r5
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f7fe fcfc 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800dfe8:	f010 0f01 	tst.w	r0, #1
 800dfec:	d1f7      	bne.n	800dfde <ull_calcbandwidthadj+0x3e>
 800dfee:	4620      	mov	r0, r4
 800dff0:	f7ff fcae 	bl	800d950 <ull_disable_rftx_blocks>
 800dff4:	2100      	movs	r1, #0
 800dff6:	4620      	mov	r0, r4
 800dff8:	f7ff fcb4 	bl	800d964 <ull_disable_rf_tx>
 800dffc:	2105      	movs	r1, #5
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff f938 	bl	800d274 <ull_force_clocks>
 800e004:	2200      	movs	r2, #0
 800e006:	4906      	ldr	r1, [pc, #24]	; (800e020 <ull_calcbandwidthadj+0x80>)
 800e008:	4620      	mov	r0, r4
 800e00a:	f7fe fce9 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800e00e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e012:	b002      	add	sp, #8
 800e014:	bd70      	pop	{r4, r5, r6, pc}
 800e016:	bf00      	nop
 800e018:	0008001c 	.word	0x0008001c
 800e01c:	00080010 	.word	0x00080010
 800e020:	0007001c 	.word	0x0007001c

0800e024 <ull_configuretxrf>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4605      	mov	r5, r0
 800e028:	460c      	mov	r4, r1
 800e02a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800e02e:	b149      	cbz	r1, 800e044 <ull_configuretxrf+0x20>
 800e030:	f7ff ffb6 	bl	800dfa0 <ull_calcbandwidthadj>
 800e034:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800e038:	2200      	movs	r2, #0
 800e03a:	4905      	ldr	r1, [pc, #20]	; (800e050 <ull_configuretxrf+0x2c>)
 800e03c:	4628      	mov	r0, r5
 800e03e:	f7ff f9e9 	bl	800d414 <dwt_write32bitoffsetreg>
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	7823      	ldrb	r3, [r4, #0]
 800e046:	2200      	movs	r2, #0
 800e048:	4902      	ldr	r1, [pc, #8]	; (800e054 <ull_configuretxrf+0x30>)
 800e04a:	f7ff f890 	bl	800d16e <dwt_write8bitoffsetreg>
 800e04e:	e7f1      	b.n	800e034 <ull_configuretxrf+0x10>
 800e050:	0001000c 	.word	0x0001000c
 800e054:	0007001c 	.word	0x0007001c

0800e058 <ull_repeated_frames>:
 800e058:	b530      	push	{r4, r5, lr}
 800e05a:	b083      	sub	sp, #12
 800e05c:	4604      	mov	r4, r0
 800e05e:	460d      	mov	r5, r1
 800e060:	2310      	movs	r3, #16
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	23ff      	movs	r3, #255	; 0xff
 800e066:	2200      	movs	r2, #0
 800e068:	4906      	ldr	r1, [pc, #24]	; (800e084 <ull_repeated_frames+0x2c>)
 800e06a:	f7ff ff4f 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e06e:	462b      	mov	r3, r5
 800e070:	2d02      	cmp	r5, #2
 800e072:	bf38      	it	cc
 800e074:	2302      	movcc	r3, #2
 800e076:	2200      	movs	r2, #0
 800e078:	212c      	movs	r1, #44	; 0x2c
 800e07a:	4620      	mov	r0, r4
 800e07c:	f7ff f9ca 	bl	800d414 <dwt_write32bitoffsetreg>
 800e080:	b003      	add	sp, #12
 800e082:	bd30      	pop	{r4, r5, pc}
 800e084:	000f0024 	.word	0x000f0024

0800e088 <ull_setdwstate>:
 800e088:	b530      	push	{r4, r5, lr}
 800e08a:	b083      	sub	sp, #12
 800e08c:	4604      	mov	r4, r0
 800e08e:	2901      	cmp	r1, #1
 800e090:	d01d      	beq.n	800e0ce <ull_setdwstate+0x46>
 800e092:	2902      	cmp	r1, #2
 800e094:	d030      	beq.n	800e0f8 <ull_setdwstate+0x70>
 800e096:	2301      	movs	r3, #1
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	23ff      	movs	r3, #255	; 0xff
 800e09c:	2200      	movs	r2, #0
 800e09e:	4926      	ldr	r1, [pc, #152]	; (800e138 <ull_setdwstate+0xb0>)
 800e0a0:	f7ff ff34 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e0a4:	4d25      	ldr	r5, [pc, #148]	; (800e13c <ull_setdwstate+0xb4>)
 800e0a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7ff fd3f 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	237f      	movs	r3, #127	; 0x7f
 800e0c0:	2202      	movs	r2, #2
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f7ff ff21 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e0ca:	b003      	add	sp, #12
 800e0cc:	bd30      	pop	{r4, r5, pc}
 800e0ce:	2105      	movs	r1, #5
 800e0d0:	f7ff f8d0 	bl	800d274 <ull_force_clocks>
 800e0d4:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	f04f 33ff 	mov.w	r3, #4294967295
 800e0de:	2200      	movs	r2, #0
 800e0e0:	4917      	ldr	r1, [pc, #92]	; (800e140 <ull_setdwstate+0xb8>)
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f7ff fd28 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	9200      	str	r2, [sp, #0]
 800e0ec:	23ff      	movs	r3, #255	; 0xff
 800e0ee:	4913      	ldr	r1, [pc, #76]	; (800e13c <ull_setdwstate+0xb4>)
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7ff ff0b 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e0f6:	e7e8      	b.n	800e0ca <ull_setdwstate+0x42>
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	23ff      	movs	r3, #255	; 0xff
 800e0fe:	2200      	movs	r2, #0
 800e100:	490d      	ldr	r1, [pc, #52]	; (800e138 <ull_setdwstate+0xb0>)
 800e102:	f7ff ff03 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e106:	4d0d      	ldr	r5, [pc, #52]	; (800e13c <ull_setdwstate+0xb4>)
 800e108:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800e112:	2200      	movs	r2, #0
 800e114:	4629      	mov	r1, r5
 800e116:	4620      	mov	r0, r4
 800e118:	f7ff fd0e 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e11c:	2300      	movs	r3, #0
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	237f      	movs	r3, #127	; 0x7f
 800e122:	2202      	movs	r2, #2
 800e124:	4629      	mov	r1, r5
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fef0 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e12c:	2105      	movs	r1, #5
 800e12e:	4620      	mov	r0, r4
 800e130:	f7ff f8a0 	bl	800d274 <ull_force_clocks>
 800e134:	e7c9      	b.n	800e0ca <ull_setdwstate+0x42>
 800e136:	bf00      	nop
 800e138:	00110004 	.word	0x00110004
 800e13c:	00110008 	.word	0x00110008
 800e140:	00090008 	.word	0x00090008

0800e144 <ull_configureframefilter>:
 800e144:	b530      	push	{r4, r5, lr}
 800e146:	b083      	sub	sp, #12
 800e148:	4605      	mov	r5, r0
 800e14a:	2902      	cmp	r1, #2
 800e14c:	d00e      	beq.n	800e16c <ull_configureframefilter+0x28>
 800e14e:	2400      	movs	r4, #0
 800e150:	9400      	str	r4, [sp, #0]
 800e152:	23fe      	movs	r3, #254	; 0xfe
 800e154:	4622      	mov	r2, r4
 800e156:	2110      	movs	r1, #16
 800e158:	f7ff fed8 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e15c:	4623      	mov	r3, r4
 800e15e:	4622      	mov	r2, r4
 800e160:	2114      	movs	r1, #20
 800e162:	4628      	mov	r0, r5
 800e164:	f7ff f855 	bl	800d212 <dwt_write16bitoffsetreg>
 800e168:	b003      	add	sp, #12
 800e16a:	bd30      	pop	{r4, r5, pc}
 800e16c:	4614      	mov	r4, r2
 800e16e:	2301      	movs	r3, #1
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	23ff      	movs	r3, #255	; 0xff
 800e174:	2200      	movs	r2, #0
 800e176:	2110      	movs	r1, #16
 800e178:	f7ff fec8 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e17c:	4623      	mov	r3, r4
 800e17e:	2200      	movs	r2, #0
 800e180:	2114      	movs	r1, #20
 800e182:	4628      	mov	r0, r5
 800e184:	f7ff f845 	bl	800d212 <dwt_write16bitoffsetreg>
 800e188:	e7ee      	b.n	800e168 <ull_configureframefilter+0x24>
	...

0800e18c <ull_run_pgfcal>:
 800e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	4605      	mov	r5, r0
 800e194:	4c29      	ldr	r4, [pc, #164]	; (800e23c <ull_run_pgfcal+0xb0>)
 800e196:	4b2a      	ldr	r3, [pc, #168]	; (800e240 <ull_run_pgfcal+0xb4>)
 800e198:	2200      	movs	r2, #0
 800e19a:	4621      	mov	r1, r4
 800e19c:	f7ff f93a 	bl	800d414 <dwt_write32bitoffsetreg>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	23ff      	movs	r3, #255	; 0xff
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f7ff feae 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e1b0:	2403      	movs	r4, #3
 800e1b2:	f04f 0814 	mov.w	r8, #20
 800e1b6:	4f23      	ldr	r7, [pc, #140]	; (800e244 <ull_run_pgfcal+0xb8>)
 800e1b8:	2600      	movs	r6, #0
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	f7fd fd1f 	bl	800bbfe <deca_usleep>
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	4639      	mov	r1, r7
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7fe fc0b 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800e1ca:	2801      	cmp	r0, #1
 800e1cc:	d034      	beq.n	800e238 <ull_run_pgfcal+0xac>
 800e1ce:	1e63      	subs	r3, r4, #1
 800e1d0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800e1d4:	d1f1      	bne.n	800e1ba <ull_run_pgfcal+0x2e>
 800e1d6:	f06f 0402 	mvn.w	r4, #2
 800e1da:	4e18      	ldr	r6, [pc, #96]	; (800e23c <ull_run_pgfcal+0xb0>)
 800e1dc:	2300      	movs	r3, #0
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4631      	mov	r1, r6
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7fe ffc3 	bl	800d16e <dwt_write8bitoffsetreg>
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	4915      	ldr	r1, [pc, #84]	; (800e244 <ull_run_pgfcal+0xb8>)
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7fe ffbd 	bl	800d16e <dwt_write8bitoffsetreg>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	23ff      	movs	r3, #255	; 0xff
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	4631      	mov	r1, r6
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7ff fe84 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e204:	2200      	movs	r2, #0
 800e206:	4910      	ldr	r1, [pc, #64]	; (800e248 <ull_run_pgfcal+0xbc>)
 800e208:	4628      	mov	r0, r5
 800e20a:	f7fe fbc1 	bl	800c990 <dwt_read32bitoffsetreg>
 800e20e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e212:	4298      	cmp	r0, r3
 800e214:	bf08      	it	eq
 800e216:	f06f 0403 	mvneq.w	r4, #3
 800e21a:	2200      	movs	r2, #0
 800e21c:	490b      	ldr	r1, [pc, #44]	; (800e24c <ull_run_pgfcal+0xc0>)
 800e21e:	4628      	mov	r0, r5
 800e220:	f7fe fbb6 	bl	800c990 <dwt_read32bitoffsetreg>
 800e224:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e228:	4298      	cmp	r0, r3
 800e22a:	bf14      	ite	ne
 800e22c:	4620      	movne	r0, r4
 800e22e:	f06f 0004 	mvneq.w	r0, #4
 800e232:	b002      	add	sp, #8
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	2400      	movs	r4, #0
 800e23a:	e7ce      	b.n	800e1da <ull_run_pgfcal+0x4e>
 800e23c:	0004000c 	.word	0x0004000c
 800e240:	00020001 	.word	0x00020001
 800e244:	00040020 	.word	0x00040020
 800e248:	00040014 	.word	0x00040014
 800e24c:	0004001c 	.word	0x0004001c

0800e250 <prs_ack_enable>:
 800e250:	b500      	push	{lr}
 800e252:	b083      	sub	sp, #12
 800e254:	2900      	cmp	r1, #0
 800e256:	bf0b      	itete	eq
 800e258:	23ff      	moveq	r3, #255	; 0xff
 800e25a:	23f7      	movne	r3, #247	; 0xf7
 800e25c:	2200      	moveq	r2, #0
 800e25e:	2208      	movne	r2, #8
 800e260:	9200      	str	r2, [sp, #0]
 800e262:	2201      	movs	r2, #1
 800e264:	2110      	movs	r1, #16
 800e266:	f7ff fe51 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e26a:	b003      	add	sp, #12
 800e26c:	f85d fb04 	ldr.w	pc, [sp], #4

0800e270 <dwt_modify16bitoffsetreg>:
 800e270:	b510      	push	{r4, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800e278:	f88d 300c 	strb.w	r3, [sp, #12]
 800e27c:	0a1b      	lsrs	r3, r3, #8
 800e27e:	f88d 300d 	strb.w	r3, [sp, #13]
 800e282:	f88d 400e 	strb.w	r4, [sp, #14]
 800e286:	0a24      	lsrs	r4, r4, #8
 800e288:	f88d 400f 	strb.w	r4, [sp, #15]
 800e28c:	f248 0302 	movw	r3, #32770	; 0x8002
 800e290:	9301      	str	r3, [sp, #4]
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	2304      	movs	r3, #4
 800e298:	b292      	uxth	r2, r2
 800e29a:	f7fe faec 	bl	800c876 <dwt_xfer3xxx>
 800e29e:	b004      	add	sp, #16
 800e2a0:	bd10      	pop	{r4, pc}
	...

0800e2a4 <_dwt_prog_ldo_and_bias_tune>:
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	4907      	ldr	r1, [pc, #28]	; (800e2d4 <_dwt_prog_ldo_and_bias_tune+0x30>)
 800e2b8:	f7ff ffda 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e2bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e2be:	7a1b      	ldrb	r3, [r3, #8]
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	4903      	ldr	r1, [pc, #12]	; (800e2d8 <_dwt_prog_ldo_and_bias_tune+0x34>)
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f7ff ffd0 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e2d0:	b002      	add	sp, #8
 800e2d2:	bd10      	pop	{r4, pc}
 800e2d4:	000b0008 	.word	0x000b0008
 800e2d8:	0011001f 	.word	0x0011001f

0800e2dc <ull_setleds>:
 800e2dc:	b530      	push	{r4, r5, lr}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	f011 0f01 	tst.w	r1, #1
 800e2e6:	d01f      	beq.n	800e328 <ull_setleds+0x4c>
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e2fa:	f7ff fc1d 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e2fe:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	f04f 33ff 	mov.w	r3, #4294967295
 800e308:	2200      	movs	r2, #0
 800e30a:	4918      	ldr	r1, [pc, #96]	; (800e36c <ull_setleds+0x90>)
 800e30c:	4620      	mov	r0, r4
 800e30e:	f7ff fc13 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e312:	f015 0f02 	tst.w	r5, #2
 800e316:	d11a      	bne.n	800e34e <ull_setleds+0x72>
 800e318:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e31c:	2200      	movs	r2, #0
 800e31e:	4914      	ldr	r1, [pc, #80]	; (800e370 <ull_setleds+0x94>)
 800e320:	4620      	mov	r0, r4
 800e322:	f7ff f877 	bl	800d414 <dwt_write32bitoffsetreg>
 800e326:	e010      	b.n	800e34a <ull_setleds+0x6e>
 800e328:	2500      	movs	r5, #0
 800e32a:	9500      	str	r5, [sp, #0]
 800e32c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800e330:	462a      	mov	r2, r5
 800e332:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e336:	f7ff fbff 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e33a:	9500      	str	r5, [sp, #0]
 800e33c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e340:	462a      	mov	r2, r5
 800e342:	490b      	ldr	r1, [pc, #44]	; (800e370 <ull_setleds+0x94>)
 800e344:	4620      	mov	r0, r4
 800e346:	f7ff ff93 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e34a:	b003      	add	sp, #12
 800e34c:	bd30      	pop	{r4, r5, pc}
 800e34e:	4d08      	ldr	r5, [pc, #32]	; (800e370 <ull_setleds+0x94>)
 800e350:	4b08      	ldr	r3, [pc, #32]	; (800e374 <ull_setleds+0x98>)
 800e352:	2200      	movs	r2, #0
 800e354:	4629      	mov	r1, r5
 800e356:	4620      	mov	r0, r4
 800e358:	f7ff f85c 	bl	800d414 <dwt_write32bitoffsetreg>
 800e35c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e360:	2200      	movs	r2, #0
 800e362:	4629      	mov	r1, r5
 800e364:	4620      	mov	r0, r4
 800e366:	f7ff f855 	bl	800d414 <dwt_write32bitoffsetreg>
 800e36a:	e7ee      	b.n	800e34a <ull_setleds+0x6e>
 800e36c:	00110004 	.word	0x00110004
 800e370:	00110016 	.word	0x00110016
 800e374:	000f0110 	.word	0x000f0110

0800e378 <ull_pgf_cal>:
 800e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37a:	b083      	sub	sp, #12
 800e37c:	4604      	mov	r4, r0
 800e37e:	2901      	cmp	r1, #1
 800e380:	d009      	beq.n	800e396 <ull_pgf_cal+0x1e>
 800e382:	2014      	movs	r0, #20
 800e384:	f7fd fc3b 	bl	800bbfe <deca_usleep>
 800e388:	4620      	mov	r0, r4
 800e38a:	f7ff feff 	bl	800e18c <ull_run_pgfcal>
 800e38e:	4605      	mov	r5, r0
 800e390:	4628      	mov	r0, r5
 800e392:	b003      	add	sp, #12
 800e394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e396:	4e0f      	ldr	r6, [pc, #60]	; (800e3d4 <ull_pgf_cal+0x5c>)
 800e398:	2200      	movs	r2, #0
 800e39a:	4631      	mov	r1, r6
 800e39c:	f7fe fb0e 	bl	800c9bc <dwt_read16bitoffsetreg>
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	f240 1305 	movw	r3, #261	; 0x105
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f7ff ff5d 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e3b6:	2014      	movs	r0, #20
 800e3b8:	f7fd fc21 	bl	800bbfe <deca_usleep>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7ff fee5 	bl	800e18c <ull_run_pgfcal>
 800e3c2:	4605      	mov	r5, r0
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	9200      	str	r2, [sp, #0]
 800e3c8:	463b      	mov	r3, r7
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f7ff ff4f 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e3d2:	e7dd      	b.n	800e390 <ull_pgf_cal+0x18>
 800e3d4:	00070048 	.word	0x00070048

0800e3d8 <ull_setgpiovalue>:
 800e3d8:	b500      	push	{lr}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	2a01      	cmp	r2, #1
 800e3de:	d009      	beq.n	800e3f4 <ull_setgpiovalue+0x1c>
 800e3e0:	43cb      	mvns	r3, r1
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	9200      	str	r2, [sp, #0]
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	4906      	ldr	r1, [pc, #24]	; (800e404 <ull_setgpiovalue+0x2c>)
 800e3ea:	f7ff ff41 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e3ee:	b003      	add	sp, #12
 800e3f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3f4:	9100      	str	r1, [sp, #0]
 800e3f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	4901      	ldr	r1, [pc, #4]	; (800e404 <ull_setgpiovalue+0x2c>)
 800e3fe:	f7ff ff37 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e402:	e7f4      	b.n	800e3ee <ull_setgpiovalue+0x16>
 800e404:	0005000c 	.word	0x0005000c

0800e408 <ull_readaccdata>:
 800e408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e40a:	b083      	sub	sp, #12
 800e40c:	4604      	mov	r4, r0
 800e40e:	460f      	mov	r7, r1
 800e410:	4616      	mov	r6, r2
 800e412:	461d      	mov	r5, r3
 800e414:	f248 0340 	movw	r3, #32832	; 0x8040
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e41e:	2200      	movs	r2, #0
 800e420:	4918      	ldr	r1, [pc, #96]	; (800e484 <ull_readaccdata+0x7c>)
 800e422:	f7ff ff25 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e426:	19aa      	adds	r2, r5, r6
 800e428:	f243 0301 	movw	r3, #12289	; 0x3001
 800e42c:	429a      	cmp	r2, r3
 800e42e:	dc15      	bgt.n	800e45c <ull_readaccdata+0x54>
 800e430:	2d7f      	cmp	r5, #127	; 0x7f
 800e432:	d91d      	bls.n	800e470 <ull_readaccdata+0x68>
 800e434:	2315      	movs	r3, #21
 800e436:	2200      	movs	r2, #0
 800e438:	4913      	ldr	r1, [pc, #76]	; (800e488 <ull_readaccdata+0x80>)
 800e43a:	4620      	mov	r0, r4
 800e43c:	f7fe ffea 	bl	800d414 <dwt_write32bitoffsetreg>
 800e440:	462b      	mov	r3, r5
 800e442:	2200      	movs	r2, #0
 800e444:	4911      	ldr	r1, [pc, #68]	; (800e48c <ull_readaccdata+0x84>)
 800e446:	4620      	mov	r0, r4
 800e448:	f7fe ffe4 	bl	800d414 <dwt_write32bitoffsetreg>
 800e44c:	9700      	str	r7, [sp, #0]
 800e44e:	4633      	mov	r3, r6
 800e450:	2200      	movs	r2, #0
 800e452:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800e456:	4620      	mov	r0, r4
 800e458:	f7fe fa90 	bl	800c97c <dwt_readfromdevice>
 800e45c:	2200      	movs	r2, #0
 800e45e:	9200      	str	r2, [sp, #0]
 800e460:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800e464:	4907      	ldr	r1, [pc, #28]	; (800e484 <ull_readaccdata+0x7c>)
 800e466:	4620      	mov	r0, r4
 800e468:	f7ff ff02 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e46c:	b003      	add	sp, #12
 800e46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e470:	9700      	str	r7, [sp, #0]
 800e472:	4633      	mov	r3, r6
 800e474:	462a      	mov	r2, r5
 800e476:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800e47a:	4620      	mov	r0, r4
 800e47c:	f7fe fa7e 	bl	800c97c <dwt_readfromdevice>
 800e480:	e7ec      	b.n	800e45c <ull_readaccdata+0x54>
 800e482:	bf00      	nop
 800e484:	00110004 	.word	0x00110004
 800e488:	001f0004 	.word	0x001f0004
 800e48c:	001f0008 	.word	0x001f0008

0800e490 <ull_repeated_cw>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	4606      	mov	r6, r0
 800e494:	460c      	mov	r4, r1
 800e496:	4615      	mov	r5, r2
 800e498:	4b0e      	ldr	r3, [pc, #56]	; (800e4d4 <ull_repeated_cw+0x44>)
 800e49a:	2202      	movs	r2, #2
 800e49c:	490e      	ldr	r1, [pc, #56]	; (800e4d8 <ull_repeated_cw+0x48>)
 800e49e:	f7fe ffb9 	bl	800d414 <dwt_write32bitoffsetreg>
 800e4a2:	2d0f      	cmp	r5, #15
 800e4a4:	bfa8      	it	ge
 800e4a6:	250f      	movge	r5, #15
 800e4a8:	1e63      	subs	r3, r4, #1
 800e4aa:	2b03      	cmp	r3, #3
 800e4ac:	bf28      	it	cs
 800e4ae:	2404      	movcs	r4, #4
 800e4b0:	2310      	movs	r3, #16
 800e4b2:	4123      	asrs	r3, r4
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	4909      	ldr	r1, [pc, #36]	; (800e4dc <ull_repeated_cw+0x4c>)
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7fe ffab 	bl	800d414 <dwt_write32bitoffsetreg>
 800e4be:	1e63      	subs	r3, r4, #1
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	fa05 f303 	lsl.w	r3, r5, r3
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	4905      	ldr	r1, [pc, #20]	; (800e4e0 <ull_repeated_cw+0x50>)
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7fe ffa2 	bl	800d414 <dwt_write32bitoffsetreg>
 800e4d0:	bd70      	pop	{r4, r5, r6, pc}
 800e4d2:	bf00      	nop
 800e4d4:	00d20874 	.word	0x00d20874
 800e4d8:	00110010 	.word	0x00110010
 800e4dc:	00070028 	.word	0x00070028
 800e4e0:	00080018 	.word	0x00080018

0800e4e4 <ull_configure>:
 800e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	460d      	mov	r5, r1
 800e4ee:	f891 9000 	ldrb.w	r9, [r1]
 800e4f2:	790b      	ldrb	r3, [r1, #4]
 800e4f4:	2b18      	cmp	r3, #24
 800e4f6:	d814      	bhi.n	800e522 <ull_configure+0x3e>
 800e4f8:	78cf      	ldrb	r7, [r1, #3]
 800e4fa:	2f18      	cmp	r7, #24
 800e4fc:	bf94      	ite	ls
 800e4fe:	2700      	movls	r7, #0
 800e500:	2701      	movhi	r7, #1
 800e502:	b2ff      	uxtb	r7, r7
 800e504:	79eb      	ldrb	r3, [r5, #7]
 800e506:	2b01      	cmp	r3, #1
 800e508:	bf0c      	ite	eq
 800e50a:	2110      	moveq	r1, #16
 800e50c:	2100      	movne	r1, #0
 800e50e:	786b      	ldrb	r3, [r5, #1]
 800e510:	3b01      	subs	r3, #1
 800e512:	2b06      	cmp	r3, #6
 800e514:	d810      	bhi.n	800e538 <ull_configure+0x54>
 800e516:	e8df f003 	tbb	[pc, r3]
 800e51a:	0f06      	.short	0x0f06
 800e51c:	0f0c120f 	.word	0x0f0c120f
 800e520:	09          	.byte	0x09
 800e521:	00          	.byte	0x00
 800e522:	2701      	movs	r7, #1
 800e524:	e7ed      	b.n	800e502 <ull_configure+0x1e>
 800e526:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800e52a:	e00a      	b.n	800e542 <ull_configure+0x5e>
 800e52c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800e530:	e007      	b.n	800e542 <ull_configure+0x5e>
 800e532:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800e536:	e004      	b.n	800e542 <ull_configure+0x5e>
 800e538:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800e53c:	e001      	b.n	800e542 <ull_configure+0x5e>
 800e53e:	f04f 0a20 	mov.w	sl, #32
 800e542:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e544:	8a53      	ldrh	r3, [r2, #18]
 800e546:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800e54a:	8253      	strh	r3, [r2, #18]
 800e54c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e54e:	79ea      	ldrb	r2, [r5, #7]
 800e550:	731a      	strb	r2, [r3, #12]
 800e552:	7b2e      	ldrb	r6, [r5, #12]
 800e554:	1cb3      	adds	r3, r6, #2
 800e556:	2601      	movs	r6, #1
 800e558:	409e      	lsls	r6, r3
 800e55a:	fa1f f886 	uxth.w	r8, r6
 800e55e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e560:	4bc7      	ldr	r3, [pc, #796]	; (800e880 <ull_configure+0x39c>)
 800e562:	fb03 f308 	mul.w	r3, r3, r8
 800e566:	0bdb      	lsrs	r3, r3, #15
 800e568:	8293      	strh	r3, [r2, #20]
 800e56a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e56c:	7aea      	ldrb	r2, [r5, #11]
 800e56e:	75da      	strb	r2, [r3, #23]
 800e570:	7a2b      	ldrb	r3, [r5, #8]
 800e572:	015b      	lsls	r3, r3, #5
 800e574:	f003 0320 	and.w	r3, r3, #32
 800e578:	7b6a      	ldrb	r2, [r5, #13]
 800e57a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e57e:	7aea      	ldrb	r2, [r5, #11]
 800e580:	0312      	lsls	r2, r2, #12
 800e582:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800e586:	4313      	orrs	r3, r2
 800e588:	430b      	orrs	r3, r1
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4bbd      	ldr	r3, [pc, #756]	; (800e884 <ull_configure+0x3a0>)
 800e58e:	2200      	movs	r2, #0
 800e590:	2110      	movs	r1, #16
 800e592:	4620      	mov	r0, r4
 800e594:	f7ff fad0 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e598:	2f00      	cmp	r7, #0
 800e59a:	f040 80f6 	bne.w	800e78a <ull_configure+0x2a6>
 800e59e:	7aeb      	ldrb	r3, [r5, #11]
 800e5a0:	b1f3      	cbz	r3, 800e5e0 <ull_configure+0xfc>
 800e5a2:	7b6b      	ldrb	r3, [r5, #13]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	f240 811c 	bls.w	800e7e2 <ull_configure+0x2fe>
 800e5aa:	7b2a      	ldrb	r2, [r5, #12]
 800e5ac:	4bb6      	ldr	r3, [pc, #728]	; (800e888 <ull_configure+0x3a4>)
 800e5ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e5b2:	0112      	lsls	r2, r2, #4
 800e5b4:	0ad3      	lsrs	r3, r2, #11
 800e5b6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800e5ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e5be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e5c2:	bf28      	it	cs
 800e5c4:	3301      	addcs	r3, #1
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800e5cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	f64f 7380 	movw	r3, #65408	; 0xff80
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	49ac      	ldr	r1, [pc, #688]	; (800e88c <ull_configure+0x3a8>)
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7ff fe48 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e5e0:	2394      	movs	r3, #148	; 0x94
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	4baa      	ldr	r3, [pc, #680]	; (800e890 <ull_configure+0x3ac>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	49aa      	ldr	r1, [pc, #680]	; (800e894 <ull_configure+0x3b0>)
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f7ff faa4 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e5f0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e5f4:	f340 8108 	ble.w	800e808 <ull_configure+0x324>
 800e5f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e5fa:	8a53      	ldrh	r3, [r2, #18]
 800e5fc:	f043 0320 	orr.w	r3, r3, #32
 800e600:	8253      	strh	r3, [r2, #18]
 800e602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800e60c:	2200      	movs	r2, #0
 800e60e:	49a2      	ldr	r1, [pc, #648]	; (800e898 <ull_configure+0x3b4>)
 800e610:	4620      	mov	r0, r4
 800e612:	f7ff fe2d 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e616:	7b6b      	ldrb	r3, [r5, #13]
 800e618:	2b01      	cmp	r3, #1
 800e61a:	f000 8100 	beq.w	800e81e <ull_configure+0x33a>
 800e61e:	78ab      	ldrb	r3, [r5, #2]
 800e620:	f043 0310 	orr.w	r3, r3, #16
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	23fc      	movs	r3, #252	; 0xfc
 800e628:	2200      	movs	r2, #0
 800e62a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e62e:	4620      	mov	r0, r4
 800e630:	f7ff fc6c 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e634:	1e73      	subs	r3, r6, #1
 800e636:	b2db      	uxtb	r3, r3
 800e638:	2200      	movs	r2, #0
 800e63a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800e63e:	4620      	mov	r0, r4
 800e640:	f7fe fd95 	bl	800d16e <dwt_write8bitoffsetreg>
 800e644:	786b      	ldrb	r3, [r5, #1]
 800e646:	2b07      	cmp	r3, #7
 800e648:	bf0c      	ite	eq
 800e64a:	2308      	moveq	r3, #8
 800e64c:	2300      	movne	r3, #0
 800e64e:	2201      	movs	r2, #1
 800e650:	2128      	movs	r1, #40	; 0x28
 800e652:	4620      	mov	r0, r4
 800e654:	f7fe fd8b 	bl	800d16e <dwt_write8bitoffsetreg>
 800e658:	4b90      	ldr	r3, [pc, #576]	; (800e89c <ull_configure+0x3b8>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	4990      	ldr	r1, [pc, #576]	; (800e8a0 <ull_configure+0x3bc>)
 800e65e:	4620      	mov	r0, r4
 800e660:	f7fe fed8 	bl	800d414 <dwt_write32bitoffsetreg>
 800e664:	2200      	movs	r2, #0
 800e666:	498f      	ldr	r1, [pc, #572]	; (800e8a4 <ull_configure+0x3c0>)
 800e668:	4620      	mov	r0, r4
 800e66a:	f7fe f991 	bl	800c990 <dwt_read32bitoffsetreg>
 800e66e:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800e672:	f020 001f 	bic.w	r0, r0, #31
 800e676:	f1b9 0f09 	cmp.w	r9, #9
 800e67a:	bf08      	it	eq
 800e67c:	f040 0001 	orreq.w	r0, r0, #1
 800e680:	792a      	ldrb	r2, [r5, #4]
 800e682:	0212      	lsls	r2, r2, #8
 800e684:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800e688:	78eb      	ldrb	r3, [r5, #3]
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	431a      	orrs	r2, r3
 800e690:	796b      	ldrb	r3, [r5, #5]
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	f003 0306 	and.w	r3, r3, #6
 800e698:	4313      	orrs	r3, r2
 800e69a:	4303      	orrs	r3, r0
 800e69c:	2200      	movs	r2, #0
 800e69e:	4981      	ldr	r1, [pc, #516]	; (800e8a4 <ull_configure+0x3c0>)
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7fe feb7 	bl	800d414 <dwt_write32bitoffsetreg>
 800e6a6:	79aa      	ldrb	r2, [r5, #6]
 800e6a8:	786b      	ldrb	r3, [r5, #1]
 800e6aa:	031b      	lsls	r3, r3, #12
 800e6ac:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2124      	movs	r1, #36	; 0x24
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f7ff fa3c 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e6c0:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800e6c4:	b923      	cbnz	r3, 800e6d0 <ull_configure+0x1ec>
 800e6c6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800e6ca:	726b      	strb	r3, [r5, #9]
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	72ab      	strb	r3, [r5, #10]
 800e6d0:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800e6d4:	2202      	movs	r2, #2
 800e6d6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f7fe fd99 	bl	800d212 <dwt_write16bitoffsetreg>
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	4971      	ldr	r1, [pc, #452]	; (800e8a8 <ull_configure+0x3c4>)
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7fe f97b 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800e6ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e6ec:	7c1b      	ldrb	r3, [r3, #16]
 800e6ee:	454b      	cmp	r3, r9
 800e6f0:	f000 809f 	beq.w	800e832 <ull_configure+0x34e>
 800e6f4:	2803      	cmp	r0, #3
 800e6f6:	f000 80a0 	beq.w	800e83a <ull_configure+0x356>
 800e6fa:	f1b9 0f09 	cmp.w	r9, #9
 800e6fe:	f000 80a1 	beq.w	800e844 <ull_configure+0x360>
 800e702:	4b6a      	ldr	r3, [pc, #424]	; (800e8ac <ull_configure+0x3c8>)
 800e704:	2200      	movs	r2, #0
 800e706:	496a      	ldr	r1, [pc, #424]	; (800e8b0 <ull_configure+0x3cc>)
 800e708:	4620      	mov	r0, r4
 800e70a:	f7fe fe83 	bl	800d414 <dwt_write32bitoffsetreg>
 800e70e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800e712:	2200      	movs	r2, #0
 800e714:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800e718:	4620      	mov	r0, r4
 800e71a:	f7fe fd7a 	bl	800d212 <dwt_write16bitoffsetreg>
 800e71e:	2314      	movs	r3, #20
 800e720:	2201      	movs	r2, #1
 800e722:	4964      	ldr	r1, [pc, #400]	; (800e8b4 <ull_configure+0x3d0>)
 800e724:	4620      	mov	r0, r4
 800e726:	f7fe fd22 	bl	800d16e <dwt_write8bitoffsetreg>
 800e72a:	230e      	movs	r3, #14
 800e72c:	2202      	movs	r2, #2
 800e72e:	4962      	ldr	r1, [pc, #392]	; (800e8b8 <ull_configure+0x3d4>)
 800e730:	4620      	mov	r0, r4
 800e732:	f7fe fd1c 	bl	800d16e <dwt_write8bitoffsetreg>
 800e736:	2381      	movs	r3, #129	; 0x81
 800e738:	2200      	movs	r2, #0
 800e73a:	4960      	ldr	r1, [pc, #384]	; (800e8bc <ull_configure+0x3d8>)
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7fe fd16 	bl	800d16e <dwt_write8bitoffsetreg>
 800e742:	2302      	movs	r3, #2
 800e744:	2200      	movs	r2, #0
 800e746:	2144      	movs	r1, #68	; 0x44
 800e748:	4620      	mov	r0, r4
 800e74a:	f7fe fd10 	bl	800d16e <dwt_write8bitoffsetreg>
 800e74e:	2101      	movs	r1, #1
 800e750:	4620      	mov	r0, r4
 800e752:	f7ff fc99 	bl	800e088 <ull_setdwstate>
 800e756:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800e75a:	f04f 0814 	mov.w	r8, #20
 800e75e:	2700      	movs	r7, #0
 800e760:	2644      	movs	r6, #68	; 0x44
 800e762:	4640      	mov	r0, r8
 800e764:	f7fd fa4b 	bl	800bbfe <deca_usleep>
 800e768:	463a      	mov	r2, r7
 800e76a:	4631      	mov	r1, r6
 800e76c:	4620      	mov	r0, r4
 800e76e:	f7fe f937 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800e772:	f010 0f02 	tst.w	r0, #2
 800e776:	f040 80ab 	bne.w	800e8d0 <ull_configure+0x3ec>
 800e77a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e77e:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800e782:	d1ee      	bne.n	800e762 <ull_configure+0x27e>
 800e784:	f06f 0001 	mvn.w	r0, #1
 800e788:	e0cf      	b.n	800e92a <ull_configure+0x446>
 800e78a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e78c:	8a53      	ldrh	r3, [r2, #18]
 800e78e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e792:	8253      	strh	r3, [r2, #18]
 800e794:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800e79e:	2200      	movs	r2, #0
 800e7a0:	493d      	ldr	r1, [pc, #244]	; (800e898 <ull_configure+0x3b4>)
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7ff f9c8 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e7a8:	f240 3306 	movw	r3, #774	; 0x306
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4944      	ldr	r1, [pc, #272]	; (800e8c0 <ull_configure+0x3dc>)
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f7fe fe2f 	bl	800d414 <dwt_write32bitoffsetreg>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f7fe fe28 	bl	800d414 <dwt_write32bitoffsetreg>
 800e7c4:	4b3f      	ldr	r3, [pc, #252]	; (800e8c4 <ull_configure+0x3e0>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4930      	ldr	r1, [pc, #192]	; (800e88c <ull_configure+0x3a8>)
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	f7fe fe22 	bl	800d414 <dwt_write32bitoffsetreg>
 800e7d0:	239d      	movs	r3, #157	; 0x9d
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	4b2e      	ldr	r3, [pc, #184]	; (800e890 <ull_configure+0x3ac>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	492e      	ldr	r1, [pc, #184]	; (800e894 <ull_configure+0x3b0>)
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f7ff f9ac 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e7e0:	e719      	b.n	800e616 <ull_configure+0x132>
 800e7e2:	7b2a      	ldrb	r2, [r5, #12]
 800e7e4:	4b28      	ldr	r3, [pc, #160]	; (800e888 <ull_configure+0x3a4>)
 800e7e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e7ea:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800e7ee:	fb02 f203 	mul.w	r2, r2, r3
 800e7f2:	0c93      	lsrs	r3, r2, #18
 800e7f4:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800e7f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e7fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e800:	bf28      	it	cs
 800e802:	3301      	addcs	r3, #1
 800e804:	b29b      	uxth	r3, r3
 800e806:	e6df      	b.n	800e5c8 <ull_configure+0xe4>
 800e808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800e812:	2200      	movs	r2, #0
 800e814:	4920      	ldr	r1, [pc, #128]	; (800e898 <ull_configure+0x3b4>)
 800e816:	4620      	mov	r0, r4
 800e818:	f7ff fd2a 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e81c:	e6fb      	b.n	800e616 <ull_configure+0x132>
 800e81e:	78ab      	ldrb	r3, [r5, #2]
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	23ec      	movs	r3, #236	; 0xec
 800e824:	2200      	movs	r2, #0
 800e826:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e82a:	4620      	mov	r0, r4
 800e82c:	f7ff fb6e 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e830:	e700      	b.n	800e634 <ull_configure+0x150>
 800e832:	2803      	cmp	r0, #3
 800e834:	f47f af61 	bne.w	800e6fa <ull_configure+0x216>
 800e838:	e04d      	b.n	800e8d6 <ull_configure+0x3f2>
 800e83a:	2102      	movs	r1, #2
 800e83c:	4620      	mov	r0, r4
 800e83e:	f7ff fc23 	bl	800e088 <ull_setdwstate>
 800e842:	e75a      	b.n	800e6fa <ull_configure+0x216>
 800e844:	4b20      	ldr	r3, [pc, #128]	; (800e8c8 <ull_configure+0x3e4>)
 800e846:	2200      	movs	r2, #0
 800e848:	4919      	ldr	r1, [pc, #100]	; (800e8b0 <ull_configure+0x3cc>)
 800e84a:	4620      	mov	r0, r4
 800e84c:	f7fe fde2 	bl	800d414 <dwt_write32bitoffsetreg>
 800e850:	f640 733c 	movw	r3, #3900	; 0xf3c
 800e854:	2200      	movs	r2, #0
 800e856:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7fe fcd9 	bl	800d212 <dwt_write16bitoffsetreg>
 800e860:	e75d      	b.n	800e71e <ull_configure+0x23a>
 800e862:	fa4f f189 	sxtb.w	r1, r9
 800e866:	4620      	mov	r0, r4
 800e868:	f7ff f98a 	bl	800db80 <_dwt_kick_dgc_on_wakeup>
 800e86c:	e040      	b.n	800e8f0 <ull_configure+0x40c>
 800e86e:	2200      	movs	r2, #0
 800e870:	9200      	str	r2, [sp, #0]
 800e872:	23fe      	movs	r3, #254	; 0xfe
 800e874:	4915      	ldr	r1, [pc, #84]	; (800e8cc <ull_configure+0x3e8>)
 800e876:	4620      	mov	r0, r4
 800e878:	f7ff fb48 	bl	800df0c <dwt_modify8bitoffsetreg>
 800e87c:	e042      	b.n	800e904 <ull_configure+0x420>
 800e87e:	bf00      	nop
 800e880:	00026668 	.word	0x00026668
 800e884:	fffc4fcf 	.word	0xfffc4fcf
 800e888:	08020570 	.word	0x08020570
 800e88c:	000e0012 	.word	0x000e0012
 800e890:	bfffff00 	.word	0xbfffff00
 800e894:	000e0016 	.word	0x000e0016
 800e898:	000b0008 	.word	0x000b0008
 800e89c:	af5f35cc 	.word	0xaf5f35cc
 800e8a0:	0006000c 	.word	0x0006000c
 800e8a4:	00010014 	.word	0x00010014
 800e8a8:	000f0030 	.word	0x000f0030
 800e8ac:	1c071134 	.word	0x1c071134
 800e8b0:	0007001c 	.word	0x0007001c
 800e8b4:	00070050 	.word	0x00070050
 800e8b8:	00070018 	.word	0x00070018
 800e8bc:	00090008 	.word	0x00090008
 800e8c0:	000e000c 	.word	0x000e000c
 800e8c4:	000c5a0a 	.word	0x000c5a0a
 800e8c8:	1c010034 	.word	0x1c010034
 800e8cc:	00030018 	.word	0x00030018
 800e8d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e8d2:	f883 9010 	strb.w	r9, [r3, #16]
 800e8d6:	792b      	ldrb	r3, [r5, #4]
 800e8d8:	3b09      	subs	r3, #9
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b0f      	cmp	r3, #15
 800e8de:	d8c6      	bhi.n	800e86e <ull_configure+0x38a>
 800e8e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e8e2:	7a5b      	ldrb	r3, [r3, #9]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d0bc      	beq.n	800e862 <ull_configure+0x37e>
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7fe ffae 	bl	800d84c <ull_configmrxlut>
 800e8f0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	490c      	ldr	r1, [pc, #48]	; (800e930 <ull_configure+0x44c>)
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff fcb6 	bl	800e270 <dwt_modify16bitoffsetreg>
 800e904:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800e908:	bfcc      	ite	gt
 800e90a:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800e90e:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e918:	2200      	movs	r2, #0
 800e91a:	4906      	ldr	r1, [pc, #24]	; (800e934 <ull_configure+0x450>)
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7ff f90b 	bl	800db38 <dwt_modify32bitoffsetreg>
 800e922:	2101      	movs	r1, #1
 800e924:	4620      	mov	r0, r4
 800e926:	f7ff fd27 	bl	800e378 <ull_pgf_cal>
 800e92a:	b003      	add	sp, #12
 800e92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e930:	00030018 	.word	0x00030018
 800e934:	00060010 	.word	0x00060010

0800e938 <dwt_ioctl>:
 800e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93c:	b091      	sub	sp, #68	; 0x44
 800e93e:	4606      	mov	r6, r0
 800e940:	4615      	mov	r5, r2
 800e942:	461c      	mov	r4, r3
 800e944:	299c      	cmp	r1, #156	; 0x9c
 800e946:	f200 809f 	bhi.w	800ea88 <dwt_ioctl+0x150>
 800e94a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e94e:	0a6d      	.short	0x0a6d
 800e950:	00a30a78 	.word	0x00a30a78
 800e954:	00be00a7 	.word	0x00be00a7
 800e958:	018e0148 	.word	0x018e0148
 800e95c:	0152016b 	.word	0x0152016b
 800e960:	01a9019e 	.word	0x01a9019e
 800e964:	01b901b1 	.word	0x01b901b1
 800e968:	01c901c1 	.word	0x01c901c1
 800e96c:	01d501d1 	.word	0x01d501d1
 800e970:	026e01dd 	.word	0x026e01dd
 800e974:	0281027c 	.word	0x0281027c
 800e978:	0290028b 	.word	0x0290028b
 800e97c:	029e0295 	.word	0x029e0295
 800e980:	030902a3 	.word	0x030902a3
 800e984:	0326031b 	.word	0x0326031b
 800e988:	033b0331 	.word	0x033b0331
 800e98c:	03690373 	.word	0x03690373
 800e990:	0345035f 	.word	0x0345035f
 800e994:	03c10352 	.word	0x03c10352
 800e998:	022b01f8 	.word	0x022b01f8
 800e99c:	02410239 	.word	0x02410239
 800e9a0:	09960255 	.word	0x09960255
 800e9a4:	0382099b 	.word	0x0382099b
 800e9a8:	03e303df 	.word	0x03e303df
 800e9ac:	03f103ec 	.word	0x03f103ec
 800e9b0:	040503fb 	.word	0x040503fb
 800e9b4:	0437040d 	.word	0x0437040d
 800e9b8:	044e0443 	.word	0x044e0443
 800e9bc:	04590378 	.word	0x04590378
 800e9c0:	04740462 	.word	0x04740462
 800e9c4:	049e048d 	.word	0x049e048d
 800e9c8:	04ea04e0 	.word	0x04ea04e0
 800e9cc:	051a050b 	.word	0x051a050b
 800e9d0:	05230535 	.word	0x05230535
 800e9d4:	05970551 	.word	0x05970551
 800e9d8:	05cf05af 	.word	0x05cf05af
 800e9dc:	05f805e4 	.word	0x05f805e4
 800e9e0:	061d0601 	.word	0x061d0601
 800e9e4:	0773060a 	.word	0x0773060a
 800e9e8:	07ed079f 	.word	0x07ed079f
 800e9ec:	07fe07f3 	.word	0x07fe07f3
 800e9f0:	08370817 	.word	0x08370817
 800e9f4:	084b0841 	.word	0x084b0841
 800e9f8:	08820879 	.word	0x08820879
 800e9fc:	08910888 	.word	0x08910888
 800ea00:	08ab089e 	.word	0x08ab089e
 800ea04:	08be08b5 	.word	0x08be08b5
 800ea08:	08d208c7 	.word	0x08d208c7
 800ea0c:	08e308dd 	.word	0x08e308dd
 800ea10:	09110906 	.word	0x09110906
 800ea14:	0945091c 	.word	0x0945091c
 800ea18:	09720967 	.word	0x09720967
 800ea1c:	09a1098b 	.word	0x09a1098b
 800ea20:	0a200a16 	.word	0x0a200a16
 800ea24:	0a800a2b 	.word	0x0a800a2b
 800ea28:	0a620a35 	.word	0x0a620a35
 800ea2c:	09df0791 	.word	0x09df0791
 800ea30:	0aee0a00 	.word	0x0aee0a00
 800ea34:	0a8d0ae3 	.word	0x0a8d0ae3
 800ea38:	0aa30a98 	.word	0x0aa30a98
 800ea3c:	0ab90aae 	.word	0x0ab90aae
 800ea40:	0acf0ac4 	.word	0x0acf0ac4
 800ea44:	0bd80ad8 	.word	0x0bd80ad8
 800ea48:	0c4d0c12 	.word	0x0c4d0c12
 800ea4c:	0d290c70 	.word	0x0d290c70
 800ea50:	0b190d3e 	.word	0x0b190d3e
 800ea54:	009d009d 	.word	0x009d009d
 800ea58:	009d009d 	.word	0x009d009d
 800ea5c:	009d009d 	.word	0x009d009d
 800ea60:	009d009d 	.word	0x009d009d
 800ea64:	009d009d 	.word	0x009d009d
 800ea68:	009d009d 	.word	0x009d009d
 800ea6c:	009d009d 	.word	0x009d009d
 800ea70:	009d009d 	.word	0x009d009d
 800ea74:	009d009d 	.word	0x009d009d
 800ea78:	0c87009d 	.word	0x0c87009d
 800ea7c:	0dce0ca5 	.word	0x0dce0ca5
 800ea80:	0ce40cef 	.word	0x0ce40cef
 800ea84:	0cfa0d03 	.word	0x0cfa0d03
 800ea88:	f04f 35ff 	mov.w	r5, #4294967295
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	b011      	add	sp, #68	; 0x44
 800ea90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea94:	6843      	ldr	r3, [r0, #4]
 800ea96:	4798      	blx	r3
 800ea98:	2500      	movs	r5, #0
 800ea9a:	e7f7      	b.n	800ea8c <dwt_ioctl+0x154>
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	49b7      	ldr	r1, [pc, #732]	; (800ed7c <dwt_ioctl+0x444>)
 800eaa0:	f7fd ff9e 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800eaa4:	2803      	cmp	r0, #3
 800eaa6:	d801      	bhi.n	800eaac <dwt_ioctl+0x174>
 800eaa8:	2500      	movs	r5, #0
 800eaaa:	e7ef      	b.n	800ea8c <dwt_ioctl+0x154>
 800eaac:	f7fd f87e 	bl	800bbac <decamutexon>
 800eab0:	4604      	mov	r4, r0
 800eab2:	2500      	movs	r5, #0
 800eab4:	9500      	str	r5, [sp, #0]
 800eab6:	462b      	mov	r3, r5
 800eab8:	462a      	mov	r2, r5
 800eaba:	4629      	mov	r1, r5
 800eabc:	4630      	mov	r0, r6
 800eabe:	f7fe fb4b 	bl	800d158 <dwt_writetodevice>
 800eac2:	4620      	mov	r0, r4
 800eac4:	f7fd f883 	bl	800bbce <decamutexoff>
 800eac8:	e7e0      	b.n	800ea8c <dwt_ioctl+0x154>
 800eaca:	2c00      	cmp	r4, #0
 800eacc:	f001 8510 	beq.w	80104f0 <dwt_ioctl+0x1bb8>
 800ead0:	7824      	ldrb	r4, [r4, #0]
 800ead2:	f014 0f1d 	tst.w	r4, #29
 800ead6:	d065      	beq.n	800eba4 <dwt_ioctl+0x26c>
 800ead8:	f014 0f01 	tst.w	r4, #1
 800eadc:	d026      	beq.n	800eb2c <dwt_ioctl+0x1f4>
 800eade:	f014 0f02 	tst.w	r4, #2
 800eae2:	f04f 0200 	mov.w	r2, #0
 800eae6:	9200      	str	r2, [sp, #0]
 800eae8:	4613      	mov	r3, r2
 800eaea:	bf14      	ite	ne
 800eaec:	210d      	movne	r1, #13
 800eaee:	2103      	moveq	r1, #3
 800eaf0:	f7fe fb32 	bl	800d158 <dwt_writetodevice>
 800eaf4:	2203      	movs	r2, #3
 800eaf6:	2144      	movs	r1, #68	; 0x44
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f7fd ff71 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800eafe:	f010 0f08 	tst.w	r0, #8
 800eb02:	d145      	bne.n	800eb90 <dwt_ioctl+0x258>
 800eb04:	2200      	movs	r2, #0
 800eb06:	499d      	ldr	r1, [pc, #628]	; (800ed7c <dwt_ioctl+0x444>)
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f7fd ff41 	bl	800c990 <dwt_read32bitoffsetreg>
 800eb0e:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 800eb12:	bf18      	it	ne
 800eb14:	2500      	movne	r5, #0
 800eb16:	d1b9      	bne.n	800ea8c <dwt_ioctl+0x154>
 800eb18:	2100      	movs	r1, #0
 800eb1a:	9100      	str	r1, [sp, #0]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	460a      	mov	r2, r1
 800eb20:	4630      	mov	r0, r6
 800eb22:	f7fe fb19 	bl	800d158 <dwt_writetodevice>
 800eb26:	f04f 35ff 	mov.w	r5, #4294967295
 800eb2a:	e7af      	b.n	800ea8c <dwt_ioctl+0x154>
 800eb2c:	f014 0f08 	tst.w	r4, #8
 800eb30:	d10e      	bne.n	800eb50 <dwt_ioctl+0x218>
 800eb32:	f014 0f10 	tst.w	r4, #16
 800eb36:	d11b      	bne.n	800eb70 <dwt_ioctl+0x238>
 800eb38:	f014 0f02 	tst.w	r4, #2
 800eb3c:	f04f 0200 	mov.w	r2, #0
 800eb40:	9200      	str	r2, [sp, #0]
 800eb42:	4613      	mov	r3, r2
 800eb44:	bf14      	ite	ne
 800eb46:	2110      	movne	r1, #16
 800eb48:	2109      	moveq	r1, #9
 800eb4a:	f7fe fb05 	bl	800d158 <dwt_writetodevice>
 800eb4e:	e7d1      	b.n	800eaf4 <dwt_ioctl+0x1bc>
 800eb50:	2100      	movs	r1, #0
 800eb52:	f7fe fdd3 	bl	800d6fc <_dwt_adjust_delaytime>
 800eb56:	f014 0f02 	tst.w	r4, #2
 800eb5a:	f04f 0200 	mov.w	r2, #0
 800eb5e:	9200      	str	r2, [sp, #0]
 800eb60:	4613      	mov	r3, r2
 800eb62:	bf14      	ite	ne
 800eb64:	210f      	movne	r1, #15
 800eb66:	2107      	moveq	r1, #7
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f7fe faf5 	bl	800d158 <dwt_writetodevice>
 800eb6e:	e7c1      	b.n	800eaf4 <dwt_ioctl+0x1bc>
 800eb70:	2101      	movs	r1, #1
 800eb72:	f7fe fdc3 	bl	800d6fc <_dwt_adjust_delaytime>
 800eb76:	f014 0f02 	tst.w	r4, #2
 800eb7a:	f04f 0200 	mov.w	r2, #0
 800eb7e:	9200      	str	r2, [sp, #0]
 800eb80:	4613      	mov	r3, r2
 800eb82:	bf14      	ite	ne
 800eb84:	210e      	movne	r1, #14
 800eb86:	2105      	moveq	r1, #5
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f7fe fae5 	bl	800d158 <dwt_writetodevice>
 800eb8e:	e7b1      	b.n	800eaf4 <dwt_ioctl+0x1bc>
 800eb90:	2100      	movs	r1, #0
 800eb92:	9100      	str	r1, [sp, #0]
 800eb94:	460b      	mov	r3, r1
 800eb96:	460a      	mov	r2, r1
 800eb98:	4630      	mov	r0, r6
 800eb9a:	f7fe fadd 	bl	800d158 <dwt_writetodevice>
 800eb9e:	f04f 35ff 	mov.w	r5, #4294967295
 800eba2:	e773      	b.n	800ea8c <dwt_ioctl+0x154>
 800eba4:	f014 0f20 	tst.w	r4, #32
 800eba8:	d00c      	beq.n	800ebc4 <dwt_ioctl+0x28c>
 800ebaa:	f014 0f02 	tst.w	r4, #2
 800ebae:	f04f 0500 	mov.w	r5, #0
 800ebb2:	9500      	str	r5, [sp, #0]
 800ebb4:	462b      	mov	r3, r5
 800ebb6:	462a      	mov	r2, r5
 800ebb8:	bf14      	ite	ne
 800ebba:	2111      	movne	r1, #17
 800ebbc:	210b      	moveq	r1, #11
 800ebbe:	f7fe facb 	bl	800d158 <dwt_writetodevice>
 800ebc2:	e763      	b.n	800ea8c <dwt_ioctl+0x154>
 800ebc4:	f014 0f02 	tst.w	r4, #2
 800ebc8:	f04f 0500 	mov.w	r5, #0
 800ebcc:	9500      	str	r5, [sp, #0]
 800ebce:	462b      	mov	r3, r5
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	bf14      	ite	ne
 800ebd4:	210c      	movne	r1, #12
 800ebd6:	2101      	moveq	r1, #1
 800ebd8:	f7fe fabe 	bl	800d158 <dwt_writetodevice>
 800ebdc:	e756      	b.n	800ea8c <dwt_ioctl+0x154>
 800ebde:	2c00      	cmp	r4, #0
 800ebe0:	f001 8489 	beq.w	80104f6 <dwt_ioctl+0x1bbe>
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	212c      	movs	r1, #44	; 0x2c
 800ebea:	f7fe fc13 	bl	800d414 <dwt_write32bitoffsetreg>
 800ebee:	2500      	movs	r5, #0
 800ebf0:	e74c      	b.n	800ea8c <dwt_ioctl+0x154>
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	4962      	ldr	r1, [pc, #392]	; (800ed80 <dwt_ioctl+0x448>)
 800ebf8:	f7fe fc0c 	bl	800d414 <dwt_write32bitoffsetreg>
 800ebfc:	6863      	ldr	r3, [r4, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4960      	ldr	r1, [pc, #384]	; (800ed84 <dwt_ioctl+0x44c>)
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7fe fc06 	bl	800d414 <dwt_write32bitoffsetreg>
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	495e      	ldr	r1, [pc, #376]	; (800ed88 <dwt_ioctl+0x450>)
 800ec0e:	4630      	mov	r0, r6
 800ec10:	f7fe fc00 	bl	800d414 <dwt_write32bitoffsetreg>
 800ec14:	68e3      	ldr	r3, [r4, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	495c      	ldr	r1, [pc, #368]	; (800ed8c <dwt_ioctl+0x454>)
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7fe fbfa 	bl	800d414 <dwt_write32bitoffsetreg>
 800ec20:	2500      	movs	r5, #0
 800ec22:	e733      	b.n	800ea8c <dwt_ioctl+0x154>
 800ec24:	2c00      	cmp	r4, #0
 800ec26:	f001 8469 	beq.w	80104fc <dwt_ioctl+0x1bc4>
 800ec2a:	8823      	ldrh	r3, [r4, #0]
 800ec2c:	6865      	ldr	r5, [r4, #4]
 800ec2e:	2d03      	cmp	r5, #3
 800ec30:	f201 8467 	bhi.w	8010502 <dwt_ioctl+0x1bca>
 800ec34:	e8df f005 	tbb	[pc, r5]
 800ec38:	130d0702 	.word	0x130d0702
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4954      	ldr	r1, [pc, #336]	; (800ed90 <dwt_ioctl+0x458>)
 800ec40:	f7fe fae7 	bl	800d212 <dwt_write16bitoffsetreg>
 800ec44:	e722      	b.n	800ea8c <dwt_ioctl+0x154>
 800ec46:	2202      	movs	r2, #2
 800ec48:	4951      	ldr	r1, [pc, #324]	; (800ed90 <dwt_ioctl+0x458>)
 800ec4a:	f7fe fae2 	bl	800d212 <dwt_write16bitoffsetreg>
 800ec4e:	2500      	movs	r5, #0
 800ec50:	e71c      	b.n	800ea8c <dwt_ioctl+0x154>
 800ec52:	2200      	movs	r2, #0
 800ec54:	494f      	ldr	r1, [pc, #316]	; (800ed94 <dwt_ioctl+0x45c>)
 800ec56:	f7fe fadc 	bl	800d212 <dwt_write16bitoffsetreg>
 800ec5a:	2500      	movs	r5, #0
 800ec5c:	e716      	b.n	800ea8c <dwt_ioctl+0x154>
 800ec5e:	2202      	movs	r2, #2
 800ec60:	494c      	ldr	r1, [pc, #304]	; (800ed94 <dwt_ioctl+0x45c>)
 800ec62:	f7fe fad6 	bl	800d212 <dwt_write16bitoffsetreg>
 800ec66:	2500      	movs	r5, #0
 800ec68:	e710      	b.n	800ea8c <dwt_ioctl+0x154>
 800ec6a:	2c00      	cmp	r4, #0
 800ec6c:	f001 844c 	beq.w	8010508 <dwt_ioctl+0x1bd0>
 800ec70:	7823      	ldrb	r3, [r4, #0]
 800ec72:	005b      	lsls	r3, r3, #1
 800ec74:	f003 0306 	and.w	r3, r3, #6
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	f06f 0306 	mvn.w	r3, #6
 800ec7e:	2200      	movs	r2, #0
 800ec80:	4945      	ldr	r1, [pc, #276]	; (800ed98 <dwt_ioctl+0x460>)
 800ec82:	f7fe ff59 	bl	800db38 <dwt_modify32bitoffsetreg>
 800ec86:	2500      	movs	r5, #0
 800ec88:	e700      	b.n	800ea8c <dwt_ioctl+0x154>
 800ec8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	f04f 33ff 	mov.w	r3, #4294967295
 800ec94:	2200      	movs	r2, #0
 800ec96:	4941      	ldr	r1, [pc, #260]	; (800ed9c <dwt_ioctl+0x464>)
 800ec98:	f7fe ff4e 	bl	800db38 <dwt_modify32bitoffsetreg>
 800ec9c:	2500      	movs	r5, #0
 800ec9e:	e6f5      	b.n	800ea8c <dwt_ioctl+0x154>
 800eca0:	2c00      	cmp	r4, #0
 800eca2:	f001 8434 	beq.w	801050e <dwt_ioctl+0x1bd6>
 800eca6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eca8:	7b5b      	ldrb	r3, [r3, #13]
 800ecaa:	7023      	strb	r3, [r4, #0]
 800ecac:	2500      	movs	r5, #0
 800ecae:	e6ed      	b.n	800ea8c <dwt_ioctl+0x154>
 800ecb0:	2c00      	cmp	r4, #0
 800ecb2:	f001 842f 	beq.w	8010514 <dwt_ioctl+0x1bdc>
 800ecb6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ecb8:	7a9b      	ldrb	r3, [r3, #10]
 800ecba:	7023      	strb	r3, [r4, #0]
 800ecbc:	2500      	movs	r5, #0
 800ecbe:	e6e5      	b.n	800ea8c <dwt_ioctl+0x154>
 800ecc0:	2c00      	cmp	r4, #0
 800ecc2:	f001 842a 	beq.w	801051a <dwt_ioctl+0x1be2>
 800ecc6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ecc8:	7adb      	ldrb	r3, [r3, #11]
 800ecca:	7023      	strb	r3, [r4, #0]
 800eccc:	2500      	movs	r5, #0
 800ecce:	e6dd      	b.n	800ea8c <dwt_ioctl+0x154>
 800ecd0:	2c00      	cmp	r4, #0
 800ecd2:	f001 8425 	beq.w	8010520 <dwt_ioctl+0x1be8>
 800ecd6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6023      	str	r3, [r4, #0]
 800ecdc:	2500      	movs	r5, #0
 800ecde:	e6d5      	b.n	800ea8c <dwt_ioctl+0x154>
 800ece0:	2c00      	cmp	r4, #0
 800ece2:	f001 8420 	beq.w	8010526 <dwt_ioctl+0x1bee>
 800ece6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	6023      	str	r3, [r4, #0]
 800ecec:	2500      	movs	r5, #0
 800ecee:	e6cd      	b.n	800ea8c <dwt_ioctl+0x154>
 800ecf0:	f7fe fb7e 	bl	800d3f0 <ull_signal_rx_buff_free>
 800ecf4:	2500      	movs	r5, #0
 800ecf6:	e6c9      	b.n	800ea8c <dwt_ioctl+0x154>
 800ecf8:	2c00      	cmp	r4, #0
 800ecfa:	f001 8417 	beq.w	801052c <dwt_ioctl+0x1bf4>
 800ecfe:	6821      	ldr	r1, [r4, #0]
 800ed00:	f7fe fd24 	bl	800d74c <ull_setrxaftertxdelay>
 800ed04:	2500      	movs	r5, #0
 800ed06:	e6c1      	b.n	800ea8c <dwt_ioctl+0x154>
 800ed08:	2c00      	cmp	r4, #0
 800ed0a:	f001 8412 	beq.w	8010532 <dwt_ioctl+0x1bfa>
 800ed0e:	7825      	ldrb	r5, [r4, #0]
 800ed10:	b15d      	cbz	r5, 800ed2a <dwt_ioctl+0x3f2>
 800ed12:	6864      	ldr	r4, [r4, #4]
 800ed14:	2340      	movs	r3, #64	; 0x40
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	23ff      	movs	r3, #255	; 0xff
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	2110      	movs	r1, #16
 800ed1e:	f7ff f8f5 	bl	800df0c <dwt_modify8bitoffsetreg>
 800ed22:	2d02      	cmp	r5, #2
 800ed24:	d107      	bne.n	800ed36 <dwt_ioctl+0x3fe>
 800ed26:	60f4      	str	r4, [r6, #12]
 800ed28:	e005      	b.n	800ed36 <dwt_ioctl+0x3fe>
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	9200      	str	r2, [sp, #0]
 800ed2e:	23bf      	movs	r3, #191	; 0xbf
 800ed30:	2110      	movs	r1, #16
 800ed32:	f7ff f8eb 	bl	800df0c <dwt_modify8bitoffsetreg>
 800ed36:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ed38:	759d      	strb	r5, [r3, #22]
 800ed3a:	2500      	movs	r5, #0
 800ed3c:	e6a6      	b.n	800ea8c <dwt_ioctl+0x154>
 800ed3e:	2c00      	cmp	r4, #0
 800ed40:	f001 83fa 	beq.w	8010538 <dwt_ioctl+0x1c00>
 800ed44:	6865      	ldr	r5, [r4, #4]
 800ed46:	7823      	ldrb	r3, [r4, #0]
 800ed48:	2203      	movs	r2, #3
 800ed4a:	4915      	ldr	r1, [pc, #84]	; (800eda0 <dwt_ioctl+0x468>)
 800ed4c:	f7fe fa0f 	bl	800d16e <dwt_write8bitoffsetreg>
 800ed50:	b945      	cbnz	r5, 800ed64 <dwt_ioctl+0x42c>
 800ed52:	2200      	movs	r2, #0
 800ed54:	9200      	str	r2, [sp, #0]
 800ed56:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800ed5a:	2110      	movs	r1, #16
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f7ff fa87 	bl	800e270 <dwt_modify16bitoffsetreg>
 800ed62:	e693      	b.n	800ea8c <dwt_ioctl+0x154>
 800ed64:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2110      	movs	r1, #16
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7fe fee0 	bl	800db38 <dwt_modify32bitoffsetreg>
 800ed78:	2500      	movs	r5, #0
 800ed7a:	e687      	b.n	800ea8c <dwt_ioctl+0x154>
 800ed7c:	000f0030 	.word	0x000f0030
 800ed80:	00010054 	.word	0x00010054
 800ed84:	00010058 	.word	0x00010058
 800ed88:	0001005c 	.word	0x0001005c
 800ed8c:	00010060 	.word	0x00010060
 800ed90:	00010018 	.word	0x00010018
 800ed94:	0001001c 	.word	0x0001001c
 800ed98:	00010014 	.word	0x00010014
 800ed9c:	00110004 	.word	0x00110004
 800eda0:	00010008 	.word	0x00010008
 800eda4:	2200      	movs	r2, #0
 800eda6:	4611      	mov	r1, r2
 800eda8:	f7fd fdf2 	bl	800c990 <dwt_read32bitoffsetreg>
 800edac:	68b2      	ldr	r2, [r6, #8]
 800edae:	6813      	ldr	r3, [r2, #0]
 800edb0:	4043      	eors	r3, r0
 800edb2:	6852      	ldr	r2, [r2, #4]
 800edb4:	4213      	tst	r3, r2
 800edb6:	bf14      	ite	ne
 800edb8:	f04f 35ff 	movne.w	r5, #4294967295
 800edbc:	2500      	moveq	r5, #0
 800edbe:	e665      	b.n	800ea8c <dwt_ioctl+0x154>
 800edc0:	2c00      	cmp	r4, #0
 800edc2:	f001 83bc 	beq.w	801053e <dwt_ioctl+0x1c06>
 800edc6:	7821      	ldrb	r1, [r4, #0]
 800edc8:	f7ff f8b4 	bl	800df34 <ull_configciadiag>
 800edcc:	2500      	movs	r5, #0
 800edce:	e65d      	b.n	800ea8c <dwt_ioctl+0x154>
 800edd0:	b93a      	cbnz	r2, 800ede2 <dwt_ioctl+0x4aa>
 800edd2:	2200      	movs	r2, #0
 800edd4:	9200      	str	r2, [sp, #0]
 800edd6:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800edda:	49ae      	ldr	r1, [pc, #696]	; (800f094 <dwt_ioctl+0x75c>)
 800eddc:	f7ff fa48 	bl	800e270 <dwt_modify16bitoffsetreg>
 800ede0:	e654      	b.n	800ea8c <dwt_ioctl+0x154>
 800ede2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edec:	2200      	movs	r2, #0
 800edee:	49a9      	ldr	r1, [pc, #676]	; (800f094 <dwt_ioctl+0x75c>)
 800edf0:	f7ff fa3e 	bl	800e270 <dwt_modify16bitoffsetreg>
 800edf4:	2500      	movs	r5, #0
 800edf6:	e649      	b.n	800ea8c <dwt_ioctl+0x154>
 800edf8:	f002 0201 	and.w	r2, r2, #1
 800edfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee00:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800ee04:	2a00      	cmp	r2, #0
 800ee06:	bf08      	it	eq
 800ee08:	460b      	moveq	r3, r1
 800ee0a:	02d2      	lsls	r2, r2, #11
 800ee0c:	f015 0f02 	tst.w	r5, #2
 800ee10:	bf12      	itee	ne
 800ee12:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800ee16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee1a:	b29b      	uxtheq	r3, r3
 800ee1c:	9200      	str	r2, [sp, #0]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	499c      	ldr	r1, [pc, #624]	; (800f094 <dwt_ioctl+0x75c>)
 800ee22:	f7ff fa25 	bl	800e270 <dwt_modify16bitoffsetreg>
 800ee26:	2500      	movs	r5, #0
 800ee28:	e630      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee2a:	b92a      	cbnz	r2, 800ee38 <dwt_ioctl+0x500>
 800ee2c:	4b9a      	ldr	r3, [pc, #616]	; (800f098 <dwt_ioctl+0x760>)
 800ee2e:	2202      	movs	r2, #2
 800ee30:	499a      	ldr	r1, [pc, #616]	; (800f09c <dwt_ioctl+0x764>)
 800ee32:	f7fe faef 	bl	800d414 <dwt_write32bitoffsetreg>
 800ee36:	e629      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee38:	4b99      	ldr	r3, [pc, #612]	; (800f0a0 <dwt_ioctl+0x768>)
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	4997      	ldr	r1, [pc, #604]	; (800f09c <dwt_ioctl+0x764>)
 800ee3e:	f7fe fae9 	bl	800d414 <dwt_write32bitoffsetreg>
 800ee42:	2500      	movs	r5, #0
 800ee44:	e622      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee46:	4611      	mov	r1, r2
 800ee48:	f7fe fc96 	bl	800d778 <ull_setlnapamode>
 800ee4c:	2500      	movs	r5, #0
 800ee4e:	e61d      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee50:	2c00      	cmp	r4, #0
 800ee52:	f001 8377 	beq.w	8010544 <dwt_ioctl+0x1c0c>
 800ee56:	2200      	movs	r2, #0
 800ee58:	4992      	ldr	r1, [pc, #584]	; (800f0a4 <dwt_ioctl+0x76c>)
 800ee5a:	f7fd fdc1 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800ee5e:	7020      	strb	r0, [r4, #0]
 800ee60:	2500      	movs	r5, #0
 800ee62:	e613      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee64:	4621      	mov	r1, r4
 800ee66:	f7fe fca9 	bl	800d7bc <ull_configurestskey>
 800ee6a:	2500      	movs	r5, #0
 800ee6c:	e60e      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee6e:	4621      	mov	r1, r4
 800ee70:	f7fe fcc8 	bl	800d804 <ull_configurestsiv>
 800ee74:	2500      	movs	r5, #0
 800ee76:	e609      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	23ff      	movs	r3, #255	; 0xff
 800ee7e:	2200      	movs	r2, #0
 800ee80:	4989      	ldr	r1, [pc, #548]	; (800f0a8 <dwt_ioctl+0x770>)
 800ee82:	f7ff f843 	bl	800df0c <dwt_modify8bitoffsetreg>
 800ee86:	2500      	movs	r5, #0
 800ee88:	e600      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	f7fe fcde 	bl	800d84c <ull_configmrxlut>
 800ee90:	2500      	movs	r5, #0
 800ee92:	e5fb      	b.n	800ea8c <dwt_ioctl+0x154>
 800ee94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ee96:	7a1b      	ldrb	r3, [r3, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d137      	bne.n	800ef0c <dwt_ioctl+0x5d4>
 800ee9c:	2314      	movs	r3, #20
 800ee9e:	2201      	movs	r2, #1
 800eea0:	4982      	ldr	r1, [pc, #520]	; (800f0ac <dwt_ioctl+0x774>)
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7fe f963 	bl	800d16e <dwt_write8bitoffsetreg>
 800eea8:	2318      	movs	r3, #24
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4980      	ldr	r1, [pc, #512]	; (800f0b0 <dwt_ioctl+0x778>)
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f7fe fab0 	bl	800d414 <dwt_write32bitoffsetreg>
 800eeb4:	23e8      	movs	r3, #232	; 0xe8
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	497e      	ldr	r1, [pc, #504]	; (800f0b4 <dwt_ioctl+0x77c>)
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7fe faaa 	bl	800d414 <dwt_write32bitoffsetreg>
 800eec0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800eec2:	8a5b      	ldrh	r3, [r3, #18]
 800eec4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800eec8:	2b20      	cmp	r3, #32
 800eeca:	d022      	beq.n	800ef12 <dwt_ioctl+0x5da>
 800eecc:	2b60      	cmp	r3, #96	; 0x60
 800eece:	d02b      	beq.n	800ef28 <dwt_ioctl+0x5f0>
 800eed0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800eed2:	7e1b      	ldrb	r3, [r3, #24]
 800eed4:	085b      	lsrs	r3, r3, #1
 800eed6:	d032      	beq.n	800ef3e <dwt_ioctl+0x606>
 800eed8:	2200      	movs	r2, #0
 800eeda:	4977      	ldr	r1, [pc, #476]	; (800f0b8 <dwt_ioctl+0x780>)
 800eedc:	4630      	mov	r0, r6
 800eede:	f7fd fd6d 	bl	800c9bc <dwt_read16bitoffsetreg>
 800eee2:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800eee6:	3b09      	subs	r3, #9
 800eee8:	2b0f      	cmp	r3, #15
 800eeea:	f201 832e 	bhi.w	801054a <dwt_ioctl+0x1c12>
 800eeee:	f000 0001 	and.w	r0, r0, #1
 800eef2:	2800      	cmp	r0, #0
 800eef4:	bf0c      	ite	eq
 800eef6:	2105      	moveq	r1, #5
 800eef8:	2109      	movne	r1, #9
 800eefa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800eefc:	7a5b      	ldrb	r3, [r3, #9]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d029      	beq.n	800ef56 <dwt_ioctl+0x61e>
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7fe fca2 	bl	800d84c <ull_configmrxlut>
 800ef08:	2500      	movs	r5, #0
 800ef0a:	e5bf      	b.n	800ea8c <dwt_ioctl+0x154>
 800ef0c:	f7ff f9ca 	bl	800e2a4 <_dwt_prog_ldo_and_bias_tune>
 800ef10:	e7c4      	b.n	800ee9c <dwt_ioctl+0x564>
 800ef12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	4967      	ldr	r1, [pc, #412]	; (800f0bc <dwt_ioctl+0x784>)
 800ef20:	4630      	mov	r0, r6
 800ef22:	f7fe fe09 	bl	800db38 <dwt_modify32bitoffsetreg>
 800ef26:	e7d3      	b.n	800eed0 <dwt_ioctl+0x598>
 800ef28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800ef32:	2200      	movs	r2, #0
 800ef34:	4961      	ldr	r1, [pc, #388]	; (800f0bc <dwt_ioctl+0x784>)
 800ef36:	4630      	mov	r0, r6
 800ef38:	f7fe fdfe 	bl	800db38 <dwt_modify32bitoffsetreg>
 800ef3c:	e7c8      	b.n	800eed0 <dwt_ioctl+0x598>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	2200      	movs	r2, #0
 800ef42:	495f      	ldr	r1, [pc, #380]	; (800f0c0 <dwt_ioctl+0x788>)
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7fe f912 	bl	800d16e <dwt_write8bitoffsetreg>
 800ef4a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800ef4c:	7e13      	ldrb	r3, [r2, #24]
 800ef4e:	f043 0302 	orr.w	r3, r3, #2
 800ef52:	7613      	strb	r3, [r2, #24]
 800ef54:	e7c0      	b.n	800eed8 <dwt_ioctl+0x5a0>
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7fe fe12 	bl	800db80 <_dwt_kick_dgc_on_wakeup>
 800ef5c:	2500      	movs	r5, #0
 800ef5e:	e595      	b.n	800ea8c <dwt_ioctl+0x154>
 800ef60:	2c00      	cmp	r4, #0
 800ef62:	f001 82f5 	beq.w	8010550 <dwt_ioctl+0x1c18>
 800ef66:	7823      	ldrb	r3, [r4, #0]
 800ef68:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ef6a:	75d3      	strb	r3, [r2, #23]
 800ef6c:	031b      	lsls	r3, r3, #12
 800ef6e:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800ef78:	2200      	movs	r2, #0
 800ef7a:	2110      	movs	r1, #16
 800ef7c:	f7ff f978 	bl	800e270 <dwt_modify16bitoffsetreg>
 800ef80:	2500      	movs	r5, #0
 800ef82:	e583      	b.n	800ea8c <dwt_ioctl+0x154>
 800ef84:	2c00      	cmp	r4, #0
 800ef86:	f001 82e6 	beq.w	8010556 <dwt_ioctl+0x1c1e>
 800ef8a:	8823      	ldrh	r3, [r4, #0]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ef92:	f7fe f93e 	bl	800d212 <dwt_write16bitoffsetreg>
 800ef96:	2500      	movs	r5, #0
 800ef98:	e578      	b.n	800ea8c <dwt_ioctl+0x154>
 800ef9a:	2c00      	cmp	r4, #0
 800ef9c:	f001 82de 	beq.w	801055c <dwt_ioctl+0x1c24>
 800efa0:	2200      	movs	r2, #0
 800efa2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800efa6:	f7fd fd09 	bl	800c9bc <dwt_read16bitoffsetreg>
 800efaa:	8020      	strh	r0, [r4, #0]
 800efac:	2500      	movs	r5, #0
 800efae:	e56d      	b.n	800ea8c <dwt_ioctl+0x154>
 800efb0:	2c00      	cmp	r4, #0
 800efb2:	f001 82d6 	beq.w	8010562 <dwt_ioctl+0x1c2a>
 800efb6:	8823      	ldrh	r3, [r4, #0]
 800efb8:	2200      	movs	r2, #0
 800efba:	4942      	ldr	r1, [pc, #264]	; (800f0c4 <dwt_ioctl+0x78c>)
 800efbc:	f7fe f929 	bl	800d212 <dwt_write16bitoffsetreg>
 800efc0:	2500      	movs	r5, #0
 800efc2:	e563      	b.n	800ea8c <dwt_ioctl+0x154>
 800efc4:	2c00      	cmp	r4, #0
 800efc6:	f001 82cf 	beq.w	8010568 <dwt_ioctl+0x1c30>
 800efca:	2200      	movs	r2, #0
 800efcc:	493d      	ldr	r1, [pc, #244]	; (800f0c4 <dwt_ioctl+0x78c>)
 800efce:	f7fd fcf5 	bl	800c9bc <dwt_read16bitoffsetreg>
 800efd2:	8020      	strh	r0, [r4, #0]
 800efd4:	2500      	movs	r5, #0
 800efd6:	e559      	b.n	800ea8c <dwt_ioctl+0x154>
 800efd8:	2c00      	cmp	r4, #0
 800efda:	f001 82c8 	beq.w	801056e <dwt_ioctl+0x1c36>
 800efde:	88a3      	ldrh	r3, [r4, #4]
 800efe0:	88e2      	ldrh	r2, [r4, #6]
 800efe2:	6821      	ldr	r1, [r4, #0]
 800efe4:	9100      	str	r1, [sp, #0]
 800efe6:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800efea:	f7fe f8b5 	bl	800d158 <dwt_writetodevice>
 800efee:	2500      	movs	r5, #0
 800eff0:	e54c      	b.n	800ea8c <dwt_ioctl+0x154>
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	f001 82be 	beq.w	8010574 <dwt_ioctl+0x1c3c>
 800eff8:	88a3      	ldrh	r3, [r4, #4]
 800effa:	88e2      	ldrh	r2, [r4, #6]
 800effc:	6821      	ldr	r1, [r4, #0]
 800effe:	9100      	str	r1, [sp, #0]
 800f000:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800f004:	f7fd fcba 	bl	800c97c <dwt_readfromdevice>
 800f008:	2500      	movs	r5, #0
 800f00a:	e53f      	b.n	800ea8c <dwt_ioctl+0x154>
 800f00c:	2c00      	cmp	r4, #0
 800f00e:	f001 82b4 	beq.w	801057a <dwt_ioctl+0x1c42>
 800f012:	88e3      	ldrh	r3, [r4, #6]
 800f014:	88a2      	ldrh	r2, [r4, #4]
 800f016:	6821      	ldr	r1, [r4, #0]
 800f018:	f7fe fcc2 	bl	800d9a0 <ull_readrxdata>
 800f01c:	2500      	movs	r5, #0
 800f01e:	e535      	b.n	800ea8c <dwt_ioctl+0x154>
 800f020:	2c00      	cmp	r4, #0
 800f022:	f001 82ad 	beq.w	8010580 <dwt_ioctl+0x1c48>
 800f026:	88e3      	ldrh	r3, [r4, #6]
 800f028:	6822      	ldr	r2, [r4, #0]
 800f02a:	88a1      	ldrh	r1, [r4, #4]
 800f02c:	f7fe fd52 	bl	800dad4 <ull_writetxdata>
 800f030:	2500      	movs	r5, #0
 800f032:	e52b      	b.n	800ea8c <dwt_ioctl+0x154>
 800f034:	4611      	mov	r1, r2
 800f036:	f7fe fce9 	bl	800da0c <ull_rxenable>
 800f03a:	2500      	movs	r5, #0
 800f03c:	e526      	b.n	800ea8c <dwt_ioctl+0x154>
 800f03e:	2c00      	cmp	r4, #0
 800f040:	f001 82a1 	beq.w	8010586 <dwt_ioctl+0x1c4e>
 800f044:	7923      	ldrb	r3, [r4, #4]
 800f046:	8862      	ldrh	r2, [r4, #2]
 800f048:	8821      	ldrh	r1, [r4, #0]
 800f04a:	f7fe ff2d 	bl	800dea8 <ull_writetxfctrl>
 800f04e:	2500      	movs	r5, #0
 800f050:	e51c      	b.n	800ea8c <dwt_ioctl+0x154>
 800f052:	2c00      	cmp	r4, #0
 800f054:	f001 829a 	beq.w	801058c <dwt_ioctl+0x1c54>
 800f058:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f05a:	7bdb      	ldrb	r3, [r3, #15]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d00c      	beq.n	800f07a <dwt_ioctl+0x742>
 800f060:	2b03      	cmp	r3, #3
 800f062:	d110      	bne.n	800f086 <dwt_ioctl+0x74e>
 800f064:	220c      	movs	r2, #12
 800f066:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800f06a:	f7fd fca7 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f06e:	b200      	sxth	r0, r0
 800f070:	f340 030c 	sbfx	r3, r0, #0, #13
 800f074:	8023      	strh	r3, [r4, #0]
 800f076:	2500      	movs	r5, #0
 800f078:	e508      	b.n	800ea8c <dwt_ioctl+0x154>
 800f07a:	2200      	movs	r2, #0
 800f07c:	4912      	ldr	r1, [pc, #72]	; (800f0c8 <dwt_ioctl+0x790>)
 800f07e:	f7fd fc9d 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f082:	b200      	sxth	r0, r0
 800f084:	e7f4      	b.n	800f070 <dwt_ioctl+0x738>
 800f086:	2200      	movs	r2, #0
 800f088:	4910      	ldr	r1, [pc, #64]	; (800f0cc <dwt_ioctl+0x794>)
 800f08a:	f7fd fc97 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f08e:	b200      	sxth	r0, r0
 800f090:	e7ee      	b.n	800f070 <dwt_ioctl+0x738>
 800f092:	bf00      	nop
 800f094:	00110008 	.word	0x00110008
 800f098:	00d20874 	.word	0x00d20874
 800f09c:	00110010 	.word	0x00110010
 800f0a0:	04d28874 	.word	0x04d28874
 800f0a4:	0007001c 	.word	0x0007001c
 800f0a8:	00020004 	.word	0x00020004
 800f0ac:	00070050 	.word	0x00070050
 800f0b0:	001f000c 	.word	0x001f000c
 800f0b4:	001f0010 	.word	0x001f0010
 800f0b8:	00010014 	.word	0x00010014
 800f0bc:	000b0008 	.word	0x000b0008
 800f0c0:	00010028 	.word	0x00010028
 800f0c4:	00010004 	.word	0x00010004
 800f0c8:	0018000c 	.word	0x0018000c
 800f0cc:	000c0020 	.word	0x000c0020
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	f001 825e 	beq.w	8010592 <dwt_ioctl+0x1c5a>
 800f0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	2303      	movs	r3, #3
 800f0dc:	2200      	movs	r2, #0
 800f0de:	49bb      	ldr	r1, [pc, #748]	; (800f3cc <dwt_ioctl+0xa94>)
 800f0e0:	f7fd fc4c 	bl	800c97c <dwt_readfromdevice>
 800f0e4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800f0e8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800f0ec:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800f0f0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f0f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f0f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800f0fc:	bf1c      	itt	ne
 800f0fe:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800f102:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800f106:	6023      	str	r3, [r4, #0]
 800f108:	2500      	movs	r5, #0
 800f10a:	e4bf      	b.n	800ea8c <dwt_ioctl+0x154>
 800f10c:	f7fe f892 	bl	800d234 <ull_clearaonconfig>
 800f110:	2500      	movs	r5, #0
 800f112:	e4bb      	b.n	800ea8c <dwt_ioctl+0x154>
 800f114:	2c00      	cmp	r4, #0
 800f116:	f001 823f 	beq.w	8010598 <dwt_ioctl+0x1c60>
 800f11a:	8861      	ldrh	r1, [r4, #2]
 800f11c:	f7fe ff40 	bl	800dfa0 <ull_calcbandwidthadj>
 800f120:	7020      	strb	r0, [r4, #0]
 800f122:	2500      	movs	r5, #0
 800f124:	e4b2      	b.n	800ea8c <dwt_ioctl+0x154>
 800f126:	4621      	mov	r1, r4
 800f128:	f7fd fc68 	bl	800c9fc <ull_readdiagnostics>
 800f12c:	2500      	movs	r5, #0
 800f12e:	e4ad      	b.n	800ea8c <dwt_ioctl+0x154>
 800f130:	2c00      	cmp	r4, #0
 800f132:	f001 8234 	beq.w	801059e <dwt_ioctl+0x1c66>
 800f136:	2201      	movs	r2, #1
 800f138:	2174      	movs	r1, #116	; 0x74
 800f13a:	f7fd fc29 	bl	800c990 <dwt_read32bitoffsetreg>
 800f13e:	6020      	str	r0, [r4, #0]
 800f140:	2500      	movs	r5, #0
 800f142:	e4a3      	b.n	800ea8c <dwt_ioctl+0x154>
 800f144:	2c00      	cmp	r4, #0
 800f146:	f001 822d 	beq.w	80105a4 <dwt_ioctl+0x1c6c>
 800f14a:	2200      	movs	r2, #0
 800f14c:	2174      	movs	r1, #116	; 0x74
 800f14e:	f7fd fc1f 	bl	800c990 <dwt_read32bitoffsetreg>
 800f152:	6020      	str	r0, [r4, #0]
 800f154:	2500      	movs	r5, #0
 800f156:	e499      	b.n	800ea8c <dwt_ioctl+0x154>
 800f158:	9400      	str	r4, [sp, #0]
 800f15a:	2305      	movs	r3, #5
 800f15c:	2200      	movs	r2, #0
 800f15e:	2174      	movs	r1, #116	; 0x74
 800f160:	f7fd fc0c 	bl	800c97c <dwt_readfromdevice>
 800f164:	2500      	movs	r5, #0
 800f166:	e491      	b.n	800ea8c <dwt_ioctl+0x154>
 800f168:	2c00      	cmp	r4, #0
 800f16a:	f001 821e 	beq.w	80105aa <dwt_ioctl+0x1c72>
 800f16e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f170:	7bdb      	ldrb	r3, [r3, #15]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d014      	beq.n	800f1a0 <dwt_ioctl+0x868>
 800f176:	2b03      	cmp	r3, #3
 800f178:	d119      	bne.n	800f1ae <dwt_ioctl+0x876>
 800f17a:	2216      	movs	r2, #22
 800f17c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800f180:	f7fd fc1c 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f184:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800f188:	b283      	uxth	r3, r0
 800f18a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800f18e:	d004      	beq.n	800f19a <dwt_ioctl+0x862>
 800f190:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800f194:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800f198:	b218      	sxth	r0, r3
 800f19a:	8020      	strh	r0, [r4, #0]
 800f19c:	2500      	movs	r5, #0
 800f19e:	e475      	b.n	800ea8c <dwt_ioctl+0x154>
 800f1a0:	2202      	movs	r2, #2
 800f1a2:	498b      	ldr	r1, [pc, #556]	; (800f3d0 <dwt_ioctl+0xa98>)
 800f1a4:	f7fd fc0a 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f1a8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800f1ac:	e7ec      	b.n	800f188 <dwt_ioctl+0x850>
 800f1ae:	2202      	movs	r2, #2
 800f1b0:	4988      	ldr	r1, [pc, #544]	; (800f3d4 <dwt_ioctl+0xa9c>)
 800f1b2:	f7fd fc03 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f1b6:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800f1ba:	e7e5      	b.n	800f188 <dwt_ioctl+0x850>
 800f1bc:	9400      	str	r4, [sp, #0]
 800f1be:	2306      	movs	r3, #6
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4985      	ldr	r1, [pc, #532]	; (800f3d8 <dwt_ioctl+0xaa0>)
 800f1c4:	f7fd fbda 	bl	800c97c <dwt_readfromdevice>
 800f1c8:	7963      	ldrb	r3, [r4, #5]
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	7163      	strb	r3, [r4, #5]
 800f1d0:	2500      	movs	r5, #0
 800f1d2:	e45b      	b.n	800ea8c <dwt_ioctl+0x154>
 800f1d4:	2c00      	cmp	r4, #0
 800f1d6:	f001 81eb 	beq.w	80105b0 <dwt_ioctl+0x1c78>
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800f1e0:	f7fd fbfe 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800f1e4:	7020      	strb	r0, [r4, #0]
 800f1e6:	2500      	movs	r5, #0
 800f1e8:	e450      	b.n	800ea8c <dwt_ioctl+0x154>
 800f1ea:	2c00      	cmp	r4, #0
 800f1ec:	f001 81e3 	beq.w	80105b6 <dwt_ioctl+0x1c7e>
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800f1f6:	f7fd fbf3 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800f1fa:	7020      	strb	r0, [r4, #0]
 800f1fc:	2500      	movs	r5, #0
 800f1fe:	e445      	b.n	800ea8c <dwt_ioctl+0x154>
 800f200:	2c00      	cmp	r4, #0
 800f202:	f001 81db 	beq.w	80105bc <dwt_ioctl+0x1c84>
 800f206:	88a2      	ldrh	r2, [r4, #4]
 800f208:	6821      	ldr	r1, [r4, #0]
 800f20a:	f7fe fd1d 	bl	800dc48 <_dwt_otpprogword32>
 800f20e:	2500      	movs	r5, #0
 800f210:	e43c      	b.n	800ea8c <dwt_ioctl+0x154>
 800f212:	2c00      	cmp	r4, #0
 800f214:	f001 81d5 	beq.w	80105c2 <dwt_ioctl+0x1c8a>
 800f218:	6825      	ldr	r5, [r4, #0]
 800f21a:	88a4      	ldrh	r4, [r4, #4]
 800f21c:	4622      	mov	r2, r4
 800f21e:	4629      	mov	r1, r5
 800f220:	f7fe fd12 	bl	800dc48 <_dwt_otpprogword32>
 800f224:	4621      	mov	r1, r4
 800f226:	4630      	mov	r0, r6
 800f228:	f7fe f84e 	bl	800d2c8 <_dwt_otpread>
 800f22c:	1a2d      	subs	r5, r5, r0
 800f22e:	bf18      	it	ne
 800f230:	f04f 35ff 	movne.w	r5, #4294967295
 800f234:	e42a      	b.n	800ea8c <dwt_ioctl+0x154>
 800f236:	2a02      	cmp	r2, #2
 800f238:	d00e      	beq.n	800f258 <dwt_ioctl+0x920>
 800f23a:	4c68      	ldr	r4, [pc, #416]	; (800f3dc <dwt_ioctl+0xaa4>)
 800f23c:	2300      	movs	r3, #0
 800f23e:	461a      	mov	r2, r3
 800f240:	4621      	mov	r1, r4
 800f242:	4630      	mov	r0, r6
 800f244:	f7fd ff93 	bl	800d16e <dwt_write8bitoffsetreg>
 800f248:	2302      	movs	r3, #2
 800f24a:	2200      	movs	r2, #0
 800f24c:	4621      	mov	r1, r4
 800f24e:	4630      	mov	r0, r6
 800f250:	f7fd ff8d 	bl	800d16e <dwt_write8bitoffsetreg>
 800f254:	2500      	movs	r5, #0
 800f256:	e419      	b.n	800ea8c <dwt_ioctl+0x154>
 800f258:	2300      	movs	r3, #0
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	23fe      	movs	r3, #254	; 0xfe
 800f25e:	2201      	movs	r2, #1
 800f260:	495f      	ldr	r1, [pc, #380]	; (800f3e0 <dwt_ioctl+0xaa8>)
 800f262:	f7fe fe53 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f266:	e7e8      	b.n	800f23a <dwt_ioctl+0x902>
 800f268:	2c00      	cmp	r4, #0
 800f26a:	f001 81ad 	beq.w	80105c8 <dwt_ioctl+0x1c90>
 800f26e:	8824      	ldrh	r4, [r4, #0]
 800f270:	b2e2      	uxtb	r2, r4
 800f272:	f44f 7181 	mov.w	r1, #258	; 0x102
 800f276:	f7fe f869 	bl	800d34c <ull_aon_write>
 800f27a:	0a22      	lsrs	r2, r4, #8
 800f27c:	f240 1103 	movw	r1, #259	; 0x103
 800f280:	4630      	mov	r0, r6
 800f282:	f7fe f863 	bl	800d34c <ull_aon_write>
 800f286:	2500      	movs	r5, #0
 800f288:	e400      	b.n	800ea8c <dwt_ioctl+0x154>
 800f28a:	2c00      	cmp	r4, #0
 800f28c:	f001 819f 	beq.w	80105ce <dwt_ioctl+0x1c96>
 800f290:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800f3ec <dwt_ioctl+0xab4>
 800f294:	2310      	movs	r3, #16
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	23ff      	movs	r3, #255	; 0xff
 800f29a:	2200      	movs	r2, #0
 800f29c:	4641      	mov	r1, r8
 800f29e:	f7fe fe35 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f2a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f2a6:	4630      	mov	r0, r6
 800f2a8:	f7fe f830 	bl	800d30c <ull_aon_read>
 800f2ac:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800f2b0:	462a      	mov	r2, r5
 800f2b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7fe f848 	bl	800d34c <ull_aon_write>
 800f2bc:	f045 0204 	orr.w	r2, r5, #4
 800f2c0:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f7fe f841 	bl	800d34c <ull_aon_write>
 800f2ca:	2002      	movs	r0, #2
 800f2cc:	f7fc fc8c 	bl	800bbe8 <deca_sleep>
 800f2d0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	f7fe f819 	bl	800d30c <ull_aon_read>
 800f2da:	4607      	mov	r7, r0
 800f2dc:	f240 110f 	movw	r1, #271	; 0x10f
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7fe f813 	bl	800d30c <ull_aon_read>
 800f2e6:	4681      	mov	r9, r0
 800f2e8:	462a      	mov	r2, r5
 800f2ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	f7fe f82c 	bl	800d34c <ull_aon_write>
 800f2f4:	2500      	movs	r5, #0
 800f2f6:	9500      	str	r5, [sp, #0]
 800f2f8:	23ef      	movs	r3, #239	; 0xef
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	4641      	mov	r1, r8
 800f2fe:	4630      	mov	r0, r6
 800f300:	f7fe fe04 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f304:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800f308:	8027      	strh	r7, [r4, #0]
 800f30a:	f7ff bbbf 	b.w	800ea8c <dwt_ioctl+0x154>
 800f30e:	2c00      	cmp	r4, #0
 800f310:	f001 8160 	beq.w	80105d4 <dwt_ioctl+0x1c9c>
 800f314:	78a2      	ldrb	r2, [r4, #2]
 800f316:	8821      	ldrh	r1, [r4, #0]
 800f318:	f7fe f840 	bl	800d39c <ull_configuresleep>
 800f31c:	2500      	movs	r5, #0
 800f31e:	f7ff bbb5 	b.w	800ea8c <dwt_ioctl+0x154>
 800f322:	f7fd ff87 	bl	800d234 <ull_clearaonconfig>
 800f326:	2001      	movs	r0, #1
 800f328:	f7fc fc5e 	bl	800bbe8 <deca_sleep>
 800f32c:	2303      	movs	r3, #3
 800f32e:	9300      	str	r3, [sp, #0]
 800f330:	23ff      	movs	r3, #255	; 0xff
 800f332:	2200      	movs	r2, #0
 800f334:	492b      	ldr	r1, [pc, #172]	; (800f3e4 <dwt_ioctl+0xaac>)
 800f336:	4630      	mov	r0, r6
 800f338:	f7fe fde8 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f33c:	2300      	movs	r3, #0
 800f33e:	461a      	mov	r2, r3
 800f340:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800f344:	4630      	mov	r0, r6
 800f346:	f7fd ff12 	bl	800d16e <dwt_write8bitoffsetreg>
 800f34a:	2001      	movs	r0, #1
 800f34c:	f7fc fc4c 	bl	800bbe8 <deca_sleep>
 800f350:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f352:	2500      	movs	r5, #0
 800f354:	73dd      	strb	r5, [r3, #15]
 800f356:	2202      	movs	r2, #2
 800f358:	825a      	strh	r2, [r3, #18]
 800f35a:	759d      	strb	r5, [r3, #22]
 800f35c:	75dd      	strb	r5, [r3, #23]
 800f35e:	741d      	strb	r5, [r3, #16]
 800f360:	f7ff bb94 	b.w	800ea8c <dwt_ioctl+0x154>
 800f364:	2c00      	cmp	r4, #0
 800f366:	f001 8138 	beq.w	80105da <dwt_ioctl+0x1ca2>
 800f36a:	7823      	ldrb	r3, [r4, #0]
 800f36c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f370:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f372:	7393      	strb	r3, [r2, #14]
 800f374:	2200      	movs	r2, #0
 800f376:	491c      	ldr	r1, [pc, #112]	; (800f3e8 <dwt_ioctl+0xab0>)
 800f378:	f7fd fef9 	bl	800d16e <dwt_write8bitoffsetreg>
 800f37c:	2500      	movs	r5, #0
 800f37e:	f7ff bb85 	b.w	800ea8c <dwt_ioctl+0x154>
 800f382:	2c00      	cmp	r4, #0
 800f384:	f001 812c 	beq.w	80105e0 <dwt_ioctl+0x1ca8>
 800f388:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f38a:	7b9b      	ldrb	r3, [r3, #14]
 800f38c:	7023      	strb	r3, [r4, #0]
 800f38e:	2500      	movs	r5, #0
 800f390:	f7ff bb7c 	b.w	800ea8c <dwt_ioctl+0x154>
 800f394:	2101      	movs	r1, #1
 800f396:	f7fe fc11 	bl	800dbbc <ull_enable_rf_tx>
 800f39a:	4630      	mov	r0, r6
 800f39c:	f7fe fc42 	bl	800dc24 <ull_enable_rftx_blocks>
 800f3a0:	2101      	movs	r1, #1
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7fd ff66 	bl	800d274 <ull_force_clocks>
 800f3a8:	220f      	movs	r2, #15
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f7ff f86f 	bl	800e490 <ull_repeated_cw>
 800f3b2:	2500      	movs	r5, #0
 800f3b4:	f7ff bb6a 	b.w	800ea8c <dwt_ioctl+0x154>
 800f3b8:	2c00      	cmp	r4, #0
 800f3ba:	f001 8114 	beq.w	80105e6 <dwt_ioctl+0x1cae>
 800f3be:	6862      	ldr	r2, [r4, #4]
 800f3c0:	6821      	ldr	r1, [r4, #0]
 800f3c2:	f7ff f865 	bl	800e490 <ull_repeated_cw>
 800f3c6:	2500      	movs	r5, #0
 800f3c8:	f7ff bb60 	b.w	800ea8c <dwt_ioctl+0x154>
 800f3cc:	00060029 	.word	0x00060029
 800f3d0:	00180014 	.word	0x00180014
 800f3d4:	000c001c 	.word	0x000c001c
 800f3d8:	000c0018 	.word	0x000c0018
 800f3dc:	000a0004 	.word	0x000a0004
 800f3e0:	00110008 	.word	0x00110008
 800f3e4:	00110004 	.word	0x00110004
 800f3e8:	00090014 	.word	0x00090014
 800f3ec:	00070048 	.word	0x00070048
 800f3f0:	2c00      	cmp	r4, #0
 800f3f2:	f001 80fb 	beq.w	80105ec <dwt_ioctl+0x1cb4>
 800f3f6:	4dd6      	ldr	r5, [pc, #856]	; (800f750 <dwt_ioctl+0xe18>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	f7fd faf0 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800f400:	4680      	mov	r8, r0
 800f402:	2302      	movs	r3, #2
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	23ff      	movs	r3, #255	; 0xff
 800f408:	2200      	movs	r2, #0
 800f40a:	4629      	mov	r1, r5
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7fe fd7d 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f412:	2304      	movs	r3, #4
 800f414:	2200      	movs	r2, #0
 800f416:	49cf      	ldr	r1, [pc, #828]	; (800f754 <dwt_ioctl+0xe1c>)
 800f418:	4630      	mov	r0, r6
 800f41a:	f7fd fea8 	bl	800d16e <dwt_write8bitoffsetreg>
 800f41e:	2301      	movs	r3, #1
 800f420:	2200      	movs	r2, #0
 800f422:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f426:	4630      	mov	r0, r6
 800f428:	f7fd fea1 	bl	800d16e <dwt_write8bitoffsetreg>
 800f42c:	4fca      	ldr	r7, [pc, #808]	; (800f758 <dwt_ioctl+0xe20>)
 800f42e:	2500      	movs	r5, #0
 800f430:	462a      	mov	r2, r5
 800f432:	4639      	mov	r1, r7
 800f434:	4630      	mov	r0, r6
 800f436:	f7fd fad3 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800f43a:	f010 0f01 	tst.w	r0, #1
 800f43e:	d0f7      	beq.n	800f430 <dwt_ioctl+0xaf8>
 800f440:	2200      	movs	r2, #0
 800f442:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800f446:	4630      	mov	r0, r6
 800f448:	f7fd fab8 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f44c:	4605      	mov	r5, r0
 800f44e:	2300      	movs	r3, #0
 800f450:	461a      	mov	r2, r3
 800f452:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f456:	4630      	mov	r0, r6
 800f458:	f7fd fe89 	bl	800d16e <dwt_write8bitoffsetreg>
 800f45c:	2300      	movs	r3, #0
 800f45e:	461a      	mov	r2, r3
 800f460:	49bc      	ldr	r1, [pc, #752]	; (800f754 <dwt_ioctl+0xe1c>)
 800f462:	4630      	mov	r0, r6
 800f464:	f7fd fe83 	bl	800d16e <dwt_write8bitoffsetreg>
 800f468:	4643      	mov	r3, r8
 800f46a:	2200      	movs	r2, #0
 800f46c:	49b8      	ldr	r1, [pc, #736]	; (800f750 <dwt_ioctl+0xe18>)
 800f46e:	4630      	mov	r0, r6
 800f470:	f7fd fe7d 	bl	800d16e <dwt_write8bitoffsetreg>
 800f474:	8025      	strh	r5, [r4, #0]
 800f476:	2500      	movs	r5, #0
 800f478:	f7ff bb08 	b.w	800ea8c <dwt_ioctl+0x154>
 800f47c:	2c00      	cmp	r4, #0
 800f47e:	f001 80b8 	beq.w	80105f2 <dwt_ioctl+0x1cba>
 800f482:	7923      	ldrb	r3, [r4, #4]
 800f484:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f486:	7ad2      	ldrb	r2, [r2, #11]
 800f488:	1a9b      	subs	r3, r3, r2
 800f48a:	ee07 3a90 	vmov	s15, r3
 800f48e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f492:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800f75c <dwt_ioctl+0xe24>
 800f496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f49a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800f49e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4a2:	edc4 7a00 	vstr	s15, [r4]
 800f4a6:	2500      	movs	r5, #0
 800f4a8:	f7ff baf0 	b.w	800ea8c <dwt_ioctl+0x154>
 800f4ac:	2c00      	cmp	r4, #0
 800f4ae:	f001 80a3 	beq.w	80105f8 <dwt_ioctl+0x1cc0>
 800f4b2:	7923      	ldrb	r3, [r4, #4]
 800f4b4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f4b6:	7a92      	ldrb	r2, [r2, #10]
 800f4b8:	1a9b      	subs	r3, r3, r2
 800f4ba:	ee07 3a90 	vmov	s15, r3
 800f4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4c2:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800f760 <dwt_ioctl+0xe28>
 800f4c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4ca:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800f4ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4d2:	eddf 6aa4 	vldr	s13, [pc, #656]	; 800f764 <dwt_ioctl+0xe2c>
 800f4d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f4da:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800f4de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4e2:	edc4 7a00 	vstr	s15, [r4]
 800f4e6:	2500      	movs	r5, #0
 800f4e8:	f7ff bad0 	b.w	800ea8c <dwt_ioctl+0x154>
 800f4ec:	2c00      	cmp	r4, #0
 800f4ee:	f001 8086 	beq.w	80105fe <dwt_ioctl+0x1cc6>
 800f4f2:	6824      	ldr	r4, [r4, #0]
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	f7fe fb61 	bl	800dbbc <ull_enable_rf_tx>
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f7fe fb92 	bl	800dc24 <ull_enable_rftx_blocks>
 800f500:	2101      	movs	r1, #1
 800f502:	4630      	mov	r0, r6
 800f504:	f7fd feb6 	bl	800d274 <ull_force_clocks>
 800f508:	4621      	mov	r1, r4
 800f50a:	4630      	mov	r0, r6
 800f50c:	f7fe fda4 	bl	800e058 <ull_repeated_frames>
 800f510:	2500      	movs	r5, #0
 800f512:	f7ff babb 	b.w	800ea8c <dwt_ioctl+0x154>
 800f516:	2500      	movs	r5, #0
 800f518:	9500      	str	r5, [sp, #0]
 800f51a:	23ef      	movs	r3, #239	; 0xef
 800f51c:	462a      	mov	r2, r5
 800f51e:	4992      	ldr	r1, [pc, #584]	; (800f768 <dwt_ioctl+0xe30>)
 800f520:	f7fe fcf4 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f524:	2105      	movs	r1, #5
 800f526:	4630      	mov	r0, r6
 800f528:	f7fd fea4 	bl	800d274 <ull_force_clocks>
 800f52c:	2101      	movs	r1, #1
 800f52e:	4630      	mov	r0, r6
 800f530:	f7fe fa18 	bl	800d964 <ull_disable_rf_tx>
 800f534:	4630      	mov	r0, r6
 800f536:	f7fe fa0b 	bl	800d950 <ull_disable_rftx_blocks>
 800f53a:	f7ff baa7 	b.w	800ea8c <dwt_ioctl+0x154>
 800f53e:	2500      	movs	r5, #0
 800f540:	9500      	str	r5, [sp, #0]
 800f542:	23ef      	movs	r3, #239	; 0xef
 800f544:	462a      	mov	r2, r5
 800f546:	4988      	ldr	r1, [pc, #544]	; (800f768 <dwt_ioctl+0xe30>)
 800f548:	f7fe fce0 	bl	800df0c <dwt_modify8bitoffsetreg>
 800f54c:	f7ff ba9e 	b.w	800ea8c <dwt_ioctl+0x154>
 800f550:	2c00      	cmp	r4, #0
 800f552:	f001 8057 	beq.w	8010604 <dwt_ioctl+0x1ccc>
 800f556:	6821      	ldr	r1, [r4, #0]
 800f558:	f7fe fd7e 	bl	800e058 <ull_repeated_frames>
 800f55c:	2500      	movs	r5, #0
 800f55e:	f7ff ba95 	b.w	800ea8c <dwt_ioctl+0x154>
 800f562:	2200      	movs	r2, #0
 800f564:	4981      	ldr	r1, [pc, #516]	; (800f76c <dwt_ioctl+0xe34>)
 800f566:	f7fd fa29 	bl	800c9bc <dwt_read16bitoffsetreg>
 800f56a:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800f56e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800f572:	bf18      	it	ne
 800f574:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800f578:	b22d      	sxth	r5, r5
 800f57a:	8025      	strh	r5, [r4, #0]
 800f57c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f57e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f582:	1aed      	subs	r5, r5, r3
 800f584:	f7ff ba82 	b.w	800ea8c <dwt_ioctl+0x154>
 800f588:	2c00      	cmp	r4, #0
 800f58a:	f001 806d 	beq.w	8010668 <dwt_ioctl+0x1d30>
 800f58e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f592:	7a23      	ldrb	r3, [r4, #8]
 800f594:	f899 2013 	ldrb.w	r2, [r9, #19]
 800f598:	2aff      	cmp	r2, #255	; 0xff
 800f59a:	f000 813f 	beq.w	800f81c <dwt_ioctl+0xee4>
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d136      	bne.n	800f610 <dwt_ioctl+0xcd8>
 800f5a2:	f8d9 3000 	ldr.w	r3, [r9]
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	230c      	movs	r3, #12
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	4970      	ldr	r1, [pc, #448]	; (800f770 <dwt_ioctl+0xe38>)
 800f5ae:	f7fd fdd3 	bl	800d158 <dwt_writetodevice>
 800f5b2:	f899 300c 	ldrb.w	r3, [r9, #12]
 800f5b6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800f5ba:	18d1      	adds	r1, r2, r3
 800f5bc:	f899 2012 	ldrb.w	r2, [r9, #18]
 800f5c0:	2a00      	cmp	r2, #0
 800f5c2:	d15f      	bne.n	800f684 <dwt_ioctl+0xd4c>
 800f5c4:	f899 0010 	ldrb.w	r0, [r9, #16]
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	bf0b      	itete	eq
 800f5cc:	227f      	moveq	r2, #127	; 0x7f
 800f5ce:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800f5d2:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800f5d6:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800f5da:	f899 0013 	ldrb.w	r0, [r9, #19]
 800f5de:	1a12      	subs	r2, r2, r0
 800f5e0:	3a02      	subs	r2, #2
 800f5e2:	4291      	cmp	r1, r2
 800f5e4:	f200 8120 	bhi.w	800f828 <dwt_ioctl+0xef0>
 800f5e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f5ec:	9200      	str	r2, [sp, #0]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7fd fdb0 	bl	800d158 <dwt_writetodevice>
 800f5f8:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800f5fc:	f899 200c 	ldrb.w	r2, [r9, #12]
 800f600:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f604:	9100      	str	r1, [sp, #0]
 800f606:	4629      	mov	r1, r5
 800f608:	4630      	mov	r0, r6
 800f60a:	f7fd fda5 	bl	800d158 <dwt_writetodevice>
 800f60e:	e04a      	b.n	800f6a6 <dwt_ioctl+0xd6e>
 800f610:	f8d9 3000 	ldr.w	r3, [r9]
 800f614:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800f618:	7a9a      	ldrb	r2, [r3, #10]
 800f61a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800f61e:	7a5a      	ldrb	r2, [r3, #9]
 800f620:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800f624:	7a1a      	ldrb	r2, [r3, #8]
 800f626:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800f62a:	79da      	ldrb	r2, [r3, #7]
 800f62c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800f630:	799a      	ldrb	r2, [r3, #6]
 800f632:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800f636:	795a      	ldrb	r2, [r3, #5]
 800f638:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800f63c:	791a      	ldrb	r2, [r3, #4]
 800f63e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800f642:	78da      	ldrb	r2, [r3, #3]
 800f644:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800f648:	789a      	ldrb	r2, [r3, #2]
 800f64a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800f64e:	785a      	ldrb	r2, [r3, #1]
 800f650:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800f654:	781a      	ldrb	r2, [r3, #0]
 800f656:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800f65a:	2200      	movs	r2, #0
 800f65c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800f660:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800f664:	0a09      	lsrs	r1, r1, #8
 800f666:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800f66a:	7b19      	ldrb	r1, [r3, #12]
 800f66c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800f670:	7adb      	ldrb	r3, [r3, #11]
 800f672:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800f676:	ab0c      	add	r3, sp, #48	; 0x30
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	2310      	movs	r3, #16
 800f67c:	493c      	ldr	r1, [pc, #240]	; (800f770 <dwt_ioctl+0xe38>)
 800f67e:	f7fd fd6b 	bl	800d158 <dwt_writetodevice>
 800f682:	e796      	b.n	800f5b2 <dwt_ioctl+0xc7a>
 800f684:	2a01      	cmp	r2, #1
 800f686:	f040 80cc 	bne.w	800f822 <dwt_ioctl+0xeea>
 800f68a:	f899 3011 	ldrb.w	r3, [r9, #17]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800f694:	bf08      	it	eq
 800f696:	237f      	moveq	r3, #127	; 0x7f
 800f698:	f899 2013 	ldrb.w	r2, [r9, #19]
 800f69c:	1a9b      	subs	r3, r3, r2
 800f69e:	3b02      	subs	r3, #2
 800f6a0:	4299      	cmp	r1, r3
 800f6a2:	f200 80c4 	bhi.w	800f82e <dwt_ioctl+0xef6>
 800f6a6:	f899 2010 	ldrb.w	r2, [r9, #16]
 800f6aa:	1e53      	subs	r3, r2, #1
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d940      	bls.n	800f734 <dwt_ioctl+0xdfc>
 800f6b2:	f899 3011 	ldrb.w	r3, [r9, #17]
 800f6b6:	1e59      	subs	r1, r3, #1
 800f6b8:	b2c9      	uxtb	r1, r1
 800f6ba:	2901      	cmp	r1, #1
 800f6bc:	d964      	bls.n	800f788 <dwt_ioctl+0xe50>
 800f6be:	2b04      	cmp	r3, #4
 800f6c0:	d069      	beq.n	800f796 <dwt_ioctl+0xe5e>
 800f6c2:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	492a      	ldr	r1, [pc, #168]	; (800f774 <dwt_ioctl+0xe3c>)
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f7fd fea2 	bl	800d414 <dwt_write32bitoffsetreg>
 800f6d0:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800f6d4:	4a28      	ldr	r2, [pc, #160]	; (800f778 <dwt_ioctl+0xe40>)
 800f6d6:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800f6da:	f899 300c 	ldrb.w	r3, [r9, #12]
 800f6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	4925      	ldr	r1, [pc, #148]	; (800f77c <dwt_ioctl+0xe44>)
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f7fd fe93 	bl	800d414 <dwt_write32bitoffsetreg>
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	4923      	ldr	r1, [pc, #140]	; (800f780 <dwt_ioctl+0xe48>)
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	f7fd fd3a 	bl	800d16e <dwt_write8bitoffsetreg>
 800f6fa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800f784 <dwt_ioctl+0xe4c>
 800f6fe:	2700      	movs	r7, #0
 800f700:	463a      	mov	r2, r7
 800f702:	4641      	mov	r1, r8
 800f704:	4630      	mov	r0, r6
 800f706:	f7fd f96b 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800f70a:	f010 0f05 	tst.w	r0, #5
 800f70e:	d0f7      	beq.n	800f700 <dwt_ioctl+0xdc8>
 800f710:	4605      	mov	r5, r0
 800f712:	4603      	mov	r3, r0
 800f714:	2200      	movs	r2, #0
 800f716:	491b      	ldr	r1, [pc, #108]	; (800f784 <dwt_ioctl+0xe4c>)
 800f718:	4630      	mov	r0, r6
 800f71a:	f7fd fd28 	bl	800d16e <dwt_write8bitoffsetreg>
 800f71e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800f722:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800f726:	2b01      	cmp	r3, #1
 800f728:	d042      	beq.n	800f7b0 <dwt_ioctl+0xe78>
 800f72a:	b26b      	sxtb	r3, r5
 800f72c:	7023      	strb	r3, [r4, #0]
 800f72e:	2500      	movs	r5, #0
 800f730:	f7ff b9ac 	b.w	800ea8c <dwt_ioctl+0x154>
 800f734:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f736:	7bdb      	ldrb	r3, [r3, #15]
 800f738:	2b03      	cmp	r3, #3
 800f73a:	f001 802e 	beq.w	801079a <dwt_ioctl+0x1e62>
 800f73e:	f899 3011 	ldrb.w	r3, [r9, #17]
 800f742:	1e5a      	subs	r2, r3, #1
 800f744:	b2d2      	uxtb	r2, r2
 800f746:	2a01      	cmp	r2, #1
 800f748:	d92c      	bls.n	800f7a4 <dwt_ioctl+0xe6c>
 800f74a:	2201      	movs	r2, #1
 800f74c:	e7b7      	b.n	800f6be <dwt_ioctl+0xd86>
 800f74e:	bf00      	nop
 800f750:	00070048 	.word	0x00070048
 800f754:	00070034 	.word	0x00070034
 800f758:	00080004 	.word	0x00080004
 800f75c:	3f866666 	.word	0x3f866666
 800f760:	3ecccccd 	.word	0x3ecccccd
 800f764:	437f0000 	.word	0x437f0000
 800f768:	000f0024 	.word	0x000f0024
 800f76c:	00020008 	.word	0x00020008
 800f770:	00010034 	.word	0x00010034
 800f774:	00010044 	.word	0x00010044
 800f778:	0001ff80 	.word	0x0001ff80
 800f77c:	00010048 	.word	0x00010048
 800f780:	0001004c 	.word	0x0001004c
 800f784:	00010050 	.word	0x00010050
 800f788:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f78a:	7bdb      	ldrb	r3, [r3, #15]
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	bf0c      	ite	eq
 800f790:	2302      	moveq	r3, #2
 800f792:	2301      	movne	r3, #1
 800f794:	e795      	b.n	800f6c2 <dwt_ioctl+0xd8a>
 800f796:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800f79a:	2910      	cmp	r1, #16
 800f79c:	d991      	bls.n	800f6c2 <dwt_ioctl+0xd8a>
 800f79e:	f06f 0303 	mvn.w	r3, #3
 800f7a2:	e7c3      	b.n	800f72c <dwt_ioctl+0xdf4>
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	e78b      	b.n	800f6c2 <dwt_ioctl+0xd8a>
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	e788      	b.n	800f6c2 <dwt_ioctl+0xd8a>
 800f7b0:	f899 3012 	ldrb.w	r3, [r9, #18]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d1b8      	bne.n	800f72a <dwt_ioctl+0xdf2>
 800f7b8:	f899 2011 	ldrb.w	r2, [r9, #17]
 800f7bc:	1e53      	subs	r3, r2, #1
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d91b      	bls.n	800f7fc <dwt_ioctl+0xec4>
 800f7c4:	2a03      	cmp	r2, #3
 800f7c6:	bf0c      	ite	eq
 800f7c8:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800f7cc:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800f7d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f7d4:	b112      	cbz	r2, 800f7dc <dwt_ioctl+0xea4>
 800f7d6:	f899 300c 	ldrb.w	r3, [r9, #12]
 800f7da:	b9c3      	cbnz	r3, 800f80e <dwt_ioctl+0xed6>
 800f7dc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f7e0:	2900      	cmp	r1, #0
 800f7e2:	d0a2      	beq.n	800f72a <dwt_ioctl+0xdf2>
 800f7e4:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d09e      	beq.n	800f72a <dwt_ioctl+0xdf2>
 800f7ec:	f899 200c 	ldrb.w	r2, [r9, #12]
 800f7f0:	9100      	str	r1, [sp, #0]
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f7fd f8c1 	bl	800c97c <dwt_readfromdevice>
 800f7fa:	e796      	b.n	800f72a <dwt_ioctl+0xdf2>
 800f7fc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f7fe:	7bdb      	ldrb	r3, [r3, #15]
 800f800:	2b03      	cmp	r3, #3
 800f802:	bf0c      	ite	eq
 800f804:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800f808:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800f80c:	e7e0      	b.n	800f7d0 <dwt_ioctl+0xe98>
 800f80e:	9200      	str	r2, [sp, #0]
 800f810:	2200      	movs	r2, #0
 800f812:	4639      	mov	r1, r7
 800f814:	4630      	mov	r0, r6
 800f816:	f7fd f8b1 	bl	800c97c <dwt_readfromdevice>
 800f81a:	e7df      	b.n	800f7dc <dwt_ioctl+0xea4>
 800f81c:	f06f 0302 	mvn.w	r3, #2
 800f820:	e784      	b.n	800f72c <dwt_ioctl+0xdf4>
 800f822:	f06f 0301 	mvn.w	r3, #1
 800f826:	e781      	b.n	800f72c <dwt_ioctl+0xdf4>
 800f828:	f04f 33ff 	mov.w	r3, #4294967295
 800f82c:	e77e      	b.n	800f72c <dwt_ioctl+0xdf4>
 800f82e:	f04f 33ff 	mov.w	r3, #4294967295
 800f832:	e77b      	b.n	800f72c <dwt_ioctl+0xdf4>
 800f834:	7a23      	ldrb	r3, [r4, #8]
 800f836:	79e1      	ldrb	r1, [r4, #7]
 800f838:	79a2      	ldrb	r2, [r4, #6]
 800f83a:	00d2      	lsls	r2, r2, #3
 800f83c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f840:	4313      	orrs	r3, r2
 800f842:	7962      	ldrb	r2, [r4, #5]
 800f844:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800f848:	7922      	ldrb	r2, [r4, #4]
 800f84a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f84e:	78e2      	ldrb	r2, [r4, #3]
 800f850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f854:	78a2      	ldrb	r2, [r4, #2]
 800f856:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800f85a:	7862      	ldrb	r2, [r4, #1]
 800f85c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f860:	b29b      	uxth	r3, r3
 800f862:	2200      	movs	r2, #0
 800f864:	49cd      	ldr	r1, [pc, #820]	; (800fb9c <dwt_ioctl+0x1264>)
 800f866:	f7fd fcd4 	bl	800d212 <dwt_write16bitoffsetreg>
 800f86a:	2500      	movs	r5, #0
 800f86c:	f7ff b90e 	b.w	800ea8c <dwt_ioctl+0x154>
 800f870:	2c00      	cmp	r4, #0
 800f872:	f000 86fc 	beq.w	801066e <dwt_ioctl+0x1d36>
 800f876:	7863      	ldrb	r3, [r4, #1]
 800f878:	b133      	cbz	r3, 800f888 <dwt_ioctl+0xf50>
 800f87a:	085b      	lsrs	r3, r3, #1
 800f87c:	3b01      	subs	r3, #1
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	7023      	strb	r3, [r4, #0]
 800f882:	2500      	movs	r5, #0
 800f884:	f7ff b902 	b.w	800ea8c <dwt_ioctl+0x154>
 800f888:	2300      	movs	r3, #0
 800f88a:	e7f9      	b.n	800f880 <dwt_ioctl+0xf48>
 800f88c:	2200      	movs	r2, #0
 800f88e:	49c4      	ldr	r1, [pc, #784]	; (800fba0 <dwt_ioctl+0x1268>)
 800f890:	f7fd f87e 	bl	800c990 <dwt_read32bitoffsetreg>
 800f894:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800f898:	8023      	strh	r3, [r4, #0]
 800f89a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800f89e:	8060      	strh	r0, [r4, #2]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	49c0      	ldr	r1, [pc, #768]	; (800fba4 <dwt_ioctl+0x126c>)
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	f7fd f873 	bl	800c990 <dwt_read32bitoffsetreg>
 800f8aa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800f8ae:	80a3      	strh	r3, [r4, #4]
 800f8b0:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800f8b4:	80e0      	strh	r0, [r4, #6]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	49bb      	ldr	r1, [pc, #748]	; (800fba8 <dwt_ioctl+0x1270>)
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f7fd f868 	bl	800c990 <dwt_read32bitoffsetreg>
 800f8c0:	7220      	strb	r0, [r4, #8]
 800f8c2:	0c00      	lsrs	r0, r0, #16
 800f8c4:	7260      	strb	r0, [r4, #9]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	49b8      	ldr	r1, [pc, #736]	; (800fbac <dwt_ioctl+0x1274>)
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7fd f860 	bl	800c990 <dwt_read32bitoffsetreg>
 800f8d0:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800f8d4:	81a3      	strh	r3, [r4, #12]
 800f8d6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800f8da:	8160      	strh	r0, [r4, #10]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	49b4      	ldr	r1, [pc, #720]	; (800fbb0 <dwt_ioctl+0x1278>)
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	f7fd f855 	bl	800c990 <dwt_read32bitoffsetreg>
 800f8e6:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800f8ea:	f8a4 300f 	strh.w	r3, [r4, #15]
 800f8ee:	73a0      	strb	r0, [r4, #14]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	49b0      	ldr	r1, [pc, #704]	; (800fbb4 <dwt_ioctl+0x127c>)
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f7fd f84b 	bl	800c990 <dwt_read32bitoffsetreg>
 800f8fa:	7460      	strb	r0, [r4, #17]
 800f8fc:	0c00      	lsrs	r0, r0, #16
 800f8fe:	74a0      	strb	r0, [r4, #18]
 800f900:	2200      	movs	r2, #0
 800f902:	49ad      	ldr	r1, [pc, #692]	; (800fbb8 <dwt_ioctl+0x1280>)
 800f904:	4630      	mov	r0, r6
 800f906:	f7fd f843 	bl	800c990 <dwt_read32bitoffsetreg>
 800f90a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800f90e:	f8a4 0013 	strh.w	r0, [r4, #19]
 800f912:	2500      	movs	r5, #0
 800f914:	7565      	strb	r5, [r4, #21]
 800f916:	75a5      	strb	r5, [r4, #22]
 800f918:	462a      	mov	r2, r5
 800f91a:	49a8      	ldr	r1, [pc, #672]	; (800fbbc <dwt_ioctl+0x1284>)
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7fd f85f 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800f922:	75e0      	strb	r0, [r4, #23]
 800f924:	f7ff b8b2 	b.w	800ea8c <dwt_ioctl+0x154>
 800f928:	4611      	mov	r1, r2
 800f92a:	f7fd fc5f 	bl	800d1ec <ull_configeventcounters>
 800f92e:	2500      	movs	r5, #0
 800f930:	f7ff b8ac 	b.w	800ea8c <dwt_ioctl+0x154>
 800f934:	2c00      	cmp	r4, #0
 800f936:	f000 869d 	beq.w	8010674 <dwt_ioctl+0x1d3c>
 800f93a:	8823      	ldrh	r3, [r4, #0]
 800f93c:	2200      	movs	r2, #0
 800f93e:	49a0      	ldr	r1, [pc, #640]	; (800fbc0 <dwt_ioctl+0x1288>)
 800f940:	f7fd fc67 	bl	800d212 <dwt_write16bitoffsetreg>
 800f944:	2500      	movs	r5, #0
 800f946:	f7ff b8a1 	b.w	800ea8c <dwt_ioctl+0x154>
 800f94a:	2c00      	cmp	r4, #0
 800f94c:	f000 8695 	beq.w	801067a <dwt_ioctl+0x1d42>
 800f950:	6825      	ldr	r5, [r4, #0]
 800f952:	b935      	cbnz	r5, 800f962 <dwt_ioctl+0x102a>
 800f954:	2300      	movs	r3, #0
 800f956:	461a      	mov	r2, r3
 800f958:	499a      	ldr	r1, [pc, #616]	; (800fbc4 <dwt_ioctl+0x128c>)
 800f95a:	f7fd fc5a 	bl	800d212 <dwt_write16bitoffsetreg>
 800f95e:	f7ff b895 	b.w	800ea8c <dwt_ioctl+0x154>
 800f962:	7962      	ldrb	r2, [r4, #5]
 800f964:	7923      	ldrb	r3, [r4, #4]
 800f966:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f96a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f96e:	2200      	movs	r2, #0
 800f970:	4994      	ldr	r1, [pc, #592]	; (800fbc4 <dwt_ioctl+0x128c>)
 800f972:	f7fd fc4e 	bl	800d212 <dwt_write16bitoffsetreg>
 800f976:	2500      	movs	r5, #0
 800f978:	f7ff b888 	b.w	800ea8c <dwt_ioctl+0x154>
 800f97c:	2c00      	cmp	r4, #0
 800f97e:	f000 867f 	beq.w	8010680 <dwt_ioctl+0x1d48>
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	b94b      	cbnz	r3, 800f99a <dwt_ioctl+0x1062>
 800f986:	2500      	movs	r5, #0
 800f988:	9500      	str	r5, [sp, #0]
 800f98a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800f98e:	462a      	mov	r2, r5
 800f990:	2110      	movs	r1, #16
 800f992:	f7fe fc6d 	bl	800e270 <dwt_modify16bitoffsetreg>
 800f996:	f7ff b879 	b.w	800ea8c <dwt_ioctl+0x154>
 800f99a:	2200      	movs	r2, #0
 800f99c:	2134      	movs	r1, #52	; 0x34
 800f99e:	f7fd fd39 	bl	800d414 <dwt_write32bitoffsetreg>
 800f9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	2110      	movs	r1, #16
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f7fe fc5d 	bl	800e270 <dwt_modify16bitoffsetreg>
 800f9b6:	2500      	movs	r5, #0
 800f9b8:	f7ff b868 	b.w	800ea8c <dwt_ioctl+0x154>
 800f9bc:	2c00      	cmp	r4, #0
 800f9be:	f000 8662 	beq.w	8010686 <dwt_ioctl+0x1d4e>
 800f9c2:	8861      	ldrh	r1, [r4, #2]
 800f9c4:	f7fd fca2 	bl	800d30c <ull_aon_read>
 800f9c8:	7020      	strb	r0, [r4, #0]
 800f9ca:	2500      	movs	r5, #0
 800f9cc:	f7ff b85e 	b.w	800ea8c <dwt_ioctl+0x154>
 800f9d0:	2c00      	cmp	r4, #0
 800f9d2:	f000 865b 	beq.w	801068c <dwt_ioctl+0x1d54>
 800f9d6:	78a2      	ldrb	r2, [r4, #2]
 800f9d8:	8821      	ldrh	r1, [r4, #0]
 800f9da:	f7fd fcb7 	bl	800d34c <ull_aon_write>
 800f9de:	2500      	movs	r5, #0
 800f9e0:	f7ff b854 	b.w	800ea8c <dwt_ioctl+0x154>
 800f9e4:	4b78      	ldr	r3, [pc, #480]	; (800fbc8 <dwt_ioctl+0x1290>)
 800f9e6:	4a79      	ldr	r2, [pc, #484]	; (800fbcc <dwt_ioctl+0x1294>)
 800f9e8:	2d01      	cmp	r5, #1
 800f9ea:	bf18      	it	ne
 800f9ec:	4613      	movne	r3, r2
 800f9ee:	2d01      	cmp	r5, #1
 800f9f0:	4977      	ldr	r1, [pc, #476]	; (800fbd0 <dwt_ioctl+0x1298>)
 800f9f2:	bf18      	it	ne
 800f9f4:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800f9f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f9fa:	7bd2      	ldrb	r2, [r2, #15]
 800f9fc:	2a01      	cmp	r2, #1
 800f9fe:	d012      	beq.n	800fa26 <dwt_ioctl+0x10ee>
 800fa00:	2a03      	cmp	r2, #3
 800fa02:	d117      	bne.n	800fa34 <dwt_ioctl+0x10fc>
 800fa04:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800fa08:	3a01      	subs	r2, #1
 800fa0a:	441a      	add	r2, r3
 800fa0c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fa10:	f7fc ffd4 	bl	800c9bc <dwt_read16bitoffsetreg>
 800fa14:	09c0      	lsrs	r0, r0, #7
 800fa16:	8020      	strh	r0, [r4, #0]
 800fa18:	8825      	ldrh	r5, [r4, #0]
 800fa1a:	3500      	adds	r5, #0
 800fa1c:	bf18      	it	ne
 800fa1e:	2501      	movne	r5, #1
 800fa20:	426d      	negs	r5, r5
 800fa22:	f7ff b833 	b.w	800ea8c <dwt_ioctl+0x154>
 800fa26:	2202      	movs	r2, #2
 800fa28:	4619      	mov	r1, r3
 800fa2a:	f7fc ffc7 	bl	800c9bc <dwt_read16bitoffsetreg>
 800fa2e:	09c0      	lsrs	r0, r0, #7
 800fa30:	8020      	strh	r0, [r4, #0]
 800fa32:	e7f1      	b.n	800fa18 <dwt_ioctl+0x10e0>
 800fa34:	2202      	movs	r2, #2
 800fa36:	f7fc ffc1 	bl	800c9bc <dwt_read16bitoffsetreg>
 800fa3a:	09c0      	lsrs	r0, r0, #7
 800fa3c:	8020      	strh	r0, [r4, #0]
 800fa3e:	e7eb      	b.n	800fa18 <dwt_ioctl+0x10e0>
 800fa40:	2c00      	cmp	r4, #0
 800fa42:	f000 8626 	beq.w	8010692 <dwt_ioctl+0x1d5a>
 800fa46:	7821      	ldrb	r1, [r4, #0]
 800fa48:	f7fe fc48 	bl	800e2dc <ull_setleds>
 800fa4c:	2500      	movs	r5, #0
 800fa4e:	f7ff b81d 	b.w	800ea8c <dwt_ioctl+0x154>
 800fa52:	4611      	mov	r1, r2
 800fa54:	f7fe fb18 	bl	800e088 <ull_setdwstate>
 800fa58:	2500      	movs	r5, #0
 800fa5a:	f7ff b817 	b.w	800ea8c <dwt_ioctl+0x154>
 800fa5e:	9400      	str	r4, [sp, #0]
 800fa60:	2304      	movs	r3, #4
 800fa62:	2200      	movs	r2, #0
 800fa64:	211c      	movs	r1, #28
 800fa66:	f7fc ff89 	bl	800c97c <dwt_readfromdevice>
 800fa6a:	2500      	movs	r5, #0
 800fa6c:	f7ff b80e 	b.w	800ea8c <dwt_ioctl+0x154>
 800fa70:	2c00      	cmp	r4, #0
 800fa72:	f000 8611 	beq.w	8010698 <dwt_ioctl+0x1d60>
 800fa76:	2202      	movs	r2, #2
 800fa78:	2144      	movs	r1, #68	; 0x44
 800fa7a:	f7fc ff9f 	bl	800c9bc <dwt_read16bitoffsetreg>
 800fa7e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800fa82:	7020      	strb	r0, [r4, #0]
 800fa84:	2500      	movs	r5, #0
 800fa86:	f7ff b801 	b.w	800ea8c <dwt_ioctl+0x154>
 800fa8a:	2c00      	cmp	r4, #0
 800fa8c:	f000 8607 	beq.w	801069e <dwt_ioctl+0x1d66>
 800fa90:	2200      	movs	r2, #0
 800fa92:	2144      	movs	r1, #68	; 0x44
 800fa94:	f7fc ffa4 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800fa98:	f000 0001 	and.w	r0, r0, #1
 800fa9c:	7020      	strb	r0, [r4, #0]
 800fa9e:	2500      	movs	r5, #0
 800faa0:	f7fe bff4 	b.w	800ea8c <dwt_ioctl+0x154>
 800faa4:	2c00      	cmp	r4, #0
 800faa6:	f000 85fd 	beq.w	80106a4 <dwt_ioctl+0x1d6c>
 800faaa:	8862      	ldrh	r2, [r4, #2]
 800faac:	8821      	ldrh	r1, [r4, #0]
 800faae:	f7fe fb49 	bl	800e144 <ull_configureframefilter>
 800fab2:	2500      	movs	r5, #0
 800fab4:	f7fe bfea 	b.w	800ea8c <dwt_ioctl+0x154>
 800fab8:	9400      	str	r4, [sp, #0]
 800faba:	2308      	movs	r3, #8
 800fabc:	2200      	movs	r2, #0
 800fabe:	2104      	movs	r1, #4
 800fac0:	f7fd fb4a 	bl	800d158 <dwt_writetodevice>
 800fac4:	2500      	movs	r5, #0
 800fac6:	f7fe bfe1 	b.w	800ea8c <dwt_ioctl+0x154>
 800faca:	9400      	str	r4, [sp, #0]
 800facc:	2308      	movs	r3, #8
 800face:	2200      	movs	r2, #0
 800fad0:	2104      	movs	r1, #4
 800fad2:	f7fc ff53 	bl	800c97c <dwt_readfromdevice>
 800fad6:	2500      	movs	r5, #0
 800fad8:	f7fe bfd8 	b.w	800ea8c <dwt_ioctl+0x154>
 800fadc:	2c00      	cmp	r4, #0
 800fade:	f000 85e4 	beq.w	80106aa <dwt_ioctl+0x1d72>
 800fae2:	8823      	ldrh	r3, [r4, #0]
 800fae4:	2202      	movs	r2, #2
 800fae6:	210c      	movs	r1, #12
 800fae8:	f7fd fb93 	bl	800d212 <dwt_write16bitoffsetreg>
 800faec:	2500      	movs	r5, #0
 800faee:	f7fe bfcd 	b.w	800ea8c <dwt_ioctl+0x154>
 800faf2:	2c00      	cmp	r4, #0
 800faf4:	f000 85dc 	beq.w	80106b0 <dwt_ioctl+0x1d78>
 800faf8:	8823      	ldrh	r3, [r4, #0]
 800fafa:	2200      	movs	r2, #0
 800fafc:	210c      	movs	r1, #12
 800fafe:	f7fd fb88 	bl	800d212 <dwt_write16bitoffsetreg>
 800fb02:	2500      	movs	r5, #0
 800fb04:	f7fe bfc2 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb08:	4621      	mov	r1, r4
 800fb0a:	f7fd fb03 	bl	800d114 <ull_readrxtimestamp>
 800fb0e:	2500      	movs	r5, #0
 800fb10:	f7fe bfbc 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fb16:	7bdb      	ldrb	r3, [r3, #15]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d00b      	beq.n	800fb34 <dwt_ioctl+0x11fc>
 800fb1c:	2b03      	cmp	r3, #3
 800fb1e:	d112      	bne.n	800fb46 <dwt_ioctl+0x120e>
 800fb20:	9400      	str	r4, [sp, #0]
 800fb22:	2305      	movs	r3, #5
 800fb24:	2220      	movs	r2, #32
 800fb26:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fb2a:	f7fc ff27 	bl	800c97c <dwt_readfromdevice>
 800fb2e:	2500      	movs	r5, #0
 800fb30:	f7fe bfac 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb34:	9400      	str	r4, [sp, #0]
 800fb36:	2305      	movs	r3, #5
 800fb38:	2200      	movs	r2, #0
 800fb3a:	4926      	ldr	r1, [pc, #152]	; (800fbd4 <dwt_ioctl+0x129c>)
 800fb3c:	f7fc ff1e 	bl	800c97c <dwt_readfromdevice>
 800fb40:	2500      	movs	r5, #0
 800fb42:	f7fe bfa3 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb46:	9400      	str	r4, [sp, #0]
 800fb48:	2305      	movs	r3, #5
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800fb50:	f7fc ff14 	bl	800c97c <dwt_readfromdevice>
 800fb54:	2500      	movs	r5, #0
 800fb56:	f7fe bf99 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb5a:	2500      	movs	r5, #0
 800fb5c:	f804 5b01 	strb.w	r5, [r4], #1
 800fb60:	9400      	str	r4, [sp, #0]
 800fb62:	2304      	movs	r3, #4
 800fb64:	462a      	mov	r2, r5
 800fb66:	2170      	movs	r1, #112	; 0x70
 800fb68:	f7fc ff08 	bl	800c97c <dwt_readfromdevice>
 800fb6c:	f7fe bf8e 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb70:	2c00      	cmp	r4, #0
 800fb72:	f000 85a0 	beq.w	80106b6 <dwt_ioctl+0x1d7e>
 800fb76:	2201      	movs	r2, #1
 800fb78:	2164      	movs	r1, #100	; 0x64
 800fb7a:	f7fc ff09 	bl	800c990 <dwt_read32bitoffsetreg>
 800fb7e:	6020      	str	r0, [r4, #0]
 800fb80:	2500      	movs	r5, #0
 800fb82:	f7fe bf83 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	f000 8598 	beq.w	80106bc <dwt_ioctl+0x1d84>
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	2164      	movs	r1, #100	; 0x64
 800fb90:	f7fc fefe 	bl	800c990 <dwt_read32bitoffsetreg>
 800fb94:	6020      	str	r0, [r4, #0]
 800fb96:	2500      	movs	r5, #0
 800fb98:	f7fe bf78 	b.w	800ea8c <dwt_ioctl+0x154>
 800fb9c:	00010030 	.word	0x00010030
 800fba0:	000f0004 	.word	0x000f0004
 800fba4:	000f0008 	.word	0x000f0008
 800fba8:	000f000c 	.word	0x000f000c
 800fbac:	000f0010 	.word	0x000f0010
 800fbb0:	000f0014 	.word	0x000f0014
 800fbb4:	000f0018 	.word	0x000f0018
 800fbb8:	000f001c 	.word	0x000f001c
 800fbbc:	000f0028 	.word	0x000f0028
 800fbc0:	00060004 	.word	0x00060004
 800fbc4:	0011001a 	.word	0x0011001a
 800fbc8:	00180034 	.word	0x00180034
 800fbcc:	0018002c 	.word	0x0018002c
 800fbd0:	000c0014 	.word	0x000c0014
 800fbd4:	00180020 	.word	0x00180020
 800fbd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbda:	7bdb      	ldrb	r3, [r3, #15]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d00b      	beq.n	800fbf8 <dwt_ioctl+0x12c0>
 800fbe0:	2b03      	cmp	r3, #3
 800fbe2:	d112      	bne.n	800fc0a <dwt_ioctl+0x12d2>
 800fbe4:	9400      	str	r4, [sp, #0]
 800fbe6:	2305      	movs	r3, #5
 800fbe8:	2228      	movs	r2, #40	; 0x28
 800fbea:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fbee:	f7fc fec5 	bl	800c97c <dwt_readfromdevice>
 800fbf2:	2500      	movs	r5, #0
 800fbf4:	f7fe bf4a 	b.w	800ea8c <dwt_ioctl+0x154>
 800fbf8:	9400      	str	r4, [sp, #0]
 800fbfa:	2305      	movs	r3, #5
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	49d3      	ldr	r1, [pc, #844]	; (800ff4c <dwt_ioctl+0x1614>)
 800fc00:	f7fc febc 	bl	800c97c <dwt_readfromdevice>
 800fc04:	2500      	movs	r5, #0
 800fc06:	f7fe bf41 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc0a:	9400      	str	r4, [sp, #0]
 800fc0c:	2305      	movs	r3, #5
 800fc0e:	2200      	movs	r2, #0
 800fc10:	49cf      	ldr	r1, [pc, #828]	; (800ff50 <dwt_ioctl+0x1618>)
 800fc12:	f7fc feb3 	bl	800c97c <dwt_readfromdevice>
 800fc16:	2500      	movs	r5, #0
 800fc18:	f7fe bf38 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc1c:	2c00      	cmp	r4, #0
 800fc1e:	f000 8550 	beq.w	80106c2 <dwt_ioctl+0x1d8a>
 800fc22:	2200      	movs	r2, #0
 800fc24:	211c      	movs	r1, #28
 800fc26:	f7fc feb3 	bl	800c990 <dwt_read32bitoffsetreg>
 800fc2a:	6020      	str	r0, [r4, #0]
 800fc2c:	2500      	movs	r5, #0
 800fc2e:	f7fe bf2d 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc32:	2c00      	cmp	r4, #0
 800fc34:	f000 8548 	beq.w	80106c8 <dwt_ioctl+0x1d90>
 800fc38:	8825      	ldrh	r5, [r4, #0]
 800fc3a:	6867      	ldr	r7, [r4, #4]
 800fc3c:	7a23      	ldrb	r3, [r4, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 8545 	beq.w	80106ce <dwt_ioctl+0x1d96>
 800fc44:	463c      	mov	r4, r7
 800fc46:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f7fd fb3b 	bl	800d2c8 <_dwt_otpread>
 800fc52:	f844 0b04 	str.w	r0, [r4], #4
 800fc56:	3501      	adds	r5, #1
 800fc58:	b2ad      	uxth	r5, r5
 800fc5a:	42bc      	cmp	r4, r7
 800fc5c:	d1f5      	bne.n	800fc4a <dwt_ioctl+0x1312>
 800fc5e:	2500      	movs	r5, #0
 800fc60:	f7fe bf14 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc64:	2c00      	cmp	r4, #0
 800fc66:	f000 8535 	beq.w	80106d4 <dwt_ioctl+0x1d9c>
 800fc6a:	7823      	ldrb	r3, [r4, #0]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	2128      	movs	r1, #40	; 0x28
 800fc70:	f7fd fa7d 	bl	800d16e <dwt_write8bitoffsetreg>
 800fc74:	2500      	movs	r5, #0
 800fc76:	f7fe bf09 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc7a:	f7fe fa87 	bl	800e18c <ull_run_pgfcal>
 800fc7e:	4605      	mov	r5, r0
 800fc80:	f7fe bf04 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc84:	4611      	mov	r1, r2
 800fc86:	f7fe fb77 	bl	800e378 <ull_pgf_cal>
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	f7fe befe 	b.w	800ea8c <dwt_ioctl+0x154>
 800fc90:	2c00      	cmp	r4, #0
 800fc92:	f000 8522 	beq.w	80106da <dwt_ioctl+0x1da2>
 800fc96:	78a5      	ldrb	r5, [r4, #2]
 800fc98:	2101      	movs	r1, #1
 800fc9a:	f7fd faeb 	bl	800d274 <ull_force_clocks>
 800fc9e:	2100      	movs	r1, #0
 800fca0:	4630      	mov	r0, r6
 800fca2:	f7fd ff8b 	bl	800dbbc <ull_enable_rf_tx>
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7fd ffbc 	bl	800dc24 <ull_enable_rftx_blocks>
 800fcac:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	49a8      	ldr	r1, [pc, #672]	; (800ff54 <dwt_ioctl+0x161c>)
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	f7fd fa5a 	bl	800d16e <dwt_write8bitoffsetreg>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	9300      	str	r3, [sp, #0]
 800fcbe:	23ff      	movs	r3, #255	; 0xff
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	49a5      	ldr	r1, [pc, #660]	; (800ff58 <dwt_ioctl+0x1620>)
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	f7fe f921 	bl	800df0c <dwt_modify8bitoffsetreg>
 800fcca:	4fa3      	ldr	r7, [pc, #652]	; (800ff58 <dwt_ioctl+0x1620>)
 800fccc:	2500      	movs	r5, #0
 800fcce:	462a      	mov	r2, r5
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f7fc fe84 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800fcd8:	f010 0f01 	tst.w	r0, #1
 800fcdc:	d1f7      	bne.n	800fcce <dwt_ioctl+0x1396>
 800fcde:	2200      	movs	r2, #0
 800fce0:	499e      	ldr	r1, [pc, #632]	; (800ff5c <dwt_ioctl+0x1624>)
 800fce2:	4630      	mov	r0, r6
 800fce4:	f7fc fe6a 	bl	800c9bc <dwt_read16bitoffsetreg>
 800fce8:	4605      	mov	r5, r0
 800fcea:	4630      	mov	r0, r6
 800fcec:	f7fd fe30 	bl	800d950 <ull_disable_rftx_blocks>
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	f7fd fe36 	bl	800d964 <ull_disable_rf_tx>
 800fcf8:	2105      	movs	r1, #5
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f7fd faba 	bl	800d274 <ull_force_clocks>
 800fd00:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800fd04:	8025      	strh	r5, [r4, #0]
 800fd06:	2500      	movs	r5, #0
 800fd08:	f7fe bec0 	b.w	800ea8c <dwt_ioctl+0x154>
 800fd0c:	2102      	movs	r1, #2
 800fd0e:	f7fe f9bb 	bl	800e088 <ull_setdwstate>
 800fd12:	2101      	movs	r1, #1
 800fd14:	4630      	mov	r0, r6
 800fd16:	f7fe f9b7 	bl	800e088 <ull_setdwstate>
 800fd1a:	2432      	movs	r4, #50	; 0x32
 800fd1c:	f04f 0814 	mov.w	r8, #20
 800fd20:	2700      	movs	r7, #0
 800fd22:	2544      	movs	r5, #68	; 0x44
 800fd24:	4640      	mov	r0, r8
 800fd26:	f7fb ff6a 	bl	800bbfe <deca_usleep>
 800fd2a:	463a      	mov	r2, r7
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f7fc fe56 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800fd34:	f010 0f02 	tst.w	r0, #2
 800fd38:	d105      	bne.n	800fd46 <dwt_ioctl+0x140e>
 800fd3a:	1e63      	subs	r3, r4, #1
 800fd3c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800fd40:	d1f0      	bne.n	800fd24 <dwt_ioctl+0x13ec>
 800fd42:	2501      	movs	r5, #1
 800fd44:	e000      	b.n	800fd48 <dwt_ioctl+0x1410>
 800fd46:	2500      	movs	r5, #0
 800fd48:	426d      	negs	r5, r5
 800fd4a:	f7fe be9f 	b.w	800ea8c <dwt_ioctl+0x154>
 800fd4e:	2c00      	cmp	r4, #0
 800fd50:	f000 84c6 	beq.w	80106e0 <dwt_ioctl+0x1da8>
 800fd54:	7823      	ldrb	r3, [r4, #0]
 800fd56:	031b      	lsls	r3, r3, #12
 800fd58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800fd5c:	7862      	ldrb	r2, [r4, #1]
 800fd5e:	2a01      	cmp	r2, #1
 800fd60:	bf08      	it	eq
 800fd62:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	497c      	ldr	r1, [pc, #496]	; (800ff60 <dwt_ioctl+0x1628>)
 800fd70:	f7fd fee2 	bl	800db38 <dwt_modify32bitoffsetreg>
 800fd74:	2500      	movs	r5, #0
 800fd76:	f7fe be89 	b.w	800ea8c <dwt_ioctl+0x154>
 800fd7a:	2c00      	cmp	r4, #0
 800fd7c:	f000 84b3 	beq.w	80106e6 <dwt_ioctl+0x1dae>
 800fd80:	6862      	ldr	r2, [r4, #4]
 800fd82:	6821      	ldr	r1, [r4, #0]
 800fd84:	f7fe f818 	bl	800ddb8 <ull_setgpiomode>
 800fd88:	2500      	movs	r5, #0
 800fd8a:	f7fe be7f 	b.w	800ea8c <dwt_ioctl+0x154>
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	f000 84ac 	beq.w	80106ec <dwt_ioctl+0x1db4>
 800fd94:	8823      	ldrh	r3, [r4, #0]
 800fd96:	2200      	movs	r2, #0
 800fd98:	4972      	ldr	r1, [pc, #456]	; (800ff64 <dwt_ioctl+0x162c>)
 800fd9a:	f7fd fa3a 	bl	800d212 <dwt_write16bitoffsetreg>
 800fd9e:	2500      	movs	r5, #0
 800fda0:	f7fe be74 	b.w	800ea8c <dwt_ioctl+0x154>
 800fda4:	2c00      	cmp	r4, #0
 800fda6:	f000 84a4 	beq.w	80106f2 <dwt_ioctl+0x1dba>
 800fdaa:	6862      	ldr	r2, [r4, #4]
 800fdac:	8821      	ldrh	r1, [r4, #0]
 800fdae:	f7fe fb13 	bl	800e3d8 <ull_setgpiovalue>
 800fdb2:	2500      	movs	r5, #0
 800fdb4:	f7fe be6a 	b.w	800ea8c <dwt_ioctl+0x154>
 800fdb8:	2c00      	cmp	r4, #0
 800fdba:	f000 849d 	beq.w	80106f8 <dwt_ioctl+0x1dc0>
 800fdbe:	7865      	ldrb	r5, [r4, #1]
 800fdc0:	7823      	ldrb	r3, [r4, #0]
 800fdc2:	b18b      	cbz	r3, 800fde8 <dwt_ioctl+0x14b0>
 800fdc4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	73da      	strb	r2, [r3, #15]
 800fdca:	f04f 33ff 	mov.w	r3, #4294967295
 800fdce:	2208      	movs	r2, #8
 800fdd0:	b1e5      	cbz	r5, 800fe0c <dwt_ioctl+0x14d4>
 800fdd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fdd6:	9200      	str	r2, [sp, #0]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	2110      	movs	r1, #16
 800fddc:	4630      	mov	r0, r6
 800fdde:	f7fd feab 	bl	800db38 <dwt_modify32bitoffsetreg>
 800fde2:	2500      	movs	r5, #0
 800fde4:	f7fe be52 	b.w	800ea8c <dwt_ioctl+0x154>
 800fde8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fdea:	2201      	movs	r2, #1
 800fdec:	73da      	strb	r2, [r3, #15]
 800fdee:	2318      	movs	r3, #24
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	495d      	ldr	r1, [pc, #372]	; (800ff68 <dwt_ioctl+0x1630>)
 800fdf4:	f7fd fb0e 	bl	800d414 <dwt_write32bitoffsetreg>
 800fdf8:	23e8      	movs	r3, #232	; 0xe8
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	495b      	ldr	r1, [pc, #364]	; (800ff6c <dwt_ioctl+0x1634>)
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f7fd fb08 	bl	800d414 <dwt_write32bitoffsetreg>
 800fe04:	f06f 0308 	mvn.w	r3, #8
 800fe08:	2200      	movs	r2, #0
 800fe0a:	e7e1      	b.n	800fdd0 <dwt_ioctl+0x1498>
 800fe0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe10:	e7e1      	b.n	800fdd6 <dwt_ioctl+0x149e>
 800fe12:	2c00      	cmp	r4, #0
 800fe14:	f000 8473 	beq.w	80106fe <dwt_ioctl+0x1dc6>
 800fe18:	6823      	ldr	r3, [r4, #0]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	2130      	movs	r1, #48	; 0x30
 800fe1e:	f7fd faf9 	bl	800d414 <dwt_write32bitoffsetreg>
 800fe22:	2500      	movs	r5, #0
 800fe24:	f7fe be32 	b.w	800ea8c <dwt_ioctl+0x154>
 800fe28:	2c00      	cmp	r4, #0
 800fe2a:	f000 846b 	beq.w	8010704 <dwt_ioctl+0x1dcc>
 800fe2e:	2200      	movs	r2, #0
 800fe30:	4629      	mov	r1, r5
 800fe32:	f7fc fdad 	bl	800c990 <dwt_read32bitoffsetreg>
 800fe36:	6020      	str	r0, [r4, #0]
 800fe38:	2500      	movs	r5, #0
 800fe3a:	f7fe be27 	b.w	800ea8c <dwt_ioctl+0x154>
 800fe3e:	4623      	mov	r3, r4
 800fe40:	2200      	movs	r2, #0
 800fe42:	4629      	mov	r1, r5
 800fe44:	f7fd fae6 	bl	800d414 <dwt_write32bitoffsetreg>
 800fe48:	2500      	movs	r5, #0
 800fe4a:	f7fe be1f 	b.w	800ea8c <dwt_ioctl+0x154>
 800fe4e:	2c00      	cmp	r4, #0
 800fe50:	f000 845b 	beq.w	801070a <dwt_ioctl+0x1dd2>
 800fe54:	2203      	movs	r2, #3
 800fe56:	4946      	ldr	r1, [pc, #280]	; (800ff70 <dwt_ioctl+0x1638>)
 800fe58:	f7fc fdc2 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800fe5c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800fe60:	7020      	strb	r0, [r4, #0]
 800fe62:	2500      	movs	r5, #0
 800fe64:	f7fe be12 	b.w	800ea8c <dwt_ioctl+0x154>
 800fe68:	2c00      	cmp	r4, #0
 800fe6a:	f000 8451 	beq.w	8010710 <dwt_ioctl+0x1dd8>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	2200      	movs	r2, #0
 800fe72:	2144      	movs	r1, #68	; 0x44
 800fe74:	f7fd face 	bl	800d414 <dwt_write32bitoffsetreg>
 800fe78:	2500      	movs	r5, #0
 800fe7a:	f7fe be07 	b.w	800ea8c <dwt_ioctl+0x154>
 800fe7e:	2c00      	cmp	r4, #0
 800fe80:	f000 8449 	beq.w	8010716 <dwt_ioctl+0x1dde>
 800fe84:	8823      	ldrh	r3, [r4, #0]
 800fe86:	2200      	movs	r2, #0
 800fe88:	2148      	movs	r1, #72	; 0x48
 800fe8a:	f7fd f9c2 	bl	800d212 <dwt_write16bitoffsetreg>
 800fe8e:	2500      	movs	r5, #0
 800fe90:	f7fe bdfc 	b.w	800ea8c <dwt_ioctl+0x154>
 800fe94:	2c00      	cmp	r4, #0
 800fe96:	f000 8441 	beq.w	801071c <dwt_ioctl+0x1de4>
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	2144      	movs	r1, #68	; 0x44
 800fe9e:	f7fc fd77 	bl	800c990 <dwt_read32bitoffsetreg>
 800fea2:	6020      	str	r0, [r4, #0]
 800fea4:	2500      	movs	r5, #0
 800fea6:	f7fe bdf1 	b.w	800ea8c <dwt_ioctl+0x154>
 800feaa:	2c00      	cmp	r4, #0
 800feac:	f000 8439 	beq.w	8010722 <dwt_ioctl+0x1dea>
 800feb0:	2200      	movs	r2, #0
 800feb2:	2148      	movs	r1, #72	; 0x48
 800feb4:	f7fc fd82 	bl	800c9bc <dwt_read16bitoffsetreg>
 800feb8:	6020      	str	r0, [r4, #0]
 800feba:	2500      	movs	r5, #0
 800febc:	f7fe bde6 	b.w	800ea8c <dwt_ioctl+0x154>
 800fec0:	2c00      	cmp	r4, #0
 800fec2:	f000 8431 	beq.w	8010728 <dwt_ioctl+0x1df0>
 800fec6:	7823      	ldrb	r3, [r4, #0]
 800fec8:	2200      	movs	r2, #0
 800feca:	492a      	ldr	r1, [pc, #168]	; (800ff74 <dwt_ioctl+0x163c>)
 800fecc:	f7fd f94f 	bl	800d16e <dwt_write8bitoffsetreg>
 800fed0:	2500      	movs	r5, #0
 800fed2:	f7fe bddb 	b.w	800ea8c <dwt_ioctl+0x154>
 800fed6:	2c00      	cmp	r4, #0
 800fed8:	f000 8429 	beq.w	801072e <dwt_ioctl+0x1df6>
 800fedc:	2200      	movs	r2, #0
 800fede:	2144      	movs	r1, #68	; 0x44
 800fee0:	f7fc fd7e 	bl	800c9e0 <dwt_read8bitoffsetreg>
 800fee4:	7020      	strb	r0, [r4, #0]
 800fee6:	2500      	movs	r5, #0
 800fee8:	f7fe bdd0 	b.w	800ea8c <dwt_ioctl+0x154>
 800feec:	2c00      	cmp	r4, #0
 800feee:	f000 8421 	beq.w	8010734 <dwt_ioctl+0x1dfc>
 800fef2:	f7fd f949 	bl	800d188 <ull_getframelength>
 800fef6:	6020      	str	r0, [r4, #0]
 800fef8:	2500      	movs	r5, #0
 800fefa:	f7fe bdc7 	b.w	800ea8c <dwt_ioctl+0x154>
 800fefe:	2c00      	cmp	r4, #0
 800ff00:	f000 841b 	beq.w	801073a <dwt_ioctl+0x1e02>
 800ff04:	2200      	movs	r2, #0
 800ff06:	491c      	ldr	r1, [pc, #112]	; (800ff78 <dwt_ioctl+0x1640>)
 800ff08:	f7fc fd58 	bl	800c9bc <dwt_read16bitoffsetreg>
 800ff0c:	8020      	strh	r0, [r4, #0]
 800ff0e:	2500      	movs	r5, #0
 800ff10:	f7fe bdbc 	b.w	800ea8c <dwt_ioctl+0x154>
 800ff14:	2c00      	cmp	r4, #0
 800ff16:	f000 8413 	beq.w	8010740 <dwt_ioctl+0x1e08>
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	4917      	ldr	r1, [pc, #92]	; (800ff7c <dwt_ioctl+0x1644>)
 800ff1e:	f7fc fd37 	bl	800c990 <dwt_read32bitoffsetreg>
 800ff22:	6020      	str	r0, [r4, #0]
 800ff24:	2500      	movs	r5, #0
 800ff26:	f7fe bdb1 	b.w	800ea8c <dwt_ioctl+0x154>
 800ff2a:	2c00      	cmp	r4, #0
 800ff2c:	f000 840b 	beq.w	8010746 <dwt_ioctl+0x1e0e>
 800ff30:	8823      	ldrh	r3, [r4, #0]
 800ff32:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	490f      	ldr	r1, [pc, #60]	; (800ff7c <dwt_ioctl+0x1644>)
 800ff40:	f7fe f996 	bl	800e270 <dwt_modify16bitoffsetreg>
 800ff44:	2500      	movs	r5, #0
 800ff46:	f7fe bda1 	b.w	800ea8c <dwt_ioctl+0x154>
 800ff4a:	bf00      	nop
 800ff4c:	00180028 	.word	0x00180028
 800ff50:	000c0008 	.word	0x000c0008
 800ff54:	0007001c 	.word	0x0007001c
 800ff58:	00080010 	.word	0x00080010
 800ff5c:	00080014 	.word	0x00080014
 800ff60:	00070014 	.word	0x00070014
 800ff64:	00050008 	.word	0x00050008
 800ff68:	001f000c 	.word	0x001f000c
 800ff6c:	001f0010 	.word	0x001f0010
 800ff70:	00030060 	.word	0x00030060
 800ff74:	00010024 	.word	0x00010024
 800ff78:	0005002c 	.word	0x0005002c
 800ff7c:	000e001a 	.word	0x000e001a
 800ff80:	2c00      	cmp	r4, #0
 800ff82:	f000 83e3 	beq.w	801074c <dwt_ioctl+0x1e14>
 800ff86:	88a7      	ldrh	r7, [r4, #4]
 800ff88:	68a3      	ldr	r3, [r4, #8]
 800ff8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff8c:	7b21      	ldrb	r1, [r4, #12]
 800ff8e:	9106      	str	r1, [sp, #24]
 800ff90:	6922      	ldr	r2, [r4, #16]
 800ff92:	9204      	str	r2, [sp, #16]
 800ff94:	6962      	ldr	r2, [r4, #20]
 800ff96:	9205      	str	r2, [sp, #20]
 800ff98:	f003 0203 	and.w	r2, r3, #3
 800ff9c:	f3c3 0085 	ubfx	r0, r3, #2, #6
 800ffa0:	2905      	cmp	r1, #5
 800ffa2:	d142      	bne.n	801002a <dwt_ioctl+0x16f2>
 800ffa4:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800ffa8:	bf28      	it	cs
 800ffaa:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800ffae:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8010290 <dwt_ioctl+0x1958>
 800ffb2:	2f04      	cmp	r7, #4
 800ffb4:	d805      	bhi.n	800ffc2 <dwt_ioctl+0x168a>
 800ffb6:	eb09 0300 	add.w	r3, r9, r0
 800ffba:	785b      	ldrb	r3, [r3, #1]
 800ffbc:	3b05      	subs	r3, #5
 800ffbe:	429f      	cmp	r7, r3
 800ffc0:	db3b      	blt.n	801003a <dwt_ioctl+0x1702>
 800ffc2:	2a01      	cmp	r2, #1
 800ffc4:	d877      	bhi.n	80100b6 <dwt_ioctl+0x177e>
 800ffc6:	4bae      	ldr	r3, [pc, #696]	; (8010280 <dwt_ioctl+0x1948>)
 800ffc8:	5c99      	ldrb	r1, [r3, r2]
 800ffca:	463e      	mov	r6, r7
 800ffcc:	42b9      	cmp	r1, r7
 800ffce:	da74      	bge.n	80100ba <dwt_ioctl+0x1782>
 800ffd0:	1c55      	adds	r5, r2, #1
 800ffd2:	fa53 f585 	uxtab	r5, r3, r5
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	440b      	add	r3, r1
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	3201      	adds	r2, #1
 800ffde:	b2d2      	uxtb	r2, r2
 800ffe0:	2a02      	cmp	r2, #2
 800ffe2:	d005      	beq.n	800fff0 <dwt_ioctl+0x16b8>
 800ffe4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ffe8:	eba6 0c03 	sub.w	ip, r6, r3
 800ffec:	4561      	cmp	r1, ip
 800ffee:	dbf3      	blt.n	800ffd8 <dwt_ioctl+0x16a0>
 800fff0:	429f      	cmp	r7, r3
 800fff2:	bf08      	it	eq
 800fff4:	9003      	streq	r0, [sp, #12]
 800fff6:	d064      	beq.n	80100c2 <dwt_ioctl+0x178a>
 800fff8:	f107 0805 	add.w	r8, r7, #5
 800fffc:	fa1f f888 	uxth.w	r8, r8
 8010000:	2580      	movs	r5, #128	; 0x80
 8010002:	2100      	movs	r1, #0
 8010004:	9107      	str	r1, [sp, #28]
 8010006:	9103      	str	r1, [sp, #12]
 8010008:	9108      	str	r1, [sp, #32]
 801000a:	460e      	mov	r6, r1
 801000c:	f04f 0b05 	mov.w	fp, #5
 8010010:	46be      	mov	lr, r7
 8010012:	455f      	cmp	r7, fp
 8010014:	bf38      	it	cc
 8010016:	46de      	movcc	lr, fp
 8010018:	f1ae 0e05 	sub.w	lr, lr, #5
 801001c:	fa1f fe8e 	uxth.w	lr, lr
 8010020:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8010280 <dwt_ioctl+0x1948>
 8010024:	46bc      	mov	ip, r7
 8010026:	460f      	mov	r7, r1
 8010028:	e3dd      	b.n	80107e6 <dwt_ioctl+0x1eae>
 801002a:	f240 1331 	movw	r3, #305	; 0x131
 801002e:	429f      	cmp	r7, r3
 8010030:	bf28      	it	cs
 8010032:	461f      	movcs	r7, r3
 8010034:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8010294 <dwt_ioctl+0x195c>
 8010038:	e7bb      	b.n	800ffb2 <dwt_ioctl+0x167a>
 801003a:	2300      	movs	r3, #0
 801003c:	9a05      	ldr	r2, [sp, #20]
 801003e:	8013      	strh	r3, [r2, #0]
 8010040:	9a04      	ldr	r2, [sp, #16]
 8010042:	4611      	mov	r1, r2
 8010044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010046:	600a      	str	r2, [r1, #0]
 8010048:	e04a      	b.n	80100e0 <dwt_ioctl+0x17a8>
 801004a:	2300      	movs	r3, #0
 801004c:	9a05      	ldr	r2, [sp, #20]
 801004e:	8013      	strh	r3, [r2, #0]
 8010050:	9b04      	ldr	r3, [sp, #16]
 8010052:	461a      	mov	r2, r3
 8010054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010056:	6013      	str	r3, [r2, #0]
 8010058:	f04f 33ff 	mov.w	r3, #4294967295
 801005c:	e040      	b.n	80100e0 <dwt_ioctl+0x17a8>
 801005e:	fa1f fb81 	uxth.w	fp, r1
 8010062:	9207      	str	r2, [sp, #28]
 8010064:	9003      	str	r0, [sp, #12]
 8010066:	9308      	str	r3, [sp, #32]
 8010068:	2701      	movs	r7, #1
 801006a:	e3cd      	b.n	8010808 <dwt_ioctl+0x1ed0>
 801006c:	2f00      	cmp	r7, #0
 801006e:	f040 83a1 	bne.w	80107b4 <dwt_ioctl+0x1e7c>
 8010072:	4598      	cmp	r8, r3
 8010074:	f200 83a3 	bhi.w	80107be <dwt_ioctl+0x1e86>
 8010078:	2e00      	cmp	r6, #0
 801007a:	d038      	beq.n	80100ee <dwt_ioctl+0x17b6>
 801007c:	283f      	cmp	r0, #63	; 0x3f
 801007e:	f000 83c8 	beq.w	8010812 <dwt_ioctl+0x1eda>
 8010082:	2700      	movs	r7, #0
 8010084:	f819 1000 	ldrb.w	r1, [r9, r0]
 8010088:	1a5b      	subs	r3, r3, r1
 801008a:	b29b      	uxth	r3, r3
 801008c:	1e46      	subs	r6, r0, #1
 801008e:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8010092:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 8010096:	bf18      	it	ne
 8010098:	2601      	movne	r6, #1
 801009a:	e39c      	b.n	80107d6 <dwt_ioctl+0x1e9e>
 801009c:	9906      	ldr	r1, [sp, #24]
 801009e:	2909      	cmp	r1, #9
 80100a0:	f040 83bd 	bne.w	801081e <dwt_ioctl+0x1ee6>
 80100a4:	213f      	movs	r1, #63	; 0x3f
 80100a6:	9103      	str	r1, [sp, #12]
 80100a8:	e00b      	b.n	80100c2 <dwt_ioctl+0x178a>
 80100aa:	b2b3      	uxth	r3, r6
 80100ac:	3201      	adds	r2, #1
 80100ae:	b2d2      	uxtb	r2, r2
 80100b0:	213f      	movs	r1, #63	; 0x3f
 80100b2:	9103      	str	r1, [sp, #12]
 80100b4:	e005      	b.n	80100c2 <dwt_ioctl+0x178a>
 80100b6:	2300      	movs	r3, #0
 80100b8:	e79a      	b.n	800fff0 <dwt_ioctl+0x16b8>
 80100ba:	2300      	movs	r3, #0
 80100bc:	e798      	b.n	800fff0 <dwt_ioctl+0x16b8>
 80100be:	9003      	str	r0, [sp, #12]
 80100c0:	4663      	mov	r3, ip
 80100c2:	9905      	ldr	r1, [sp, #20]
 80100c4:	800b      	strh	r3, [r1, #0]
 80100c6:	9b03      	ldr	r3, [sp, #12]
 80100c8:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 80100cc:	b2d2      	uxtb	r2, r2
 80100ce:	0413      	lsls	r3, r2, #16
 80100d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80100d4:	4313      	orrs	r3, r2
 80100d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80100da:	9a04      	ldr	r2, [sp, #16]
 80100dc:	6013      	str	r3, [r2, #0]
 80100de:	2300      	movs	r3, #0
 80100e0:	6023      	str	r3, [r4, #0]
 80100e2:	2500      	movs	r5, #0
 80100e4:	f7fe bcd2 	b.w	800ea8c <dwt_ioctl+0x154>
 80100e8:	9a07      	ldr	r2, [sp, #28]
 80100ea:	9b08      	ldr	r3, [sp, #32]
 80100ec:	e7e9      	b.n	80100c2 <dwt_ioctl+0x178a>
 80100ee:	9003      	str	r0, [sp, #12]
 80100f0:	e7e7      	b.n	80100c2 <dwt_ioctl+0x178a>
 80100f2:	9a07      	ldr	r2, [sp, #28]
 80100f4:	9b08      	ldr	r3, [sp, #32]
 80100f6:	e7e4      	b.n	80100c2 <dwt_ioctl+0x178a>
 80100f8:	213f      	movs	r1, #63	; 0x3f
 80100fa:	9103      	str	r1, [sp, #12]
 80100fc:	e7e1      	b.n	80100c2 <dwt_ioctl+0x178a>
 80100fe:	2c00      	cmp	r4, #0
 8010100:	f000 8327 	beq.w	8010752 <dwt_ioctl+0x1e1a>
 8010104:	7825      	ldrb	r5, [r4, #0]
 8010106:	6862      	ldr	r2, [r4, #4]
 8010108:	2a01      	cmp	r2, #1
 801010a:	bf15      	itete	ne
 801010c:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8010110:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8010114:	27df      	movne	r7, #223	; 0xdf
 8010116:	27ef      	moveq	r7, #239	; 0xef
 8010118:	bf14      	ite	ne
 801011a:	f04f 0820 	movne.w	r8, #32
 801011e:	f04f 0810 	moveq.w	r8, #16
 8010122:	2400      	movs	r4, #0
 8010124:	9400      	str	r4, [sp, #0]
 8010126:	4622      	mov	r2, r4
 8010128:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801012c:	f7fd fd04 	bl	800db38 <dwt_modify32bitoffsetreg>
 8010130:	9400      	str	r4, [sp, #0]
 8010132:	463b      	mov	r3, r7
 8010134:	4622      	mov	r2, r4
 8010136:	4953      	ldr	r1, [pc, #332]	; (8010284 <dwt_ioctl+0x194c>)
 8010138:	4630      	mov	r0, r6
 801013a:	f7fd fee7 	bl	800df0c <dwt_modify8bitoffsetreg>
 801013e:	2d01      	cmp	r5, #1
 8010140:	d003      	beq.n	801014a <dwt_ioctl+0x1812>
 8010142:	b165      	cbz	r5, 801015e <dwt_ioctl+0x1826>
 8010144:	2500      	movs	r5, #0
 8010146:	f7fe bca1 	b.w	800ea8c <dwt_ioctl+0x154>
 801014a:	4625      	mov	r5, r4
 801014c:	9400      	str	r4, [sp, #0]
 801014e:	463b      	mov	r3, r7
 8010150:	4622      	mov	r2, r4
 8010152:	494d      	ldr	r1, [pc, #308]	; (8010288 <dwt_ioctl+0x1950>)
 8010154:	4630      	mov	r0, r6
 8010156:	f7fd fed9 	bl	800df0c <dwt_modify8bitoffsetreg>
 801015a:	f7fe bc97 	b.w	800ea8c <dwt_ioctl+0x154>
 801015e:	f8cd 8000 	str.w	r8, [sp]
 8010162:	23ff      	movs	r3, #255	; 0xff
 8010164:	2200      	movs	r2, #0
 8010166:	4948      	ldr	r1, [pc, #288]	; (8010288 <dwt_ioctl+0x1950>)
 8010168:	4630      	mov	r0, r6
 801016a:	f7fd fecf 	bl	800df0c <dwt_modify8bitoffsetreg>
 801016e:	f7fe bc8d 	b.w	800ea8c <dwt_ioctl+0x154>
 8010172:	2c00      	cmp	r4, #0
 8010174:	f000 82f0 	beq.w	8010758 <dwt_ioctl+0x1e20>
 8010178:	7822      	ldrb	r2, [r4, #0]
 801017a:	f012 0f01 	tst.w	r2, #1
 801017e:	d02d      	beq.n	80101dc <dwt_ioctl+0x18a4>
 8010180:	0157      	lsls	r7, r2, #5
 8010182:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8010186:	2440      	movs	r4, #64	; 0x40
 8010188:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801018c:	f012 0f04 	tst.w	r2, #4
 8010190:	d028      	beq.n	80101e4 <dwt_ioctl+0x18ac>
 8010192:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8010196:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 801019a:	0112      	lsls	r2, r2, #4
 801019c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80101a0:	4317      	orrs	r7, r2
 80101a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80101a6:	9200      	str	r2, [sp, #0]
 80101a8:	43db      	mvns	r3, r3
 80101aa:	2200      	movs	r2, #0
 80101ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7fd fcc1 	bl	800db38 <dwt_modify32bitoffsetreg>
 80101b6:	43e4      	mvns	r4, r4
 80101b8:	b2a4      	uxth	r4, r4
 80101ba:	2500      	movs	r5, #0
 80101bc:	9500      	str	r5, [sp, #0]
 80101be:	4623      	mov	r3, r4
 80101c0:	462a      	mov	r2, r5
 80101c2:	4930      	ldr	r1, [pc, #192]	; (8010284 <dwt_ioctl+0x194c>)
 80101c4:	4630      	mov	r0, r6
 80101c6:	f7fe f853 	bl	800e270 <dwt_modify16bitoffsetreg>
 80101ca:	9700      	str	r7, [sp, #0]
 80101cc:	4623      	mov	r3, r4
 80101ce:	462a      	mov	r2, r5
 80101d0:	492d      	ldr	r1, [pc, #180]	; (8010288 <dwt_ioctl+0x1950>)
 80101d2:	4630      	mov	r0, r6
 80101d4:	f7fe f84c 	bl	800e270 <dwt_modify16bitoffsetreg>
 80101d8:	f7fe bc58 	b.w	800ea8c <dwt_ioctl+0x154>
 80101dc:	2700      	movs	r7, #0
 80101de:	463c      	mov	r4, r7
 80101e0:	463b      	mov	r3, r7
 80101e2:	e7d3      	b.n	801018c <dwt_ioctl+0x1854>
 80101e4:	2200      	movs	r2, #0
 80101e6:	e7de      	b.n	80101a6 <dwt_ioctl+0x186e>
 80101e8:	2308      	movs	r3, #8
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	23ff      	movs	r3, #255	; 0xff
 80101ee:	2201      	movs	r2, #1
 80101f0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80101f4:	f7fd fe8a 	bl	800df0c <dwt_modify8bitoffsetreg>
 80101f8:	4c24      	ldr	r4, [pc, #144]	; (801028c <dwt_ioctl+0x1954>)
 80101fa:	2302      	movs	r3, #2
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	23ff      	movs	r3, #255	; 0xff
 8010200:	2203      	movs	r2, #3
 8010202:	4621      	mov	r1, r4
 8010204:	4630      	mov	r0, r6
 8010206:	f7fd fe81 	bl	800df0c <dwt_modify8bitoffsetreg>
 801020a:	2500      	movs	r5, #0
 801020c:	9500      	str	r5, [sp, #0]
 801020e:	23f7      	movs	r3, #247	; 0xf7
 8010210:	2201      	movs	r2, #1
 8010212:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8010216:	4630      	mov	r0, r6
 8010218:	f7fd fe78 	bl	800df0c <dwt_modify8bitoffsetreg>
 801021c:	9500      	str	r5, [sp, #0]
 801021e:	23fd      	movs	r3, #253	; 0xfd
 8010220:	2203      	movs	r2, #3
 8010222:	4621      	mov	r1, r4
 8010224:	4630      	mov	r0, r6
 8010226:	f7fd fe71 	bl	800df0c <dwt_modify8bitoffsetreg>
 801022a:	f7fe bc2f 	b.w	800ea8c <dwt_ioctl+0x154>
 801022e:	2c00      	cmp	r4, #0
 8010230:	f000 8295 	beq.w	801075e <dwt_ioctl+0x1e26>
 8010234:	8863      	ldrh	r3, [r4, #2]
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801023c:	7822      	ldrb	r2, [r4, #0]
 801023e:	b10a      	cbz	r2, 8010244 <dwt_ioctl+0x190c>
 8010240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	f24f 0307 	movw	r3, #61447	; 0xf007
 801024a:	2200      	movs	r2, #0
 801024c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8010250:	4630      	mov	r0, r6
 8010252:	f7fe f80d 	bl	800e270 <dwt_modify16bitoffsetreg>
 8010256:	2500      	movs	r5, #0
 8010258:	f7fe bc18 	b.w	800ea8c <dwt_ioctl+0x154>
 801025c:	2c00      	cmp	r4, #0
 801025e:	f000 8281 	beq.w	8010764 <dwt_ioctl+0x1e2c>
 8010262:	b2e3      	uxtb	r3, r4
 8010264:	1c9a      	adds	r2, r3, #2
 8010266:	2301      	movs	r3, #1
 8010268:	4093      	lsls	r3, r2
 801026a:	3b01      	subs	r3, #1
 801026c:	b2db      	uxtb	r3, r3
 801026e:	2200      	movs	r2, #0
 8010270:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8010274:	f7fc ff7b 	bl	800d16e <dwt_write8bitoffsetreg>
 8010278:	2500      	movs	r5, #0
 801027a:	f7fe bc07 	b.w	800ea8c <dwt_ioctl+0x154>
 801027e:	bf00      	nop
 8010280:	08020534 	.word	0x08020534
 8010284:	00050008 	.word	0x00050008
 8010288:	0005000c 	.word	0x0005000c
 801028c:	00110008 	.word	0x00110008
 8010290:	080204b4 	.word	0x080204b4
 8010294:	080204f4 	.word	0x080204f4
 8010298:	2c00      	cmp	r4, #0
 801029a:	f000 8266 	beq.w	801076a <dwt_ioctl+0x1e32>
 801029e:	7ae3      	ldrb	r3, [r4, #11]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 8265 	beq.w	8010770 <dwt_ioctl+0x1e38>
 80102a6:	7b63      	ldrb	r3, [r4, #13]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d921      	bls.n	80102f0 <dwt_ioctl+0x19b8>
 80102ac:	7b22      	ldrb	r2, [r4, #12]
 80102ae:	4bd7      	ldr	r3, [pc, #860]	; (801060c <dwt_ioctl+0x1cd4>)
 80102b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80102b4:	0112      	lsls	r2, r2, #4
 80102b6:	0ad3      	lsrs	r3, r2, #11
 80102b8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80102bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80102c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80102c4:	bf28      	it	cs
 80102c6:	3301      	addcs	r3, #1
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80102d4:	2202      	movs	r2, #2
 80102d6:	49ce      	ldr	r1, [pc, #824]	; (8010610 <dwt_ioctl+0x1cd8>)
 80102d8:	4630      	mov	r0, r6
 80102da:	f7fd ffc9 	bl	800e270 <dwt_modify16bitoffsetreg>
 80102de:	2394      	movs	r3, #148	; 0x94
 80102e0:	2200      	movs	r2, #0
 80102e2:	49cc      	ldr	r1, [pc, #816]	; (8010614 <dwt_ioctl+0x1cdc>)
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7fc ff42 	bl	800d16e <dwt_write8bitoffsetreg>
 80102ea:	2500      	movs	r5, #0
 80102ec:	f7fe bbce 	b.w	800ea8c <dwt_ioctl+0x154>
 80102f0:	7b22      	ldrb	r2, [r4, #12]
 80102f2:	4bc6      	ldr	r3, [pc, #792]	; (801060c <dwt_ioctl+0x1cd4>)
 80102f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80102f8:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 80102fc:	fb02 f203 	mul.w	r2, r2, r3
 8010300:	0c93      	lsrs	r3, r2, #18
 8010302:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8010306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801030a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801030e:	bf28      	it	cs
 8010310:	3301      	addcs	r3, #1
 8010312:	b29b      	uxth	r3, r3
 8010314:	e7d9      	b.n	80102ca <dwt_ioctl+0x1992>
 8010316:	2c00      	cmp	r4, #0
 8010318:	f000 822d 	beq.w	8010776 <dwt_ioctl+0x1e3e>
 801031c:	2200      	movs	r2, #0
 801031e:	49be      	ldr	r1, [pc, #760]	; (8010618 <dwt_ioctl+0x1ce0>)
 8010320:	f7fc fb36 	bl	800c990 <dwt_read32bitoffsetreg>
 8010324:	6020      	str	r0, [r4, #0]
 8010326:	2500      	movs	r5, #0
 8010328:	f7fe bbb0 	b.w	800ea8c <dwt_ioctl+0x154>
 801032c:	2c00      	cmp	r4, #0
 801032e:	f000 8225 	beq.w	801077c <dwt_ioctl+0x1e44>
 8010332:	2200      	movs	r2, #0
 8010334:	49b9      	ldr	r1, [pc, #740]	; (801061c <dwt_ioctl+0x1ce4>)
 8010336:	f7fc fb2b 	bl	800c990 <dwt_read32bitoffsetreg>
 801033a:	6020      	str	r0, [r4, #0]
 801033c:	2500      	movs	r5, #0
 801033e:	f7fe bba5 	b.w	800ea8c <dwt_ioctl+0x154>
 8010342:	2c00      	cmp	r4, #0
 8010344:	f000 821d 	beq.w	8010782 <dwt_ioctl+0x1e4a>
 8010348:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	2500      	movs	r5, #0
 8010350:	f7fe bb9c 	b.w	800ea8c <dwt_ioctl+0x154>
 8010354:	2c00      	cmp	r4, #0
 8010356:	f000 8217 	beq.w	8010788 <dwt_ioctl+0x1e50>
 801035a:	2500      	movs	r5, #0
 801035c:	950b      	str	r5, [sp, #44]	; 0x2c
 801035e:	af10      	add	r7, sp, #64	; 0x40
 8010360:	2319      	movs	r3, #25
 8010362:	f847 3d10 	str.w	r3, [r7, #-16]!
 8010366:	9700      	str	r7, [sp, #0]
 8010368:	2304      	movs	r3, #4
 801036a:	462a      	mov	r2, r5
 801036c:	49ac      	ldr	r1, [pc, #688]	; (8010620 <dwt_ioctl+0x1ce8>)
 801036e:	f7fc fef3 	bl	800d158 <dwt_writetodevice>
 8010372:	f641 7348 	movw	r3, #8008	; 0x1f48
 8010376:	930c      	str	r3, [sp, #48]	; 0x30
 8010378:	9700      	str	r7, [sp, #0]
 801037a:	2304      	movs	r3, #4
 801037c:	462a      	mov	r2, r5
 801037e:	49a9      	ldr	r1, [pc, #676]	; (8010624 <dwt_ioctl+0x1cec>)
 8010380:	4630      	mov	r0, r6
 8010382:	f7fc fee9 	bl	800d158 <dwt_writetodevice>
 8010386:	ab0b      	add	r3, sp, #44	; 0x2c
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	2304      	movs	r3, #4
 801038c:	462a      	mov	r2, r5
 801038e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8010392:	4630      	mov	r0, r6
 8010394:	f7fc faf2 	bl	800c97c <dwt_readfromdevice>
 8010398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801039a:	6023      	str	r3, [r4, #0]
 801039c:	f7fe bb76 	b.w	800ea8c <dwt_ioctl+0x154>
 80103a0:	2c00      	cmp	r4, #0
 80103a2:	f000 81f4 	beq.w	801078e <dwt_ioctl+0x1e56>
 80103a6:	2200      	movs	r2, #0
 80103a8:	499f      	ldr	r1, [pc, #636]	; (8010628 <dwt_ioctl+0x1cf0>)
 80103aa:	f7fc faf1 	bl	800c990 <dwt_read32bitoffsetreg>
 80103ae:	b280      	uxth	r0, r0
 80103b0:	6020      	str	r0, [r4, #0]
 80103b2:	2200      	movs	r2, #0
 80103b4:	499d      	ldr	r1, [pc, #628]	; (801062c <dwt_ioctl+0x1cf4>)
 80103b6:	4630      	mov	r0, r6
 80103b8:	f7fc faea 	bl	800c990 <dwt_read32bitoffsetreg>
 80103bc:	0d43      	lsrs	r3, r0, #21
 80103be:	019b      	lsls	r3, r3, #6
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	6063      	str	r3, [r4, #4]
 80103c4:	2500      	movs	r5, #0
 80103c6:	f7fe bb61 	b.w	800ea8c <dwt_ioctl+0x154>
 80103ca:	2c00      	cmp	r4, #0
 80103cc:	f000 81e2 	beq.w	8010794 <dwt_ioctl+0x1e5c>
 80103d0:	7d63      	ldrb	r3, [r4, #21]
 80103d2:	b12b      	cbz	r3, 80103e0 <dwt_ioctl+0x1aa8>
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d037      	beq.n	8010448 <dwt_ioctl+0x1b10>
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d05e      	beq.n	801049a <dwt_ioctl+0x1b62>
 80103dc:	23ff      	movs	r3, #255	; 0xff
 80103de:	e02f      	b.n	8010440 <dwt_ioctl+0x1b08>
 80103e0:	2200      	movs	r2, #0
 80103e2:	4993      	ldr	r1, [pc, #588]	; (8010630 <dwt_ioctl+0x1cf8>)
 80103e4:	f7fc fad4 	bl	800c990 <dwt_read32bitoffsetreg>
 80103e8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80103ec:	6020      	str	r0, [r4, #0]
 80103ee:	2200      	movs	r2, #0
 80103f0:	4990      	ldr	r1, [pc, #576]	; (8010634 <dwt_ioctl+0x1cfc>)
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7fc facc 	bl	800c990 <dwt_read32bitoffsetreg>
 80103f8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80103fc:	6060      	str	r0, [r4, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	498d      	ldr	r1, [pc, #564]	; (8010638 <dwt_ioctl+0x1d00>)
 8010402:	4630      	mov	r0, r6
 8010404:	f7fc fac4 	bl	800c990 <dwt_read32bitoffsetreg>
 8010408:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801040c:	60a0      	str	r0, [r4, #8]
 801040e:	2200      	movs	r2, #0
 8010410:	498a      	ldr	r1, [pc, #552]	; (801063c <dwt_ioctl+0x1d04>)
 8010412:	4630      	mov	r0, r6
 8010414:	f7fc fabc 	bl	800c990 <dwt_read32bitoffsetreg>
 8010418:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801041c:	60e0      	str	r0, [r4, #12]
 801041e:	2200      	movs	r2, #0
 8010420:	4987      	ldr	r1, [pc, #540]	; (8010640 <dwt_ioctl+0x1d08>)
 8010422:	4630      	mov	r0, r6
 8010424:	f7fc fab4 	bl	800c990 <dwt_read32bitoffsetreg>
 8010428:	f3c0 0010 	ubfx	r0, r0, #0, #17
 801042c:	6120      	str	r0, [r4, #16]
 801042e:	2203      	movs	r2, #3
 8010430:	4979      	ldr	r1, [pc, #484]	; (8010618 <dwt_ioctl+0x1ce0>)
 8010432:	4630      	mov	r0, r6
 8010434:	f7fc fad4 	bl	800c9e0 <dwt_read8bitoffsetreg>
 8010438:	f3c0 1002 	ubfx	r0, r0, #4, #3
 801043c:	7520      	strb	r0, [r4, #20]
 801043e:	2300      	movs	r3, #0
 8010440:	75a3      	strb	r3, [r4, #22]
 8010442:	2500      	movs	r5, #0
 8010444:	f7fe bb22 	b.w	800ea8c <dwt_ioctl+0x154>
 8010448:	2200      	movs	r2, #0
 801044a:	497e      	ldr	r1, [pc, #504]	; (8010644 <dwt_ioctl+0x1d0c>)
 801044c:	f7fc faa0 	bl	800c990 <dwt_read32bitoffsetreg>
 8010450:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8010454:	6020      	str	r0, [r4, #0]
 8010456:	2200      	movs	r2, #0
 8010458:	497b      	ldr	r1, [pc, #492]	; (8010648 <dwt_ioctl+0x1d10>)
 801045a:	4630      	mov	r0, r6
 801045c:	f7fc fa98 	bl	800c990 <dwt_read32bitoffsetreg>
 8010460:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8010464:	6060      	str	r0, [r4, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	4978      	ldr	r1, [pc, #480]	; (801064c <dwt_ioctl+0x1d14>)
 801046a:	4630      	mov	r0, r6
 801046c:	f7fc fa90 	bl	800c990 <dwt_read32bitoffsetreg>
 8010470:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8010474:	60a0      	str	r0, [r4, #8]
 8010476:	2200      	movs	r2, #0
 8010478:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 801047c:	4630      	mov	r0, r6
 801047e:	f7fc fa87 	bl	800c990 <dwt_read32bitoffsetreg>
 8010482:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8010486:	60e0      	str	r0, [r4, #12]
 8010488:	2200      	movs	r2, #0
 801048a:	4971      	ldr	r1, [pc, #452]	; (8010650 <dwt_ioctl+0x1d18>)
 801048c:	4630      	mov	r0, r6
 801048e:	f7fc fa7f 	bl	800c990 <dwt_read32bitoffsetreg>
 8010492:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8010496:	6120      	str	r0, [r4, #16]
 8010498:	e7c9      	b.n	801042e <dwt_ioctl+0x1af6>
 801049a:	2200      	movs	r2, #0
 801049c:	496d      	ldr	r1, [pc, #436]	; (8010654 <dwt_ioctl+0x1d1c>)
 801049e:	f7fc fa77 	bl	800c990 <dwt_read32bitoffsetreg>
 80104a2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80104a6:	6020      	str	r0, [r4, #0]
 80104a8:	2200      	movs	r2, #0
 80104aa:	496b      	ldr	r1, [pc, #428]	; (8010658 <dwt_ioctl+0x1d20>)
 80104ac:	4630      	mov	r0, r6
 80104ae:	f7fc fa6f 	bl	800c990 <dwt_read32bitoffsetreg>
 80104b2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80104b6:	6060      	str	r0, [r4, #4]
 80104b8:	2200      	movs	r2, #0
 80104ba:	4968      	ldr	r1, [pc, #416]	; (801065c <dwt_ioctl+0x1d24>)
 80104bc:	4630      	mov	r0, r6
 80104be:	f7fc fa67 	bl	800c990 <dwt_read32bitoffsetreg>
 80104c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80104c6:	60a0      	str	r0, [r4, #8]
 80104c8:	2200      	movs	r2, #0
 80104ca:	4965      	ldr	r1, [pc, #404]	; (8010660 <dwt_ioctl+0x1d28>)
 80104cc:	4630      	mov	r0, r6
 80104ce:	f7fc fa5f 	bl	800c990 <dwt_read32bitoffsetreg>
 80104d2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80104d6:	60e0      	str	r0, [r4, #12]
 80104d8:	2200      	movs	r2, #0
 80104da:	4962      	ldr	r1, [pc, #392]	; (8010664 <dwt_ioctl+0x1d2c>)
 80104dc:	4630      	mov	r0, r6
 80104de:	f7fc fa57 	bl	800c990 <dwt_read32bitoffsetreg>
 80104e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80104e6:	6120      	str	r0, [r4, #16]
 80104e8:	e7a1      	b.n	801042e <dwt_ioctl+0x1af6>
 80104ea:	2500      	movs	r5, #0
 80104ec:	f7fe bace 	b.w	800ea8c <dwt_ioctl+0x154>
 80104f0:	2500      	movs	r5, #0
 80104f2:	f7fe bacb 	b.w	800ea8c <dwt_ioctl+0x154>
 80104f6:	2500      	movs	r5, #0
 80104f8:	f7fe bac8 	b.w	800ea8c <dwt_ioctl+0x154>
 80104fc:	2500      	movs	r5, #0
 80104fe:	f7fe bac5 	b.w	800ea8c <dwt_ioctl+0x154>
 8010502:	2500      	movs	r5, #0
 8010504:	f7fe bac2 	b.w	800ea8c <dwt_ioctl+0x154>
 8010508:	2500      	movs	r5, #0
 801050a:	f7fe babf 	b.w	800ea8c <dwt_ioctl+0x154>
 801050e:	2500      	movs	r5, #0
 8010510:	f7fe babc 	b.w	800ea8c <dwt_ioctl+0x154>
 8010514:	2500      	movs	r5, #0
 8010516:	f7fe bab9 	b.w	800ea8c <dwt_ioctl+0x154>
 801051a:	2500      	movs	r5, #0
 801051c:	f7fe bab6 	b.w	800ea8c <dwt_ioctl+0x154>
 8010520:	2500      	movs	r5, #0
 8010522:	f7fe bab3 	b.w	800ea8c <dwt_ioctl+0x154>
 8010526:	2500      	movs	r5, #0
 8010528:	f7fe bab0 	b.w	800ea8c <dwt_ioctl+0x154>
 801052c:	2500      	movs	r5, #0
 801052e:	f7fe baad 	b.w	800ea8c <dwt_ioctl+0x154>
 8010532:	2500      	movs	r5, #0
 8010534:	f7fe baaa 	b.w	800ea8c <dwt_ioctl+0x154>
 8010538:	2500      	movs	r5, #0
 801053a:	f7fe baa7 	b.w	800ea8c <dwt_ioctl+0x154>
 801053e:	2500      	movs	r5, #0
 8010540:	f7fe baa4 	b.w	800ea8c <dwt_ioctl+0x154>
 8010544:	2500      	movs	r5, #0
 8010546:	f7fe baa1 	b.w	800ea8c <dwt_ioctl+0x154>
 801054a:	2500      	movs	r5, #0
 801054c:	f7fe ba9e 	b.w	800ea8c <dwt_ioctl+0x154>
 8010550:	2500      	movs	r5, #0
 8010552:	f7fe ba9b 	b.w	800ea8c <dwt_ioctl+0x154>
 8010556:	2500      	movs	r5, #0
 8010558:	f7fe ba98 	b.w	800ea8c <dwt_ioctl+0x154>
 801055c:	2500      	movs	r5, #0
 801055e:	f7fe ba95 	b.w	800ea8c <dwt_ioctl+0x154>
 8010562:	2500      	movs	r5, #0
 8010564:	f7fe ba92 	b.w	800ea8c <dwt_ioctl+0x154>
 8010568:	2500      	movs	r5, #0
 801056a:	f7fe ba8f 	b.w	800ea8c <dwt_ioctl+0x154>
 801056e:	2500      	movs	r5, #0
 8010570:	f7fe ba8c 	b.w	800ea8c <dwt_ioctl+0x154>
 8010574:	2500      	movs	r5, #0
 8010576:	f7fe ba89 	b.w	800ea8c <dwt_ioctl+0x154>
 801057a:	2500      	movs	r5, #0
 801057c:	f7fe ba86 	b.w	800ea8c <dwt_ioctl+0x154>
 8010580:	2500      	movs	r5, #0
 8010582:	f7fe ba83 	b.w	800ea8c <dwt_ioctl+0x154>
 8010586:	2500      	movs	r5, #0
 8010588:	f7fe ba80 	b.w	800ea8c <dwt_ioctl+0x154>
 801058c:	2500      	movs	r5, #0
 801058e:	f7fe ba7d 	b.w	800ea8c <dwt_ioctl+0x154>
 8010592:	2500      	movs	r5, #0
 8010594:	f7fe ba7a 	b.w	800ea8c <dwt_ioctl+0x154>
 8010598:	2500      	movs	r5, #0
 801059a:	f7fe ba77 	b.w	800ea8c <dwt_ioctl+0x154>
 801059e:	2500      	movs	r5, #0
 80105a0:	f7fe ba74 	b.w	800ea8c <dwt_ioctl+0x154>
 80105a4:	2500      	movs	r5, #0
 80105a6:	f7fe ba71 	b.w	800ea8c <dwt_ioctl+0x154>
 80105aa:	2500      	movs	r5, #0
 80105ac:	f7fe ba6e 	b.w	800ea8c <dwt_ioctl+0x154>
 80105b0:	2500      	movs	r5, #0
 80105b2:	f7fe ba6b 	b.w	800ea8c <dwt_ioctl+0x154>
 80105b6:	2500      	movs	r5, #0
 80105b8:	f7fe ba68 	b.w	800ea8c <dwt_ioctl+0x154>
 80105bc:	2500      	movs	r5, #0
 80105be:	f7fe ba65 	b.w	800ea8c <dwt_ioctl+0x154>
 80105c2:	2500      	movs	r5, #0
 80105c4:	f7fe ba62 	b.w	800ea8c <dwt_ioctl+0x154>
 80105c8:	2500      	movs	r5, #0
 80105ca:	f7fe ba5f 	b.w	800ea8c <dwt_ioctl+0x154>
 80105ce:	2500      	movs	r5, #0
 80105d0:	f7fe ba5c 	b.w	800ea8c <dwt_ioctl+0x154>
 80105d4:	2500      	movs	r5, #0
 80105d6:	f7fe ba59 	b.w	800ea8c <dwt_ioctl+0x154>
 80105da:	2500      	movs	r5, #0
 80105dc:	f7fe ba56 	b.w	800ea8c <dwt_ioctl+0x154>
 80105e0:	2500      	movs	r5, #0
 80105e2:	f7fe ba53 	b.w	800ea8c <dwt_ioctl+0x154>
 80105e6:	2500      	movs	r5, #0
 80105e8:	f7fe ba50 	b.w	800ea8c <dwt_ioctl+0x154>
 80105ec:	2500      	movs	r5, #0
 80105ee:	f7fe ba4d 	b.w	800ea8c <dwt_ioctl+0x154>
 80105f2:	2500      	movs	r5, #0
 80105f4:	f7fe ba4a 	b.w	800ea8c <dwt_ioctl+0x154>
 80105f8:	2500      	movs	r5, #0
 80105fa:	f7fe ba47 	b.w	800ea8c <dwt_ioctl+0x154>
 80105fe:	2500      	movs	r5, #0
 8010600:	f7fe ba44 	b.w	800ea8c <dwt_ioctl+0x154>
 8010604:	2500      	movs	r5, #0
 8010606:	f7fe ba41 	b.w	800ea8c <dwt_ioctl+0x154>
 801060a:	bf00      	nop
 801060c:	08020570 	.word	0x08020570
 8010610:	000e0012 	.word	0x000e0012
 8010614:	000e0016 	.word	0x000e0016
 8010618:	00030060 	.word	0x00030060
 801061c:	000f0048 	.word	0x000f0048
 8010620:	001f0004 	.word	0x001f0004
 8010624:	001f0008 	.word	0x001f0008
 8010628:	000c0048 	.word	0x000c0048
 801062c:	000c0028 	.word	0x000c0028
 8010630:	000c0058 	.word	0x000c0058
 8010634:	000c0030 	.word	0x000c0030
 8010638:	000c0034 	.word	0x000c0034
 801063c:	000c0038 	.word	0x000c0038
 8010640:	000c002c 	.word	0x000c002c
 8010644:	000d0020 	.word	0x000d0020
 8010648:	000c0064 	.word	0x000c0064
 801064c:	000c0068 	.word	0x000c0068
 8010650:	000c0060 	.word	0x000c0060
 8010654:	000d0068 	.word	0x000d0068
 8010658:	000d0040 	.word	0x000d0040
 801065c:	000d0044 	.word	0x000d0044
 8010660:	000d0048 	.word	0x000d0048
 8010664:	000d003c 	.word	0x000d003c
 8010668:	2500      	movs	r5, #0
 801066a:	f7fe ba0f 	b.w	800ea8c <dwt_ioctl+0x154>
 801066e:	2500      	movs	r5, #0
 8010670:	f7fe ba0c 	b.w	800ea8c <dwt_ioctl+0x154>
 8010674:	2500      	movs	r5, #0
 8010676:	f7fe ba09 	b.w	800ea8c <dwt_ioctl+0x154>
 801067a:	2500      	movs	r5, #0
 801067c:	f7fe ba06 	b.w	800ea8c <dwt_ioctl+0x154>
 8010680:	2500      	movs	r5, #0
 8010682:	f7fe ba03 	b.w	800ea8c <dwt_ioctl+0x154>
 8010686:	2500      	movs	r5, #0
 8010688:	f7fe ba00 	b.w	800ea8c <dwt_ioctl+0x154>
 801068c:	2500      	movs	r5, #0
 801068e:	f7fe b9fd 	b.w	800ea8c <dwt_ioctl+0x154>
 8010692:	2500      	movs	r5, #0
 8010694:	f7fe b9fa 	b.w	800ea8c <dwt_ioctl+0x154>
 8010698:	2500      	movs	r5, #0
 801069a:	f7fe b9f7 	b.w	800ea8c <dwt_ioctl+0x154>
 801069e:	2500      	movs	r5, #0
 80106a0:	f7fe b9f4 	b.w	800ea8c <dwt_ioctl+0x154>
 80106a4:	2500      	movs	r5, #0
 80106a6:	f7fe b9f1 	b.w	800ea8c <dwt_ioctl+0x154>
 80106aa:	2500      	movs	r5, #0
 80106ac:	f7fe b9ee 	b.w	800ea8c <dwt_ioctl+0x154>
 80106b0:	2500      	movs	r5, #0
 80106b2:	f7fe b9eb 	b.w	800ea8c <dwt_ioctl+0x154>
 80106b6:	2500      	movs	r5, #0
 80106b8:	f7fe b9e8 	b.w	800ea8c <dwt_ioctl+0x154>
 80106bc:	2500      	movs	r5, #0
 80106be:	f7fe b9e5 	b.w	800ea8c <dwt_ioctl+0x154>
 80106c2:	2500      	movs	r5, #0
 80106c4:	f7fe b9e2 	b.w	800ea8c <dwt_ioctl+0x154>
 80106c8:	2500      	movs	r5, #0
 80106ca:	f7fe b9df 	b.w	800ea8c <dwt_ioctl+0x154>
 80106ce:	2500      	movs	r5, #0
 80106d0:	f7fe b9dc 	b.w	800ea8c <dwt_ioctl+0x154>
 80106d4:	2500      	movs	r5, #0
 80106d6:	f7fe b9d9 	b.w	800ea8c <dwt_ioctl+0x154>
 80106da:	2500      	movs	r5, #0
 80106dc:	f7fe b9d6 	b.w	800ea8c <dwt_ioctl+0x154>
 80106e0:	2500      	movs	r5, #0
 80106e2:	f7fe b9d3 	b.w	800ea8c <dwt_ioctl+0x154>
 80106e6:	2500      	movs	r5, #0
 80106e8:	f7fe b9d0 	b.w	800ea8c <dwt_ioctl+0x154>
 80106ec:	2500      	movs	r5, #0
 80106ee:	f7fe b9cd 	b.w	800ea8c <dwt_ioctl+0x154>
 80106f2:	2500      	movs	r5, #0
 80106f4:	f7fe b9ca 	b.w	800ea8c <dwt_ioctl+0x154>
 80106f8:	2500      	movs	r5, #0
 80106fa:	f7fe b9c7 	b.w	800ea8c <dwt_ioctl+0x154>
 80106fe:	2500      	movs	r5, #0
 8010700:	f7fe b9c4 	b.w	800ea8c <dwt_ioctl+0x154>
 8010704:	2500      	movs	r5, #0
 8010706:	f7fe b9c1 	b.w	800ea8c <dwt_ioctl+0x154>
 801070a:	2500      	movs	r5, #0
 801070c:	f7fe b9be 	b.w	800ea8c <dwt_ioctl+0x154>
 8010710:	2500      	movs	r5, #0
 8010712:	f7fe b9bb 	b.w	800ea8c <dwt_ioctl+0x154>
 8010716:	2500      	movs	r5, #0
 8010718:	f7fe b9b8 	b.w	800ea8c <dwt_ioctl+0x154>
 801071c:	2500      	movs	r5, #0
 801071e:	f7fe b9b5 	b.w	800ea8c <dwt_ioctl+0x154>
 8010722:	2500      	movs	r5, #0
 8010724:	f7fe b9b2 	b.w	800ea8c <dwt_ioctl+0x154>
 8010728:	2500      	movs	r5, #0
 801072a:	f7fe b9af 	b.w	800ea8c <dwt_ioctl+0x154>
 801072e:	2500      	movs	r5, #0
 8010730:	f7fe b9ac 	b.w	800ea8c <dwt_ioctl+0x154>
 8010734:	2500      	movs	r5, #0
 8010736:	f7fe b9a9 	b.w	800ea8c <dwt_ioctl+0x154>
 801073a:	2500      	movs	r5, #0
 801073c:	f7fe b9a6 	b.w	800ea8c <dwt_ioctl+0x154>
 8010740:	2500      	movs	r5, #0
 8010742:	f7fe b9a3 	b.w	800ea8c <dwt_ioctl+0x154>
 8010746:	2500      	movs	r5, #0
 8010748:	f7fe b9a0 	b.w	800ea8c <dwt_ioctl+0x154>
 801074c:	2500      	movs	r5, #0
 801074e:	f7fe b99d 	b.w	800ea8c <dwt_ioctl+0x154>
 8010752:	2500      	movs	r5, #0
 8010754:	f7fe b99a 	b.w	800ea8c <dwt_ioctl+0x154>
 8010758:	2500      	movs	r5, #0
 801075a:	f7fe b997 	b.w	800ea8c <dwt_ioctl+0x154>
 801075e:	2500      	movs	r5, #0
 8010760:	f7fe b994 	b.w	800ea8c <dwt_ioctl+0x154>
 8010764:	2500      	movs	r5, #0
 8010766:	f7fe b991 	b.w	800ea8c <dwt_ioctl+0x154>
 801076a:	2500      	movs	r5, #0
 801076c:	f7fe b98e 	b.w	800ea8c <dwt_ioctl+0x154>
 8010770:	2500      	movs	r5, #0
 8010772:	f7fe b98b 	b.w	800ea8c <dwt_ioctl+0x154>
 8010776:	2500      	movs	r5, #0
 8010778:	f7fe b988 	b.w	800ea8c <dwt_ioctl+0x154>
 801077c:	2500      	movs	r5, #0
 801077e:	f7fe b985 	b.w	800ea8c <dwt_ioctl+0x154>
 8010782:	2500      	movs	r5, #0
 8010784:	f7fe b982 	b.w	800ea8c <dwt_ioctl+0x154>
 8010788:	2500      	movs	r5, #0
 801078a:	f7fe b97f 	b.w	800ea8c <dwt_ioctl+0x154>
 801078e:	2500      	movs	r5, #0
 8010790:	f7fe b97c 	b.w	800ea8c <dwt_ioctl+0x154>
 8010794:	2500      	movs	r5, #0
 8010796:	f7fe b979 	b.w	800ea8c <dwt_ioctl+0x154>
 801079a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801079e:	1e5a      	subs	r2, r3, #1
 80107a0:	b2d2      	uxtb	r2, r2
 80107a2:	2a01      	cmp	r2, #1
 80107a4:	f67f a801 	bls.w	800f7aa <dwt_ioctl+0xe72>
 80107a8:	2202      	movs	r2, #2
 80107aa:	f7fe bf88 	b.w	800f6be <dwt_ioctl+0xd86>
 80107ae:	2f00      	cmp	r7, #0
 80107b0:	f43f ac62 	beq.w	8010078 <dwt_ioctl+0x1740>
 80107b4:	f819 1000 	ldrb.w	r1, [r9, r0]
 80107b8:	1a5b      	subs	r3, r3, r1
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	e481      	b.n	80100c2 <dwt_ioctl+0x178a>
 80107be:	283f      	cmp	r0, #63	; 0x3f
 80107c0:	d027      	beq.n	8010812 <dwt_ioctl+0x1eda>
 80107c2:	2e00      	cmp	r6, #0
 80107c4:	f47f ac5e 	bne.w	8010084 <dwt_ioctl+0x174c>
 80107c8:	3001      	adds	r0, #1
 80107ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80107ce:	f819 1000 	ldrb.w	r1, [r9, r0]
 80107d2:	440b      	add	r3, r1
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	459c      	cmp	ip, r3
 80107d8:	f43f ac71 	beq.w	80100be <dwt_ioctl+0x1786>
 80107dc:	3d01      	subs	r5, #1
 80107de:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80107e2:	f43f ac32 	beq.w	801004a <dwt_ioctl+0x1712>
 80107e6:	459e      	cmp	lr, r3
 80107e8:	f4bf ac40 	bcs.w	801006c <dwt_ioctl+0x1734>
 80107ec:	4598      	cmp	r8, r3
 80107ee:	d9de      	bls.n	80107ae <dwt_ioctl+0x1e76>
 80107f0:	ebac 0103 	sub.w	r1, ip, r3
 80107f4:	b209      	sxth	r1, r1
 80107f6:	2900      	cmp	r1, #0
 80107f8:	bfb8      	it	lt
 80107fa:	4249      	neglt	r1, r1
 80107fc:	4559      	cmp	r1, fp
 80107fe:	f77f ac2e 	ble.w	801005e <dwt_ioctl+0x1726>
 8010802:	2f00      	cmp	r7, #0
 8010804:	f47f ac70 	bne.w	80100e8 <dwt_ioctl+0x17b0>
 8010808:	283f      	cmp	r0, #63	; 0x3f
 801080a:	d1da      	bne.n	80107c2 <dwt_ioctl+0x1e8a>
 801080c:	2f00      	cmp	r7, #0
 801080e:	f47f ac70 	bne.w	80100f2 <dwt_ioctl+0x17ba>
 8010812:	2a03      	cmp	r2, #3
 8010814:	f43f ac70 	beq.w	80100f8 <dwt_ioctl+0x17c0>
 8010818:	2a02      	cmp	r2, #2
 801081a:	f43f ac3f 	beq.w	801009c <dwt_ioctl+0x1764>
 801081e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010822:	185e      	adds	r6, r3, r1
 8010824:	4566      	cmp	r6, ip
 8010826:	f77f ac40 	ble.w	80100aa <dwt_ioctl+0x1772>
 801082a:	440b      	add	r3, r1
 801082c:	b29b      	uxth	r3, r3
 801082e:	3201      	adds	r2, #1
 8010830:	b2d2      	uxtb	r2, r2
 8010832:	2700      	movs	r7, #0
 8010834:	e426      	b.n	8010084 <dwt_ioctl+0x174c>
 8010836:	bf00      	nop

08010838 <ull_initialise>:
 8010838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801083c:	4605      	mov	r5, r0
 801083e:	460e      	mov	r6, r1
 8010840:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010842:	2b00      	cmp	r3, #0
 8010844:	d05c      	beq.n	8010900 <ull_initialise+0xc8>
 8010846:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8010848:	2300      	movs	r3, #0
 801084a:	73e3      	strb	r3, [r4, #15]
 801084c:	2202      	movs	r2, #2
 801084e:	8262      	strh	r2, [r4, #18]
 8010850:	75a3      	strb	r3, [r4, #22]
 8010852:	75e3      	strb	r3, [r4, #23]
 8010854:	7423      	strb	r3, [r4, #16]
 8010856:	72a3      	strb	r3, [r4, #10]
 8010858:	72e3      	strb	r3, [r4, #11]
 801085a:	2104      	movs	r1, #4
 801085c:	4628      	mov	r0, r5
 801085e:	f7fc fd33 	bl	800d2c8 <_dwt_otpread>
 8010862:	4607      	mov	r7, r0
 8010864:	2105      	movs	r1, #5
 8010866:	4628      	mov	r0, r5
 8010868:	f7fc fd2e 	bl	800d2c8 <_dwt_otpread>
 801086c:	4680      	mov	r8, r0
 801086e:	210a      	movs	r1, #10
 8010870:	4628      	mov	r0, r5
 8010872:	f7fc fd29 	bl	800d2c8 <_dwt_otpread>
 8010876:	f3c0 4004 	ubfx	r0, r0, #16, #5
 801087a:	7220      	strb	r0, [r4, #8]
 801087c:	b127      	cbz	r7, 8010888 <ull_initialise+0x50>
 801087e:	f1b8 0f00 	cmp.w	r8, #0
 8010882:	d001      	beq.n	8010888 <ull_initialise+0x50>
 8010884:	2800      	cmp	r0, #0
 8010886:	d140      	bne.n	801090a <ull_initialise+0xd2>
 8010888:	2120      	movs	r1, #32
 801088a:	4628      	mov	r0, r5
 801088c:	f7fc fd1c 	bl	800d2c8 <_dwt_otpread>
 8010890:	4b2f      	ldr	r3, [pc, #188]	; (8010950 <ull_initialise+0x118>)
 8010892:	4298      	cmp	r0, r3
 8010894:	bf0c      	ite	eq
 8010896:	2301      	moveq	r3, #1
 8010898:	2300      	movne	r3, #0
 801089a:	7263      	strb	r3, [r4, #9]
 801089c:	f016 0f10 	tst.w	r6, #16
 80108a0:	d137      	bne.n	8010912 <ull_initialise+0xda>
 80108a2:	f016 0f20 	tst.w	r6, #32
 80108a6:	d13a      	bne.n	801091e <ull_initialise+0xe6>
 80108a8:	f016 0f40 	tst.w	r6, #64	; 0x40
 80108ac:	d13d      	bne.n	801092a <ull_initialise+0xf2>
 80108ae:	f016 0f80 	tst.w	r6, #128	; 0x80
 80108b2:	d141      	bne.n	8010938 <ull_initialise+0x100>
 80108b4:	7ae3      	ldrb	r3, [r4, #11]
 80108b6:	b90b      	cbnz	r3, 80108bc <ull_initialise+0x84>
 80108b8:	2385      	movs	r3, #133	; 0x85
 80108ba:	72e3      	strb	r3, [r4, #11]
 80108bc:	7aa3      	ldrb	r3, [r4, #10]
 80108be:	b90b      	cbnz	r3, 80108c4 <ull_initialise+0x8c>
 80108c0:	2374      	movs	r3, #116	; 0x74
 80108c2:	72a3      	strb	r3, [r4, #10]
 80108c4:	211f      	movs	r1, #31
 80108c6:	4628      	mov	r0, r5
 80108c8:	f7fc fcfe 	bl	800d2c8 <_dwt_otpread>
 80108cc:	7360      	strb	r0, [r4, #13]
 80108ce:	211e      	movs	r1, #30
 80108d0:	4628      	mov	r0, r5
 80108d2:	f7fc fcf9 	bl	800d2c8 <_dwt_otpread>
 80108d6:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 80108da:	bf12      	itee	ne
 80108dc:	73a0      	strbne	r0, [r4, #14]
 80108de:	232e      	moveq	r3, #46	; 0x2e
 80108e0:	73a3      	strbeq	r3, [r4, #14]
 80108e2:	7ba3      	ldrb	r3, [r4, #14]
 80108e4:	2200      	movs	r2, #0
 80108e6:	491b      	ldr	r1, [pc, #108]	; (8010954 <ull_initialise+0x11c>)
 80108e8:	4628      	mov	r0, r5
 80108ea:	f7fc fc40 	bl	800d16e <dwt_write8bitoffsetreg>
 80108ee:	2135      	movs	r1, #53	; 0x35
 80108f0:	4628      	mov	r0, r5
 80108f2:	f7fc fce9 	bl	800d2c8 <_dwt_otpread>
 80108f6:	4603      	mov	r3, r0
 80108f8:	bb20      	cbnz	r0, 8010944 <ull_initialise+0x10c>
 80108fa:	2000      	movs	r0, #0
 80108fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010900:	202c      	movs	r0, #44	; 0x2c
 8010902:	f009 f8f7 	bl	8019af4 <malloc>
 8010906:	6528      	str	r0, [r5, #80]	; 0x50
 8010908:	e79d      	b.n	8010846 <ull_initialise+0xe>
 801090a:	4628      	mov	r0, r5
 801090c:	f7fd fcca 	bl	800e2a4 <_dwt_prog_ldo_and_bias_tune>
 8010910:	e7ba      	b.n	8010888 <ull_initialise+0x50>
 8010912:	2106      	movs	r1, #6
 8010914:	4628      	mov	r0, r5
 8010916:	f7fc fcd7 	bl	800d2c8 <_dwt_otpread>
 801091a:	6020      	str	r0, [r4, #0]
 801091c:	e7c1      	b.n	80108a2 <ull_initialise+0x6a>
 801091e:	2107      	movs	r1, #7
 8010920:	4628      	mov	r0, r5
 8010922:	f7fc fcd1 	bl	800d2c8 <_dwt_otpread>
 8010926:	6060      	str	r0, [r4, #4]
 8010928:	e7be      	b.n	80108a8 <ull_initialise+0x70>
 801092a:	2108      	movs	r1, #8
 801092c:	4628      	mov	r0, r5
 801092e:	f7fc fccb 	bl	800d2c8 <_dwt_otpread>
 8010932:	0c00      	lsrs	r0, r0, #16
 8010934:	72a0      	strb	r0, [r4, #10]
 8010936:	e7ba      	b.n	80108ae <ull_initialise+0x76>
 8010938:	2109      	movs	r1, #9
 801093a:	4628      	mov	r0, r5
 801093c:	f7fc fcc4 	bl	800d2c8 <_dwt_otpread>
 8010940:	72e0      	strb	r0, [r4, #11]
 8010942:	e7b7      	b.n	80108b4 <ull_initialise+0x7c>
 8010944:	2200      	movs	r2, #0
 8010946:	4904      	ldr	r1, [pc, #16]	; (8010958 <ull_initialise+0x120>)
 8010948:	4628      	mov	r0, r5
 801094a:	f7fc fd63 	bl	800d414 <dwt_write32bitoffsetreg>
 801094e:	e7d4      	b.n	80108fa <ull_initialise+0xc2>
 8010950:	10000240 	.word	0x10000240
 8010954:	00090014 	.word	0x00090014
 8010958:	00090004 	.word	0x00090004

0801095c <_init>:
 801095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095e:	b085      	sub	sp, #20
 8010960:	4604      	mov	r4, r0
 8010962:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010964:	6819      	ldr	r1, [r3, #0]
 8010966:	f7ff ff67 	bl	8010838 <ull_initialise>
 801096a:	4606      	mov	r6, r0
 801096c:	6823      	ldr	r3, [r4, #0]
 801096e:	691b      	ldr	r3, [r3, #16]
 8010970:	4798      	blx	r3
 8010972:	ab03      	add	r3, sp, #12
 8010974:	2200      	movs	r2, #0
 8010976:	4611      	mov	r1, r2
 8010978:	4620      	mov	r0, r4
 801097a:	f7fd ffdd 	bl	800e938 <dwt_ioctl>
 801097e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010982:	6819      	ldr	r1, [r3, #0]
 8010984:	4620      	mov	r0, r4
 8010986:	f7fd fdad 	bl	800e4e4 <ull_configure>
 801098a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801098c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801098e:	6859      	ldr	r1, [r3, #4]
 8010990:	4620      	mov	r0, r4
 8010992:	f7fd fb47 	bl	800e024 <ull_configuretxrf>
 8010996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099a:	89db      	ldrh	r3, [r3, #14]
 801099c:	2200      	movs	r2, #0
 801099e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80109a2:	4620      	mov	r0, r4
 80109a4:	f7fc fc35 	bl	800d212 <dwt_write16bitoffsetreg>
 80109a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ac:	899b      	ldrh	r3, [r3, #12]
 80109ae:	2200      	movs	r2, #0
 80109b0:	4952      	ldr	r1, [pc, #328]	; (8010afc <_init+0x1a0>)
 80109b2:	4620      	mov	r0, r4
 80109b4:	f7fc fc2d 	bl	800d212 <dwt_write16bitoffsetreg>
 80109b8:	2100      	movs	r1, #0
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7fc fec6 	bl	800d74c <ull_setrxaftertxdelay>
 80109c0:	2500      	movs	r5, #0
 80109c2:	9500      	str	r5, [sp, #0]
 80109c4:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80109c8:	462a      	mov	r2, r5
 80109ca:	2110      	movs	r1, #16
 80109cc:	4620      	mov	r0, r4
 80109ce:	f7fd fc4f 	bl	800e270 <dwt_modify16bitoffsetreg>
 80109d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d6:	895a      	ldrh	r2, [r3, #10]
 80109d8:	8919      	ldrh	r1, [r3, #8]
 80109da:	4620      	mov	r0, r4
 80109dc:	f7fd fbb2 	bl	800e144 <ull_configureframefilter>
 80109e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e4:	8a1b      	ldrh	r3, [r3, #16]
 80109e6:	2202      	movs	r2, #2
 80109e8:	210c      	movs	r1, #12
 80109ea:	4620      	mov	r0, r4
 80109ec:	f7fc fc11 	bl	800d212 <dwt_write16bitoffsetreg>
 80109f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f4:	8a5b      	ldrh	r3, [r3, #18]
 80109f6:	462a      	mov	r2, r5
 80109f8:	210c      	movs	r1, #12
 80109fa:	4620      	mov	r0, r4
 80109fc:	f7fc fc09 	bl	800d212 <dwt_write16bitoffsetreg>
 8010a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a02:	7a19      	ldrb	r1, [r3, #8]
 8010a04:	4620      	mov	r0, r4
 8010a06:	f7fd fc69 	bl	800e2dc <ull_setleds>
 8010a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a0c:	68d9      	ldr	r1, [r3, #12]
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f7fc feb2 	bl	800d778 <ull_setlnapamode>
 8010a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a16:	7e0b      	ldrb	r3, [r1, #24]
 8010a18:	694a      	ldr	r2, [r1, #20]
 8010a1a:	6909      	ldr	r1, [r1, #16]
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f7fd f9e9 	bl	800ddf4 <ull_setinterrupt>
 8010a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a24:	7f9a      	ldrb	r2, [r3, #30]
 8010a26:	8b99      	ldrh	r1, [r3, #28]
 8010a28:	4620      	mov	r0, r4
 8010a2a:	f7fc fcb7 	bl	800d39c <ull_configuresleep>
 8010a2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010a30:	7b93      	ldrb	r3, [r2, #14]
 8010a32:	2b2e      	cmp	r3, #46	; 0x2e
 8010a34:	d005      	beq.n	8010a42 <_init+0xe6>
 8010a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a3c:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8010a40:	d00a      	beq.n	8010a58 <_init+0xfc>
 8010a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a4c:	7393      	strb	r3, [r2, #14]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	492b      	ldr	r1, [pc, #172]	; (8010b00 <_init+0x1a4>)
 8010a52:	4620      	mov	r0, r4
 8010a54:	f7fc fb8b 	bl	800d16e <dwt_write8bitoffsetreg>
 8010a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a5a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f7fd fa68 	bl	800df34 <ull_configciadiag>
 8010a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a66:	6a19      	ldr	r1, [r3, #32]
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f7fc fea7 	bl	800d7bc <ull_configurestskey>
 8010a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a72:	4620      	mov	r0, r4
 8010a74:	f7fc fec6 	bl	800d804 <ull_configurestsiv>
 8010a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a7a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010a7e:	bba3      	cbnz	r3, 8010aea <_init+0x18e>
 8010a80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a82:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8010a86:	4620      	mov	r0, r4
 8010a88:	f7fc fbb0 	bl	800d1ec <ull_configeventcounters>
 8010a8c:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8010a90:	2d00      	cmp	r5, #0
 8010a92:	db27      	blt.n	8010ae4 <_init+0x188>
 8010a94:	2301      	movs	r3, #1
 8010a96:	fa03 f505 	lsl.w	r5, r3, r5
 8010a9a:	b2af      	uxth	r7, r5
 8010a9c:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	f7fd f988 	bl	800ddb8 <ull_setgpiomode>
 8010aa8:	f10d 030a 	add.w	r3, sp, #10
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	2302      	movs	r3, #2
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f7fb ff60 	bl	800c97c <dwt_readfromdevice>
 8010abc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010ac0:	ea23 0305 	bic.w	r3, r3, r5
 8010ac4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	490e      	ldr	r1, [pc, #56]	; (8010b04 <_init+0x1a8>)
 8010acc:	4620      	mov	r0, r4
 8010ace:	f7fc fba0 	bl	800d212 <dwt_write16bitoffsetreg>
 8010ad2:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8010ad6:	fab2 f282 	clz	r2, r2
 8010ada:	0952      	lsrs	r2, r2, #5
 8010adc:	4639      	mov	r1, r7
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f7fd fc7a 	bl	800e3d8 <ull_setgpiovalue>
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	b005      	add	sp, #20
 8010ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aea:	2301      	movs	r3, #1
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	23ff      	movs	r3, #255	; 0xff
 8010af0:	2200      	movs	r2, #0
 8010af2:	4905      	ldr	r1, [pc, #20]	; (8010b08 <_init+0x1ac>)
 8010af4:	4620      	mov	r0, r4
 8010af6:	f7fd fa09 	bl	800df0c <dwt_modify8bitoffsetreg>
 8010afa:	e7c1      	b.n	8010a80 <_init+0x124>
 8010afc:	00010004 	.word	0x00010004
 8010b00:	00090014 	.word	0x00090014
 8010b04:	00050008 	.word	0x00050008
 8010b08:	00020004 	.word	0x00020004

08010b0c <dwt_dbg_fn>:
 8010b0c:	2998      	cmp	r1, #152	; 0x98
 8010b0e:	4802      	ldr	r0, [pc, #8]	; (8010b18 <dwt_dbg_fn+0xc>)
 8010b10:	bf18      	it	ne
 8010b12:	2000      	movne	r0, #0
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	08020678 	.word	0x08020678

08010b1c <_deinit>:
 8010b1c:	4770      	bx	lr

08010b1e <dwt_xfer3xxx>:
 8010b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	4605      	mov	r5, r0
 8010b26:	460f      	mov	r7, r1
 8010b28:	461e      	mov	r6, r3
 8010b2a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010b2e:	1e59      	subs	r1, r3, #1
 8010b30:	b289      	uxth	r1, r1
 8010b32:	2901      	cmp	r1, #1
 8010b34:	d91c      	bls.n	8010b70 <dwt_xfer3xxx+0x52>
 8010b36:	19d0      	adds	r0, r2, r7
 8010b38:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010b3c:	443a      	add	r2, r7
 8010b3e:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8010b42:	0082      	lsls	r2, r0, #2
 8010b44:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8010b48:	ea43 0102 	orr.w	r1, r3, r2
 8010b4c:	0a09      	lsrs	r1, r1, #8
 8010b4e:	f88d 100c 	strb.w	r1, [sp, #12]
 8010b52:	b920      	cbnz	r0, 8010b5e <dwt_xfer3xxx+0x40>
 8010b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b58:	d018      	beq.n	8010b8c <dwt_xfer3xxx+0x6e>
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d037      	beq.n	8010bce <dwt_xfer3xxx+0xb0>
 8010b5e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8010b62:	f88d 100c 	strb.w	r1, [sp, #12]
 8010b66:	431a      	orrs	r2, r3
 8010b68:	f88d 200d 	strb.w	r2, [sp, #13]
 8010b6c:	2402      	movs	r4, #2
 8010b6e:	e005      	b.n	8010b7c <dwt_xfer3xxx+0x5e>
 8010b70:	007a      	lsls	r2, r7, #1
 8010b72:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8010b76:	f88d 200c 	strb.w	r2, [sp, #12]
 8010b7a:	2401      	movs	r4, #1
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	d006      	beq.n	8010b8e <dwt_xfer3xxx+0x70>
 8010b80:	d326      	bcc.n	8010bd0 <dwt_xfer3xxx+0xb2>
 8010b82:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010b86:	2b03      	cmp	r3, #3
 8010b88:	d901      	bls.n	8010b8e <dwt_xfer3xxx+0x70>
 8010b8a:	e7fe      	b.n	8010b8a <dwt_xfer3xxx+0x6c>
 8010b8c:	2401      	movs	r4, #1
 8010b8e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010b90:	7d1b      	ldrb	r3, [r3, #20]
 8010b92:	b94b      	cbnz	r3, 8010ba8 <dwt_xfer3xxx+0x8a>
 8010b94:	682b      	ldr	r3, [r5, #0]
 8010b96:	685d      	ldr	r5, [r3, #4]
 8010b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b9a:	4632      	mov	r2, r6
 8010b9c:	a903      	add	r1, sp, #12
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	47a8      	blx	r5
 8010ba2:	b004      	add	sp, #16
 8010ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba8:	2200      	movs	r2, #0
 8010baa:	4621      	mov	r1, r4
 8010bac:	a803      	add	r0, sp, #12
 8010bae:	f7fb fdbb 	bl	800c728 <dwt_generatecrc8>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010bb8:	f7fb fdb6 	bl	800c728 <dwt_generatecrc8>
 8010bbc:	682b      	ldr	r3, [r5, #0]
 8010bbe:	9000      	str	r0, [sp, #0]
 8010bc0:	689d      	ldr	r5, [r3, #8]
 8010bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	a903      	add	r1, sp, #12
 8010bc8:	4620      	mov	r0, r4
 8010bca:	47a8      	blx	r5
 8010bcc:	e7e9      	b.n	8010ba2 <dwt_xfer3xxx+0x84>
 8010bce:	2401      	movs	r4, #1
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	f8d3 8000 	ldr.w	r8, [r3]
 8010bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bd8:	4632      	mov	r2, r6
 8010bda:	a903      	add	r1, sp, #12
 8010bdc:	4620      	mov	r0, r4
 8010bde:	47c0      	blx	r8
 8010be0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010be2:	7d1b      	ldrb	r3, [r3, #20]
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d1dc      	bne.n	8010ba2 <dwt_xfer3xxx+0x84>
 8010be8:	2f18      	cmp	r7, #24
 8010bea:	d0da      	beq.n	8010ba2 <dwt_xfer3xxx+0x84>
 8010bec:	2200      	movs	r2, #0
 8010bee:	4621      	mov	r1, r4
 8010bf0:	a803      	add	r0, sp, #12
 8010bf2:	f7fb fd99 	bl	800c728 <dwt_generatecrc8>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	4631      	mov	r1, r6
 8010bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010bfc:	f7fb fd94 	bl	800c728 <dwt_generatecrc8>
 8010c00:	4604      	mov	r4, r0
 8010c02:	2200      	movs	r2, #0
 8010c04:	2118      	movs	r1, #24
 8010c06:	4628      	mov	r0, r5
 8010c08:	f000 f839 	bl	8010c7e <dwt_read8bitoffsetreg>
 8010c0c:	4284      	cmp	r4, r0
 8010c0e:	d0c8      	beq.n	8010ba2 <dwt_xfer3xxx+0x84>
 8010c10:	68eb      	ldr	r3, [r5, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d0c5      	beq.n	8010ba2 <dwt_xfer3xxx+0x84>
 8010c16:	4798      	blx	r3
 8010c18:	e7c3      	b.n	8010ba2 <dwt_xfer3xxx+0x84>

08010c1a <dwt_readfromdevice>:
 8010c1a:	b510      	push	{r4, lr}
 8010c1c:	b082      	sub	sp, #8
 8010c1e:	2400      	movs	r4, #0
 8010c20:	9401      	str	r4, [sp, #4]
 8010c22:	9c04      	ldr	r4, [sp, #16]
 8010c24:	9400      	str	r4, [sp, #0]
 8010c26:	f7ff ff7a 	bl	8010b1e <dwt_xfer3xxx>
 8010c2a:	b002      	add	sp, #8
 8010c2c:	bd10      	pop	{r4, pc}

08010c2e <dwt_read32bitoffsetreg>:
 8010c2e:	b500      	push	{lr}
 8010c30:	b085      	sub	sp, #20
 8010c32:	ab03      	add	r3, sp, #12
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	2304      	movs	r3, #4
 8010c38:	b292      	uxth	r2, r2
 8010c3a:	f7ff ffee 	bl	8010c1a <dwt_readfromdevice>
 8010c3e:	f10d 030f 	add.w	r3, sp, #15
 8010c42:	f10d 010b 	add.w	r1, sp, #11
 8010c46:	2000      	movs	r0, #0
 8010c48:	f813 2901 	ldrb.w	r2, [r3], #-1
 8010c4c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8010c50:	428b      	cmp	r3, r1
 8010c52:	d1f9      	bne.n	8010c48 <dwt_read32bitoffsetreg+0x1a>
 8010c54:	b005      	add	sp, #20
 8010c56:	f85d fb04 	ldr.w	pc, [sp], #4

08010c5a <dwt_read16bitoffsetreg>:
 8010c5a:	b500      	push	{lr}
 8010c5c:	b085      	sub	sp, #20
 8010c5e:	ab03      	add	r3, sp, #12
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	2302      	movs	r3, #2
 8010c64:	b292      	uxth	r2, r2
 8010c66:	f7ff ffd8 	bl	8010c1a <dwt_readfromdevice>
 8010c6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8010c6e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8010c72:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8010c76:	b280      	uxth	r0, r0
 8010c78:	b005      	add	sp, #20
 8010c7a:	f85d fb04 	ldr.w	pc, [sp], #4

08010c7e <dwt_read8bitoffsetreg>:
 8010c7e:	b500      	push	{lr}
 8010c80:	b085      	sub	sp, #20
 8010c82:	f10d 030f 	add.w	r3, sp, #15
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	2301      	movs	r3, #1
 8010c8a:	b292      	uxth	r2, r2
 8010c8c:	f7ff ffc5 	bl	8010c1a <dwt_readfromdevice>
 8010c90:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8010c94:	b005      	add	sp, #20
 8010c96:	f85d fb04 	ldr.w	pc, [sp], #4

08010c9a <ull_readdiagnostics>:
 8010c9a:	b530      	push	{r4, r5, lr}
 8010c9c:	b0bd      	sub	sp, #244	; 0xf4
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ca4:	7b9a      	ldrb	r2, [r3, #14]
 8010ca6:	2a01      	cmp	r2, #1
 8010ca8:	d01c      	beq.n	8010ce4 <ull_readdiagnostics+0x4a>
 8010caa:	2a03      	cmp	r2, #3
 8010cac:	f040 81e8 	bne.w	8011080 <ull_readdiagnostics+0x3e6>
 8010cb0:	7d9b      	ldrb	r3, [r3, #22]
 8010cb2:	f013 0f08 	tst.w	r3, #8
 8010cb6:	d10c      	bne.n	8010cd2 <ull_readdiagnostics+0x38>
 8010cb8:	f013 0f04 	tst.w	r3, #4
 8010cbc:	ab02      	add	r3, sp, #8
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	bf14      	ite	ne
 8010cc2:	2338      	movne	r3, #56	; 0x38
 8010cc4:	2320      	moveq	r3, #32
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010ccc:	f7ff ffa5 	bl	8010c1a <dwt_readfromdevice>
 8010cd0:	e019      	b.n	8010d06 <ull_readdiagnostics+0x6c>
 8010cd2:	ab02      	add	r3, sp, #8
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	23e8      	movs	r3, #232	; 0xe8
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010cde:	f7ff ff9c 	bl	8010c1a <dwt_readfromdevice>
 8010ce2:	e010      	b.n	8010d06 <ull_readdiagnostics+0x6c>
 8010ce4:	7d9b      	ldrb	r3, [r3, #22]
 8010ce6:	f013 0f08 	tst.w	r3, #8
 8010cea:	f040 81c0 	bne.w	801106e <ull_readdiagnostics+0x3d4>
 8010cee:	f013 0f04 	tst.w	r3, #4
 8010cf2:	ab02      	add	r3, sp, #8
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	bf14      	ite	ne
 8010cf8:	2338      	movne	r3, #56	; 0x38
 8010cfa:	2320      	moveq	r3, #32
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8010d02:	f7ff ff8a 	bl	8010c1a <dwt_readfromdevice>
 8010d06:	f10d 0217 	add.w	r2, sp, #23
 8010d0a:	f104 031a 	add.w	r3, r4, #26
 8010d0e:	f104 0020 	add.w	r0, r4, #32
 8010d12:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8010d16:	f803 1b01 	strb.w	r1, [r3], #1
 8010d1a:	4283      	cmp	r3, r0
 8010d1c:	d1f9      	bne.n	8010d12 <ull_readdiagnostics+0x78>
 8010d1e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8010d22:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010d26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d2e:	8463      	strh	r3, [r4, #34]	; 0x22
 8010d30:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010d34:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010d3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8010d44:	bf1c      	itt	ne
 8010d46:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8010d4a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8010d4e:	8423      	strh	r3, [r4, #32]
 8010d50:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8010d54:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d60:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8010d62:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010d64:	7d9b      	ldrb	r3, [r3, #22]
 8010d66:	f013 0f02 	tst.w	r3, #2
 8010d6a:	f040 817e 	bne.w	801106a <ull_readdiagnostics+0x3d0>
 8010d6e:	aa0a      	add	r2, sp, #40	; 0x28
 8010d70:	1e63      	subs	r3, r4, #1
 8010d72:	1d20      	adds	r0, r4, #4
 8010d74:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010d78:	f803 1f01 	strb.w	r1, [r3, #1]!
 8010d7c:	79d1      	ldrb	r1, [r2, #7]
 8010d7e:	7219      	strb	r1, [r3, #8]
 8010d80:	7bd1      	ldrb	r1, [r2, #15]
 8010d82:	7459      	strb	r1, [r3, #17]
 8010d84:	4283      	cmp	r3, r0
 8010d86:	d1f5      	bne.n	8010d74 <ull_readdiagnostics+0xda>
 8010d88:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8010d8c:	7163      	strb	r3, [r4, #5]
 8010d8e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8010d92:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8010d96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010d9a:	80e3      	strh	r3, [r4, #6]
 8010d9c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8010da0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8010da4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010da8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8010dac:	f8a4 300d 	strh.w	r3, [r4, #13]
 8010db0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8010db4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8010db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010dbc:	f8a4 300f 	strh.w	r3, [r4, #15]
 8010dc0:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8010dc4:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8010dc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010dcc:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8010dd0:	82e3      	strh	r3, [r4, #22]
 8010dd2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8010dd6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8010dda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010dde:	8323      	strh	r3, [r4, #24]
 8010de0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010de2:	7d9b      	ldrb	r3, [r3, #22]
 8010de4:	f013 0f04 	tst.w	r3, #4
 8010de8:	f040 813f 	bne.w	801106a <ull_readdiagnostics+0x3d0>
 8010dec:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8010df0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8010df4:	041b      	lsls	r3, r3, #16
 8010df6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010dfa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8010e04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e08:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8010e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8010e0e:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8010e12:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8010e16:	041b      	lsls	r3, r3, #16
 8010e18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010e1c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8010e20:	4313      	orrs	r3, r2
 8010e22:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8010e26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e30:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8010e34:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8010e38:	041b      	lsls	r3, r3, #16
 8010e3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010e3e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8010e42:	4313      	orrs	r3, r2
 8010e44:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8010e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e52:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8010e56:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8010e5a:	041b      	lsls	r3, r3, #16
 8010e5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010e60:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8010e64:	4313      	orrs	r3, r2
 8010e66:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8010e6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e6e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010e72:	6323      	str	r3, [r4, #48]	; 0x30
 8010e74:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8010e78:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8010e7c:	041b      	lsls	r3, r3, #16
 8010e7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010e82:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8010e86:	4313      	orrs	r3, r2
 8010e88:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8010e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010e90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010e94:	6363      	str	r3, [r4, #52]	; 0x34
 8010e96:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8010e9a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8010e9e:	041b      	lsls	r3, r3, #16
 8010ea0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010ea4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8010ea8:	4313      	orrs	r3, r2
 8010eaa:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8010eae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010eb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010eb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8010eb8:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8010ebc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010ec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ec4:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8010ec6:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8010eca:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8010ece:	041b      	lsls	r3, r3, #16
 8010ed0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010ed4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8010ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ee2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8010ee6:	6423      	str	r3, [r4, #64]	; 0x40
 8010ee8:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8010eec:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8010ef0:	041b      	lsls	r3, r3, #16
 8010ef2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010ef6:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8010efa:	4313      	orrs	r3, r2
 8010efc:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8010f00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f08:	6463      	str	r3, [r4, #68]	; 0x44
 8010f0a:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8010f0e:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8010f12:	041b      	lsls	r3, r3, #16
 8010f14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010f18:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8010f22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f26:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010f2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8010f2c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8010f30:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8010f34:	041b      	lsls	r3, r3, #16
 8010f36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010f3a:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8010f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010f4c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010f4e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8010f52:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8010f56:	041b      	lsls	r3, r3, #16
 8010f58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010f5c:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8010f60:	4313      	orrs	r3, r2
 8010f62:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8010f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010f6e:	6523      	str	r3, [r4, #80]	; 0x50
 8010f70:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8010f74:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8010f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010f80:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8010f84:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8010f88:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8010f8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f94:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8010f98:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8010f9c:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8010fa0:	041b      	lsls	r3, r3, #16
 8010fa2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010fa6:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8010faa:	4313      	orrs	r3, r2
 8010fac:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8010fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010fb4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8010fb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8010fba:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8010fbe:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8010fc2:	041b      	lsls	r3, r3, #16
 8010fc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010fc8:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8010fd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fda:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010fdc:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8010fe0:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8010fe4:	041b      	lsls	r3, r3, #16
 8010fe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010fea:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8010ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ff8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010ffc:	6623      	str	r3, [r4, #96]	; 0x60
 8010ffe:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8011002:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8011006:	041b      	lsls	r3, r3, #16
 8011008:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801100c:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8011010:	4313      	orrs	r3, r2
 8011012:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8011016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801101a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801101e:	6663      	str	r3, [r4, #100]	; 0x64
 8011020:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8011024:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8011028:	041b      	lsls	r3, r3, #16
 801102a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801102e:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8011032:	4313      	orrs	r3, r2
 8011034:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8011038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801103c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011040:	66a3      	str	r3, [r4, #104]	; 0x68
 8011042:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8011046:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801104a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801104e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011052:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8011056:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 801105a:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 801105e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011066:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801106a:	b03d      	add	sp, #244	; 0xf4
 801106c:	bd30      	pop	{r4, r5, pc}
 801106e:	ab02      	add	r3, sp, #8
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	23e8      	movs	r3, #232	; 0xe8
 8011074:	2200      	movs	r2, #0
 8011076:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 801107a:	f7ff fdce 	bl	8010c1a <dwt_readfromdevice>
 801107e:	e642      	b.n	8010d06 <ull_readdiagnostics+0x6c>
 8011080:	7d9b      	ldrb	r3, [r3, #22]
 8011082:	f013 0f01 	tst.w	r3, #1
 8011086:	f000 81b3 	beq.w	80113f0 <ull_readdiagnostics+0x756>
 801108a:	ab02      	add	r3, sp, #8
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	236c      	movs	r3, #108	; 0x6c
 8011090:	2200      	movs	r2, #0
 8011092:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8011096:	f7ff fdc0 	bl	8010c1a <dwt_readfromdevice>
 801109a:	ab1d      	add	r3, sp, #116	; 0x74
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	236c      	movs	r3, #108	; 0x6c
 80110a0:	2200      	movs	r2, #0
 80110a2:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80110a6:	4628      	mov	r0, r5
 80110a8:	f7ff fdb7 	bl	8010c1a <dwt_readfromdevice>
 80110ac:	aa02      	add	r2, sp, #8
 80110ae:	1e63      	subs	r3, r4, #1
 80110b0:	1d20      	adds	r0, r4, #4
 80110b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80110b6:	f803 1f01 	strb.w	r1, [r3, #1]!
 80110ba:	79d1      	ldrb	r1, [r2, #7]
 80110bc:	7219      	strb	r1, [r3, #8]
 80110be:	7bd1      	ldrb	r1, [r2, #15]
 80110c0:	7459      	strb	r1, [r3, #17]
 80110c2:	7dd1      	ldrb	r1, [r2, #23]
 80110c4:	7699      	strb	r1, [r3, #26]
 80110c6:	4283      	cmp	r3, r0
 80110c8:	d1f3      	bne.n	80110b2 <ull_readdiagnostics+0x418>
 80110ca:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80110ce:	77e3      	strb	r3, [r4, #31]
 80110d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80110d4:	7163      	strb	r3, [r4, #5]
 80110d6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80110da:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80110de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80110e2:	80e3      	strh	r3, [r4, #6]
 80110e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80110e8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80110ec:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80110f0:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 80110f4:	f8a4 200d 	strh.w	r2, [r4, #13]
 80110f8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80110fc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8011100:	f8a4 200f 	strh.w	r2, [r4, #15]
 8011104:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011108:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801110c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8011110:	82e3      	strh	r3, [r4, #22]
 8011112:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8011116:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801111a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801111e:	8323      	strh	r3, [r4, #24]
 8011120:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8011124:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8011128:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801112c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011130:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8011134:	bf1c      	itt	ne
 8011136:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 801113a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 801113e:	8423      	strh	r3, [r4, #32]
 8011140:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8011144:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801114c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011150:	8463      	strh	r3, [r4, #34]	; 0x22
 8011152:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8011156:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 801115a:	041b      	lsls	r3, r3, #16
 801115c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011160:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8011164:	4313      	orrs	r3, r2
 8011166:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801116a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801116e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8011172:	6263      	str	r3, [r4, #36]	; 0x24
 8011174:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8011176:	7d9b      	ldrb	r3, [r3, #22]
 8011178:	f013 0f01 	tst.w	r3, #1
 801117c:	f43f af75 	beq.w	801106a <ull_readdiagnostics+0x3d0>
 8011180:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8011184:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8011188:	041b      	lsls	r3, r3, #16
 801118a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801118e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8011192:	4313      	orrs	r3, r2
 8011194:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8011198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801119c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80111a2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 80111a6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80111aa:	041b      	lsls	r3, r3, #16
 80111ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80111b0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80111b4:	4313      	orrs	r3, r2
 80111b6:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80111ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80111be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111c4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80111c8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80111cc:	041b      	lsls	r3, r3, #16
 80111ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80111d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80111d6:	4313      	orrs	r3, r2
 80111d8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80111dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80111e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80111e4:	6323      	str	r3, [r4, #48]	; 0x30
 80111e6:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 80111ea:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80111ee:	041b      	lsls	r3, r3, #16
 80111f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80111f4:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80111f8:	4313      	orrs	r3, r2
 80111fa:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 80111fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011202:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011206:	6363      	str	r3, [r4, #52]	; 0x34
 8011208:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 801120c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8011210:	041b      	lsls	r3, r3, #16
 8011212:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011216:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 801121a:	4313      	orrs	r3, r2
 801121c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8011220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011224:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011228:	63a3      	str	r3, [r4, #56]	; 0x38
 801122a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 801122e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011232:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011236:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8011238:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 801123c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8011240:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011248:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801124a:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 801124e:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8011252:	041b      	lsls	r3, r3, #16
 8011254:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011258:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801125c:	4313      	orrs	r3, r2
 801125e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8011262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011266:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801126a:	6423      	str	r3, [r4, #64]	; 0x40
 801126c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 8011270:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 8011274:	041b      	lsls	r3, r3, #16
 8011276:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801127a:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 801127e:	4313      	orrs	r3, r2
 8011280:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8011284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801128c:	6463      	str	r3, [r4, #68]	; 0x44
 801128e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8011292:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8011296:	041b      	lsls	r3, r3, #16
 8011298:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801129c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80112a0:	4313      	orrs	r3, r2
 80112a2:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 80112a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80112aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80112b0:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 80112b4:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 80112b8:	041b      	lsls	r3, r3, #16
 80112ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80112be:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 80112c2:	4313      	orrs	r3, r2
 80112c4:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 80112c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80112cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80112d2:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 80112d6:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80112da:	041b      	lsls	r3, r3, #16
 80112dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80112e0:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 80112e4:	4313      	orrs	r3, r2
 80112e6:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 80112ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80112ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112f2:	6523      	str	r3, [r4, #80]	; 0x50
 80112f4:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80112f8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80112fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011300:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011304:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8011308:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 801130c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8011310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011318:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801131c:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8011320:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8011324:	041b      	lsls	r3, r3, #16
 8011326:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801132a:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 801132e:	4313      	orrs	r3, r2
 8011330:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8011334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011338:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801133c:	65a3      	str	r3, [r4, #88]	; 0x58
 801133e:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 8011342:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 8011346:	041b      	lsls	r3, r3, #16
 8011348:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801134c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8011350:	4313      	orrs	r3, r2
 8011352:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8011356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801135a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801135e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011360:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8011364:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8011368:	041b      	lsls	r3, r3, #16
 801136a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801136e:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8011372:	4313      	orrs	r3, r2
 8011374:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8011378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801137c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011380:	6623      	str	r3, [r4, #96]	; 0x60
 8011382:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8011386:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 801138a:	041b      	lsls	r3, r3, #16
 801138c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011390:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8011394:	4313      	orrs	r3, r2
 8011396:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 801139a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801139e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80113a2:	6663      	str	r3, [r4, #100]	; 0x64
 80113a4:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80113a8:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80113ac:	041b      	lsls	r3, r3, #16
 80113ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80113b2:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 80113b6:	4313      	orrs	r3, r2
 80113b8:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 80113bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80113c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80113c4:	66a3      	str	r3, [r4, #104]	; 0x68
 80113c6:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 80113ca:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80113ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80113d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80113d6:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 80113da:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 80113de:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80113e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80113e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80113ea:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80113ee:	e63c      	b.n	801106a <ull_readdiagnostics+0x3d0>
 80113f0:	ab02      	add	r3, sp, #8
 80113f2:	9300      	str	r3, [sp, #0]
 80113f4:	2328      	movs	r3, #40	; 0x28
 80113f6:	2200      	movs	r2, #0
 80113f8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80113fc:	f7ff fc0d 	bl	8010c1a <dwt_readfromdevice>
 8011400:	e654      	b.n	80110ac <ull_readdiagnostics+0x412>
	...

08011404 <ull_readrxtimestamp>:
 8011404:	b500      	push	{lr}
 8011406:	b083      	sub	sp, #12
 8011408:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801140a:	7b9b      	ldrb	r3, [r3, #14]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d00b      	beq.n	8011428 <ull_readrxtimestamp+0x24>
 8011410:	2b03      	cmp	r3, #3
 8011412:	d110      	bne.n	8011436 <ull_readrxtimestamp+0x32>
 8011414:	9100      	str	r1, [sp, #0]
 8011416:	2305      	movs	r3, #5
 8011418:	2204      	movs	r2, #4
 801141a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801141e:	f7ff fbfc 	bl	8010c1a <dwt_readfromdevice>
 8011422:	b003      	add	sp, #12
 8011424:	f85d fb04 	ldr.w	pc, [sp], #4
 8011428:	9100      	str	r1, [sp, #0]
 801142a:	2305      	movs	r3, #5
 801142c:	2200      	movs	r2, #0
 801142e:	4905      	ldr	r1, [pc, #20]	; (8011444 <ull_readrxtimestamp+0x40>)
 8011430:	f7ff fbf3 	bl	8010c1a <dwt_readfromdevice>
 8011434:	e7f5      	b.n	8011422 <ull_readrxtimestamp+0x1e>
 8011436:	9100      	str	r1, [sp, #0]
 8011438:	2305      	movs	r3, #5
 801143a:	2200      	movs	r2, #0
 801143c:	2160      	movs	r1, #96	; 0x60
 801143e:	f7ff fbec 	bl	8010c1a <dwt_readfromdevice>
 8011442:	e7ee      	b.n	8011422 <ull_readrxtimestamp+0x1e>
 8011444:	00180004 	.word	0x00180004

08011448 <dwt_writetodevice>:
 8011448:	b510      	push	{r4, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8011450:	9401      	str	r4, [sp, #4]
 8011452:	9c04      	ldr	r4, [sp, #16]
 8011454:	9400      	str	r4, [sp, #0]
 8011456:	f7ff fb62 	bl	8010b1e <dwt_xfer3xxx>
 801145a:	b002      	add	sp, #8
 801145c:	bd10      	pop	{r4, pc}

0801145e <dwt_write16bitoffsetreg>:
 801145e:	b500      	push	{lr}
 8011460:	b085      	sub	sp, #20
 8011462:	f88d 300c 	strb.w	r3, [sp, #12]
 8011466:	0a1b      	lsrs	r3, r3, #8
 8011468:	f88d 300d 	strb.w	r3, [sp, #13]
 801146c:	ab03      	add	r3, sp, #12
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	2302      	movs	r3, #2
 8011472:	b292      	uxth	r2, r2
 8011474:	f7ff ffe8 	bl	8011448 <dwt_writetodevice>
 8011478:	b005      	add	sp, #20
 801147a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011480 <ull_force_clocks>:
 8011480:	b508      	push	{r3, lr}
 8011482:	2901      	cmp	r1, #1
 8011484:	d002      	beq.n	801148c <ull_force_clocks+0xc>
 8011486:	2905      	cmp	r1, #5
 8011488:	d007      	beq.n	801149a <ull_force_clocks+0x1a>
 801148a:	bd08      	pop	{r3, pc}
 801148c:	f641 0322 	movw	r3, #6178	; 0x1822
 8011490:	2200      	movs	r2, #0
 8011492:	4905      	ldr	r1, [pc, #20]	; (80114a8 <ull_force_clocks+0x28>)
 8011494:	f7ff ffe3 	bl	801145e <dwt_write16bitoffsetreg>
 8011498:	e7f7      	b.n	801148a <ull_force_clocks+0xa>
 801149a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801149e:	2200      	movs	r2, #0
 80114a0:	4901      	ldr	r1, [pc, #4]	; (80114a8 <ull_force_clocks+0x28>)
 80114a2:	f7ff ffdc 	bl	801145e <dwt_write16bitoffsetreg>
 80114a6:	e7f0      	b.n	801148a <ull_force_clocks+0xa>
 80114a8:	00110004 	.word	0x00110004

080114ac <__dwt_otp_write_wdata_id_reg>:
 80114ac:	b538      	push	{r3, r4, r5, lr}
 80114ae:	4605      	mov	r5, r0
 80114b0:	460c      	mov	r4, r1
 80114b2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	2200      	movs	r2, #0
 80114ba:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80114be:	f7ff ffce 	bl	801145e <dwt_write16bitoffsetreg>
 80114c2:	b2a3      	uxth	r3, r4
 80114c4:	2200      	movs	r2, #0
 80114c6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80114ca:	4628      	mov	r0, r5
 80114cc:	f7ff ffc7 	bl	801145e <dwt_write16bitoffsetreg>
 80114d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080114d4 <_dwt_otpread>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	460e      	mov	r6, r1
 80114da:	4d0c      	ldr	r5, [pc, #48]	; (801150c <_dwt_otpread+0x38>)
 80114dc:	2301      	movs	r3, #1
 80114de:	2200      	movs	r2, #0
 80114e0:	4629      	mov	r1, r5
 80114e2:	f7ff ffbc 	bl	801145e <dwt_write16bitoffsetreg>
 80114e6:	4633      	mov	r3, r6
 80114e8:	2200      	movs	r2, #0
 80114ea:	4909      	ldr	r1, [pc, #36]	; (8011510 <_dwt_otpread+0x3c>)
 80114ec:	4620      	mov	r0, r4
 80114ee:	f7ff ffb6 	bl	801145e <dwt_write16bitoffsetreg>
 80114f2:	2302      	movs	r3, #2
 80114f4:	2200      	movs	r2, #0
 80114f6:	4629      	mov	r1, r5
 80114f8:	4620      	mov	r0, r4
 80114fa:	f7ff ffb0 	bl	801145e <dwt_write16bitoffsetreg>
 80114fe:	2200      	movs	r2, #0
 8011500:	4904      	ldr	r1, [pc, #16]	; (8011514 <_dwt_otpread+0x40>)
 8011502:	4620      	mov	r0, r4
 8011504:	f7ff fb93 	bl	8010c2e <dwt_read32bitoffsetreg>
 8011508:	bd70      	pop	{r4, r5, r6, pc}
 801150a:	bf00      	nop
 801150c:	000b0008 	.word	0x000b0008
 8011510:	000b0004 	.word	0x000b0004
 8011514:	000b0010 	.word	0x000b0010

08011518 <dwt_write32bitoffsetreg>:
 8011518:	b510      	push	{r4, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	f88d 300c 	strb.w	r3, [sp, #12]
 8011520:	0a1c      	lsrs	r4, r3, #8
 8011522:	f88d 400d 	strb.w	r4, [sp, #13]
 8011526:	0c1c      	lsrs	r4, r3, #16
 8011528:	f88d 400e 	strb.w	r4, [sp, #14]
 801152c:	0e1b      	lsrs	r3, r3, #24
 801152e:	f88d 300f 	strb.w	r3, [sp, #15]
 8011532:	ab03      	add	r3, sp, #12
 8011534:	9300      	str	r3, [sp, #0]
 8011536:	2304      	movs	r3, #4
 8011538:	b292      	uxth	r2, r2
 801153a:	f7ff ff85 	bl	8011448 <dwt_writetodevice>
 801153e:	b004      	add	sp, #16
 8011540:	bd10      	pop	{r4, pc}

08011542 <_dwt_adjust_delaytime>:
 8011542:	b538      	push	{r3, r4, r5, lr}
 8011544:	4604      	mov	r4, r0
 8011546:	b989      	cbnz	r1, 801156c <_dwt_adjust_delaytime+0x2a>
 8011548:	2200      	movs	r2, #0
 801154a:	2128      	movs	r1, #40	; 0x28
 801154c:	f7ff fb6f 	bl	8010c2e <dwt_read32bitoffsetreg>
 8011550:	4605      	mov	r5, r0
 8011552:	2201      	movs	r2, #1
 8011554:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8011558:	4620      	mov	r0, r4
 801155a:	f7ff fb90 	bl	8010c7e <dwt_read8bitoffsetreg>
 801155e:	1a2b      	subs	r3, r5, r0
 8011560:	2200      	movs	r2, #0
 8011562:	2128      	movs	r1, #40	; 0x28
 8011564:	4620      	mov	r0, r4
 8011566:	f7ff ffd7 	bl	8011518 <dwt_write32bitoffsetreg>
 801156a:	bd38      	pop	{r3, r4, r5, pc}
 801156c:	2200      	movs	r2, #0
 801156e:	2128      	movs	r1, #40	; 0x28
 8011570:	f7ff fb5d 	bl	8010c2e <dwt_read32bitoffsetreg>
 8011574:	4605      	mov	r5, r0
 8011576:	2201      	movs	r2, #1
 8011578:	217c      	movs	r1, #124	; 0x7c
 801157a:	4620      	mov	r0, r4
 801157c:	f7ff fb7f 	bl	8010c7e <dwt_read8bitoffsetreg>
 8011580:	1a2b      	subs	r3, r5, r0
 8011582:	2200      	movs	r2, #0
 8011584:	2128      	movs	r1, #40	; 0x28
 8011586:	4620      	mov	r0, r4
 8011588:	f7ff ffc6 	bl	8011518 <dwt_write32bitoffsetreg>
 801158c:	e7ed      	b.n	801156a <_dwt_adjust_delaytime+0x28>

0801158e <ull_setrxaftertxdelay>:
 801158e:	b538      	push	{r3, r4, r5, lr}
 8011590:	4605      	mov	r5, r0
 8011592:	460c      	mov	r4, r1
 8011594:	2200      	movs	r2, #0
 8011596:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801159a:	f7ff fb48 	bl	8010c2e <dwt_read32bitoffsetreg>
 801159e:	0d00      	lsrs	r0, r0, #20
 80115a0:	0500      	lsls	r0, r0, #20
 80115a2:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80115a6:	4303      	orrs	r3, r0
 80115a8:	2200      	movs	r2, #0
 80115aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80115ae:	4628      	mov	r0, r5
 80115b0:	f7ff ffb2 	bl	8011518 <dwt_write32bitoffsetreg>
 80115b4:	bd38      	pop	{r3, r4, r5, pc}

080115b6 <ull_setlnapamode>:
 80115b6:	b538      	push	{r3, r4, r5, lr}
 80115b8:	4605      	mov	r5, r0
 80115ba:	460c      	mov	r4, r1
 80115bc:	2200      	movs	r2, #0
 80115be:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80115c2:	f7ff fb34 	bl	8010c2e <dwt_read32bitoffsetreg>
 80115c6:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 80115ca:	f014 0f01 	tst.w	r4, #1
 80115ce:	bf18      	it	ne
 80115d0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 80115d4:	f014 0f02 	tst.w	r4, #2
 80115d8:	bf18      	it	ne
 80115da:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 80115de:	f014 0f04 	tst.w	r4, #4
 80115e2:	bf18      	it	ne
 80115e4:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 80115e8:	2200      	movs	r2, #0
 80115ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80115ee:	4628      	mov	r0, r5
 80115f0:	f7ff ff92 	bl	8011518 <dwt_write32bitoffsetreg>
 80115f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080115f8 <ull_configurestskey>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4605      	mov	r5, r0
 80115fc:	460c      	mov	r4, r1
 80115fe:	680b      	ldr	r3, [r1, #0]
 8011600:	2200      	movs	r2, #0
 8011602:	490b      	ldr	r1, [pc, #44]	; (8011630 <ull_configurestskey+0x38>)
 8011604:	f7ff ff88 	bl	8011518 <dwt_write32bitoffsetreg>
 8011608:	6863      	ldr	r3, [r4, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	4909      	ldr	r1, [pc, #36]	; (8011634 <ull_configurestskey+0x3c>)
 801160e:	4628      	mov	r0, r5
 8011610:	f7ff ff82 	bl	8011518 <dwt_write32bitoffsetreg>
 8011614:	68a3      	ldr	r3, [r4, #8]
 8011616:	2200      	movs	r2, #0
 8011618:	4907      	ldr	r1, [pc, #28]	; (8011638 <ull_configurestskey+0x40>)
 801161a:	4628      	mov	r0, r5
 801161c:	f7ff ff7c 	bl	8011518 <dwt_write32bitoffsetreg>
 8011620:	68e3      	ldr	r3, [r4, #12]
 8011622:	2200      	movs	r2, #0
 8011624:	4905      	ldr	r1, [pc, #20]	; (801163c <ull_configurestskey+0x44>)
 8011626:	4628      	mov	r0, r5
 8011628:	f7ff ff76 	bl	8011518 <dwt_write32bitoffsetreg>
 801162c:	bd38      	pop	{r3, r4, r5, pc}
 801162e:	bf00      	nop
 8011630:	0002000c 	.word	0x0002000c
 8011634:	00020010 	.word	0x00020010
 8011638:	00020014 	.word	0x00020014
 801163c:	00020018 	.word	0x00020018

08011640 <ull_configurestsiv>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4605      	mov	r5, r0
 8011644:	460c      	mov	r4, r1
 8011646:	680b      	ldr	r3, [r1, #0]
 8011648:	2200      	movs	r2, #0
 801164a:	490b      	ldr	r1, [pc, #44]	; (8011678 <ull_configurestsiv+0x38>)
 801164c:	f7ff ff64 	bl	8011518 <dwt_write32bitoffsetreg>
 8011650:	6863      	ldr	r3, [r4, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	4909      	ldr	r1, [pc, #36]	; (801167c <ull_configurestsiv+0x3c>)
 8011656:	4628      	mov	r0, r5
 8011658:	f7ff ff5e 	bl	8011518 <dwt_write32bitoffsetreg>
 801165c:	68a3      	ldr	r3, [r4, #8]
 801165e:	2200      	movs	r2, #0
 8011660:	4907      	ldr	r1, [pc, #28]	; (8011680 <ull_configurestsiv+0x40>)
 8011662:	4628      	mov	r0, r5
 8011664:	f7ff ff58 	bl	8011518 <dwt_write32bitoffsetreg>
 8011668:	68e3      	ldr	r3, [r4, #12]
 801166a:	2200      	movs	r2, #0
 801166c:	4905      	ldr	r1, [pc, #20]	; (8011684 <ull_configurestsiv+0x44>)
 801166e:	4628      	mov	r0, r5
 8011670:	f7ff ff52 	bl	8011518 <dwt_write32bitoffsetreg>
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	0002001c 	.word	0x0002001c
 801167c:	00020020 	.word	0x00020020
 8011680:	00020024 	.word	0x00020024
 8011684:	00020028 	.word	0x00020028

08011688 <ull_configmrxlut>:
 8011688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801168c:	4604      	mov	r4, r0
 801168e:	2905      	cmp	r1, #5
 8011690:	d03a      	beq.n	8011708 <ull_configmrxlut+0x80>
 8011692:	4d23      	ldr	r5, [pc, #140]	; (8011720 <ull_configmrxlut+0x98>)
 8011694:	462e      	mov	r6, r5
 8011696:	4f23      	ldr	r7, [pc, #140]	; (8011724 <ull_configmrxlut+0x9c>)
 8011698:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8011760 <ull_configmrxlut+0xd8>
 801169c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8011764 <ull_configmrxlut+0xdc>
 80116a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011768 <ull_configmrxlut+0xe0>
 80116a4:	4b20      	ldr	r3, [pc, #128]	; (8011728 <ull_configmrxlut+0xa0>)
 80116a6:	2200      	movs	r2, #0
 80116a8:	4920      	ldr	r1, [pc, #128]	; (801172c <ull_configmrxlut+0xa4>)
 80116aa:	4620      	mov	r0, r4
 80116ac:	f7ff ff34 	bl	8011518 <dwt_write32bitoffsetreg>
 80116b0:	4653      	mov	r3, sl
 80116b2:	2200      	movs	r2, #0
 80116b4:	491e      	ldr	r1, [pc, #120]	; (8011730 <ull_configmrxlut+0xa8>)
 80116b6:	4620      	mov	r0, r4
 80116b8:	f7ff ff2e 	bl	8011518 <dwt_write32bitoffsetreg>
 80116bc:	464b      	mov	r3, r9
 80116be:	2200      	movs	r2, #0
 80116c0:	491c      	ldr	r1, [pc, #112]	; (8011734 <ull_configmrxlut+0xac>)
 80116c2:	4620      	mov	r0, r4
 80116c4:	f7ff ff28 	bl	8011518 <dwt_write32bitoffsetreg>
 80116c8:	4643      	mov	r3, r8
 80116ca:	2200      	movs	r2, #0
 80116cc:	491a      	ldr	r1, [pc, #104]	; (8011738 <ull_configmrxlut+0xb0>)
 80116ce:	4620      	mov	r0, r4
 80116d0:	f7ff ff22 	bl	8011518 <dwt_write32bitoffsetreg>
 80116d4:	463b      	mov	r3, r7
 80116d6:	2200      	movs	r2, #0
 80116d8:	4918      	ldr	r1, [pc, #96]	; (801173c <ull_configmrxlut+0xb4>)
 80116da:	4620      	mov	r0, r4
 80116dc:	f7ff ff1c 	bl	8011518 <dwt_write32bitoffsetreg>
 80116e0:	4633      	mov	r3, r6
 80116e2:	2200      	movs	r2, #0
 80116e4:	4916      	ldr	r1, [pc, #88]	; (8011740 <ull_configmrxlut+0xb8>)
 80116e6:	4620      	mov	r0, r4
 80116e8:	f7ff ff16 	bl	8011518 <dwt_write32bitoffsetreg>
 80116ec:	462b      	mov	r3, r5
 80116ee:	2200      	movs	r2, #0
 80116f0:	4914      	ldr	r1, [pc, #80]	; (8011744 <ull_configmrxlut+0xbc>)
 80116f2:	4620      	mov	r0, r4
 80116f4:	f7ff ff10 	bl	8011518 <dwt_write32bitoffsetreg>
 80116f8:	4b13      	ldr	r3, [pc, #76]	; (8011748 <ull_configmrxlut+0xc0>)
 80116fa:	2200      	movs	r2, #0
 80116fc:	4913      	ldr	r1, [pc, #76]	; (801174c <ull_configmrxlut+0xc4>)
 80116fe:	4620      	mov	r0, r4
 8011700:	f7ff ff0a 	bl	8011518 <dwt_write32bitoffsetreg>
 8011704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011708:	4d11      	ldr	r5, [pc, #68]	; (8011750 <ull_configmrxlut+0xc8>)
 801170a:	4e12      	ldr	r6, [pc, #72]	; (8011754 <ull_configmrxlut+0xcc>)
 801170c:	4f12      	ldr	r7, [pc, #72]	; (8011758 <ull_configmrxlut+0xd0>)
 801170e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801176c <ull_configmrxlut+0xe4>
 8011712:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8011770 <ull_configmrxlut+0xe8>
 8011716:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8011774 <ull_configmrxlut+0xec>
 801171a:	4b10      	ldr	r3, [pc, #64]	; (801175c <ull_configmrxlut+0xd4>)
 801171c:	e7c3      	b.n	80116a6 <ull_configmrxlut+0x1e>
 801171e:	bf00      	nop
 8011720:	0002afb5 	.word	0x0002afb5
 8011724:	0002af7d 	.word	0x0002af7d
 8011728:	0002a8fe 	.word	0x0002a8fe
 801172c:	00030038 	.word	0x00030038
 8011730:	0003003c 	.word	0x0003003c
 8011734:	00030040 	.word	0x00030040
 8011738:	00030044 	.word	0x00030044
 801173c:	00030048 	.word	0x00030048
 8011740:	0003004c 	.word	0x0003004c
 8011744:	00030050 	.word	0x00030050
 8011748:	10000240 	.word	0x10000240
 801174c:	0003001c 	.word	0x0003001c
 8011750:	0001cff5 	.word	0x0001cff5
 8011754:	0001cfb5 	.word	0x0001cfb5
 8011758:	0001cf36 	.word	0x0001cf36
 801175c:	0001c0fd 	.word	0x0001c0fd
 8011760:	0002af3e 	.word	0x0002af3e
 8011764:	0002a5fe 	.word	0x0002a5fe
 8011768:	0002ac36 	.word	0x0002ac36
 801176c:	0001c77e 	.word	0x0001c77e
 8011770:	0001c6be 	.word	0x0001c6be
 8011774:	0001c43e 	.word	0x0001c43e

08011778 <ull_disable_rftx_blocks>:
 8011778:	b508      	push	{r3, lr}
 801177a:	2300      	movs	r3, #0
 801177c:	461a      	mov	r2, r3
 801177e:	4902      	ldr	r1, [pc, #8]	; (8011788 <ull_disable_rftx_blocks+0x10>)
 8011780:	f7ff feca 	bl	8011518 <dwt_write32bitoffsetreg>
 8011784:	bd08      	pop	{r3, pc}
 8011786:	bf00      	nop
 8011788:	00070004 	.word	0x00070004

0801178c <ull_disable_rf_tx>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	4604      	mov	r4, r0
 8011790:	460d      	mov	r5, r1
 8011792:	2300      	movs	r3, #0
 8011794:	461a      	mov	r2, r3
 8011796:	490a      	ldr	r1, [pc, #40]	; (80117c0 <ull_disable_rf_tx+0x34>)
 8011798:	f7ff febe 	bl	8011518 <dwt_write32bitoffsetreg>
 801179c:	2300      	movs	r3, #0
 801179e:	461a      	mov	r2, r3
 80117a0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80117a4:	4620      	mov	r0, r4
 80117a6:	f7ff feb7 	bl	8011518 <dwt_write32bitoffsetreg>
 80117aa:	b905      	cbnz	r5, 80117ae <ull_disable_rf_tx+0x22>
 80117ac:	bd38      	pop	{r3, r4, r5, pc}
 80117ae:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80117b2:	2200      	movs	r2, #0
 80117b4:	4903      	ldr	r1, [pc, #12]	; (80117c4 <ull_disable_rf_tx+0x38>)
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7ff feae 	bl	8011518 <dwt_write32bitoffsetreg>
 80117bc:	e7f6      	b.n	80117ac <ull_disable_rf_tx+0x20>
 80117be:	bf00      	nop
 80117c0:	00070048 	.word	0x00070048
 80117c4:	00070014 	.word	0x00070014

080117c8 <ull_readrxdata>:
 80117c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ca:	b083      	sub	sp, #12
 80117cc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80117ce:	7ba4      	ldrb	r4, [r4, #14]
 80117d0:	2c03      	cmp	r4, #3
 80117d2:	bf0c      	ite	eq
 80117d4:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 80117d8:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 80117dc:	189c      	adds	r4, r3, r2
 80117de:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80117e2:	da19      	bge.n	8011818 <ull_readrxdata+0x50>
 80117e4:	461d      	mov	r5, r3
 80117e6:	4616      	mov	r6, r2
 80117e8:	460f      	mov	r7, r1
 80117ea:	4604      	mov	r4, r0
 80117ec:	2b7f      	cmp	r3, #127	; 0x7f
 80117ee:	d915      	bls.n	801181c <ull_readrxdata+0x54>
 80117f0:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80117f4:	2200      	movs	r2, #0
 80117f6:	490d      	ldr	r1, [pc, #52]	; (801182c <ull_readrxdata+0x64>)
 80117f8:	f7ff fe8e 	bl	8011518 <dwt_write32bitoffsetreg>
 80117fc:	462b      	mov	r3, r5
 80117fe:	2200      	movs	r2, #0
 8011800:	490b      	ldr	r1, [pc, #44]	; (8011830 <ull_readrxdata+0x68>)
 8011802:	4620      	mov	r0, r4
 8011804:	f7ff fe88 	bl	8011518 <dwt_write32bitoffsetreg>
 8011808:	9700      	str	r7, [sp, #0]
 801180a:	4633      	mov	r3, r6
 801180c:	2200      	movs	r2, #0
 801180e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8011812:	4620      	mov	r0, r4
 8011814:	f7ff fa01 	bl	8010c1a <dwt_readfromdevice>
 8011818:	b003      	add	sp, #12
 801181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801181c:	9100      	str	r1, [sp, #0]
 801181e:	4613      	mov	r3, r2
 8011820:	462a      	mov	r2, r5
 8011822:	4661      	mov	r1, ip
 8011824:	f7ff f9f9 	bl	8010c1a <dwt_readfromdevice>
 8011828:	e7f6      	b.n	8011818 <ull_readrxdata+0x50>
 801182a:	bf00      	nop
 801182c:	001f0004 	.word	0x001f0004
 8011830:	001f0008 	.word	0x001f0008

08011834 <dwt_write8bitoffsetreg>:
 8011834:	b510      	push	{r4, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	ac04      	add	r4, sp, #16
 801183a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 801183e:	9400      	str	r4, [sp, #0]
 8011840:	2301      	movs	r3, #1
 8011842:	b292      	uxth	r2, r2
 8011844:	f7ff fe00 	bl	8011448 <dwt_writetodevice>
 8011848:	b004      	add	sp, #16
 801184a:	bd10      	pop	{r4, pc}

0801184c <ull_getframelength>:
 801184c:	b510      	push	{r4, lr}
 801184e:	4604      	mov	r4, r0
 8011850:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011852:	7b9b      	ldrb	r3, [r3, #14]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d013      	beq.n	8011880 <ull_getframelength+0x34>
 8011858:	2b03      	cmp	r3, #3
 801185a:	d11d      	bne.n	8011898 <ull_getframelength+0x4c>
 801185c:	23f0      	movs	r3, #240	; 0xf0
 801185e:	2200      	movs	r2, #0
 8011860:	4912      	ldr	r1, [pc, #72]	; (80118ac <ull_getframelength+0x60>)
 8011862:	f7ff ffe7 	bl	8011834 <dwt_write8bitoffsetreg>
 8011866:	2200      	movs	r2, #0
 8011868:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801186c:	4620      	mov	r0, r4
 801186e:	f7ff f9f4 	bl	8010c5a <dwt_read16bitoffsetreg>
 8011872:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011874:	7ada      	ldrb	r2, [r3, #11]
 8011876:	b1a2      	cbz	r2, 80118a2 <ull_getframelength+0x56>
 8011878:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801187c:	83d8      	strh	r0, [r3, #30]
 801187e:	bd10      	pop	{r4, pc}
 8011880:	230f      	movs	r3, #15
 8011882:	2200      	movs	r2, #0
 8011884:	4909      	ldr	r1, [pc, #36]	; (80118ac <ull_getframelength+0x60>)
 8011886:	f7ff ffd5 	bl	8011834 <dwt_write8bitoffsetreg>
 801188a:	2200      	movs	r2, #0
 801188c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8011890:	4620      	mov	r0, r4
 8011892:	f7ff f9e2 	bl	8010c5a <dwt_read16bitoffsetreg>
 8011896:	e7ec      	b.n	8011872 <ull_getframelength+0x26>
 8011898:	2200      	movs	r2, #0
 801189a:	214c      	movs	r1, #76	; 0x4c
 801189c:	f7ff f9dd 	bl	8010c5a <dwt_read16bitoffsetreg>
 80118a0:	e7e7      	b.n	8011872 <ull_getframelength+0x26>
 80118a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80118a6:	83d8      	strh	r0, [r3, #30]
 80118a8:	e7e9      	b.n	801187e <ull_getframelength+0x32>
 80118aa:	bf00      	nop
 80118ac:	00010018 	.word	0x00010018

080118b0 <_dwt_clear_db_events>:
 80118b0:	b510      	push	{r4, lr}
 80118b2:	4604      	mov	r4, r0
 80118b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80118b6:	7b9b      	ldrb	r3, [r3, #14]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d004      	beq.n	80118c6 <_dwt_clear_db_events+0x16>
 80118bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80118be:	7b9b      	ldrb	r3, [r3, #14]
 80118c0:	2b03      	cmp	r3, #3
 80118c2:	d006      	beq.n	80118d2 <_dwt_clear_db_events+0x22>
 80118c4:	bd10      	pop	{r4, pc}
 80118c6:	230f      	movs	r3, #15
 80118c8:	2200      	movs	r2, #0
 80118ca:	4905      	ldr	r1, [pc, #20]	; (80118e0 <_dwt_clear_db_events+0x30>)
 80118cc:	f7ff ffb2 	bl	8011834 <dwt_write8bitoffsetreg>
 80118d0:	e7f4      	b.n	80118bc <_dwt_clear_db_events+0xc>
 80118d2:	23f0      	movs	r3, #240	; 0xf0
 80118d4:	2200      	movs	r2, #0
 80118d6:	4902      	ldr	r1, [pc, #8]	; (80118e0 <_dwt_clear_db_events+0x30>)
 80118d8:	4620      	mov	r0, r4
 80118da:	f7ff ffab 	bl	8011834 <dwt_write8bitoffsetreg>
 80118de:	e7f1      	b.n	80118c4 <_dwt_clear_db_events+0x14>
 80118e0:	00010018 	.word	0x00010018

080118e4 <ull_clearaonconfig>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	4604      	mov	r4, r0
 80118e8:	2300      	movs	r3, #0
 80118ea:	461a      	mov	r2, r3
 80118ec:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80118f0:	f7ff fdb5 	bl	801145e <dwt_write16bitoffsetreg>
 80118f4:	2300      	movs	r3, #0
 80118f6:	461a      	mov	r2, r3
 80118f8:	4908      	ldr	r1, [pc, #32]	; (801191c <ull_clearaonconfig+0x38>)
 80118fa:	4620      	mov	r0, r4
 80118fc:	f7ff ff9a 	bl	8011834 <dwt_write8bitoffsetreg>
 8011900:	4d07      	ldr	r5, [pc, #28]	; (8011920 <ull_clearaonconfig+0x3c>)
 8011902:	2300      	movs	r3, #0
 8011904:	461a      	mov	r2, r3
 8011906:	4629      	mov	r1, r5
 8011908:	4620      	mov	r0, r4
 801190a:	f7ff ff93 	bl	8011834 <dwt_write8bitoffsetreg>
 801190e:	2302      	movs	r3, #2
 8011910:	2200      	movs	r2, #0
 8011912:	4629      	mov	r1, r5
 8011914:	4620      	mov	r0, r4
 8011916:	f7ff ff8d 	bl	8011834 <dwt_write8bitoffsetreg>
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	000a0014 	.word	0x000a0014
 8011920:	000a0004 	.word	0x000a0004

08011924 <ull_configeventcounters>:
 8011924:	b538      	push	{r3, r4, r5, lr}
 8011926:	4605      	mov	r5, r0
 8011928:	460c      	mov	r4, r1
 801192a:	2302      	movs	r3, #2
 801192c:	2200      	movs	r2, #0
 801192e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8011932:	f7ff ff7f 	bl	8011834 <dwt_write8bitoffsetreg>
 8011936:	b904      	cbnz	r4, 801193a <ull_configeventcounters+0x16>
 8011938:	bd38      	pop	{r3, r4, r5, pc}
 801193a:	2301      	movs	r3, #1
 801193c:	2200      	movs	r2, #0
 801193e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8011942:	4628      	mov	r0, r5
 8011944:	f7ff ff76 	bl	8011834 <dwt_write8bitoffsetreg>
 8011948:	e7f6      	b.n	8011938 <ull_configeventcounters+0x14>
	...

0801194c <ull_aon_read>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	4604      	mov	r4, r0
 8011950:	460b      	mov	r3, r1
 8011952:	2200      	movs	r2, #0
 8011954:	490a      	ldr	r1, [pc, #40]	; (8011980 <ull_aon_read+0x34>)
 8011956:	f7ff fd82 	bl	801145e <dwt_write16bitoffsetreg>
 801195a:	4d0a      	ldr	r5, [pc, #40]	; (8011984 <ull_aon_read+0x38>)
 801195c:	2388      	movs	r3, #136	; 0x88
 801195e:	2200      	movs	r2, #0
 8011960:	4629      	mov	r1, r5
 8011962:	4620      	mov	r0, r4
 8011964:	f7ff ff66 	bl	8011834 <dwt_write8bitoffsetreg>
 8011968:	2300      	movs	r3, #0
 801196a:	461a      	mov	r2, r3
 801196c:	4629      	mov	r1, r5
 801196e:	4620      	mov	r0, r4
 8011970:	f7ff ff60 	bl	8011834 <dwt_write8bitoffsetreg>
 8011974:	2200      	movs	r2, #0
 8011976:	4904      	ldr	r1, [pc, #16]	; (8011988 <ull_aon_read+0x3c>)
 8011978:	4620      	mov	r0, r4
 801197a:	f7ff f980 	bl	8010c7e <dwt_read8bitoffsetreg>
 801197e:	bd38      	pop	{r3, r4, r5, pc}
 8011980:	000a000c 	.word	0x000a000c
 8011984:	000a0004 	.word	0x000a0004
 8011988:	000a0008 	.word	0x000a0008

0801198c <ull_aon_write>:
 801198c:	b570      	push	{r4, r5, r6, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	460b      	mov	r3, r1
 8011992:	4615      	mov	r5, r2
 8011994:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011998:	bf34      	ite	cc
 801199a:	2600      	movcc	r6, #0
 801199c:	2620      	movcs	r6, #32
 801199e:	2200      	movs	r2, #0
 80119a0:	490b      	ldr	r1, [pc, #44]	; (80119d0 <ull_aon_write+0x44>)
 80119a2:	f7ff fd5c 	bl	801145e <dwt_write16bitoffsetreg>
 80119a6:	462b      	mov	r3, r5
 80119a8:	2200      	movs	r2, #0
 80119aa:	490a      	ldr	r1, [pc, #40]	; (80119d4 <ull_aon_write+0x48>)
 80119ac:	4620      	mov	r0, r4
 80119ae:	f7ff ff41 	bl	8011834 <dwt_write8bitoffsetreg>
 80119b2:	4d09      	ldr	r5, [pc, #36]	; (80119d8 <ull_aon_write+0x4c>)
 80119b4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80119b8:	2200      	movs	r2, #0
 80119ba:	4629      	mov	r1, r5
 80119bc:	4620      	mov	r0, r4
 80119be:	f7ff ff39 	bl	8011834 <dwt_write8bitoffsetreg>
 80119c2:	2300      	movs	r3, #0
 80119c4:	461a      	mov	r2, r3
 80119c6:	4629      	mov	r1, r5
 80119c8:	4620      	mov	r0, r4
 80119ca:	f7ff ff33 	bl	8011834 <dwt_write8bitoffsetreg>
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	000a000c 	.word	0x000a000c
 80119d4:	000a0010 	.word	0x000a0010
 80119d8:	000a0004 	.word	0x000a0004

080119dc <ull_configuresleep>:
 80119dc:	b570      	push	{r4, r5, r6, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	460d      	mov	r5, r1
 80119e2:	4616      	mov	r6, r2
 80119e4:	2200      	movs	r2, #0
 80119e6:	f240 110b 	movw	r1, #267	; 0x10b
 80119ea:	f7ff ffcf 	bl	801198c <ull_aon_write>
 80119ee:	f44f 7182 	mov.w	r1, #260	; 0x104
 80119f2:	4620      	mov	r0, r4
 80119f4:	f7ff ffaa 	bl	801194c <ull_aon_read>
 80119f8:	f000 021f 	and.w	r2, r0, #31
 80119fc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011a00:	4620      	mov	r0, r4
 8011a02:	f7ff ffc3 	bl	801198c <ull_aon_write>
 8011a06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011a08:	8a1a      	ldrh	r2, [r3, #16]
 8011a0a:	4315      	orrs	r5, r2
 8011a0c:	821d      	strh	r5, [r3, #16]
 8011a0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011a10:	8a1b      	ldrh	r3, [r3, #16]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7ff fd20 	bl	801145e <dwt_write16bitoffsetreg>
 8011a1e:	4633      	mov	r3, r6
 8011a20:	2200      	movs	r2, #0
 8011a22:	4902      	ldr	r1, [pc, #8]	; (8011a2c <ull_configuresleep+0x50>)
 8011a24:	4620      	mov	r0, r4
 8011a26:	f7ff ff05 	bl	8011834 <dwt_write8bitoffsetreg>
 8011a2a:	bd70      	pop	{r4, r5, r6, pc}
 8011a2c:	000a0014 	.word	0x000a0014

08011a30 <ull_writetxdata>:
 8011a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a32:	b083      	sub	sp, #12
 8011a34:	185c      	adds	r4, r3, r1
 8011a36:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011a3a:	da24      	bge.n	8011a86 <ull_writetxdata+0x56>
 8011a3c:	461c      	mov	r4, r3
 8011a3e:	4617      	mov	r7, r2
 8011a40:	460e      	mov	r6, r1
 8011a42:	4605      	mov	r5, r0
 8011a44:	2b7f      	cmp	r3, #127	; 0x7f
 8011a46:	d915      	bls.n	8011a74 <ull_writetxdata+0x44>
 8011a48:	2314      	movs	r3, #20
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	490f      	ldr	r1, [pc, #60]	; (8011a8c <ull_writetxdata+0x5c>)
 8011a4e:	f7ff fd63 	bl	8011518 <dwt_write32bitoffsetreg>
 8011a52:	4623      	mov	r3, r4
 8011a54:	2200      	movs	r2, #0
 8011a56:	490e      	ldr	r1, [pc, #56]	; (8011a90 <ull_writetxdata+0x60>)
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ff fd5d 	bl	8011518 <dwt_write32bitoffsetreg>
 8011a5e:	9700      	str	r7, [sp, #0]
 8011a60:	4633      	mov	r3, r6
 8011a62:	2200      	movs	r2, #0
 8011a64:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f7ff fced 	bl	8011448 <dwt_writetodevice>
 8011a6e:	2000      	movs	r0, #0
 8011a70:	b003      	add	sp, #12
 8011a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a74:	9200      	str	r2, [sp, #0]
 8011a76:	460b      	mov	r3, r1
 8011a78:	4622      	mov	r2, r4
 8011a7a:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8011a7e:	f7ff fce3 	bl	8011448 <dwt_writetodevice>
 8011a82:	2000      	movs	r0, #0
 8011a84:	e7f4      	b.n	8011a70 <ull_writetxdata+0x40>
 8011a86:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8a:	e7f1      	b.n	8011a70 <ull_writetxdata+0x40>
 8011a8c:	001f0004 	.word	0x001f0004
 8011a90:	001f0008 	.word	0x001f0008

08011a94 <ull_signal_rx_buff_free>:
 8011a94:	b510      	push	{r4, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	4604      	mov	r4, r0
 8011a9a:	2302      	movs	r3, #2
 8011a9c:	9301      	str	r3, [sp, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	9200      	str	r2, [sp, #0]
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	2113      	movs	r1, #19
 8011aa6:	f7ff f83a 	bl	8010b1e <dwt_xfer3xxx>
 8011aaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011aac:	7b9a      	ldrb	r2, [r3, #14]
 8011aae:	2a03      	cmp	r2, #3
 8011ab0:	bf0c      	ite	eq
 8011ab2:	2201      	moveq	r2, #1
 8011ab4:	2203      	movne	r2, #3
 8011ab6:	739a      	strb	r2, [r3, #14]
 8011ab8:	b002      	add	sp, #8
 8011aba:	bd10      	pop	{r4, pc}

08011abc <ull_isr>:
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8011ac8:	f7ff f8d9 	bl	8010c7e <dwt_read8bitoffsetreg>
 8011acc:	4605      	mov	r5, r0
 8011ace:	2200      	movs	r2, #0
 8011ad0:	2144      	movs	r1, #68	; 0x44
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f7ff f8ab 	bl	8010c2e <dwt_read32bitoffsetreg>
 8011ad8:	4606      	mov	r6, r0
 8011ada:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011adc:	2200      	movs	r2, #0
 8011ade:	83da      	strh	r2, [r3, #30]
 8011ae0:	f883 2020 	strb.w	r2, [r3, #32]
 8011ae4:	619a      	str	r2, [r3, #24]
 8011ae6:	839a      	strh	r2, [r3, #28]
 8011ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8011aea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011aec:	625c      	str	r4, [r3, #36]	; 0x24
 8011aee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011af0:	7b9f      	ldrb	r7, [r3, #14]
 8011af2:	2f00      	cmp	r7, #0
 8011af4:	d17f      	bne.n	8011bf6 <ull_isr+0x13a>
 8011af6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011af8:	619e      	str	r6, [r3, #24]
 8011afa:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 8011afe:	f898 3015 	ldrb.w	r3, [r8, #21]
 8011b02:	f003 0303 	and.w	r3, r3, #3
 8011b06:	2b03      	cmp	r3, #3
 8011b08:	f000 8090 	beq.w	8011c2c <ull_isr+0x170>
 8011b0c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8011b10:	f040 8093 	bne.w	8011c3a <ull_isr+0x17e>
 8011b14:	f015 0f01 	tst.w	r5, #1
 8011b18:	f040 80c1 	bne.w	8011c9e <ull_isr+0x1e2>
 8011b1c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011b20:	d00b      	beq.n	8011b3a <ull_isr+0x7e>
 8011b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b24:	b113      	cbz	r3, 8011b2c <ull_isr+0x70>
 8011b26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011b28:	3018      	adds	r0, #24
 8011b2a:	4798      	blx	r3
 8011b2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8011b30:	2202      	movs	r2, #2
 8011b32:	2144      	movs	r1, #68	; 0x44
 8011b34:	4620      	mov	r0, r4
 8011b36:	f7ff fc92 	bl	801145e <dwt_write16bitoffsetreg>
 8011b3a:	f015 0f08 	tst.w	r5, #8
 8011b3e:	d107      	bne.n	8011b50 <ull_isr+0x94>
 8011b40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011b42:	7b9b      	ldrb	r3, [r3, #14]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f000 80ea 	beq.w	8011d1e <ull_isr+0x262>
 8011b4a:	2f00      	cmp	r7, #0
 8011b4c:	f000 80e7 	beq.w	8011d1e <ull_isr+0x262>
 8011b50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011b52:	2200      	movs	r2, #0
 8011b54:	f883 2020 	strb.w	r2, [r3, #32]
 8011b58:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8011b5c:	f000 80ad 	beq.w	8011cba <ull_isr+0x1fe>
 8011b60:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011b62:	f892 3020 	ldrb.w	r3, [r2, #32]
 8011b66:	f043 0308 	orr.w	r3, r3, #8
 8011b6a:	f882 3020 	strb.w	r3, [r2, #32]
 8011b6e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8011b72:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8011b76:	d008      	beq.n	8011b8a <ull_isr+0xce>
 8011b78:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011b7a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8011b7e:	f043 0310 	orr.w	r3, r3, #16
 8011b82:	f882 3020 	strb.w	r3, [r2, #32]
 8011b86:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8011b8a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8011b8e:	d006      	beq.n	8011b9e <ull_isr+0xe2>
 8011b90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011b92:	7d53      	ldrb	r3, [r2, #21]
 8011b94:	f003 0303 	and.w	r3, r3, #3
 8011b98:	2b03      	cmp	r3, #3
 8011b9a:	f000 809a 	beq.w	8011cd2 <ull_isr+0x216>
 8011b9e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8011ba2:	f040 80a2 	bne.w	8011cea <ull_isr+0x22e>
 8011ba6:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8011baa:	2200      	movs	r2, #0
 8011bac:	2144      	movs	r1, #68	; 0x44
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f7ff fcb2 	bl	8011518 <dwt_write32bitoffsetreg>
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f7ff fe7b 	bl	80118b0 <_dwt_clear_db_events>
 8011bba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011bbc:	8bc3      	ldrh	r3, [r0, #30]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f040 80a2 	bne.w	8011d08 <ull_isr+0x24c>
 8011bc4:	7d43      	ldrb	r3, [r0, #21]
 8011bc6:	f003 0303 	and.w	r3, r3, #3
 8011bca:	2b03      	cmp	r3, #3
 8011bcc:	f000 809c 	beq.w	8011d08 <ull_isr+0x24c>
 8011bd0:	6983      	ldr	r3, [r0, #24]
 8011bd2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8011bd6:	6183      	str	r3, [r0, #24]
 8011bd8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011bda:	6993      	ldr	r3, [r2, #24]
 8011bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011be0:	6193      	str	r3, [r2, #24]
 8011be2:	69e3      	ldr	r3, [r4, #28]
 8011be4:	b113      	cbz	r3, 8011bec <ull_isr+0x130>
 8011be6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011be8:	3018      	adds	r0, #24
 8011bea:	4798      	blx	r3
 8011bec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 2020 	strb.w	r2, [r3, #32]
 8011bf4:	e08c      	b.n	8011d10 <ull_isr+0x254>
 8011bf6:	496d      	ldr	r1, [pc, #436]	; (8011dac <ull_isr+0x2f0>)
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f7ff f840 	bl	8010c7e <dwt_read8bitoffsetreg>
 8011bfe:	4607      	mov	r7, r0
 8011c00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011c02:	7b9b      	ldrb	r3, [r3, #14]
 8011c04:	2b03      	cmp	r3, #3
 8011c06:	bf08      	it	eq
 8011c08:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8011c0c:	f017 0f01 	tst.w	r7, #1
 8011c10:	bf18      	it	ne
 8011c12:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8011c16:	f017 0f02 	tst.w	r7, #2
 8011c1a:	bf18      	it	ne
 8011c1c:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8011c20:	f017 0f04 	tst.w	r7, #4
 8011c24:	bf18      	it	ne
 8011c26:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8011c2a:	e764      	b.n	8011af6 <ull_isr+0x3a>
 8011c2c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8011c30:	bf1c      	itt	ne
 8011c32:	f045 0508 	orrne.w	r5, r5, #8
 8011c36:	b2ed      	uxtbne	r5, r5
 8011c38:	e768      	b.n	8011b0c <ull_isr+0x50>
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	2148      	movs	r1, #72	; 0x48
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f7ff f80b 	bl	8010c5a <dwt_read16bitoffsetreg>
 8011c44:	f8a8 001c 	strh.w	r0, [r8, #28]
 8011c48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011c4a:	7d1a      	ldrb	r2, [r3, #20]
 8011c4c:	b11a      	cbz	r2, 8011c56 <ull_isr+0x19a>
 8011c4e:	699a      	ldr	r2, [r3, #24]
 8011c50:	f012 0f04 	tst.w	r2, #4
 8011c54:	d103      	bne.n	8011c5e <ull_isr+0x1a2>
 8011c56:	8b9b      	ldrh	r3, [r3, #28]
 8011c58:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8011c5c:	b18b      	cbz	r3, 8011c82 <ull_isr+0x1c6>
 8011c5e:	2304      	movs	r3, #4
 8011c60:	2200      	movs	r2, #0
 8011c62:	2144      	movs	r1, #68	; 0x44
 8011c64:	4620      	mov	r0, r4
 8011c66:	f7ff fde5 	bl	8011834 <dwt_write8bitoffsetreg>
 8011c6a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8011c6e:	2200      	movs	r2, #0
 8011c70:	2148      	movs	r1, #72	; 0x48
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7ff fbf3 	bl	801145e <dwt_write16bitoffsetreg>
 8011c78:	6a23      	ldr	r3, [r4, #32]
 8011c7a:	b113      	cbz	r3, 8011c82 <ull_isr+0x1c6>
 8011c7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011c7e:	3018      	adds	r0, #24
 8011c80:	4798      	blx	r3
 8011c82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011c84:	8b9b      	ldrh	r3, [r3, #28]
 8011c86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011c8a:	f43f af43 	beq.w	8011b14 <ull_isr+0x58>
 8011c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c92:	2200      	movs	r2, #0
 8011c94:	2148      	movs	r1, #72	; 0x48
 8011c96:	4620      	mov	r0, r4
 8011c98:	f7ff fbe1 	bl	801145e <dwt_write16bitoffsetreg>
 8011c9c:	e73a      	b.n	8011b14 <ull_isr+0x58>
 8011c9e:	23f8      	movs	r3, #248	; 0xf8
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	2144      	movs	r1, #68	; 0x44
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f7ff fdc5 	bl	8011834 <dwt_write8bitoffsetreg>
 8011caa:	6923      	ldr	r3, [r4, #16]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f43f af35 	beq.w	8011b1c <ull_isr+0x60>
 8011cb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011cb4:	3018      	adds	r0, #24
 8011cb6:	4798      	blx	r3
 8011cb8:	e730      	b.n	8011b1c <ull_isr+0x60>
 8011cba:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8011cbe:	bf1f      	itttt	ne
 8011cc0:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8011cc2:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8011cc6:	f043 0304 	orrne.w	r3, r3, #4
 8011cca:	f882 3020 	strbne.w	r3, [r2, #32]
 8011cce:	2700      	movs	r7, #0
 8011cd0:	e74f      	b.n	8011b72 <ull_isr+0xb6>
 8011cd2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8011cd6:	f043 0302 	orr.w	r3, r3, #2
 8011cda:	f882 3020 	strb.w	r3, [r2, #32]
 8011cde:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	83da      	strh	r2, [r3, #30]
 8011ce4:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8011ce8:	e75d      	b.n	8011ba6 <ull_isr+0xea>
 8011cea:	4620      	mov	r0, r4
 8011cec:	f7ff fdae 	bl	801184c <ull_getframelength>
 8011cf0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8011cf4:	f43f af57 	beq.w	8011ba6 <ull_isr+0xea>
 8011cf8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011cfa:	f892 3020 	ldrb.w	r3, [r2, #32]
 8011cfe:	f043 0301 	orr.w	r3, r3, #1
 8011d02:	f882 3020 	strb.w	r3, [r2, #32]
 8011d06:	e74e      	b.n	8011ba6 <ull_isr+0xea>
 8011d08:	6963      	ldr	r3, [r4, #20]
 8011d0a:	b10b      	cbz	r3, 8011d10 <ull_isr+0x254>
 8011d0c:	3018      	adds	r0, #24
 8011d0e:	4798      	blx	r3
 8011d10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011d12:	7b9b      	ldrb	r3, [r3, #14]
 8011d14:	bb03      	cbnz	r3, 8011d58 <ull_isr+0x29c>
 8011d16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f883 2020 	strb.w	r2, [r3, #32]
 8011d1e:	f015 0f10 	tst.w	r5, #16
 8011d22:	d11d      	bne.n	8011d60 <ull_isr+0x2a4>
 8011d24:	f015 0f20 	tst.w	r5, #32
 8011d28:	d12d      	bne.n	8011d86 <ull_isr+0x2ca>
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	4920      	ldr	r1, [pc, #128]	; (8011db0 <ull_isr+0x2f4>)
 8011d2e:	4620      	mov	r0, r4
 8011d30:	f7fe ffa5 	bl	8010c7e <dwt_read8bitoffsetreg>
 8011d34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011d36:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8011d3a:	f010 0303 	ands.w	r3, r0, #3
 8011d3e:	d009      	beq.n	8011d54 <ull_isr+0x298>
 8011d40:	2200      	movs	r2, #0
 8011d42:	491b      	ldr	r1, [pc, #108]	; (8011db0 <ull_isr+0x2f4>)
 8011d44:	4620      	mov	r0, r4
 8011d46:	f7ff fd75 	bl	8011834 <dwt_write8bitoffsetreg>
 8011d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d4c:	b113      	cbz	r3, 8011d54 <ull_isr+0x298>
 8011d4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011d50:	3018      	adds	r0, #24
 8011d52:	4798      	blx	r3
 8011d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f7ff fe9b 	bl	8011a94 <ull_signal_rx_buff_free>
 8011d5e:	e7da      	b.n	8011d16 <ull_isr+0x25a>
 8011d60:	4b14      	ldr	r3, [pc, #80]	; (8011db4 <ull_isr+0x2f8>)
 8011d62:	2200      	movs	r2, #0
 8011d64:	2144      	movs	r1, #68	; 0x44
 8011d66:	4620      	mov	r0, r4
 8011d68:	f7ff fbd6 	bl	8011518 <dwt_write32bitoffsetreg>
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f7ff fd9f 	bl	80118b0 <_dwt_clear_db_events>
 8011d72:	69e3      	ldr	r3, [r4, #28]
 8011d74:	b113      	cbz	r3, 8011d7c <ull_isr+0x2c0>
 8011d76:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011d78:	3018      	adds	r0, #24
 8011d7a:	4798      	blx	r3
 8011d7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 2020 	strb.w	r2, [r3, #32]
 8011d84:	e7ce      	b.n	8011d24 <ull_isr+0x268>
 8011d86:	4b0c      	ldr	r3, [pc, #48]	; (8011db8 <ull_isr+0x2fc>)
 8011d88:	2200      	movs	r2, #0
 8011d8a:	2144      	movs	r1, #68	; 0x44
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f7ff fbc3 	bl	8011518 <dwt_write32bitoffsetreg>
 8011d92:	4620      	mov	r0, r4
 8011d94:	f7ff fd8c 	bl	80118b0 <_dwt_clear_db_events>
 8011d98:	69a3      	ldr	r3, [r4, #24]
 8011d9a:	b113      	cbz	r3, 8011da2 <ull_isr+0x2e6>
 8011d9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011d9e:	3018      	adds	r0, #24
 8011da0:	4798      	blx	r3
 8011da2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011da4:	2200      	movs	r2, #0
 8011da6:	f883 2020 	strb.w	r2, [r3, #32]
 8011daa:	e7be      	b.n	8011d2a <ull_isr+0x26e>
 8011dac:	00010018 	.word	0x00010018
 8011db0:	00110038 	.word	0x00110038
 8011db4:	34059400 	.word	0x34059400
 8011db8:	10220400 	.word	0x10220400

08011dbc <dwt_modify32bitoffsetreg>:
 8011dbc:	b530      	push	{r4, r5, lr}
 8011dbe:	b085      	sub	sp, #20
 8011dc0:	9c08      	ldr	r4, [sp, #32]
 8011dc2:	f88d 3008 	strb.w	r3, [sp, #8]
 8011dc6:	0a1d      	lsrs	r5, r3, #8
 8011dc8:	f88d 5009 	strb.w	r5, [sp, #9]
 8011dcc:	0c1d      	lsrs	r5, r3, #16
 8011dce:	f88d 500a 	strb.w	r5, [sp, #10]
 8011dd2:	0e1b      	lsrs	r3, r3, #24
 8011dd4:	f88d 300b 	strb.w	r3, [sp, #11]
 8011dd8:	f88d 400c 	strb.w	r4, [sp, #12]
 8011ddc:	0a23      	lsrs	r3, r4, #8
 8011dde:	f88d 300d 	strb.w	r3, [sp, #13]
 8011de2:	0c23      	lsrs	r3, r4, #16
 8011de4:	f88d 300e 	strb.w	r3, [sp, #14]
 8011de8:	0e24      	lsrs	r4, r4, #24
 8011dea:	f88d 400f 	strb.w	r4, [sp, #15]
 8011dee:	f248 0303 	movw	r3, #32771	; 0x8003
 8011df2:	9301      	str	r3, [sp, #4]
 8011df4:	ab02      	add	r3, sp, #8
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	2308      	movs	r3, #8
 8011dfa:	b292      	uxth	r2, r2
 8011dfc:	f7fe fe8f 	bl	8010b1e <dwt_xfer3xxx>
 8011e00:	b005      	add	sp, #20
 8011e02:	bd30      	pop	{r4, r5, pc}

08011e04 <ull_enable_rf_tx>:
 8011e04:	b570      	push	{r4, r5, r6, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	4604      	mov	r4, r0
 8011e0a:	460e      	mov	r6, r1
 8011e0c:	4d13      	ldr	r5, [pc, #76]	; (8011e5c <ull_enable_rf_tx+0x58>)
 8011e0e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	f04f 33ff 	mov.w	r3, #4294967295
 8011e18:	2200      	movs	r2, #0
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	f7ff ffce 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8011e20:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	f04f 33ff 	mov.w	r3, #4294967295
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f7ff ffc4 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8011e34:	4b0a      	ldr	r3, [pc, #40]	; (8011e60 <ull_enable_rf_tx+0x5c>)
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	f04f 33ff 	mov.w	r3, #4294967295
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8011e42:	4620      	mov	r0, r4
 8011e44:	f7ff ffba 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8011e48:	b90e      	cbnz	r6, 8011e4e <ull_enable_rf_tx+0x4a>
 8011e4a:	b002      	add	sp, #8
 8011e4c:	bd70      	pop	{r4, r5, r6, pc}
 8011e4e:	4b05      	ldr	r3, [pc, #20]	; (8011e64 <ull_enable_rf_tx+0x60>)
 8011e50:	2200      	movs	r2, #0
 8011e52:	4905      	ldr	r1, [pc, #20]	; (8011e68 <ull_enable_rf_tx+0x64>)
 8011e54:	4620      	mov	r0, r4
 8011e56:	f7ff fb5f 	bl	8011518 <dwt_write32bitoffsetreg>
 8011e5a:	e7f6      	b.n	8011e4a <ull_enable_rf_tx+0x46>
 8011e5c:	00070048 	.word	0x00070048
 8011e60:	02003c00 	.word	0x02003c00
 8011e64:	01011100 	.word	0x01011100
 8011e68:	00070014 	.word	0x00070014

08011e6c <ull_enable_rftx_blocks>:
 8011e6c:	b500      	push	{lr}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	4b05      	ldr	r3, [pc, #20]	; (8011e88 <ull_enable_rftx_blocks+0x1c>)
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	f04f 33ff 	mov.w	r3, #4294967295
 8011e78:	2200      	movs	r2, #0
 8011e7a:	4904      	ldr	r1, [pc, #16]	; (8011e8c <ull_enable_rftx_blocks+0x20>)
 8011e7c:	f7ff ff9e 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8011e80:	b003      	add	sp, #12
 8011e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e86:	bf00      	nop
 8011e88:	02003c00 	.word	0x02003c00
 8011e8c:	00070004 	.word	0x00070004

08011e90 <_dwt_otpprogword32>:
 8011e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e94:	b083      	sub	sp, #12
 8011e96:	4604      	mov	r4, r0
 8011e98:	460d      	mov	r5, r1
 8011e9a:	4617      	mov	r7, r2
 8011e9c:	4e56      	ldr	r6, [pc, #344]	; (8011ff8 <_dwt_otpprogword32+0x168>)
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	4631      	mov	r1, r6
 8011ea2:	f7fe fec4 	bl	8010c2e <dwt_read32bitoffsetreg>
 8011ea6:	4681      	mov	r9, r0
 8011ea8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8011eac:	9300      	str	r3, [sp, #0]
 8011eae:	f04f 33ff 	mov.w	r3, #4294967295
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	4631      	mov	r1, r6
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f7ff ff80 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8011ebc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8011ffc <_dwt_otpprogword32+0x16c>
 8011ec0:	2318      	movs	r3, #24
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	4641      	mov	r1, r8
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f7ff fac9 	bl	801145e <dwt_write16bitoffsetreg>
 8011ecc:	2125      	movs	r1, #37	; 0x25
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f7ff faec 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011ed4:	2102      	movs	r1, #2
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f7ff fae8 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011edc:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f7ff fae3 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011ee6:	b2f9      	uxtb	r1, r7
 8011ee8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011eec:	4620      	mov	r0, r4
 8011eee:	f7ff fadd 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff fad8 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011efc:	2100      	movs	r1, #0
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff fad4 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f04:	2102      	movs	r1, #2
 8011f06:	4620      	mov	r0, r4
 8011f08:	f7ff fad0 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f0c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8011f10:	4620      	mov	r0, r4
 8011f12:	f7ff facb 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f16:	b2e9      	uxtb	r1, r5
 8011f18:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7ff fac5 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f22:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8011f26:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f7ff fabe 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f30:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8011f34:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f7ff fab7 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f3e:	0e29      	lsrs	r1, r5, #24
 8011f40:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011f44:	4620      	mov	r0, r4
 8011f46:	f7ff fab1 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f7ff faad 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f52:	213a      	movs	r1, #58	; 0x3a
 8011f54:	4620      	mov	r0, r4
 8011f56:	f7ff faa9 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f7ff faa4 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f64:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f7ff fa9f 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f6e:	2100      	movs	r1, #0
 8011f70:	4620      	mov	r0, r4
 8011f72:	f7ff fa9b 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f76:	213a      	movs	r1, #58	; 0x3a
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f7ff fa97 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f7e:	f240 1101 	movw	r1, #257	; 0x101
 8011f82:	4620      	mov	r0, r4
 8011f84:	f7ff fa92 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011f88:	2302      	movs	r3, #2
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8011f90:	4620      	mov	r0, r4
 8011f92:	f7ff fa64 	bl	801145e <dwt_write16bitoffsetreg>
 8011f96:	2300      	movs	r3, #0
 8011f98:	461a      	mov	r2, r3
 8011f9a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f7ff fa5d 	bl	801145e <dwt_write16bitoffsetreg>
 8011fa4:	2002      	movs	r0, #2
 8011fa6:	f7f9 fe1f 	bl	800bbe8 <deca_sleep>
 8011faa:	213a      	movs	r1, #58	; 0x3a
 8011fac:	4620      	mov	r0, r4
 8011fae:	f7ff fa7d 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011fb2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f7ff fa78 	bl	80114ac <__dwt_otp_write_wdata_id_reg>
 8011fbc:	2302      	movs	r3, #2
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f7ff fa4a 	bl	801145e <dwt_write16bitoffsetreg>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	461a      	mov	r2, r3
 8011fce:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7ff fa43 	bl	801145e <dwt_write16bitoffsetreg>
 8011fd8:	2300      	movs	r3, #0
 8011fda:	461a      	mov	r2, r3
 8011fdc:	4641      	mov	r1, r8
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f7ff fa3d 	bl	801145e <dwt_write16bitoffsetreg>
 8011fe4:	464b      	mov	r3, r9
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	4631      	mov	r1, r6
 8011fea:	4620      	mov	r0, r4
 8011fec:	f7ff fa94 	bl	8011518 <dwt_write32bitoffsetreg>
 8011ff0:	b003      	add	sp, #12
 8011ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ff6:	bf00      	nop
 8011ff8:	00070044 	.word	0x00070044
 8011ffc:	000b0008 	.word	0x000b0008

08012000 <ull_setgpiomode>:
 8012000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012002:	b083      	sub	sp, #12
 8012004:	2400      	movs	r4, #0
 8012006:	4623      	mov	r3, r4
 8012008:	2601      	movs	r6, #1
 801200a:	2707      	movs	r7, #7
 801200c:	e002      	b.n	8012014 <ull_setgpiomode+0x14>
 801200e:	3401      	adds	r4, #1
 8012010:	2c09      	cmp	r4, #9
 8012012:	d009      	beq.n	8012028 <ull_setgpiomode+0x28>
 8012014:	fa06 f504 	lsl.w	r5, r6, r4
 8012018:	420d      	tst	r5, r1
 801201a:	d0f8      	beq.n	801200e <ull_setgpiomode+0xe>
 801201c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012020:	fa07 f505 	lsl.w	r5, r7, r5
 8012024:	432b      	orrs	r3, r5
 8012026:	e7f2      	b.n	801200e <ull_setgpiomode+0xe>
 8012028:	401a      	ands	r2, r3
 801202a:	9200      	str	r2, [sp, #0]
 801202c:	43db      	mvns	r3, r3
 801202e:	2200      	movs	r2, #0
 8012030:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012034:	f7ff fec2 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012038:	b003      	add	sp, #12
 801203a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801203c <ull_writetxfctrl>:
 801203c:	b510      	push	{r4, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	4604      	mov	r4, r0
 8012042:	2a7f      	cmp	r2, #127	; 0x7f
 8012044:	d912      	bls.n	801206c <ull_writetxfctrl+0x30>
 8012046:	3280      	adds	r2, #128	; 0x80
 8012048:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 801204c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012050:	9100      	str	r1, [sp, #0]
 8012052:	4b0c      	ldr	r3, [pc, #48]	; (8012084 <ull_writetxfctrl+0x48>)
 8012054:	2200      	movs	r2, #0
 8012056:	2120      	movs	r1, #32
 8012058:	f7ff feb0 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801205c:	2200      	movs	r2, #0
 801205e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012062:	4620      	mov	r0, r4
 8012064:	f7fe fe0b 	bl	8010c7e <dwt_read8bitoffsetreg>
 8012068:	b002      	add	sp, #8
 801206a:	bd10      	pop	{r4, pc}
 801206c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8012070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012074:	9100      	str	r1, [sp, #0]
 8012076:	4b03      	ldr	r3, [pc, #12]	; (8012084 <ull_writetxfctrl+0x48>)
 8012078:	2200      	movs	r2, #0
 801207a:	2120      	movs	r1, #32
 801207c:	f7ff fe9e 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012080:	e7f2      	b.n	8012068 <ull_writetxfctrl+0x2c>
 8012082:	bf00      	nop
 8012084:	fc00f400 	.word	0xfc00f400

08012088 <prs_sys_status_and_or>:
 8012088:	b500      	push	{lr}
 801208a:	b083      	sub	sp, #12
 801208c:	9200      	str	r2, [sp, #0]
 801208e:	460b      	mov	r3, r1
 8012090:	2200      	movs	r2, #0
 8012092:	2144      	movs	r1, #68	; 0x44
 8012094:	f7ff fe92 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012098:	2000      	movs	r0, #0
 801209a:	b003      	add	sp, #12
 801209c:	f85d fb04 	ldr.w	pc, [sp], #4

080120a0 <dwt_modify8bitoffsetreg>:
 80120a0:	b500      	push	{lr}
 80120a2:	b085      	sub	sp, #20
 80120a4:	f88d 300c 	strb.w	r3, [sp, #12]
 80120a8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80120ac:	f88d 300d 	strb.w	r3, [sp, #13]
 80120b0:	f248 0301 	movw	r3, #32769	; 0x8001
 80120b4:	9301      	str	r3, [sp, #4]
 80120b6:	ab03      	add	r3, sp, #12
 80120b8:	9300      	str	r3, [sp, #0]
 80120ba:	2302      	movs	r3, #2
 80120bc:	b292      	uxth	r2, r2
 80120be:	f7fe fd2e 	bl	8010b1e <dwt_xfer3xxx>
 80120c2:	b005      	add	sp, #20
 80120c4:	f85d fb04 	ldr.w	pc, [sp], #4

080120c8 <ull_configciadiag>:
 80120c8:	b530      	push	{r4, r5, lr}
 80120ca:	b083      	sub	sp, #12
 80120cc:	4604      	mov	r4, r0
 80120ce:	460d      	mov	r5, r1
 80120d0:	f011 0f01 	tst.w	r1, #1
 80120d4:	d015      	beq.n	8012102 <ull_configciadiag+0x3a>
 80120d6:	2300      	movs	r3, #0
 80120d8:	9300      	str	r3, [sp, #0]
 80120da:	23ef      	movs	r3, #239	; 0xef
 80120dc:	2202      	movs	r2, #2
 80120de:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80120e2:	f7ff ffdd 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80120e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80120e8:	759d      	strb	r5, [r3, #22]
 80120ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80120ec:	7d9b      	ldrb	r3, [r3, #22]
 80120ee:	085b      	lsrs	r3, r3, #1
 80120f0:	d010      	beq.n	8012114 <ull_configciadiag+0x4c>
 80120f2:	086b      	lsrs	r3, r5, #1
 80120f4:	2200      	movs	r2, #0
 80120f6:	490e      	ldr	r1, [pc, #56]	; (8012130 <ull_configciadiag+0x68>)
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7ff fb9b 	bl	8011834 <dwt_write8bitoffsetreg>
 80120fe:	b003      	add	sp, #12
 8012100:	bd30      	pop	{r4, r5, pc}
 8012102:	2310      	movs	r3, #16
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	23ff      	movs	r3, #255	; 0xff
 8012108:	2202      	movs	r2, #2
 801210a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801210e:	f7ff ffc7 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012112:	e7e8      	b.n	80120e6 <ull_configciadiag+0x1e>
 8012114:	2301      	movs	r3, #1
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	23ff      	movs	r3, #255	; 0xff
 801211a:	2200      	movs	r2, #0
 801211c:	4904      	ldr	r1, [pc, #16]	; (8012130 <ull_configciadiag+0x68>)
 801211e:	4620      	mov	r0, r4
 8012120:	f7ff ffbe 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012124:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012126:	7d93      	ldrb	r3, [r2, #22]
 8012128:	f043 0302 	orr.w	r3, r3, #2
 801212c:	7593      	strb	r3, [r2, #22]
 801212e:	e7e6      	b.n	80120fe <ull_configciadiag+0x36>
 8012130:	00010020 	.word	0x00010020

08012134 <ull_calcbandwidthadj>:
 8012134:	b570      	push	{r4, r5, r6, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	4604      	mov	r4, r0
 801213a:	460d      	mov	r5, r1
 801213c:	2101      	movs	r1, #1
 801213e:	f7ff f99f 	bl	8011480 <ull_force_clocks>
 8012142:	2100      	movs	r1, #0
 8012144:	4620      	mov	r0, r4
 8012146:	f7ff fe5d 	bl	8011e04 <ull_enable_rf_tx>
 801214a:	4620      	mov	r0, r4
 801214c:	f7ff fe8e 	bl	8011e6c <ull_enable_rftx_blocks>
 8012150:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8012154:	2200      	movs	r2, #0
 8012156:	4915      	ldr	r1, [pc, #84]	; (80121ac <ull_calcbandwidthadj+0x78>)
 8012158:	4620      	mov	r0, r4
 801215a:	f7ff f980 	bl	801145e <dwt_write16bitoffsetreg>
 801215e:	2303      	movs	r3, #3
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	23ff      	movs	r3, #255	; 0xff
 8012164:	2200      	movs	r2, #0
 8012166:	4912      	ldr	r1, [pc, #72]	; (80121b0 <ull_calcbandwidthadj+0x7c>)
 8012168:	4620      	mov	r0, r4
 801216a:	f7ff ff99 	bl	80120a0 <dwt_modify8bitoffsetreg>
 801216e:	4e10      	ldr	r6, [pc, #64]	; (80121b0 <ull_calcbandwidthadj+0x7c>)
 8012170:	2500      	movs	r5, #0
 8012172:	462a      	mov	r2, r5
 8012174:	4631      	mov	r1, r6
 8012176:	4620      	mov	r0, r4
 8012178:	f7fe fd81 	bl	8010c7e <dwt_read8bitoffsetreg>
 801217c:	f010 0f01 	tst.w	r0, #1
 8012180:	d1f7      	bne.n	8012172 <ull_calcbandwidthadj+0x3e>
 8012182:	4620      	mov	r0, r4
 8012184:	f7ff faf8 	bl	8011778 <ull_disable_rftx_blocks>
 8012188:	2100      	movs	r1, #0
 801218a:	4620      	mov	r0, r4
 801218c:	f7ff fafe 	bl	801178c <ull_disable_rf_tx>
 8012190:	2105      	movs	r1, #5
 8012192:	4620      	mov	r0, r4
 8012194:	f7ff f974 	bl	8011480 <ull_force_clocks>
 8012198:	2200      	movs	r2, #0
 801219a:	4906      	ldr	r1, [pc, #24]	; (80121b4 <ull_calcbandwidthadj+0x80>)
 801219c:	4620      	mov	r0, r4
 801219e:	f7fe fd6e 	bl	8010c7e <dwt_read8bitoffsetreg>
 80121a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80121a6:	b002      	add	sp, #8
 80121a8:	bd70      	pop	{r4, r5, r6, pc}
 80121aa:	bf00      	nop
 80121ac:	0008001c 	.word	0x0008001c
 80121b0:	00080010 	.word	0x00080010
 80121b4:	0007001c 	.word	0x0007001c

080121b8 <ull_configuretxrf>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4605      	mov	r5, r0
 80121bc:	460c      	mov	r4, r1
 80121be:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 80121c2:	b149      	cbz	r1, 80121d8 <ull_configuretxrf+0x20>
 80121c4:	f7ff ffb6 	bl	8012134 <ull_calcbandwidthadj>
 80121c8:	f8d4 3001 	ldr.w	r3, [r4, #1]
 80121cc:	2200      	movs	r2, #0
 80121ce:	4905      	ldr	r1, [pc, #20]	; (80121e4 <ull_configuretxrf+0x2c>)
 80121d0:	4628      	mov	r0, r5
 80121d2:	f7ff f9a1 	bl	8011518 <dwt_write32bitoffsetreg>
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	7823      	ldrb	r3, [r4, #0]
 80121da:	2200      	movs	r2, #0
 80121dc:	4902      	ldr	r1, [pc, #8]	; (80121e8 <ull_configuretxrf+0x30>)
 80121de:	f7ff fb29 	bl	8011834 <dwt_write8bitoffsetreg>
 80121e2:	e7f1      	b.n	80121c8 <ull_configuretxrf+0x10>
 80121e4:	00010004 	.word	0x00010004
 80121e8:	0007001c 	.word	0x0007001c

080121ec <ull_repeated_frames>:
 80121ec:	b530      	push	{r4, r5, lr}
 80121ee:	b083      	sub	sp, #12
 80121f0:	4604      	mov	r4, r0
 80121f2:	460d      	mov	r5, r1
 80121f4:	2310      	movs	r3, #16
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	23ff      	movs	r3, #255	; 0xff
 80121fa:	2200      	movs	r2, #0
 80121fc:	4906      	ldr	r1, [pc, #24]	; (8012218 <ull_repeated_frames+0x2c>)
 80121fe:	f7ff ff4f 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012202:	462b      	mov	r3, r5
 8012204:	2d02      	cmp	r5, #2
 8012206:	bf38      	it	cc
 8012208:	2302      	movcc	r3, #2
 801220a:	2200      	movs	r2, #0
 801220c:	2128      	movs	r1, #40	; 0x28
 801220e:	4620      	mov	r0, r4
 8012210:	f7ff f982 	bl	8011518 <dwt_write32bitoffsetreg>
 8012214:	b003      	add	sp, #12
 8012216:	bd30      	pop	{r4, r5, pc}
 8012218:	000f0028 	.word	0x000f0028

0801221c <ull_setdwstate>:
 801221c:	b530      	push	{r4, r5, lr}
 801221e:	b083      	sub	sp, #12
 8012220:	4604      	mov	r4, r0
 8012222:	2901      	cmp	r1, #1
 8012224:	d01d      	beq.n	8012262 <ull_setdwstate+0x46>
 8012226:	2902      	cmp	r1, #2
 8012228:	d02f      	beq.n	801228a <ull_setdwstate+0x6e>
 801222a:	2301      	movs	r3, #1
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	23ff      	movs	r3, #255	; 0xff
 8012230:	2200      	movs	r2, #0
 8012232:	4925      	ldr	r1, [pc, #148]	; (80122c8 <ull_setdwstate+0xac>)
 8012234:	f7ff ff34 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012238:	4d24      	ldr	r5, [pc, #144]	; (80122cc <ull_setdwstate+0xb0>)
 801223a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801223e:	9300      	str	r3, [sp, #0]
 8012240:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8012244:	2200      	movs	r2, #0
 8012246:	4629      	mov	r1, r5
 8012248:	4620      	mov	r0, r4
 801224a:	f7ff fdb7 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801224e:	2300      	movs	r3, #0
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	237f      	movs	r3, #127	; 0x7f
 8012254:	2202      	movs	r2, #2
 8012256:	4629      	mov	r1, r5
 8012258:	4620      	mov	r0, r4
 801225a:	f7ff ff21 	bl	80120a0 <dwt_modify8bitoffsetreg>
 801225e:	b003      	add	sp, #12
 8012260:	bd30      	pop	{r4, r5, pc}
 8012262:	2105      	movs	r1, #5
 8012264:	f7ff f90c 	bl	8011480 <ull_force_clocks>
 8012268:	2302      	movs	r3, #2
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	f04f 33ff 	mov.w	r3, #4294967295
 8012270:	2200      	movs	r2, #0
 8012272:	4917      	ldr	r1, [pc, #92]	; (80122d0 <ull_setdwstate+0xb4>)
 8012274:	4620      	mov	r0, r4
 8012276:	f7ff fda1 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801227a:	2201      	movs	r2, #1
 801227c:	9200      	str	r2, [sp, #0]
 801227e:	23ff      	movs	r3, #255	; 0xff
 8012280:	4912      	ldr	r1, [pc, #72]	; (80122cc <ull_setdwstate+0xb0>)
 8012282:	4620      	mov	r0, r4
 8012284:	f7ff ff0c 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012288:	e7e9      	b.n	801225e <ull_setdwstate+0x42>
 801228a:	2303      	movs	r3, #3
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	23ff      	movs	r3, #255	; 0xff
 8012290:	2200      	movs	r2, #0
 8012292:	490d      	ldr	r1, [pc, #52]	; (80122c8 <ull_setdwstate+0xac>)
 8012294:	f7ff ff04 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012298:	4d0c      	ldr	r5, [pc, #48]	; (80122cc <ull_setdwstate+0xb0>)
 801229a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80122a4:	2200      	movs	r2, #0
 80122a6:	4629      	mov	r1, r5
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7ff fd87 	bl	8011dbc <dwt_modify32bitoffsetreg>
 80122ae:	2300      	movs	r3, #0
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	237f      	movs	r3, #127	; 0x7f
 80122b4:	2202      	movs	r2, #2
 80122b6:	4629      	mov	r1, r5
 80122b8:	4620      	mov	r0, r4
 80122ba:	f7ff fef1 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80122be:	2105      	movs	r1, #5
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ff f8dd 	bl	8011480 <ull_force_clocks>
 80122c6:	e7ca      	b.n	801225e <ull_setdwstate+0x42>
 80122c8:	00110004 	.word	0x00110004
 80122cc:	00110008 	.word	0x00110008
 80122d0:	00090008 	.word	0x00090008

080122d4 <ull_configureframefilter>:
 80122d4:	b530      	push	{r4, r5, lr}
 80122d6:	b083      	sub	sp, #12
 80122d8:	4605      	mov	r5, r0
 80122da:	2902      	cmp	r1, #2
 80122dc:	d00e      	beq.n	80122fc <ull_configureframefilter+0x28>
 80122de:	2400      	movs	r4, #0
 80122e0:	9400      	str	r4, [sp, #0]
 80122e2:	23fe      	movs	r3, #254	; 0xfe
 80122e4:	4622      	mov	r2, r4
 80122e6:	2110      	movs	r1, #16
 80122e8:	f7ff feda 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80122ec:	4623      	mov	r3, r4
 80122ee:	4622      	mov	r2, r4
 80122f0:	2114      	movs	r1, #20
 80122f2:	4628      	mov	r0, r5
 80122f4:	f7ff f8b3 	bl	801145e <dwt_write16bitoffsetreg>
 80122f8:	b003      	add	sp, #12
 80122fa:	bd30      	pop	{r4, r5, pc}
 80122fc:	4614      	mov	r4, r2
 80122fe:	2301      	movs	r3, #1
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	23ff      	movs	r3, #255	; 0xff
 8012304:	2200      	movs	r2, #0
 8012306:	2110      	movs	r1, #16
 8012308:	f7ff feca 	bl	80120a0 <dwt_modify8bitoffsetreg>
 801230c:	4623      	mov	r3, r4
 801230e:	2200      	movs	r2, #0
 8012310:	2114      	movs	r1, #20
 8012312:	4628      	mov	r0, r5
 8012314:	f7ff f8a3 	bl	801145e <dwt_write16bitoffsetreg>
 8012318:	e7ee      	b.n	80122f8 <ull_configureframefilter+0x24>
	...

0801231c <ull_run_pgfcal>:
 801231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012320:	b082      	sub	sp, #8
 8012322:	4605      	mov	r5, r0
 8012324:	4c29      	ldr	r4, [pc, #164]	; (80123cc <ull_run_pgfcal+0xb0>)
 8012326:	4b2a      	ldr	r3, [pc, #168]	; (80123d0 <ull_run_pgfcal+0xb4>)
 8012328:	2200      	movs	r2, #0
 801232a:	4621      	mov	r1, r4
 801232c:	f7ff f8f4 	bl	8011518 <dwt_write32bitoffsetreg>
 8012330:	2310      	movs	r3, #16
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	23ff      	movs	r3, #255	; 0xff
 8012336:	2200      	movs	r2, #0
 8012338:	4621      	mov	r1, r4
 801233a:	4628      	mov	r0, r5
 801233c:	f7ff feb0 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012340:	2403      	movs	r4, #3
 8012342:	f04f 0814 	mov.w	r8, #20
 8012346:	4f23      	ldr	r7, [pc, #140]	; (80123d4 <ull_run_pgfcal+0xb8>)
 8012348:	2600      	movs	r6, #0
 801234a:	4640      	mov	r0, r8
 801234c:	f7f9 fc57 	bl	800bbfe <deca_usleep>
 8012350:	4632      	mov	r2, r6
 8012352:	4639      	mov	r1, r7
 8012354:	4628      	mov	r0, r5
 8012356:	f7fe fc92 	bl	8010c7e <dwt_read8bitoffsetreg>
 801235a:	2801      	cmp	r0, #1
 801235c:	d034      	beq.n	80123c8 <ull_run_pgfcal+0xac>
 801235e:	1e63      	subs	r3, r4, #1
 8012360:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8012364:	d1f1      	bne.n	801234a <ull_run_pgfcal+0x2e>
 8012366:	f06f 0402 	mvn.w	r4, #2
 801236a:	4e18      	ldr	r6, [pc, #96]	; (80123cc <ull_run_pgfcal+0xb0>)
 801236c:	2300      	movs	r3, #0
 801236e:	461a      	mov	r2, r3
 8012370:	4631      	mov	r1, r6
 8012372:	4628      	mov	r0, r5
 8012374:	f7ff fa5e 	bl	8011834 <dwt_write8bitoffsetreg>
 8012378:	2301      	movs	r3, #1
 801237a:	2200      	movs	r2, #0
 801237c:	4915      	ldr	r1, [pc, #84]	; (80123d4 <ull_run_pgfcal+0xb8>)
 801237e:	4628      	mov	r0, r5
 8012380:	f7ff fa58 	bl	8011834 <dwt_write8bitoffsetreg>
 8012384:	2301      	movs	r3, #1
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	23ff      	movs	r3, #255	; 0xff
 801238a:	2202      	movs	r2, #2
 801238c:	4631      	mov	r1, r6
 801238e:	4628      	mov	r0, r5
 8012390:	f7ff fe86 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012394:	2200      	movs	r2, #0
 8012396:	4910      	ldr	r1, [pc, #64]	; (80123d8 <ull_run_pgfcal+0xbc>)
 8012398:	4628      	mov	r0, r5
 801239a:	f7fe fc48 	bl	8010c2e <dwt_read32bitoffsetreg>
 801239e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80123a2:	4298      	cmp	r0, r3
 80123a4:	bf08      	it	eq
 80123a6:	f06f 0403 	mvneq.w	r4, #3
 80123aa:	2200      	movs	r2, #0
 80123ac:	490b      	ldr	r1, [pc, #44]	; (80123dc <ull_run_pgfcal+0xc0>)
 80123ae:	4628      	mov	r0, r5
 80123b0:	f7fe fc3d 	bl	8010c2e <dwt_read32bitoffsetreg>
 80123b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80123b8:	4298      	cmp	r0, r3
 80123ba:	bf14      	ite	ne
 80123bc:	4620      	movne	r0, r4
 80123be:	f06f 0004 	mvneq.w	r0, #4
 80123c2:	b002      	add	sp, #8
 80123c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c8:	2400      	movs	r4, #0
 80123ca:	e7ce      	b.n	801236a <ull_run_pgfcal+0x4e>
 80123cc:	0004000c 	.word	0x0004000c
 80123d0:	00020001 	.word	0x00020001
 80123d4:	00040020 	.word	0x00040020
 80123d8:	00040014 	.word	0x00040014
 80123dc:	0004001c 	.word	0x0004001c

080123e0 <ull_setinterrupt>:
 80123e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123e4:	b083      	sub	sp, #12
 80123e6:	4605      	mov	r5, r0
 80123e8:	4688      	mov	r8, r1
 80123ea:	4617      	mov	r7, r2
 80123ec:	461c      	mov	r4, r3
 80123ee:	f7f9 fbdd 	bl	800bbac <decamutexon>
 80123f2:	4606      	mov	r6, r0
 80123f4:	2c02      	cmp	r4, #2
 80123f6:	d019      	beq.n	801242c <ull_setinterrupt+0x4c>
 80123f8:	2c04      	cmp	r4, #4
 80123fa:	d017      	beq.n	801242c <ull_setinterrupt+0x4c>
 80123fc:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 8012400:	2b01      	cmp	r3, #1
 8012402:	d03f      	beq.n	8012484 <ull_setinterrupt+0xa4>
 8012404:	f04f 0900 	mov.w	r9, #0
 8012408:	f8cd 9000 	str.w	r9, [sp]
 801240c:	ea6f 0308 	mvn.w	r3, r8
 8012410:	464a      	mov	r2, r9
 8012412:	213c      	movs	r1, #60	; 0x3c
 8012414:	4628      	mov	r0, r5
 8012416:	f7ff fcd1 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801241a:	f8cd 9000 	str.w	r9, [sp]
 801241e:	43fb      	mvns	r3, r7
 8012420:	464a      	mov	r2, r9
 8012422:	2140      	movs	r1, #64	; 0x40
 8012424:	4628      	mov	r0, r5
 8012426:	f7ff fcc9 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801242a:	e00b      	b.n	8012444 <ull_setinterrupt+0x64>
 801242c:	4643      	mov	r3, r8
 801242e:	2200      	movs	r2, #0
 8012430:	213c      	movs	r1, #60	; 0x3c
 8012432:	4628      	mov	r0, r5
 8012434:	f7ff f870 	bl	8011518 <dwt_write32bitoffsetreg>
 8012438:	463b      	mov	r3, r7
 801243a:	2200      	movs	r2, #0
 801243c:	2140      	movs	r1, #64	; 0x40
 801243e:	4628      	mov	r0, r5
 8012440:	f7ff f86a 	bl	8011518 <dwt_write32bitoffsetreg>
 8012444:	3c03      	subs	r4, #3
 8012446:	b2e4      	uxtb	r4, r4
 8012448:	2c01      	cmp	r4, #1
 801244a:	d92d      	bls.n	80124a8 <ull_setinterrupt+0xc8>
 801244c:	2200      	movs	r2, #0
 801244e:	213c      	movs	r1, #60	; 0x3c
 8012450:	4628      	mov	r0, r5
 8012452:	f7fe fbec 	bl	8010c2e <dwt_read32bitoffsetreg>
 8012456:	4603      	mov	r3, r0
 8012458:	2200      	movs	r2, #0
 801245a:	2144      	movs	r1, #68	; 0x44
 801245c:	4628      	mov	r0, r5
 801245e:	f7ff f85b 	bl	8011518 <dwt_write32bitoffsetreg>
 8012462:	2200      	movs	r2, #0
 8012464:	2140      	movs	r1, #64	; 0x40
 8012466:	4628      	mov	r0, r5
 8012468:	f7fe fbe1 	bl	8010c2e <dwt_read32bitoffsetreg>
 801246c:	4603      	mov	r3, r0
 801246e:	2200      	movs	r2, #0
 8012470:	2148      	movs	r1, #72	; 0x48
 8012472:	4628      	mov	r0, r5
 8012474:	f7ff f850 	bl	8011518 <dwt_write32bitoffsetreg>
 8012478:	4630      	mov	r0, r6
 801247a:	f7f9 fba8 	bl	800bbce <decamutexoff>
 801247e:	b003      	add	sp, #12
 8012480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012484:	f8cd 8000 	str.w	r8, [sp]
 8012488:	f04f 33ff 	mov.w	r3, #4294967295
 801248c:	2200      	movs	r2, #0
 801248e:	213c      	movs	r1, #60	; 0x3c
 8012490:	4628      	mov	r0, r5
 8012492:	f7ff fc93 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012496:	9700      	str	r7, [sp, #0]
 8012498:	f04f 33ff 	mov.w	r3, #4294967295
 801249c:	2200      	movs	r2, #0
 801249e:	2140      	movs	r1, #64	; 0x40
 80124a0:	4628      	mov	r0, r5
 80124a2:	f7ff fc8b 	bl	8011dbc <dwt_modify32bitoffsetreg>
 80124a6:	e7cd      	b.n	8012444 <ull_setinterrupt+0x64>
 80124a8:	2110      	movs	r1, #16
 80124aa:	9100      	str	r1, [sp, #0]
 80124ac:	23ff      	movs	r3, #255	; 0xff
 80124ae:	2202      	movs	r2, #2
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7ff fdf5 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80124b6:	e7c9      	b.n	801244c <ull_setinterrupt+0x6c>

080124b8 <prs_ack_enable>:
 80124b8:	b500      	push	{lr}
 80124ba:	b083      	sub	sp, #12
 80124bc:	2900      	cmp	r1, #0
 80124be:	bf0b      	itete	eq
 80124c0:	23ff      	moveq	r3, #255	; 0xff
 80124c2:	23f7      	movne	r3, #247	; 0xf7
 80124c4:	2200      	moveq	r2, #0
 80124c6:	2208      	movne	r2, #8
 80124c8:	9200      	str	r2, [sp, #0]
 80124ca:	2201      	movs	r2, #1
 80124cc:	2110      	movs	r1, #16
 80124ce:	f7ff fde7 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80124d2:	b003      	add	sp, #12
 80124d4:	f85d fb04 	ldr.w	pc, [sp], #4

080124d8 <dwt_modify16bitoffsetreg>:
 80124d8:	b510      	push	{r4, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80124e0:	f88d 300c 	strb.w	r3, [sp, #12]
 80124e4:	0a1b      	lsrs	r3, r3, #8
 80124e6:	f88d 300d 	strb.w	r3, [sp, #13]
 80124ea:	f88d 400e 	strb.w	r4, [sp, #14]
 80124ee:	0a24      	lsrs	r4, r4, #8
 80124f0:	f88d 400f 	strb.w	r4, [sp, #15]
 80124f4:	f248 0302 	movw	r3, #32770	; 0x8002
 80124f8:	9301      	str	r3, [sp, #4]
 80124fa:	ab03      	add	r3, sp, #12
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	2304      	movs	r3, #4
 8012500:	b292      	uxth	r2, r2
 8012502:	f7fe fb0c 	bl	8010b1e <dwt_xfer3xxx>
 8012506:	b004      	add	sp, #16
 8012508:	bd10      	pop	{r4, pc}
	...

0801250c <ull_setleds>:
 801250c:	b530      	push	{r4, r5, lr}
 801250e:	b083      	sub	sp, #12
 8012510:	4604      	mov	r4, r0
 8012512:	f011 0f01 	tst.w	r1, #1
 8012516:	d01f      	beq.n	8012558 <ull_setleds+0x4c>
 8012518:	460d      	mov	r5, r1
 801251a:	f44f 7310 	mov.w	r3, #576	; 0x240
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8012524:	2200      	movs	r2, #0
 8012526:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801252a:	f7ff fc47 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801252e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8012532:	9300      	str	r3, [sp, #0]
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	2200      	movs	r2, #0
 801253a:	4918      	ldr	r1, [pc, #96]	; (801259c <ull_setleds+0x90>)
 801253c:	4620      	mov	r0, r4
 801253e:	f7ff fc3d 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012542:	f015 0f02 	tst.w	r5, #2
 8012546:	d11a      	bne.n	801257e <ull_setleds+0x72>
 8012548:	f44f 7388 	mov.w	r3, #272	; 0x110
 801254c:	2200      	movs	r2, #0
 801254e:	4914      	ldr	r1, [pc, #80]	; (80125a0 <ull_setleds+0x94>)
 8012550:	4620      	mov	r0, r4
 8012552:	f7fe ffe1 	bl	8011518 <dwt_write32bitoffsetreg>
 8012556:	e010      	b.n	801257a <ull_setleds+0x6e>
 8012558:	2500      	movs	r5, #0
 801255a:	9500      	str	r5, [sp, #0]
 801255c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8012560:	462a      	mov	r2, r5
 8012562:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012566:	f7ff fc29 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801256a:	9500      	str	r5, [sp, #0]
 801256c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012570:	462a      	mov	r2, r5
 8012572:	490b      	ldr	r1, [pc, #44]	; (80125a0 <ull_setleds+0x94>)
 8012574:	4620      	mov	r0, r4
 8012576:	f7ff ffaf 	bl	80124d8 <dwt_modify16bitoffsetreg>
 801257a:	b003      	add	sp, #12
 801257c:	bd30      	pop	{r4, r5, pc}
 801257e:	4d08      	ldr	r5, [pc, #32]	; (80125a0 <ull_setleds+0x94>)
 8012580:	4b08      	ldr	r3, [pc, #32]	; (80125a4 <ull_setleds+0x98>)
 8012582:	2200      	movs	r2, #0
 8012584:	4629      	mov	r1, r5
 8012586:	4620      	mov	r0, r4
 8012588:	f7fe ffc6 	bl	8011518 <dwt_write32bitoffsetreg>
 801258c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012590:	2200      	movs	r2, #0
 8012592:	4629      	mov	r1, r5
 8012594:	4620      	mov	r0, r4
 8012596:	f7fe ffbf 	bl	8011518 <dwt_write32bitoffsetreg>
 801259a:	e7ee      	b.n	801257a <ull_setleds+0x6e>
 801259c:	00110004 	.word	0x00110004
 80125a0:	00110018 	.word	0x00110018
 80125a4:	000f0110 	.word	0x000f0110

080125a8 <ull_pgf_cal>:
 80125a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125aa:	b083      	sub	sp, #12
 80125ac:	4604      	mov	r4, r0
 80125ae:	2901      	cmp	r1, #1
 80125b0:	d009      	beq.n	80125c6 <ull_pgf_cal+0x1e>
 80125b2:	2014      	movs	r0, #20
 80125b4:	f7f9 fb23 	bl	800bbfe <deca_usleep>
 80125b8:	4620      	mov	r0, r4
 80125ba:	f7ff feaf 	bl	801231c <ull_run_pgfcal>
 80125be:	4605      	mov	r5, r0
 80125c0:	4628      	mov	r0, r5
 80125c2:	b003      	add	sp, #12
 80125c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125c6:	4e0f      	ldr	r6, [pc, #60]	; (8012604 <ull_pgf_cal+0x5c>)
 80125c8:	2200      	movs	r2, #0
 80125ca:	4631      	mov	r1, r6
 80125cc:	f7fe fb45 	bl	8010c5a <dwt_read16bitoffsetreg>
 80125d0:	4607      	mov	r7, r0
 80125d2:	f240 1307 	movw	r3, #263	; 0x107
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125dc:	2200      	movs	r2, #0
 80125de:	4631      	mov	r1, r6
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff ff79 	bl	80124d8 <dwt_modify16bitoffsetreg>
 80125e6:	2014      	movs	r0, #20
 80125e8:	f7f9 fb09 	bl	800bbfe <deca_usleep>
 80125ec:	4620      	mov	r0, r4
 80125ee:	f7ff fe95 	bl	801231c <ull_run_pgfcal>
 80125f2:	4605      	mov	r5, r0
 80125f4:	2200      	movs	r2, #0
 80125f6:	9200      	str	r2, [sp, #0]
 80125f8:	463b      	mov	r3, r7
 80125fa:	4631      	mov	r1, r6
 80125fc:	4620      	mov	r0, r4
 80125fe:	f7ff ff6b 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012602:	e7dd      	b.n	80125c0 <ull_pgf_cal+0x18>
 8012604:	00070048 	.word	0x00070048

08012608 <ull_setgpiovalue>:
 8012608:	b500      	push	{lr}
 801260a:	b083      	sub	sp, #12
 801260c:	2a01      	cmp	r2, #1
 801260e:	d009      	beq.n	8012624 <ull_setgpiovalue+0x1c>
 8012610:	43cb      	mvns	r3, r1
 8012612:	2200      	movs	r2, #0
 8012614:	9200      	str	r2, [sp, #0]
 8012616:	b29b      	uxth	r3, r3
 8012618:	4906      	ldr	r1, [pc, #24]	; (8012634 <ull_setgpiovalue+0x2c>)
 801261a:	f7ff ff5d 	bl	80124d8 <dwt_modify16bitoffsetreg>
 801261e:	b003      	add	sp, #12
 8012620:	f85d fb04 	ldr.w	pc, [sp], #4
 8012624:	9100      	str	r1, [sp, #0]
 8012626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801262a:	2200      	movs	r2, #0
 801262c:	4901      	ldr	r1, [pc, #4]	; (8012634 <ull_setgpiovalue+0x2c>)
 801262e:	f7ff ff53 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012632:	e7f4      	b.n	801261e <ull_setgpiovalue+0x16>
 8012634:	0005000c 	.word	0x0005000c

08012638 <ull_readaccdata>:
 8012638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263a:	b083      	sub	sp, #12
 801263c:	4604      	mov	r4, r0
 801263e:	460f      	mov	r7, r1
 8012640:	4616      	mov	r6, r2
 8012642:	461d      	mov	r5, r3
 8012644:	f248 0340 	movw	r3, #32832	; 0x8040
 8012648:	9300      	str	r3, [sp, #0]
 801264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801264e:	2200      	movs	r2, #0
 8012650:	4918      	ldr	r1, [pc, #96]	; (80126b4 <ull_readaccdata+0x7c>)
 8012652:	f7ff ff41 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012656:	19aa      	adds	r2, r5, r6
 8012658:	f243 0301 	movw	r3, #12289	; 0x3001
 801265c:	429a      	cmp	r2, r3
 801265e:	dc15      	bgt.n	801268c <ull_readaccdata+0x54>
 8012660:	2d7f      	cmp	r5, #127	; 0x7f
 8012662:	d91d      	bls.n	80126a0 <ull_readaccdata+0x68>
 8012664:	2315      	movs	r3, #21
 8012666:	2200      	movs	r2, #0
 8012668:	4913      	ldr	r1, [pc, #76]	; (80126b8 <ull_readaccdata+0x80>)
 801266a:	4620      	mov	r0, r4
 801266c:	f7fe ff54 	bl	8011518 <dwt_write32bitoffsetreg>
 8012670:	462b      	mov	r3, r5
 8012672:	2200      	movs	r2, #0
 8012674:	4911      	ldr	r1, [pc, #68]	; (80126bc <ull_readaccdata+0x84>)
 8012676:	4620      	mov	r0, r4
 8012678:	f7fe ff4e 	bl	8011518 <dwt_write32bitoffsetreg>
 801267c:	9700      	str	r7, [sp, #0]
 801267e:	4633      	mov	r3, r6
 8012680:	2200      	movs	r2, #0
 8012682:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8012686:	4620      	mov	r0, r4
 8012688:	f7fe fac7 	bl	8010c1a <dwt_readfromdevice>
 801268c:	2200      	movs	r2, #0
 801268e:	9200      	str	r2, [sp, #0]
 8012690:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8012694:	4907      	ldr	r1, [pc, #28]	; (80126b4 <ull_readaccdata+0x7c>)
 8012696:	4620      	mov	r0, r4
 8012698:	f7ff ff1e 	bl	80124d8 <dwt_modify16bitoffsetreg>
 801269c:	b003      	add	sp, #12
 801269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126a0:	9700      	str	r7, [sp, #0]
 80126a2:	4633      	mov	r3, r6
 80126a4:	462a      	mov	r2, r5
 80126a6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80126aa:	4620      	mov	r0, r4
 80126ac:	f7fe fab5 	bl	8010c1a <dwt_readfromdevice>
 80126b0:	e7ec      	b.n	801268c <ull_readaccdata+0x54>
 80126b2:	bf00      	nop
 80126b4:	00110004 	.word	0x00110004
 80126b8:	001f0004 	.word	0x001f0004
 80126bc:	001f0008 	.word	0x001f0008

080126c0 <ull_repeated_cw>:
 80126c0:	b570      	push	{r4, r5, r6, lr}
 80126c2:	4606      	mov	r6, r0
 80126c4:	460c      	mov	r4, r1
 80126c6:	4615      	mov	r5, r2
 80126c8:	4b0e      	ldr	r3, [pc, #56]	; (8012704 <ull_repeated_cw+0x44>)
 80126ca:	2202      	movs	r2, #2
 80126cc:	490e      	ldr	r1, [pc, #56]	; (8012708 <ull_repeated_cw+0x48>)
 80126ce:	f7fe ff23 	bl	8011518 <dwt_write32bitoffsetreg>
 80126d2:	2d0f      	cmp	r5, #15
 80126d4:	bfa8      	it	ge
 80126d6:	250f      	movge	r5, #15
 80126d8:	1e63      	subs	r3, r4, #1
 80126da:	2b03      	cmp	r3, #3
 80126dc:	bf28      	it	cs
 80126de:	2404      	movcs	r4, #4
 80126e0:	2310      	movs	r3, #16
 80126e2:	4123      	asrs	r3, r4
 80126e4:	2200      	movs	r2, #0
 80126e6:	4909      	ldr	r1, [pc, #36]	; (801270c <ull_repeated_cw+0x4c>)
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7fe ff15 	bl	8011518 <dwt_write32bitoffsetreg>
 80126ee:	1e63      	subs	r3, r4, #1
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	fa05 f303 	lsl.w	r3, r5, r3
 80126f6:	2200      	movs	r2, #0
 80126f8:	4905      	ldr	r1, [pc, #20]	; (8012710 <ull_repeated_cw+0x50>)
 80126fa:	4630      	mov	r0, r6
 80126fc:	f7fe ff0c 	bl	8011518 <dwt_write32bitoffsetreg>
 8012700:	bd70      	pop	{r4, r5, r6, pc}
 8012702:	bf00      	nop
 8012704:	00d20874 	.word	0x00d20874
 8012708:	00110010 	.word	0x00110010
 801270c:	00070028 	.word	0x00070028
 8012710:	00080018 	.word	0x00080018

08012714 <ull_configure>:
 8012714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012718:	b083      	sub	sp, #12
 801271a:	4604      	mov	r4, r0
 801271c:	460d      	mov	r5, r1
 801271e:	f891 9000 	ldrb.w	r9, [r1]
 8012722:	790b      	ldrb	r3, [r1, #4]
 8012724:	2b18      	cmp	r3, #24
 8012726:	d814      	bhi.n	8012752 <ull_configure+0x3e>
 8012728:	78cf      	ldrb	r7, [r1, #3]
 801272a:	2f18      	cmp	r7, #24
 801272c:	bf94      	ite	ls
 801272e:	2700      	movls	r7, #0
 8012730:	2701      	movhi	r7, #1
 8012732:	b2ff      	uxtb	r7, r7
 8012734:	79eb      	ldrb	r3, [r5, #7]
 8012736:	2b01      	cmp	r3, #1
 8012738:	bf0c      	ite	eq
 801273a:	2110      	moveq	r1, #16
 801273c:	2100      	movne	r1, #0
 801273e:	786b      	ldrb	r3, [r5, #1]
 8012740:	3b01      	subs	r3, #1
 8012742:	2b06      	cmp	r3, #6
 8012744:	d810      	bhi.n	8012768 <ull_configure+0x54>
 8012746:	e8df f003 	tbb	[pc, r3]
 801274a:	0f06      	.short	0x0f06
 801274c:	0f0c120f 	.word	0x0f0c120f
 8012750:	09          	.byte	0x09
 8012751:	00          	.byte	0x00
 8012752:	2701      	movs	r7, #1
 8012754:	e7ed      	b.n	8012732 <ull_configure+0x1e>
 8012756:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801275a:	e00a      	b.n	8012772 <ull_configure+0x5e>
 801275c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8012760:	e007      	b.n	8012772 <ull_configure+0x5e>
 8012762:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8012766:	e004      	b.n	8012772 <ull_configure+0x5e>
 8012768:	f44f 7a80 	mov.w	sl, #256	; 0x100
 801276c:	e001      	b.n	8012772 <ull_configure+0x5e>
 801276e:	f04f 0a20 	mov.w	sl, #32
 8012772:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012774:	8a13      	ldrh	r3, [r2, #16]
 8012776:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801277a:	8213      	strh	r3, [r2, #16]
 801277c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801277e:	79ea      	ldrb	r2, [r5, #7]
 8012780:	72da      	strb	r2, [r3, #11]
 8012782:	7b2e      	ldrb	r6, [r5, #12]
 8012784:	1cb3      	adds	r3, r6, #2
 8012786:	2601      	movs	r6, #1
 8012788:	409e      	lsls	r6, r3
 801278a:	fa1f f886 	uxth.w	r8, r6
 801278e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012790:	4bca      	ldr	r3, [pc, #808]	; (8012abc <ull_configure+0x3a8>)
 8012792:	fb03 f308 	mul.w	r3, r3, r8
 8012796:	0bdb      	lsrs	r3, r3, #15
 8012798:	8253      	strh	r3, [r2, #18]
 801279a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801279c:	7aea      	ldrb	r2, [r5, #11]
 801279e:	755a      	strb	r2, [r3, #21]
 80127a0:	7a2b      	ldrb	r3, [r5, #8]
 80127a2:	015b      	lsls	r3, r3, #5
 80127a4:	f003 0320 	and.w	r3, r3, #32
 80127a8:	7b6a      	ldrb	r2, [r5, #13]
 80127aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127ae:	7aea      	ldrb	r2, [r5, #11]
 80127b0:	0312      	lsls	r2, r2, #12
 80127b2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80127b6:	4313      	orrs	r3, r2
 80127b8:	430b      	orrs	r3, r1
 80127ba:	9300      	str	r3, [sp, #0]
 80127bc:	4bc0      	ldr	r3, [pc, #768]	; (8012ac0 <ull_configure+0x3ac>)
 80127be:	2200      	movs	r2, #0
 80127c0:	2110      	movs	r1, #16
 80127c2:	4620      	mov	r0, r4
 80127c4:	f7ff fafa 	bl	8011dbc <dwt_modify32bitoffsetreg>
 80127c8:	2f00      	cmp	r7, #0
 80127ca:	f040 80fc 	bne.w	80129c6 <ull_configure+0x2b2>
 80127ce:	7aeb      	ldrb	r3, [r5, #11]
 80127d0:	b1f3      	cbz	r3, 8012810 <ull_configure+0xfc>
 80127d2:	7b6b      	ldrb	r3, [r5, #13]
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	f240 8121 	bls.w	8012a1c <ull_configure+0x308>
 80127da:	7b2a      	ldrb	r2, [r5, #12]
 80127dc:	4bb9      	ldr	r3, [pc, #740]	; (8012ac4 <ull_configure+0x3b0>)
 80127de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80127e2:	0112      	lsls	r2, r2, #4
 80127e4:	0ad3      	lsrs	r3, r2, #11
 80127e6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80127ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80127ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80127f2:	bf28      	it	cs
 80127f4:	3301      	addcs	r3, #1
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 80127fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	f64f 7380 	movw	r3, #65408	; 0xff80
 8012806:	2202      	movs	r2, #2
 8012808:	49af      	ldr	r1, [pc, #700]	; (8012ac8 <ull_configure+0x3b4>)
 801280a:	4620      	mov	r0, r4
 801280c:	f7ff fe64 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012810:	2394      	movs	r3, #148	; 0x94
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	4bad      	ldr	r3, [pc, #692]	; (8012acc <ull_configure+0x3b8>)
 8012816:	2200      	movs	r2, #0
 8012818:	49ad      	ldr	r1, [pc, #692]	; (8012ad0 <ull_configure+0x3bc>)
 801281a:	4620      	mov	r0, r4
 801281c:	f7ff face 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012820:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8012824:	f340 810d 	ble.w	8012a42 <ull_configure+0x32e>
 8012828:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801282a:	8a13      	ldrh	r3, [r2, #16]
 801282c:	f043 0320 	orr.w	r3, r3, #32
 8012830:	8213      	strh	r3, [r2, #16]
 8012832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801283c:	2200      	movs	r2, #0
 801283e:	49a5      	ldr	r1, [pc, #660]	; (8012ad4 <ull_configure+0x3c0>)
 8012840:	4620      	mov	r0, r4
 8012842:	f7ff fe49 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012846:	7b6b      	ldrb	r3, [r5, #13]
 8012848:	2b01      	cmp	r3, #1
 801284a:	f000 8105 	beq.w	8012a58 <ull_configure+0x344>
 801284e:	78ab      	ldrb	r3, [r5, #2]
 8012850:	f043 0310 	orr.w	r3, r3, #16
 8012854:	9300      	str	r3, [sp, #0]
 8012856:	23fc      	movs	r3, #252	; 0xfc
 8012858:	2200      	movs	r2, #0
 801285a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801285e:	4620      	mov	r0, r4
 8012860:	f7ff fc1e 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012864:	1e73      	subs	r3, r6, #1
 8012866:	b2db      	uxtb	r3, r3
 8012868:	2200      	movs	r2, #0
 801286a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801286e:	4620      	mov	r0, r4
 8012870:	f7fe ffe0 	bl	8011834 <dwt_write8bitoffsetreg>
 8012874:	786b      	ldrb	r3, [r5, #1]
 8012876:	2b07      	cmp	r3, #7
 8012878:	bf0c      	ite	eq
 801287a:	2308      	moveq	r3, #8
 801287c:	2300      	movne	r3, #0
 801287e:	2201      	movs	r2, #1
 8012880:	2124      	movs	r1, #36	; 0x24
 8012882:	4620      	mov	r0, r4
 8012884:	f7fe ffd6 	bl	8011834 <dwt_write8bitoffsetreg>
 8012888:	7aeb      	ldrb	r3, [r5, #11]
 801288a:	f003 0303 	and.w	r3, r3, #3
 801288e:	2b03      	cmp	r3, #3
 8012890:	bf0c      	ite	eq
 8012892:	4b91      	ldreq	r3, [pc, #580]	; (8012ad8 <ull_configure+0x3c4>)
 8012894:	4b91      	ldrne	r3, [pc, #580]	; (8012adc <ull_configure+0x3c8>)
 8012896:	2200      	movs	r2, #0
 8012898:	4991      	ldr	r1, [pc, #580]	; (8012ae0 <ull_configure+0x3cc>)
 801289a:	4620      	mov	r0, r4
 801289c:	f7fe fe3c 	bl	8011518 <dwt_write32bitoffsetreg>
 80128a0:	2200      	movs	r2, #0
 80128a2:	4990      	ldr	r1, [pc, #576]	; (8012ae4 <ull_configure+0x3d0>)
 80128a4:	4620      	mov	r0, r4
 80128a6:	f7fe f9c2 	bl	8010c2e <dwt_read32bitoffsetreg>
 80128aa:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80128ae:	f020 001f 	bic.w	r0, r0, #31
 80128b2:	f1b9 0f09 	cmp.w	r9, #9
 80128b6:	bf08      	it	eq
 80128b8:	f040 0001 	orreq.w	r0, r0, #1
 80128bc:	792a      	ldrb	r2, [r5, #4]
 80128be:	0212      	lsls	r2, r2, #8
 80128c0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80128c4:	78eb      	ldrb	r3, [r5, #3]
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	431a      	orrs	r2, r3
 80128cc:	796b      	ldrb	r3, [r5, #5]
 80128ce:	005b      	lsls	r3, r3, #1
 80128d0:	f003 0306 	and.w	r3, r3, #6
 80128d4:	4313      	orrs	r3, r2
 80128d6:	4303      	orrs	r3, r0
 80128d8:	2200      	movs	r2, #0
 80128da:	4982      	ldr	r1, [pc, #520]	; (8012ae4 <ull_configure+0x3d0>)
 80128dc:	4620      	mov	r0, r4
 80128de:	f7fe fe1b 	bl	8011518 <dwt_write32bitoffsetreg>
 80128e2:	79aa      	ldrb	r2, [r5, #6]
 80128e4:	786b      	ldrb	r3, [r5, #1]
 80128e6:	031b      	lsls	r3, r3, #12
 80128e8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80128ec:	9300      	str	r3, [sp, #0]
 80128ee:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80128f2:	2200      	movs	r2, #0
 80128f4:	2120      	movs	r1, #32
 80128f6:	4620      	mov	r0, r4
 80128f8:	f7ff fa60 	bl	8011dbc <dwt_modify32bitoffsetreg>
 80128fc:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8012900:	b923      	cbnz	r3, 801290c <ull_configure+0x1f8>
 8012902:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8012906:	726b      	strb	r3, [r5, #9]
 8012908:	2300      	movs	r3, #0
 801290a:	72ab      	strb	r3, [r5, #10]
 801290c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8012910:	2202      	movs	r2, #2
 8012912:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012916:	4620      	mov	r0, r4
 8012918:	f7fe fda1 	bl	801145e <dwt_write16bitoffsetreg>
 801291c:	2202      	movs	r2, #2
 801291e:	4972      	ldr	r1, [pc, #456]	; (8012ae8 <ull_configure+0x3d4>)
 8012920:	4620      	mov	r0, r4
 8012922:	f7fe f9ac 	bl	8010c7e <dwt_read8bitoffsetreg>
 8012926:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012928:	7bdb      	ldrb	r3, [r3, #15]
 801292a:	454b      	cmp	r3, r9
 801292c:	f000 809e 	beq.w	8012a6c <ull_configure+0x358>
 8012930:	2803      	cmp	r0, #3
 8012932:	f000 809f 	beq.w	8012a74 <ull_configure+0x360>
 8012936:	f1b9 0f09 	cmp.w	r9, #9
 801293a:	f000 80a0 	beq.w	8012a7e <ull_configure+0x36a>
 801293e:	4b6b      	ldr	r3, [pc, #428]	; (8012aec <ull_configure+0x3d8>)
 8012940:	2200      	movs	r2, #0
 8012942:	496b      	ldr	r1, [pc, #428]	; (8012af0 <ull_configure+0x3dc>)
 8012944:	4620      	mov	r0, r4
 8012946:	f7fe fde7 	bl	8011518 <dwt_write32bitoffsetreg>
 801294a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 801294e:	2200      	movs	r2, #0
 8012950:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8012954:	4620      	mov	r0, r4
 8012956:	f7fe fd82 	bl	801145e <dwt_write16bitoffsetreg>
 801295a:	2314      	movs	r3, #20
 801295c:	2201      	movs	r2, #1
 801295e:	4965      	ldr	r1, [pc, #404]	; (8012af4 <ull_configure+0x3e0>)
 8012960:	4620      	mov	r0, r4
 8012962:	f7fe ff67 	bl	8011834 <dwt_write8bitoffsetreg>
 8012966:	230e      	movs	r3, #14
 8012968:	2202      	movs	r2, #2
 801296a:	4963      	ldr	r1, [pc, #396]	; (8012af8 <ull_configure+0x3e4>)
 801296c:	4620      	mov	r0, r4
 801296e:	f7fe ff61 	bl	8011834 <dwt_write8bitoffsetreg>
 8012972:	2381      	movs	r3, #129	; 0x81
 8012974:	2200      	movs	r2, #0
 8012976:	4961      	ldr	r1, [pc, #388]	; (8012afc <ull_configure+0x3e8>)
 8012978:	4620      	mov	r0, r4
 801297a:	f7fe ff5b 	bl	8011834 <dwt_write8bitoffsetreg>
 801297e:	2302      	movs	r3, #2
 8012980:	2200      	movs	r2, #0
 8012982:	2144      	movs	r1, #68	; 0x44
 8012984:	4620      	mov	r0, r4
 8012986:	f7fe ff55 	bl	8011834 <dwt_write8bitoffsetreg>
 801298a:	2101      	movs	r1, #1
 801298c:	4620      	mov	r0, r4
 801298e:	f7ff fc45 	bl	801221c <ull_setdwstate>
 8012992:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8012996:	f04f 0814 	mov.w	r8, #20
 801299a:	2700      	movs	r7, #0
 801299c:	2644      	movs	r6, #68	; 0x44
 801299e:	4640      	mov	r0, r8
 80129a0:	f7f9 f92d 	bl	800bbfe <deca_usleep>
 80129a4:	463a      	mov	r2, r7
 80129a6:	4631      	mov	r1, r6
 80129a8:	4620      	mov	r0, r4
 80129aa:	f7fe f968 	bl	8010c7e <dwt_read8bitoffsetreg>
 80129ae:	f010 0f02 	tst.w	r0, #2
 80129b2:	f040 80b5 	bne.w	8012b20 <ull_configure+0x40c>
 80129b6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80129ba:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80129be:	d1ee      	bne.n	801299e <ull_configure+0x28a>
 80129c0:	f06f 0001 	mvn.w	r0, #1
 80129c4:	e0de      	b.n	8012b84 <ull_configure+0x470>
 80129c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80129c8:	8a13      	ldrh	r3, [r2, #16]
 80129ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80129ce:	8213      	strh	r3, [r2, #16]
 80129d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80129d4:	9300      	str	r3, [sp, #0]
 80129d6:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 80129da:	2200      	movs	r2, #0
 80129dc:	493d      	ldr	r1, [pc, #244]	; (8012ad4 <ull_configure+0x3c0>)
 80129de:	4620      	mov	r0, r4
 80129e0:	f7ff f9ec 	bl	8011dbc <dwt_modify32bitoffsetreg>
 80129e4:	f240 3306 	movw	r3, #774	; 0x306
 80129e8:	2200      	movs	r2, #0
 80129ea:	4945      	ldr	r1, [pc, #276]	; (8012b00 <ull_configure+0x3ec>)
 80129ec:	4620      	mov	r0, r4
 80129ee:	f7fe fd93 	bl	8011518 <dwt_write32bitoffsetreg>
 80129f2:	2300      	movs	r3, #0
 80129f4:	461a      	mov	r2, r3
 80129f6:	4943      	ldr	r1, [pc, #268]	; (8012b04 <ull_configure+0x3f0>)
 80129f8:	4620      	mov	r0, r4
 80129fa:	f7fe fd8d 	bl	8011518 <dwt_write32bitoffsetreg>
 80129fe:	4b42      	ldr	r3, [pc, #264]	; (8012b08 <ull_configure+0x3f4>)
 8012a00:	2200      	movs	r2, #0
 8012a02:	4931      	ldr	r1, [pc, #196]	; (8012ac8 <ull_configure+0x3b4>)
 8012a04:	4620      	mov	r0, r4
 8012a06:	f7fe fd87 	bl	8011518 <dwt_write32bitoffsetreg>
 8012a0a:	239d      	movs	r3, #157	; 0x9d
 8012a0c:	9300      	str	r3, [sp, #0]
 8012a0e:	4b2f      	ldr	r3, [pc, #188]	; (8012acc <ull_configure+0x3b8>)
 8012a10:	2200      	movs	r2, #0
 8012a12:	492f      	ldr	r1, [pc, #188]	; (8012ad0 <ull_configure+0x3bc>)
 8012a14:	4620      	mov	r0, r4
 8012a16:	f7ff f9d1 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012a1a:	e714      	b.n	8012846 <ull_configure+0x132>
 8012a1c:	7b2a      	ldrb	r2, [r5, #12]
 8012a1e:	4b29      	ldr	r3, [pc, #164]	; (8012ac4 <ull_configure+0x3b0>)
 8012a20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012a24:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8012a28:	fb02 f203 	mul.w	r2, r2, r3
 8012a2c:	0c93      	lsrs	r3, r2, #18
 8012a2e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8012a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012a36:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8012a3a:	bf28      	it	cs
 8012a3c:	3301      	addcs	r3, #1
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	e6da      	b.n	80127f8 <ull_configure+0xe4>
 8012a42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8012a46:	9300      	str	r3, [sp, #0]
 8012a48:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4921      	ldr	r1, [pc, #132]	; (8012ad4 <ull_configure+0x3c0>)
 8012a50:	4620      	mov	r0, r4
 8012a52:	f7ff fd41 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012a56:	e6f6      	b.n	8012846 <ull_configure+0x132>
 8012a58:	78ab      	ldrb	r3, [r5, #2]
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	23ec      	movs	r3, #236	; 0xec
 8012a5e:	2200      	movs	r2, #0
 8012a60:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012a64:	4620      	mov	r0, r4
 8012a66:	f7ff fb1b 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012a6a:	e6fb      	b.n	8012864 <ull_configure+0x150>
 8012a6c:	2803      	cmp	r0, #3
 8012a6e:	f47f af62 	bne.w	8012936 <ull_configure+0x222>
 8012a72:	e058      	b.n	8012b26 <ull_configure+0x412>
 8012a74:	2102      	movs	r1, #2
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7ff fbd0 	bl	801221c <ull_setdwstate>
 8012a7c:	e75b      	b.n	8012936 <ull_configure+0x222>
 8012a7e:	4b23      	ldr	r3, [pc, #140]	; (8012b0c <ull_configure+0x3f8>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	491b      	ldr	r1, [pc, #108]	; (8012af0 <ull_configure+0x3dc>)
 8012a84:	4620      	mov	r0, r4
 8012a86:	f7fe fd47 	bl	8011518 <dwt_write32bitoffsetreg>
 8012a8a:	f640 733c 	movw	r3, #3900	; 0xf3c
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8012a94:	4620      	mov	r0, r4
 8012a96:	f7fe fce2 	bl	801145e <dwt_write16bitoffsetreg>
 8012a9a:	e75e      	b.n	801295a <ull_configure+0x246>
 8012a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012aa0:	9300      	str	r3, [sp, #0]
 8012aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	490a      	ldr	r1, [pc, #40]	; (8012ad4 <ull_configure+0x3c0>)
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f7ff fd14 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012ab0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012ab2:	8a13      	ldrh	r3, [r2, #16]
 8012ab4:	f043 0308 	orr.w	r3, r3, #8
 8012ab8:	8213      	strh	r3, [r2, #16]
 8012aba:	e046      	b.n	8012b4a <ull_configure+0x436>
 8012abc:	00026668 	.word	0x00026668
 8012ac0:	fffc4fcf 	.word	0xfffc4fcf
 8012ac4:	08020680 	.word	0x08020680
 8012ac8:	000e0014 	.word	0x000e0014
 8012acc:	bfffff00 	.word	0xbfffff00
 8012ad0:	000e0018 	.word	0x000e0018
 8012ad4:	000b0008 	.word	0x000b0008
 8012ad8:	af5f35cc 	.word	0xaf5f35cc
 8012adc:	af5f584c 	.word	0xaf5f584c
 8012ae0:	0006000c 	.word	0x0006000c
 8012ae4:	00010008 	.word	0x00010008
 8012ae8:	000f0030 	.word	0x000f0030
 8012aec:	1c071134 	.word	0x1c071134
 8012af0:	0007001c 	.word	0x0007001c
 8012af4:	00070050 	.word	0x00070050
 8012af8:	00070018 	.word	0x00070018
 8012afc:	00090008 	.word	0x00090008
 8012b00:	000e000c 	.word	0x000e000c
 8012b04:	000e0010 	.word	0x000e0010
 8012b08:	000c5a0a 	.word	0x000c5a0a
 8012b0c:	1c010034 	.word	0x1c010034
 8012b10:	2200      	movs	r2, #0
 8012b12:	9200      	str	r2, [sp, #0]
 8012b14:	23fe      	movs	r3, #254	; 0xfe
 8012b16:	491d      	ldr	r1, [pc, #116]	; (8012b8c <ull_configure+0x478>)
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f7ff fac1 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8012b1e:	e01e      	b.n	8012b5e <ull_configure+0x44a>
 8012b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012b22:	f883 900f 	strb.w	r9, [r3, #15]
 8012b26:	792b      	ldrb	r3, [r5, #4]
 8012b28:	3b09      	subs	r3, #9
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	2b0f      	cmp	r3, #15
 8012b2e:	d8ef      	bhi.n	8012b10 <ull_configure+0x3fc>
 8012b30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012b32:	7a1b      	ldrb	r3, [r3, #8]
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d0b1      	beq.n	8012a9c <ull_configure+0x388>
 8012b38:	4649      	mov	r1, r9
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	f7fe fda4 	bl	8011688 <ull_configmrxlut>
 8012b40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012b42:	8a13      	ldrh	r3, [r2, #16]
 8012b44:	f023 0308 	bic.w	r3, r3, #8
 8012b48:	8213      	strh	r3, [r2, #16]
 8012b4a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8012b54:	2200      	movs	r2, #0
 8012b56:	490d      	ldr	r1, [pc, #52]	; (8012b8c <ull_configure+0x478>)
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f7ff fcbd 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012b5e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8012b62:	bfcc      	ite	gt
 8012b64:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8012b68:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012b72:	2200      	movs	r2, #0
 8012b74:	4906      	ldr	r1, [pc, #24]	; (8012b90 <ull_configure+0x47c>)
 8012b76:	4620      	mov	r0, r4
 8012b78:	f7ff f920 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f7ff fd12 	bl	80125a8 <ull_pgf_cal>
 8012b84:	b003      	add	sp, #12
 8012b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8a:	bf00      	nop
 8012b8c:	00030018 	.word	0x00030018
 8012b90:	00060010 	.word	0x00060010

08012b94 <ull_initialise>:
 8012b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b96:	b083      	sub	sp, #12
 8012b98:	4605      	mov	r5, r0
 8012b9a:	460e      	mov	r6, r1
 8012b9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d051      	beq.n	8012c46 <ull_initialise+0xb2>
 8012ba2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	73a3      	strb	r3, [r4, #14]
 8012ba8:	2202      	movs	r2, #2
 8012baa:	8222      	strh	r2, [r4, #16]
 8012bac:	7523      	strb	r3, [r4, #20]
 8012bae:	7563      	strb	r3, [r4, #21]
 8012bb0:	73e3      	strb	r3, [r4, #15]
 8012bb2:	7263      	strb	r3, [r4, #9]
 8012bb4:	72a3      	strb	r3, [r4, #10]
 8012bb6:	2104      	movs	r1, #4
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f7fe fc8b 	bl	80114d4 <_dwt_otpread>
 8012bbe:	4607      	mov	r7, r0
 8012bc0:	2105      	movs	r1, #5
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f7fe fc86 	bl	80114d4 <_dwt_otpread>
 8012bc8:	b10f      	cbz	r7, 8012bce <ull_initialise+0x3a>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d140      	bne.n	8012c50 <ull_initialise+0xbc>
 8012bce:	2120      	movs	r1, #32
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f7fe fc7f 	bl	80114d4 <_dwt_otpread>
 8012bd6:	4b35      	ldr	r3, [pc, #212]	; (8012cac <ull_initialise+0x118>)
 8012bd8:	4298      	cmp	r0, r3
 8012bda:	bf0c      	ite	eq
 8012bdc:	2301      	moveq	r3, #1
 8012bde:	2300      	movne	r3, #0
 8012be0:	7223      	strb	r3, [r4, #8]
 8012be2:	f016 0f10 	tst.w	r6, #16
 8012be6:	d142      	bne.n	8012c6e <ull_initialise+0xda>
 8012be8:	f016 0f20 	tst.w	r6, #32
 8012bec:	d145      	bne.n	8012c7a <ull_initialise+0xe6>
 8012bee:	f016 0f40 	tst.w	r6, #64	; 0x40
 8012bf2:	d148      	bne.n	8012c86 <ull_initialise+0xf2>
 8012bf4:	f016 0f80 	tst.w	r6, #128	; 0x80
 8012bf8:	d14c      	bne.n	8012c94 <ull_initialise+0x100>
 8012bfa:	7aa3      	ldrb	r3, [r4, #10]
 8012bfc:	b90b      	cbnz	r3, 8012c02 <ull_initialise+0x6e>
 8012bfe:	2385      	movs	r3, #133	; 0x85
 8012c00:	72a3      	strb	r3, [r4, #10]
 8012c02:	7a63      	ldrb	r3, [r4, #9]
 8012c04:	b90b      	cbnz	r3, 8012c0a <ull_initialise+0x76>
 8012c06:	2374      	movs	r3, #116	; 0x74
 8012c08:	7263      	strb	r3, [r4, #9]
 8012c0a:	211f      	movs	r1, #31
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	f7fe fc61 	bl	80114d4 <_dwt_otpread>
 8012c12:	7320      	strb	r0, [r4, #12]
 8012c14:	211e      	movs	r1, #30
 8012c16:	4628      	mov	r0, r5
 8012c18:	f7fe fc5c 	bl	80114d4 <_dwt_otpread>
 8012c1c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8012c20:	bf12      	itee	ne
 8012c22:	7360      	strbne	r0, [r4, #13]
 8012c24:	232e      	moveq	r3, #46	; 0x2e
 8012c26:	7363      	strbeq	r3, [r4, #13]
 8012c28:	7b63      	ldrb	r3, [r4, #13]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4920      	ldr	r1, [pc, #128]	; (8012cb0 <ull_initialise+0x11c>)
 8012c2e:	4628      	mov	r0, r5
 8012c30:	f7fe fe00 	bl	8011834 <dwt_write8bitoffsetreg>
 8012c34:	2135      	movs	r1, #53	; 0x35
 8012c36:	4628      	mov	r0, r5
 8012c38:	f7fe fc4c 	bl	80114d4 <_dwt_otpread>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	bb78      	cbnz	r0, 8012ca0 <ull_initialise+0x10c>
 8012c40:	2000      	movs	r0, #0
 8012c42:	b003      	add	sp, #12
 8012c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c46:	2028      	movs	r0, #40	; 0x28
 8012c48:	f006 ff54 	bl	8019af4 <malloc>
 8012c4c:	6528      	str	r0, [r5, #80]	; 0x50
 8012c4e:	e7a8      	b.n	8012ba2 <ull_initialise+0xe>
 8012c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c54:	9300      	str	r3, [sp, #0]
 8012c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	4915      	ldr	r1, [pc, #84]	; (8012cb4 <ull_initialise+0x120>)
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f7ff fc3a 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8012c64:	8a23      	ldrh	r3, [r4, #16]
 8012c66:	f043 0310 	orr.w	r3, r3, #16
 8012c6a:	8223      	strh	r3, [r4, #16]
 8012c6c:	e7af      	b.n	8012bce <ull_initialise+0x3a>
 8012c6e:	2106      	movs	r1, #6
 8012c70:	4628      	mov	r0, r5
 8012c72:	f7fe fc2f 	bl	80114d4 <_dwt_otpread>
 8012c76:	6020      	str	r0, [r4, #0]
 8012c78:	e7b6      	b.n	8012be8 <ull_initialise+0x54>
 8012c7a:	2107      	movs	r1, #7
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f7fe fc29 	bl	80114d4 <_dwt_otpread>
 8012c82:	6060      	str	r0, [r4, #4]
 8012c84:	e7b3      	b.n	8012bee <ull_initialise+0x5a>
 8012c86:	2108      	movs	r1, #8
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f7fe fc23 	bl	80114d4 <_dwt_otpread>
 8012c8e:	0c00      	lsrs	r0, r0, #16
 8012c90:	7260      	strb	r0, [r4, #9]
 8012c92:	e7af      	b.n	8012bf4 <ull_initialise+0x60>
 8012c94:	2109      	movs	r1, #9
 8012c96:	4628      	mov	r0, r5
 8012c98:	f7fe fc1c 	bl	80114d4 <_dwt_otpread>
 8012c9c:	72a0      	strb	r0, [r4, #10]
 8012c9e:	e7ac      	b.n	8012bfa <ull_initialise+0x66>
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	4905      	ldr	r1, [pc, #20]	; (8012cb8 <ull_initialise+0x124>)
 8012ca4:	4628      	mov	r0, r5
 8012ca6:	f7fe fc37 	bl	8011518 <dwt_write32bitoffsetreg>
 8012caa:	e7c9      	b.n	8012c40 <ull_initialise+0xac>
 8012cac:	10000240 	.word	0x10000240
 8012cb0:	00090014 	.word	0x00090014
 8012cb4:	000b0008 	.word	0x000b0008
 8012cb8:	00090004 	.word	0x00090004

08012cbc <ull_rxenable>:
 8012cbc:	b530      	push	{r4, r5, lr}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	460c      	mov	r4, r1
 8012cc4:	b171      	cbz	r1, 8012ce4 <ull_rxenable+0x28>
 8012cc6:	f021 0302 	bic.w	r3, r1, #2
 8012cca:	3b01      	subs	r3, #1
 8012ccc:	2b0f      	cmp	r3, #15
 8012cce:	d862      	bhi.n	8012d96 <ull_rxenable+0xda>
 8012cd0:	e8df f003 	tbb	[pc, r3]
 8012cd4:	24616111 	.word	0x24616111
 8012cd8:	2d616161 	.word	0x2d616161
 8012cdc:	61616161 	.word	0x61616161
 8012ce0:	3a616161 	.word	0x3a616161
 8012ce4:	2102      	movs	r1, #2
 8012ce6:	9101      	str	r1, [sp, #4]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	9200      	str	r2, [sp, #0]
 8012cec:	4613      	mov	r3, r2
 8012cee:	f7fd ff16 	bl	8010b1e <dwt_xfer3xxx>
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	e010      	b.n	8012d18 <ull_rxenable+0x5c>
 8012cf6:	2302      	movs	r3, #2
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	9200      	str	r2, [sp, #0]
 8012cfe:	4613      	mov	r3, r2
 8012d00:	2104      	movs	r1, #4
 8012d02:	f7fd ff0c 	bl	8010b1e <dwt_xfer3xxx>
 8012d06:	2203      	movs	r2, #3
 8012d08:	2144      	movs	r1, #68	; 0x44
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f7fd ffb7 	bl	8010c7e <dwt_read8bitoffsetreg>
 8012d10:	f010 0f08 	tst.w	r0, #8
 8012d14:	d125      	bne.n	8012d62 <ull_rxenable+0xa6>
 8012d16:	2000      	movs	r0, #0
 8012d18:	b003      	add	sp, #12
 8012d1a:	bd30      	pop	{r4, r5, pc}
 8012d1c:	2302      	movs	r3, #2
 8012d1e:	9301      	str	r3, [sp, #4]
 8012d20:	2200      	movs	r2, #0
 8012d22:	9200      	str	r2, [sp, #0]
 8012d24:	4613      	mov	r3, r2
 8012d26:	210a      	movs	r1, #10
 8012d28:	f7fd fef9 	bl	8010b1e <dwt_xfer3xxx>
 8012d2c:	e7eb      	b.n	8012d06 <ull_rxenable+0x4a>
 8012d2e:	2100      	movs	r1, #0
 8012d30:	f7fe fc07 	bl	8011542 <_dwt_adjust_delaytime>
 8012d34:	2302      	movs	r3, #2
 8012d36:	9301      	str	r3, [sp, #4]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	9200      	str	r2, [sp, #0]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	2108      	movs	r1, #8
 8012d40:	4628      	mov	r0, r5
 8012d42:	f7fd feec 	bl	8010b1e <dwt_xfer3xxx>
 8012d46:	e7de      	b.n	8012d06 <ull_rxenable+0x4a>
 8012d48:	2101      	movs	r1, #1
 8012d4a:	f7fe fbfa 	bl	8011542 <_dwt_adjust_delaytime>
 8012d4e:	2302      	movs	r3, #2
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	2200      	movs	r2, #0
 8012d54:	9200      	str	r2, [sp, #0]
 8012d56:	4613      	mov	r3, r2
 8012d58:	2106      	movs	r1, #6
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	f7fd fedf 	bl	8010b1e <dwt_xfer3xxx>
 8012d60:	e7d1      	b.n	8012d06 <ull_rxenable+0x4a>
 8012d62:	2302      	movs	r3, #2
 8012d64:	9301      	str	r3, [sp, #4]
 8012d66:	2100      	movs	r1, #0
 8012d68:	9100      	str	r1, [sp, #0]
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	460a      	mov	r2, r1
 8012d6e:	4628      	mov	r0, r5
 8012d70:	f7fd fed5 	bl	8010b1e <dwt_xfer3xxx>
 8012d74:	f014 0f02 	tst.w	r4, #2
 8012d78:	d002      	beq.n	8012d80 <ull_rxenable+0xc4>
 8012d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d7e:	e7cb      	b.n	8012d18 <ull_rxenable+0x5c>
 8012d80:	2102      	movs	r1, #2
 8012d82:	9101      	str	r1, [sp, #4]
 8012d84:	2200      	movs	r2, #0
 8012d86:	9200      	str	r2, [sp, #0]
 8012d88:	4613      	mov	r3, r2
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	f7fd fec7 	bl	8010b1e <dwt_xfer3xxx>
 8012d90:	f04f 30ff 	mov.w	r0, #4294967295
 8012d94:	e7c0      	b.n	8012d18 <ull_rxenable+0x5c>
 8012d96:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9a:	e7bd      	b.n	8012d18 <ull_rxenable+0x5c>

08012d9c <ull_softreset_no_sema_fcmd>:
 8012d9c:	b570      	push	{r4, r5, r6, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	4606      	mov	r6, r0
 8012da2:	2502      	movs	r5, #2
 8012da4:	9501      	str	r5, [sp, #4]
 8012da6:	2400      	movs	r4, #0
 8012da8:	9400      	str	r4, [sp, #0]
 8012daa:	4623      	mov	r3, r4
 8012dac:	4622      	mov	r2, r4
 8012dae:	2119      	movs	r1, #25
 8012db0:	f7fd feb5 	bl	8010b1e <dwt_xfer3xxx>
 8012db4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012db6:	739c      	strb	r4, [r3, #14]
 8012db8:	821d      	strh	r5, [r3, #16]
 8012dba:	751c      	strb	r4, [r3, #20]
 8012dbc:	755c      	strb	r4, [r3, #21]
 8012dbe:	73dc      	strb	r4, [r3, #15]
 8012dc0:	b002      	add	sp, #8
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}

08012dc4 <ull_softreset_fcmd>:
 8012dc4:	b570      	push	{r4, r5, r6, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	4606      	mov	r6, r0
 8012dca:	2502      	movs	r5, #2
 8012dcc:	9501      	str	r5, [sp, #4]
 8012dce:	2400      	movs	r4, #0
 8012dd0:	9400      	str	r4, [sp, #0]
 8012dd2:	4623      	mov	r3, r4
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	2118      	movs	r1, #24
 8012dd8:	f7fd fea1 	bl	8010b1e <dwt_xfer3xxx>
 8012ddc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012dde:	739c      	strb	r4, [r3, #14]
 8012de0:	821d      	strh	r5, [r3, #16]
 8012de2:	751c      	strb	r4, [r3, #20]
 8012de4:	755c      	strb	r4, [r3, #21]
 8012de6:	73dc      	strb	r4, [r3, #15]
 8012de8:	b002      	add	sp, #8
 8012dea:	bd70      	pop	{r4, r5, r6, pc}

08012dec <dwt_ioctl>:
 8012dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df0:	b091      	sub	sp, #68	; 0x44
 8012df2:	4606      	mov	r6, r0
 8012df4:	4615      	mov	r5, r2
 8012df6:	461c      	mov	r4, r3
 8012df8:	299c      	cmp	r1, #156	; 0x9c
 8012dfa:	f200 809f 	bhi.w	8012f3c <dwt_ioctl+0x150>
 8012dfe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012e02:	0a54      	.short	0x0a54
 8012e04:	00a30a5f 	.word	0x00a30a5f
 8012e08:	00c000a7 	.word	0x00c000a7
 8012e0c:	0192014c 	.word	0x0192014c
 8012e10:	0156016f 	.word	0x0156016f
 8012e14:	01ad01a2 	.word	0x01ad01a2
 8012e18:	01bd01b5 	.word	0x01bd01b5
 8012e1c:	01cd01c5 	.word	0x01cd01c5
 8012e20:	01d901d5 	.word	0x01d901d5
 8012e24:	027201e1 	.word	0x027201e1
 8012e28:	02850280 	.word	0x02850280
 8012e2c:	0294028f 	.word	0x0294028f
 8012e30:	02a20299 	.word	0x02a20299
 8012e34:	02dd02a7 	.word	0x02dd02a7
 8012e38:	030502fa 	.word	0x030502fa
 8012e3c:	031a0310 	.word	0x031a0310
 8012e40:	03480352 	.word	0x03480352
 8012e44:	0324033e 	.word	0x0324033e
 8012e48:	03810331 	.word	0x03810331
 8012e4c:	022f01fc 	.word	0x022f01fc
 8012e50:	0245023d 	.word	0x0245023d
 8012e54:	097d0259 	.word	0x097d0259
 8012e58:	03610982 	.word	0x03610982
 8012e5c:	03a3039f 	.word	0x03a3039f
 8012e60:	03b103ac 	.word	0x03b103ac
 8012e64:	03e503db 	.word	0x03e503db
 8012e68:	041703ed 	.word	0x041703ed
 8012e6c:	042e0423 	.word	0x042e0423
 8012e70:	04390357 	.word	0x04390357
 8012e74:	04540442 	.word	0x04540442
 8012e78:	047e046d 	.word	0x047e046d
 8012e7c:	04ca04c0 	.word	0x04ca04c0
 8012e80:	04ff04f0 	.word	0x04ff04f0
 8012e84:	0508051a 	.word	0x0508051a
 8012e88:	056a0524 	.word	0x056a0524
 8012e8c:	05a20582 	.word	0x05a20582
 8012e90:	05e505d1 	.word	0x05e505d1
 8012e94:	060a05ee 	.word	0x060a05ee
 8012e98:	074305f7 	.word	0x074305f7
 8012e9c:	07d30785 	.word	0x07d30785
 8012ea0:	07e407d9 	.word	0x07e407d9
 8012ea4:	081d07fd 	.word	0x081d07fd
 8012ea8:	08310827 	.word	0x08310827
 8012eac:	0868085f 	.word	0x0868085f
 8012eb0:	0877086e 	.word	0x0877086e
 8012eb4:	08910884 	.word	0x08910884
 8012eb8:	08a4089b 	.word	0x08a4089b
 8012ebc:	08b808ad 	.word	0x08b808ad
 8012ec0:	08c908c3 	.word	0x08c908c3
 8012ec4:	08f708ec 	.word	0x08f708ec
 8012ec8:	090d0902 	.word	0x090d0902
 8012ecc:	0959094e 	.word	0x0959094e
 8012ed0:	09880972 	.word	0x09880972
 8012ed4:	0a0709fd 	.word	0x0a0709fd
 8012ed8:	0a670a12 	.word	0x0a670a12
 8012edc:	0a490a1c 	.word	0x0a490a1c
 8012ee0:	09c60777 	.word	0x09c60777
 8012ee4:	0ad509e7 	.word	0x0ad509e7
 8012ee8:	0a740aca 	.word	0x0a740aca
 8012eec:	0a8a0a7f 	.word	0x0a8a0a7f
 8012ef0:	0aa00a95 	.word	0x0aa00a95
 8012ef4:	0ab60aab 	.word	0x0ab60aab
 8012ef8:	0cb50abf 	.word	0x0cb50abf
 8012efc:	0d2a0cef 	.word	0x0d2a0cef
 8012f00:	0df90d4d 	.word	0x0df90d4d
 8012f04:	0afd0e0e 	.word	0x0afd0e0e
 8012f08:	0bf40bc1 	.word	0x0bf40bc1
 8012f0c:	0c040bff 	.word	0x0c040bff
 8012f10:	0c140c09 	.word	0x0c140c09
 8012f14:	0c320c27 	.word	0x0c320c27
 8012f18:	0c5c0c47 	.word	0x0c5c0c47
 8012f1c:	009d0c98 	.word	0x009d0c98
 8012f20:	009d009d 	.word	0x009d009d
 8012f24:	009d009d 	.word	0x009d009d
 8012f28:	009d009d 	.word	0x009d009d
 8012f2c:	0d64009d 	.word	0x0d64009d
 8012f30:	0ec20d75 	.word	0x0ec20d75
 8012f34:	0db40dbf 	.word	0x0db40dbf
 8012f38:	0dca0dd3 	.word	0x0dca0dd3
 8012f3c:	f04f 35ff 	mov.w	r5, #4294967295
 8012f40:	4628      	mov	r0, r5
 8012f42:	b011      	add	sp, #68	; 0x44
 8012f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f48:	6843      	ldr	r3, [r0, #4]
 8012f4a:	4798      	blx	r3
 8012f4c:	2500      	movs	r5, #0
 8012f4e:	e7f7      	b.n	8012f40 <dwt_ioctl+0x154>
 8012f50:	2202      	movs	r2, #2
 8012f52:	49b4      	ldr	r1, [pc, #720]	; (8013224 <dwt_ioctl+0x438>)
 8012f54:	f7fd fe93 	bl	8010c7e <dwt_read8bitoffsetreg>
 8012f58:	2803      	cmp	r0, #3
 8012f5a:	d801      	bhi.n	8012f60 <dwt_ioctl+0x174>
 8012f5c:	2500      	movs	r5, #0
 8012f5e:	e7ef      	b.n	8012f40 <dwt_ioctl+0x154>
 8012f60:	f7f8 fe24 	bl	800bbac <decamutexon>
 8012f64:	4604      	mov	r4, r0
 8012f66:	2302      	movs	r3, #2
 8012f68:	9301      	str	r3, [sp, #4]
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	9500      	str	r5, [sp, #0]
 8012f6e:	462b      	mov	r3, r5
 8012f70:	462a      	mov	r2, r5
 8012f72:	4629      	mov	r1, r5
 8012f74:	4630      	mov	r0, r6
 8012f76:	f7fd fdd2 	bl	8010b1e <dwt_xfer3xxx>
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	f7f8 fe27 	bl	800bbce <decamutexoff>
 8012f80:	e7de      	b.n	8012f40 <dwt_ioctl+0x154>
 8012f82:	2c00      	cmp	r4, #0
 8012f84:	f001 8602 	beq.w	8014b8c <dwt_ioctl+0x1da0>
 8012f88:	7824      	ldrb	r4, [r4, #0]
 8012f8a:	f014 0f1d 	tst.w	r4, #29
 8012f8e:	d061      	beq.n	8013054 <dwt_ioctl+0x268>
 8012f90:	f014 0f01 	tst.w	r4, #1
 8012f94:	d023      	beq.n	8012fde <dwt_ioctl+0x1f2>
 8012f96:	f014 0f02 	tst.w	r4, #2
 8012f9a:	f04f 0302 	mov.w	r3, #2
 8012f9e:	9301      	str	r3, [sp, #4]
 8012fa0:	f04f 0200 	mov.w	r2, #0
 8012fa4:	9200      	str	r2, [sp, #0]
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	bf14      	ite	ne
 8012faa:	210d      	movne	r1, #13
 8012fac:	2103      	moveq	r1, #3
 8012fae:	f7fd fdb6 	bl	8010b1e <dwt_xfer3xxx>
 8012fb2:	2203      	movs	r2, #3
 8012fb4:	2144      	movs	r1, #68	; 0x44
 8012fb6:	4630      	mov	r0, r6
 8012fb8:	f7fd fe61 	bl	8010c7e <dwt_read8bitoffsetreg>
 8012fbc:	f010 0f08 	tst.w	r0, #8
 8012fc0:	bf08      	it	eq
 8012fc2:	2500      	moveq	r5, #0
 8012fc4:	d0bc      	beq.n	8012f40 <dwt_ioctl+0x154>
 8012fc6:	2302      	movs	r3, #2
 8012fc8:	9301      	str	r3, [sp, #4]
 8012fca:	2100      	movs	r1, #0
 8012fcc:	9100      	str	r1, [sp, #0]
 8012fce:	460b      	mov	r3, r1
 8012fd0:	460a      	mov	r2, r1
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	f7fd fda3 	bl	8010b1e <dwt_xfer3xxx>
 8012fd8:	f04f 35ff 	mov.w	r5, #4294967295
 8012fdc:	e7b0      	b.n	8012f40 <dwt_ioctl+0x154>
 8012fde:	f014 0f08 	tst.w	r4, #8
 8012fe2:	d111      	bne.n	8013008 <dwt_ioctl+0x21c>
 8012fe4:	f014 0f10 	tst.w	r4, #16
 8012fe8:	d121      	bne.n	801302e <dwt_ioctl+0x242>
 8012fea:	f014 0f02 	tst.w	r4, #2
 8012fee:	f04f 0302 	mov.w	r3, #2
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	f04f 0200 	mov.w	r2, #0
 8012ff8:	9200      	str	r2, [sp, #0]
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	bf14      	ite	ne
 8012ffe:	2110      	movne	r1, #16
 8013000:	2109      	moveq	r1, #9
 8013002:	f7fd fd8c 	bl	8010b1e <dwt_xfer3xxx>
 8013006:	e7d4      	b.n	8012fb2 <dwt_ioctl+0x1c6>
 8013008:	2100      	movs	r1, #0
 801300a:	f7fe fa9a 	bl	8011542 <_dwt_adjust_delaytime>
 801300e:	f014 0f02 	tst.w	r4, #2
 8013012:	f04f 0302 	mov.w	r3, #2
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	f04f 0200 	mov.w	r2, #0
 801301c:	9200      	str	r2, [sp, #0]
 801301e:	4613      	mov	r3, r2
 8013020:	bf14      	ite	ne
 8013022:	210f      	movne	r1, #15
 8013024:	2107      	moveq	r1, #7
 8013026:	4630      	mov	r0, r6
 8013028:	f7fd fd79 	bl	8010b1e <dwt_xfer3xxx>
 801302c:	e7c1      	b.n	8012fb2 <dwt_ioctl+0x1c6>
 801302e:	2101      	movs	r1, #1
 8013030:	f7fe fa87 	bl	8011542 <_dwt_adjust_delaytime>
 8013034:	f014 0f02 	tst.w	r4, #2
 8013038:	f04f 0302 	mov.w	r3, #2
 801303c:	9301      	str	r3, [sp, #4]
 801303e:	f04f 0200 	mov.w	r2, #0
 8013042:	9200      	str	r2, [sp, #0]
 8013044:	4613      	mov	r3, r2
 8013046:	bf14      	ite	ne
 8013048:	210e      	movne	r1, #14
 801304a:	2105      	moveq	r1, #5
 801304c:	4630      	mov	r0, r6
 801304e:	f7fd fd66 	bl	8010b1e <dwt_xfer3xxx>
 8013052:	e7ae      	b.n	8012fb2 <dwt_ioctl+0x1c6>
 8013054:	f014 0f20 	tst.w	r4, #32
 8013058:	d00f      	beq.n	801307a <dwt_ioctl+0x28e>
 801305a:	f014 0f02 	tst.w	r4, #2
 801305e:	f04f 0302 	mov.w	r3, #2
 8013062:	9301      	str	r3, [sp, #4]
 8013064:	f04f 0500 	mov.w	r5, #0
 8013068:	9500      	str	r5, [sp, #0]
 801306a:	462b      	mov	r3, r5
 801306c:	462a      	mov	r2, r5
 801306e:	bf14      	ite	ne
 8013070:	2111      	movne	r1, #17
 8013072:	210b      	moveq	r1, #11
 8013074:	f7fd fd53 	bl	8010b1e <dwt_xfer3xxx>
 8013078:	e762      	b.n	8012f40 <dwt_ioctl+0x154>
 801307a:	f014 0f02 	tst.w	r4, #2
 801307e:	f04f 0302 	mov.w	r3, #2
 8013082:	9301      	str	r3, [sp, #4]
 8013084:	f04f 0500 	mov.w	r5, #0
 8013088:	9500      	str	r5, [sp, #0]
 801308a:	462b      	mov	r3, r5
 801308c:	462a      	mov	r2, r5
 801308e:	bf14      	ite	ne
 8013090:	210c      	movne	r1, #12
 8013092:	2101      	moveq	r1, #1
 8013094:	f7fd fd43 	bl	8010b1e <dwt_xfer3xxx>
 8013098:	e752      	b.n	8012f40 <dwt_ioctl+0x154>
 801309a:	2c00      	cmp	r4, #0
 801309c:	f001 8579 	beq.w	8014b92 <dwt_ioctl+0x1da6>
 80130a0:	6823      	ldr	r3, [r4, #0]
 80130a2:	2200      	movs	r2, #0
 80130a4:	2128      	movs	r1, #40	; 0x28
 80130a6:	f7fe fa37 	bl	8011518 <dwt_write32bitoffsetreg>
 80130aa:	2500      	movs	r5, #0
 80130ac:	e748      	b.n	8012f40 <dwt_ioctl+0x154>
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	2200      	movs	r2, #0
 80130b2:	495d      	ldr	r1, [pc, #372]	; (8013228 <dwt_ioctl+0x43c>)
 80130b4:	f7fe fa30 	bl	8011518 <dwt_write32bitoffsetreg>
 80130b8:	6863      	ldr	r3, [r4, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	495b      	ldr	r1, [pc, #364]	; (801322c <dwt_ioctl+0x440>)
 80130be:	4630      	mov	r0, r6
 80130c0:	f7fe fa2a 	bl	8011518 <dwt_write32bitoffsetreg>
 80130c4:	68a3      	ldr	r3, [r4, #8]
 80130c6:	2200      	movs	r2, #0
 80130c8:	4959      	ldr	r1, [pc, #356]	; (8013230 <dwt_ioctl+0x444>)
 80130ca:	4630      	mov	r0, r6
 80130cc:	f7fe fa24 	bl	8011518 <dwt_write32bitoffsetreg>
 80130d0:	68e3      	ldr	r3, [r4, #12]
 80130d2:	2200      	movs	r2, #0
 80130d4:	4957      	ldr	r1, [pc, #348]	; (8013234 <dwt_ioctl+0x448>)
 80130d6:	4630      	mov	r0, r6
 80130d8:	f7fe fa1e 	bl	8011518 <dwt_write32bitoffsetreg>
 80130dc:	2500      	movs	r5, #0
 80130de:	e72f      	b.n	8012f40 <dwt_ioctl+0x154>
 80130e0:	2c00      	cmp	r4, #0
 80130e2:	f001 8559 	beq.w	8014b98 <dwt_ioctl+0x1dac>
 80130e6:	8823      	ldrh	r3, [r4, #0]
 80130e8:	6865      	ldr	r5, [r4, #4]
 80130ea:	2d03      	cmp	r5, #3
 80130ec:	f201 8557 	bhi.w	8014b9e <dwt_ioctl+0x1db2>
 80130f0:	e8df f005 	tbb	[pc, r5]
 80130f4:	130d0702 	.word	0x130d0702
 80130f8:	2200      	movs	r2, #0
 80130fa:	494f      	ldr	r1, [pc, #316]	; (8013238 <dwt_ioctl+0x44c>)
 80130fc:	f7fe f9af 	bl	801145e <dwt_write16bitoffsetreg>
 8013100:	e71e      	b.n	8012f40 <dwt_ioctl+0x154>
 8013102:	2202      	movs	r2, #2
 8013104:	494c      	ldr	r1, [pc, #304]	; (8013238 <dwt_ioctl+0x44c>)
 8013106:	f7fe f9aa 	bl	801145e <dwt_write16bitoffsetreg>
 801310a:	2500      	movs	r5, #0
 801310c:	e718      	b.n	8012f40 <dwt_ioctl+0x154>
 801310e:	2200      	movs	r2, #0
 8013110:	494a      	ldr	r1, [pc, #296]	; (801323c <dwt_ioctl+0x450>)
 8013112:	f7fe f9a4 	bl	801145e <dwt_write16bitoffsetreg>
 8013116:	2500      	movs	r5, #0
 8013118:	e712      	b.n	8012f40 <dwt_ioctl+0x154>
 801311a:	2202      	movs	r2, #2
 801311c:	4947      	ldr	r1, [pc, #284]	; (801323c <dwt_ioctl+0x450>)
 801311e:	f7fe f99e 	bl	801145e <dwt_write16bitoffsetreg>
 8013122:	2500      	movs	r5, #0
 8013124:	e70c      	b.n	8012f40 <dwt_ioctl+0x154>
 8013126:	2c00      	cmp	r4, #0
 8013128:	f001 853c 	beq.w	8014ba4 <dwt_ioctl+0x1db8>
 801312c:	7823      	ldrb	r3, [r4, #0]
 801312e:	005b      	lsls	r3, r3, #1
 8013130:	f003 0306 	and.w	r3, r3, #6
 8013134:	9300      	str	r3, [sp, #0]
 8013136:	f06f 0306 	mvn.w	r3, #6
 801313a:	2200      	movs	r2, #0
 801313c:	4940      	ldr	r1, [pc, #256]	; (8013240 <dwt_ioctl+0x454>)
 801313e:	f7fe fe3d 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8013142:	2500      	movs	r5, #0
 8013144:	e6fc      	b.n	8012f40 <dwt_ioctl+0x154>
 8013146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	f04f 33ff 	mov.w	r3, #4294967295
 8013150:	2200      	movs	r2, #0
 8013152:	493c      	ldr	r1, [pc, #240]	; (8013244 <dwt_ioctl+0x458>)
 8013154:	f7fe fe32 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8013158:	2500      	movs	r5, #0
 801315a:	e6f1      	b.n	8012f40 <dwt_ioctl+0x154>
 801315c:	2c00      	cmp	r4, #0
 801315e:	f001 8524 	beq.w	8014baa <dwt_ioctl+0x1dbe>
 8013162:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013164:	7b1b      	ldrb	r3, [r3, #12]
 8013166:	7023      	strb	r3, [r4, #0]
 8013168:	2500      	movs	r5, #0
 801316a:	e6e9      	b.n	8012f40 <dwt_ioctl+0x154>
 801316c:	2c00      	cmp	r4, #0
 801316e:	f001 851f 	beq.w	8014bb0 <dwt_ioctl+0x1dc4>
 8013172:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013174:	7a5b      	ldrb	r3, [r3, #9]
 8013176:	7023      	strb	r3, [r4, #0]
 8013178:	2500      	movs	r5, #0
 801317a:	e6e1      	b.n	8012f40 <dwt_ioctl+0x154>
 801317c:	2c00      	cmp	r4, #0
 801317e:	f001 851a 	beq.w	8014bb6 <dwt_ioctl+0x1dca>
 8013182:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013184:	7a9b      	ldrb	r3, [r3, #10]
 8013186:	7023      	strb	r3, [r4, #0]
 8013188:	2500      	movs	r5, #0
 801318a:	e6d9      	b.n	8012f40 <dwt_ioctl+0x154>
 801318c:	2c00      	cmp	r4, #0
 801318e:	f001 8515 	beq.w	8014bbc <dwt_ioctl+0x1dd0>
 8013192:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	6023      	str	r3, [r4, #0]
 8013198:	2500      	movs	r5, #0
 801319a:	e6d1      	b.n	8012f40 <dwt_ioctl+0x154>
 801319c:	2c00      	cmp	r4, #0
 801319e:	f001 8510 	beq.w	8014bc2 <dwt_ioctl+0x1dd6>
 80131a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	6023      	str	r3, [r4, #0]
 80131a8:	2500      	movs	r5, #0
 80131aa:	e6c9      	b.n	8012f40 <dwt_ioctl+0x154>
 80131ac:	f7fe fc72 	bl	8011a94 <ull_signal_rx_buff_free>
 80131b0:	2500      	movs	r5, #0
 80131b2:	e6c5      	b.n	8012f40 <dwt_ioctl+0x154>
 80131b4:	2c00      	cmp	r4, #0
 80131b6:	f001 8507 	beq.w	8014bc8 <dwt_ioctl+0x1ddc>
 80131ba:	6821      	ldr	r1, [r4, #0]
 80131bc:	f7fe f9e7 	bl	801158e <ull_setrxaftertxdelay>
 80131c0:	2500      	movs	r5, #0
 80131c2:	e6bd      	b.n	8012f40 <dwt_ioctl+0x154>
 80131c4:	2c00      	cmp	r4, #0
 80131c6:	f001 8502 	beq.w	8014bce <dwt_ioctl+0x1de2>
 80131ca:	7825      	ldrb	r5, [r4, #0]
 80131cc:	b15d      	cbz	r5, 80131e6 <dwt_ioctl+0x3fa>
 80131ce:	6864      	ldr	r4, [r4, #4]
 80131d0:	2340      	movs	r3, #64	; 0x40
 80131d2:	9300      	str	r3, [sp, #0]
 80131d4:	23ff      	movs	r3, #255	; 0xff
 80131d6:	2200      	movs	r2, #0
 80131d8:	2110      	movs	r1, #16
 80131da:	f7fe ff61 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80131de:	2d02      	cmp	r5, #2
 80131e0:	d107      	bne.n	80131f2 <dwt_ioctl+0x406>
 80131e2:	60f4      	str	r4, [r6, #12]
 80131e4:	e005      	b.n	80131f2 <dwt_ioctl+0x406>
 80131e6:	2200      	movs	r2, #0
 80131e8:	9200      	str	r2, [sp, #0]
 80131ea:	23bf      	movs	r3, #191	; 0xbf
 80131ec:	2110      	movs	r1, #16
 80131ee:	f7fe ff57 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80131f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80131f4:	751d      	strb	r5, [r3, #20]
 80131f6:	2500      	movs	r5, #0
 80131f8:	e6a2      	b.n	8012f40 <dwt_ioctl+0x154>
 80131fa:	2c00      	cmp	r4, #0
 80131fc:	f001 84ea 	beq.w	8014bd4 <dwt_ioctl+0x1de8>
 8013200:	6865      	ldr	r5, [r4, #4]
 8013202:	7823      	ldrb	r3, [r4, #0]
 8013204:	2203      	movs	r2, #3
 8013206:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801320a:	f7fe fb13 	bl	8011834 <dwt_write8bitoffsetreg>
 801320e:	b9dd      	cbnz	r5, 8013248 <dwt_ioctl+0x45c>
 8013210:	2200      	movs	r2, #0
 8013212:	9200      	str	r2, [sp, #0]
 8013214:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8013218:	2110      	movs	r1, #16
 801321a:	4630      	mov	r0, r6
 801321c:	f7ff f95c 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8013220:	e68e      	b.n	8012f40 <dwt_ioctl+0x154>
 8013222:	bf00      	nop
 8013224:	000f0030 	.word	0x000f0030
 8013228:	00010054 	.word	0x00010054
 801322c:	00010058 	.word	0x00010058
 8013230:	0001005c 	.word	0x0001005c
 8013234:	00010060 	.word	0x00010060
 8013238:	0001000c 	.word	0x0001000c
 801323c:	00010010 	.word	0x00010010
 8013240:	00010008 	.word	0x00010008
 8013244:	00110004 	.word	0x00110004
 8013248:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	f04f 33ff 	mov.w	r3, #4294967295
 8013252:	2200      	movs	r2, #0
 8013254:	2110      	movs	r1, #16
 8013256:	4630      	mov	r0, r6
 8013258:	f7fe fdb0 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801325c:	2500      	movs	r5, #0
 801325e:	e66f      	b.n	8012f40 <dwt_ioctl+0x154>
 8013260:	2200      	movs	r2, #0
 8013262:	4611      	mov	r1, r2
 8013264:	f7fd fce3 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013268:	68b2      	ldr	r2, [r6, #8]
 801326a:	6813      	ldr	r3, [r2, #0]
 801326c:	4043      	eors	r3, r0
 801326e:	6852      	ldr	r2, [r2, #4]
 8013270:	4213      	tst	r3, r2
 8013272:	bf14      	ite	ne
 8013274:	f04f 35ff 	movne.w	r5, #4294967295
 8013278:	2500      	moveq	r5, #0
 801327a:	e661      	b.n	8012f40 <dwt_ioctl+0x154>
 801327c:	2c00      	cmp	r4, #0
 801327e:	f001 84ac 	beq.w	8014bda <dwt_ioctl+0x1dee>
 8013282:	7821      	ldrb	r1, [r4, #0]
 8013284:	f7fe ff20 	bl	80120c8 <ull_configciadiag>
 8013288:	2500      	movs	r5, #0
 801328a:	e659      	b.n	8012f40 <dwt_ioctl+0x154>
 801328c:	b93a      	cbnz	r2, 801329e <dwt_ioctl+0x4b2>
 801328e:	2200      	movs	r2, #0
 8013290:	9200      	str	r2, [sp, #0]
 8013292:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8013296:	49b8      	ldr	r1, [pc, #736]	; (8013578 <dwt_ioctl+0x78c>)
 8013298:	f7ff f91e 	bl	80124d8 <dwt_modify16bitoffsetreg>
 801329c:	e650      	b.n	8012f40 <dwt_ioctl+0x154>
 801329e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132a8:	2200      	movs	r2, #0
 80132aa:	49b3      	ldr	r1, [pc, #716]	; (8013578 <dwt_ioctl+0x78c>)
 80132ac:	f7ff f914 	bl	80124d8 <dwt_modify16bitoffsetreg>
 80132b0:	2500      	movs	r5, #0
 80132b2:	e645      	b.n	8012f40 <dwt_ioctl+0x154>
 80132b4:	f002 0201 	and.w	r2, r2, #1
 80132b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132bc:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80132c0:	2a00      	cmp	r2, #0
 80132c2:	bf08      	it	eq
 80132c4:	460b      	moveq	r3, r1
 80132c6:	02d2      	lsls	r2, r2, #11
 80132c8:	f015 0f02 	tst.w	r5, #2
 80132cc:	bf12      	itee	ne
 80132ce:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80132d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80132d6:	b29b      	uxtheq	r3, r3
 80132d8:	9200      	str	r2, [sp, #0]
 80132da:	2200      	movs	r2, #0
 80132dc:	49a6      	ldr	r1, [pc, #664]	; (8013578 <dwt_ioctl+0x78c>)
 80132de:	f7ff f8fb 	bl	80124d8 <dwt_modify16bitoffsetreg>
 80132e2:	2500      	movs	r5, #0
 80132e4:	e62c      	b.n	8012f40 <dwt_ioctl+0x154>
 80132e6:	b92a      	cbnz	r2, 80132f4 <dwt_ioctl+0x508>
 80132e8:	4ba4      	ldr	r3, [pc, #656]	; (801357c <dwt_ioctl+0x790>)
 80132ea:	2202      	movs	r2, #2
 80132ec:	49a4      	ldr	r1, [pc, #656]	; (8013580 <dwt_ioctl+0x794>)
 80132ee:	f7fe f913 	bl	8011518 <dwt_write32bitoffsetreg>
 80132f2:	e625      	b.n	8012f40 <dwt_ioctl+0x154>
 80132f4:	4ba3      	ldr	r3, [pc, #652]	; (8013584 <dwt_ioctl+0x798>)
 80132f6:	2202      	movs	r2, #2
 80132f8:	49a1      	ldr	r1, [pc, #644]	; (8013580 <dwt_ioctl+0x794>)
 80132fa:	f7fe f90d 	bl	8011518 <dwt_write32bitoffsetreg>
 80132fe:	2500      	movs	r5, #0
 8013300:	e61e      	b.n	8012f40 <dwt_ioctl+0x154>
 8013302:	4611      	mov	r1, r2
 8013304:	f7fe f957 	bl	80115b6 <ull_setlnapamode>
 8013308:	2500      	movs	r5, #0
 801330a:	e619      	b.n	8012f40 <dwt_ioctl+0x154>
 801330c:	2c00      	cmp	r4, #0
 801330e:	f001 8467 	beq.w	8014be0 <dwt_ioctl+0x1df4>
 8013312:	2200      	movs	r2, #0
 8013314:	499c      	ldr	r1, [pc, #624]	; (8013588 <dwt_ioctl+0x79c>)
 8013316:	f7fd fcb2 	bl	8010c7e <dwt_read8bitoffsetreg>
 801331a:	7020      	strb	r0, [r4, #0]
 801331c:	2500      	movs	r5, #0
 801331e:	e60f      	b.n	8012f40 <dwt_ioctl+0x154>
 8013320:	4621      	mov	r1, r4
 8013322:	f7fe f969 	bl	80115f8 <ull_configurestskey>
 8013326:	2500      	movs	r5, #0
 8013328:	e60a      	b.n	8012f40 <dwt_ioctl+0x154>
 801332a:	4621      	mov	r1, r4
 801332c:	f7fe f988 	bl	8011640 <ull_configurestsiv>
 8013330:	2500      	movs	r5, #0
 8013332:	e605      	b.n	8012f40 <dwt_ioctl+0x154>
 8013334:	2301      	movs	r3, #1
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	23ff      	movs	r3, #255	; 0xff
 801333a:	2200      	movs	r2, #0
 801333c:	4993      	ldr	r1, [pc, #588]	; (801358c <dwt_ioctl+0x7a0>)
 801333e:	f7fe feaf 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8013342:	2500      	movs	r5, #0
 8013344:	e5fc      	b.n	8012f40 <dwt_ioctl+0x154>
 8013346:	4611      	mov	r1, r2
 8013348:	f7fe f99e 	bl	8011688 <ull_configmrxlut>
 801334c:	2500      	movs	r5, #0
 801334e:	e5f7      	b.n	8012f40 <dwt_ioctl+0x154>
 8013350:	2318      	movs	r3, #24
 8013352:	2200      	movs	r2, #0
 8013354:	498e      	ldr	r1, [pc, #568]	; (8013590 <dwt_ioctl+0x7a4>)
 8013356:	f7fe f8df 	bl	8011518 <dwt_write32bitoffsetreg>
 801335a:	23e8      	movs	r3, #232	; 0xe8
 801335c:	2200      	movs	r2, #0
 801335e:	498d      	ldr	r1, [pc, #564]	; (8013594 <dwt_ioctl+0x7a8>)
 8013360:	4630      	mov	r0, r6
 8013362:	f7fe f8d9 	bl	8011518 <dwt_write32bitoffsetreg>
 8013366:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013368:	7d9b      	ldrb	r3, [r3, #22]
 801336a:	085b      	lsrs	r3, r3, #1
 801336c:	d01a      	beq.n	80133a4 <dwt_ioctl+0x5b8>
 801336e:	2200      	movs	r2, #0
 8013370:	4989      	ldr	r1, [pc, #548]	; (8013598 <dwt_ioctl+0x7ac>)
 8013372:	4630      	mov	r0, r6
 8013374:	f7fd fc71 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013378:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 801337c:	3b09      	subs	r3, #9
 801337e:	2b0f      	cmp	r3, #15
 8013380:	f201 8431 	bhi.w	8014be6 <dwt_ioctl+0x1dfa>
 8013384:	f000 0001 	and.w	r0, r0, #1
 8013388:	2800      	cmp	r0, #0
 801338a:	bf0c      	ite	eq
 801338c:	2105      	moveq	r1, #5
 801338e:	2109      	movne	r1, #9
 8013390:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013392:	7a1b      	ldrb	r3, [r3, #8]
 8013394:	2b01      	cmp	r3, #1
 8013396:	f001 8429 	beq.w	8014bec <dwt_ioctl+0x1e00>
 801339a:	4630      	mov	r0, r6
 801339c:	f7fe f974 	bl	8011688 <ull_configmrxlut>
 80133a0:	2500      	movs	r5, #0
 80133a2:	e5cd      	b.n	8012f40 <dwt_ioctl+0x154>
 80133a4:	2301      	movs	r3, #1
 80133a6:	2200      	movs	r2, #0
 80133a8:	497c      	ldr	r1, [pc, #496]	; (801359c <dwt_ioctl+0x7b0>)
 80133aa:	4630      	mov	r0, r6
 80133ac:	f7fe fa42 	bl	8011834 <dwt_write8bitoffsetreg>
 80133b0:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80133b2:	7d93      	ldrb	r3, [r2, #22]
 80133b4:	f043 0302 	orr.w	r3, r3, #2
 80133b8:	7593      	strb	r3, [r2, #22]
 80133ba:	e7d8      	b.n	801336e <dwt_ioctl+0x582>
 80133bc:	2c00      	cmp	r4, #0
 80133be:	f001 8418 	beq.w	8014bf2 <dwt_ioctl+0x1e06>
 80133c2:	7824      	ldrb	r4, [r4, #0]
 80133c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80133c6:	755c      	strb	r4, [r3, #21]
 80133c8:	0323      	lsls	r3, r4, #12
 80133ca:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	f644 73ff 	movw	r3, #20479	; 0x4fff
 80133d4:	2200      	movs	r2, #0
 80133d6:	2110      	movs	r1, #16
 80133d8:	f7ff f87e 	bl	80124d8 <dwt_modify16bitoffsetreg>
 80133dc:	f004 0403 	and.w	r4, r4, #3
 80133e0:	2c03      	cmp	r4, #3
 80133e2:	bf0c      	ite	eq
 80133e4:	4b6e      	ldreq	r3, [pc, #440]	; (80135a0 <dwt_ioctl+0x7b4>)
 80133e6:	4b6f      	ldrne	r3, [pc, #444]	; (80135a4 <dwt_ioctl+0x7b8>)
 80133e8:	2200      	movs	r2, #0
 80133ea:	496f      	ldr	r1, [pc, #444]	; (80135a8 <dwt_ioctl+0x7bc>)
 80133ec:	4630      	mov	r0, r6
 80133ee:	f7fe f893 	bl	8011518 <dwt_write32bitoffsetreg>
 80133f2:	2500      	movs	r5, #0
 80133f4:	e5a4      	b.n	8012f40 <dwt_ioctl+0x154>
 80133f6:	2c00      	cmp	r4, #0
 80133f8:	f001 83fe 	beq.w	8014bf8 <dwt_ioctl+0x1e0c>
 80133fc:	8823      	ldrh	r3, [r4, #0]
 80133fe:	2200      	movs	r2, #0
 8013400:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8013404:	f7fe f82b 	bl	801145e <dwt_write16bitoffsetreg>
 8013408:	2500      	movs	r5, #0
 801340a:	e599      	b.n	8012f40 <dwt_ioctl+0x154>
 801340c:	2c00      	cmp	r4, #0
 801340e:	f001 83f6 	beq.w	8014bfe <dwt_ioctl+0x1e12>
 8013412:	2200      	movs	r2, #0
 8013414:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8013418:	f7fd fc1f 	bl	8010c5a <dwt_read16bitoffsetreg>
 801341c:	8020      	strh	r0, [r4, #0]
 801341e:	2500      	movs	r5, #0
 8013420:	e58e      	b.n	8012f40 <dwt_ioctl+0x154>
 8013422:	2c00      	cmp	r4, #0
 8013424:	f001 83ee 	beq.w	8014c04 <dwt_ioctl+0x1e18>
 8013428:	8823      	ldrh	r3, [r4, #0]
 801342a:	2200      	movs	r2, #0
 801342c:	217c      	movs	r1, #124	; 0x7c
 801342e:	f7fe f816 	bl	801145e <dwt_write16bitoffsetreg>
 8013432:	2500      	movs	r5, #0
 8013434:	e584      	b.n	8012f40 <dwt_ioctl+0x154>
 8013436:	2c00      	cmp	r4, #0
 8013438:	f001 83e7 	beq.w	8014c0a <dwt_ioctl+0x1e1e>
 801343c:	2200      	movs	r2, #0
 801343e:	217c      	movs	r1, #124	; 0x7c
 8013440:	f7fd fc0b 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013444:	8020      	strh	r0, [r4, #0]
 8013446:	2500      	movs	r5, #0
 8013448:	e57a      	b.n	8012f40 <dwt_ioctl+0x154>
 801344a:	2c00      	cmp	r4, #0
 801344c:	f001 83e0 	beq.w	8014c10 <dwt_ioctl+0x1e24>
 8013450:	88a3      	ldrh	r3, [r4, #4]
 8013452:	88e2      	ldrh	r2, [r4, #6]
 8013454:	6821      	ldr	r1, [r4, #0]
 8013456:	9100      	str	r1, [sp, #0]
 8013458:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 801345c:	f7fd fff4 	bl	8011448 <dwt_writetodevice>
 8013460:	2500      	movs	r5, #0
 8013462:	e56d      	b.n	8012f40 <dwt_ioctl+0x154>
 8013464:	2c00      	cmp	r4, #0
 8013466:	f001 83d6 	beq.w	8014c16 <dwt_ioctl+0x1e2a>
 801346a:	88a3      	ldrh	r3, [r4, #4]
 801346c:	88e2      	ldrh	r2, [r4, #6]
 801346e:	6821      	ldr	r1, [r4, #0]
 8013470:	9100      	str	r1, [sp, #0]
 8013472:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8013476:	f7fd fbd0 	bl	8010c1a <dwt_readfromdevice>
 801347a:	2500      	movs	r5, #0
 801347c:	e560      	b.n	8012f40 <dwt_ioctl+0x154>
 801347e:	2c00      	cmp	r4, #0
 8013480:	f001 83cc 	beq.w	8014c1c <dwt_ioctl+0x1e30>
 8013484:	88e3      	ldrh	r3, [r4, #6]
 8013486:	88a2      	ldrh	r2, [r4, #4]
 8013488:	6821      	ldr	r1, [r4, #0]
 801348a:	f7fe f99d 	bl	80117c8 <ull_readrxdata>
 801348e:	2500      	movs	r5, #0
 8013490:	e556      	b.n	8012f40 <dwt_ioctl+0x154>
 8013492:	2c00      	cmp	r4, #0
 8013494:	f001 83c5 	beq.w	8014c22 <dwt_ioctl+0x1e36>
 8013498:	88e3      	ldrh	r3, [r4, #6]
 801349a:	6822      	ldr	r2, [r4, #0]
 801349c:	88a1      	ldrh	r1, [r4, #4]
 801349e:	f7fe fac7 	bl	8011a30 <ull_writetxdata>
 80134a2:	2500      	movs	r5, #0
 80134a4:	e54c      	b.n	8012f40 <dwt_ioctl+0x154>
 80134a6:	4611      	mov	r1, r2
 80134a8:	f7ff fc08 	bl	8012cbc <ull_rxenable>
 80134ac:	2500      	movs	r5, #0
 80134ae:	e547      	b.n	8012f40 <dwt_ioctl+0x154>
 80134b0:	2c00      	cmp	r4, #0
 80134b2:	f001 83b9 	beq.w	8014c28 <dwt_ioctl+0x1e3c>
 80134b6:	7923      	ldrb	r3, [r4, #4]
 80134b8:	8862      	ldrh	r2, [r4, #2]
 80134ba:	8821      	ldrh	r1, [r4, #0]
 80134bc:	f7fe fdbe 	bl	801203c <ull_writetxfctrl>
 80134c0:	2500      	movs	r5, #0
 80134c2:	e53d      	b.n	8012f40 <dwt_ioctl+0x154>
 80134c4:	2c00      	cmp	r4, #0
 80134c6:	f001 83b2 	beq.w	8014c2e <dwt_ioctl+0x1e42>
 80134ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80134cc:	7b9b      	ldrb	r3, [r3, #14]
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d00c      	beq.n	80134ec <dwt_ioctl+0x700>
 80134d2:	2b03      	cmp	r3, #3
 80134d4:	d110      	bne.n	80134f8 <dwt_ioctl+0x70c>
 80134d6:	220c      	movs	r2, #12
 80134d8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80134dc:	f7fd fbbd 	bl	8010c5a <dwt_read16bitoffsetreg>
 80134e0:	b200      	sxth	r0, r0
 80134e2:	f340 030c 	sbfx	r3, r0, #0, #13
 80134e6:	8023      	strh	r3, [r4, #0]
 80134e8:	2500      	movs	r5, #0
 80134ea:	e529      	b.n	8012f40 <dwt_ioctl+0x154>
 80134ec:	2200      	movs	r2, #0
 80134ee:	492f      	ldr	r1, [pc, #188]	; (80135ac <dwt_ioctl+0x7c0>)
 80134f0:	f7fd fbb3 	bl	8010c5a <dwt_read16bitoffsetreg>
 80134f4:	b200      	sxth	r0, r0
 80134f6:	e7f4      	b.n	80134e2 <dwt_ioctl+0x6f6>
 80134f8:	2200      	movs	r2, #0
 80134fa:	492d      	ldr	r1, [pc, #180]	; (80135b0 <dwt_ioctl+0x7c4>)
 80134fc:	f7fd fbad 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013500:	b200      	sxth	r0, r0
 8013502:	e7ee      	b.n	80134e2 <dwt_ioctl+0x6f6>
 8013504:	2c00      	cmp	r4, #0
 8013506:	f001 8395 	beq.w	8014c34 <dwt_ioctl+0x1e48>
 801350a:	ab0c      	add	r3, sp, #48	; 0x30
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	2303      	movs	r3, #3
 8013510:	2200      	movs	r2, #0
 8013512:	4928      	ldr	r1, [pc, #160]	; (80135b4 <dwt_ioctl+0x7c8>)
 8013514:	f7fd fb81 	bl	8010c1a <dwt_readfromdevice>
 8013518:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 801351c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8013520:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8013524:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8013528:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801352c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8013530:	bf1c      	itt	ne
 8013532:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8013536:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 801353a:	6023      	str	r3, [r4, #0]
 801353c:	2500      	movs	r5, #0
 801353e:	e4ff      	b.n	8012f40 <dwt_ioctl+0x154>
 8013540:	f7fe f9d0 	bl	80118e4 <ull_clearaonconfig>
 8013544:	2500      	movs	r5, #0
 8013546:	e4fb      	b.n	8012f40 <dwt_ioctl+0x154>
 8013548:	2c00      	cmp	r4, #0
 801354a:	f001 8376 	beq.w	8014c3a <dwt_ioctl+0x1e4e>
 801354e:	8861      	ldrh	r1, [r4, #2]
 8013550:	f7fe fdf0 	bl	8012134 <ull_calcbandwidthadj>
 8013554:	7020      	strb	r0, [r4, #0]
 8013556:	2500      	movs	r5, #0
 8013558:	e4f2      	b.n	8012f40 <dwt_ioctl+0x154>
 801355a:	4621      	mov	r1, r4
 801355c:	f7fd fb9d 	bl	8010c9a <ull_readdiagnostics>
 8013560:	2500      	movs	r5, #0
 8013562:	e4ed      	b.n	8012f40 <dwt_ioctl+0x154>
 8013564:	2c00      	cmp	r4, #0
 8013566:	f001 836b 	beq.w	8014c40 <dwt_ioctl+0x1e54>
 801356a:	2201      	movs	r2, #1
 801356c:	2170      	movs	r1, #112	; 0x70
 801356e:	f7fd fb5e 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013572:	6020      	str	r0, [r4, #0]
 8013574:	2500      	movs	r5, #0
 8013576:	e4e3      	b.n	8012f40 <dwt_ioctl+0x154>
 8013578:	00110008 	.word	0x00110008
 801357c:	00d20874 	.word	0x00d20874
 8013580:	00110010 	.word	0x00110010
 8013584:	04d28874 	.word	0x04d28874
 8013588:	0007001c 	.word	0x0007001c
 801358c:	00020004 	.word	0x00020004
 8013590:	001f000c 	.word	0x001f000c
 8013594:	001f0010 	.word	0x001f0010
 8013598:	00010008 	.word	0x00010008
 801359c:	00010020 	.word	0x00010020
 80135a0:	af5f35cc 	.word	0xaf5f35cc
 80135a4:	af5f584c 	.word	0xaf5f584c
 80135a8:	0006000c 	.word	0x0006000c
 80135ac:	0018000c 	.word	0x0018000c
 80135b0:	000c0020 	.word	0x000c0020
 80135b4:	00060029 	.word	0x00060029
 80135b8:	2c00      	cmp	r4, #0
 80135ba:	f001 8344 	beq.w	8014c46 <dwt_ioctl+0x1e5a>
 80135be:	2200      	movs	r2, #0
 80135c0:	2170      	movs	r1, #112	; 0x70
 80135c2:	f7fd fb34 	bl	8010c2e <dwt_read32bitoffsetreg>
 80135c6:	6020      	str	r0, [r4, #0]
 80135c8:	2500      	movs	r5, #0
 80135ca:	e4b9      	b.n	8012f40 <dwt_ioctl+0x154>
 80135cc:	9400      	str	r4, [sp, #0]
 80135ce:	2305      	movs	r3, #5
 80135d0:	2200      	movs	r2, #0
 80135d2:	2170      	movs	r1, #112	; 0x70
 80135d4:	f7fd fb21 	bl	8010c1a <dwt_readfromdevice>
 80135d8:	2500      	movs	r5, #0
 80135da:	e4b1      	b.n	8012f40 <dwt_ioctl+0x154>
 80135dc:	2c00      	cmp	r4, #0
 80135de:	f001 8335 	beq.w	8014c4c <dwt_ioctl+0x1e60>
 80135e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80135e4:	7b9b      	ldrb	r3, [r3, #14]
 80135e6:	2b01      	cmp	r3, #1
 80135e8:	d014      	beq.n	8013614 <dwt_ioctl+0x828>
 80135ea:	2b03      	cmp	r3, #3
 80135ec:	d119      	bne.n	8013622 <dwt_ioctl+0x836>
 80135ee:	2216      	movs	r2, #22
 80135f0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80135f4:	f7fd fb31 	bl	8010c5a <dwt_read16bitoffsetreg>
 80135f8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80135fc:	b283      	uxth	r3, r0
 80135fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8013602:	d004      	beq.n	801360e <dwt_ioctl+0x822>
 8013604:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8013608:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 801360c:	b218      	sxth	r0, r3
 801360e:	8020      	strh	r0, [r4, #0]
 8013610:	2500      	movs	r5, #0
 8013612:	e495      	b.n	8012f40 <dwt_ioctl+0x154>
 8013614:	2202      	movs	r2, #2
 8013616:	49d6      	ldr	r1, [pc, #856]	; (8013970 <dwt_ioctl+0xb84>)
 8013618:	f7fd fb1f 	bl	8010c5a <dwt_read16bitoffsetreg>
 801361c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8013620:	e7ec      	b.n	80135fc <dwt_ioctl+0x810>
 8013622:	2202      	movs	r2, #2
 8013624:	49d3      	ldr	r1, [pc, #844]	; (8013974 <dwt_ioctl+0xb88>)
 8013626:	f7fd fb18 	bl	8010c5a <dwt_read16bitoffsetreg>
 801362a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801362e:	e7e5      	b.n	80135fc <dwt_ioctl+0x810>
 8013630:	9400      	str	r4, [sp, #0]
 8013632:	2306      	movs	r3, #6
 8013634:	2200      	movs	r2, #0
 8013636:	49d0      	ldr	r1, [pc, #832]	; (8013978 <dwt_ioctl+0xb8c>)
 8013638:	f7fd faef 	bl	8010c1a <dwt_readfromdevice>
 801363c:	7963      	ldrb	r3, [r4, #5]
 801363e:	f003 0301 	and.w	r3, r3, #1
 8013642:	7163      	strb	r3, [r4, #5]
 8013644:	2500      	movs	r5, #0
 8013646:	e47b      	b.n	8012f40 <dwt_ioctl+0x154>
 8013648:	2c00      	cmp	r4, #0
 801364a:	f001 8302 	beq.w	8014c52 <dwt_ioctl+0x1e66>
 801364e:	2201      	movs	r2, #1
 8013650:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8013654:	f7fd fb13 	bl	8010c7e <dwt_read8bitoffsetreg>
 8013658:	7020      	strb	r0, [r4, #0]
 801365a:	2500      	movs	r5, #0
 801365c:	e470      	b.n	8012f40 <dwt_ioctl+0x154>
 801365e:	2c00      	cmp	r4, #0
 8013660:	f001 82fa 	beq.w	8014c58 <dwt_ioctl+0x1e6c>
 8013664:	2200      	movs	r2, #0
 8013666:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801366a:	f7fd fb08 	bl	8010c7e <dwt_read8bitoffsetreg>
 801366e:	7020      	strb	r0, [r4, #0]
 8013670:	2500      	movs	r5, #0
 8013672:	e465      	b.n	8012f40 <dwt_ioctl+0x154>
 8013674:	2c00      	cmp	r4, #0
 8013676:	f001 82f2 	beq.w	8014c5e <dwt_ioctl+0x1e72>
 801367a:	88a2      	ldrh	r2, [r4, #4]
 801367c:	6821      	ldr	r1, [r4, #0]
 801367e:	f7fe fc07 	bl	8011e90 <_dwt_otpprogword32>
 8013682:	2500      	movs	r5, #0
 8013684:	e45c      	b.n	8012f40 <dwt_ioctl+0x154>
 8013686:	2c00      	cmp	r4, #0
 8013688:	f001 82ec 	beq.w	8014c64 <dwt_ioctl+0x1e78>
 801368c:	6825      	ldr	r5, [r4, #0]
 801368e:	88a4      	ldrh	r4, [r4, #4]
 8013690:	4622      	mov	r2, r4
 8013692:	4629      	mov	r1, r5
 8013694:	f7fe fbfc 	bl	8011e90 <_dwt_otpprogword32>
 8013698:	4621      	mov	r1, r4
 801369a:	4630      	mov	r0, r6
 801369c:	f7fd ff1a 	bl	80114d4 <_dwt_otpread>
 80136a0:	1a2d      	subs	r5, r5, r0
 80136a2:	bf18      	it	ne
 80136a4:	f04f 35ff 	movne.w	r5, #4294967295
 80136a8:	e44a      	b.n	8012f40 <dwt_ioctl+0x154>
 80136aa:	2a02      	cmp	r2, #2
 80136ac:	d00e      	beq.n	80136cc <dwt_ioctl+0x8e0>
 80136ae:	4cb3      	ldr	r4, [pc, #716]	; (801397c <dwt_ioctl+0xb90>)
 80136b0:	2300      	movs	r3, #0
 80136b2:	461a      	mov	r2, r3
 80136b4:	4621      	mov	r1, r4
 80136b6:	4630      	mov	r0, r6
 80136b8:	f7fe f8bc 	bl	8011834 <dwt_write8bitoffsetreg>
 80136bc:	2302      	movs	r3, #2
 80136be:	2200      	movs	r2, #0
 80136c0:	4621      	mov	r1, r4
 80136c2:	4630      	mov	r0, r6
 80136c4:	f7fe f8b6 	bl	8011834 <dwt_write8bitoffsetreg>
 80136c8:	2500      	movs	r5, #0
 80136ca:	e439      	b.n	8012f40 <dwt_ioctl+0x154>
 80136cc:	2300      	movs	r3, #0
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	23fe      	movs	r3, #254	; 0xfe
 80136d2:	2201      	movs	r2, #1
 80136d4:	49aa      	ldr	r1, [pc, #680]	; (8013980 <dwt_ioctl+0xb94>)
 80136d6:	f7fe fce3 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80136da:	e7e8      	b.n	80136ae <dwt_ioctl+0x8c2>
 80136dc:	2c00      	cmp	r4, #0
 80136de:	f001 82c4 	beq.w	8014c6a <dwt_ioctl+0x1e7e>
 80136e2:	8824      	ldrh	r4, [r4, #0]
 80136e4:	b2e2      	uxtb	r2, r4
 80136e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80136ea:	f7fe f94f 	bl	801198c <ull_aon_write>
 80136ee:	0a22      	lsrs	r2, r4, #8
 80136f0:	f240 1103 	movw	r1, #259	; 0x103
 80136f4:	4630      	mov	r0, r6
 80136f6:	f7fe f949 	bl	801198c <ull_aon_write>
 80136fa:	2500      	movs	r5, #0
 80136fc:	e420      	b.n	8012f40 <dwt_ioctl+0x154>
 80136fe:	2c00      	cmp	r4, #0
 8013700:	f001 82b6 	beq.w	8014c70 <dwt_ioctl+0x1e84>
 8013704:	f8df 8284 	ldr.w	r8, [pc, #644]	; 801398c <dwt_ioctl+0xba0>
 8013708:	2310      	movs	r3, #16
 801370a:	9300      	str	r3, [sp, #0]
 801370c:	23ff      	movs	r3, #255	; 0xff
 801370e:	2200      	movs	r2, #0
 8013710:	4641      	mov	r1, r8
 8013712:	f7fe fcc5 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8013716:	f44f 7182 	mov.w	r1, #260	; 0x104
 801371a:	4630      	mov	r0, r6
 801371c:	f7fe f916 	bl	801194c <ull_aon_read>
 8013720:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8013724:	462a      	mov	r2, r5
 8013726:	f44f 7182 	mov.w	r1, #260	; 0x104
 801372a:	4630      	mov	r0, r6
 801372c:	f7fe f92e 	bl	801198c <ull_aon_write>
 8013730:	f045 0204 	orr.w	r2, r5, #4
 8013734:	f44f 7182 	mov.w	r1, #260	; 0x104
 8013738:	4630      	mov	r0, r6
 801373a:	f7fe f927 	bl	801198c <ull_aon_write>
 801373e:	2002      	movs	r0, #2
 8013740:	f7f8 fa52 	bl	800bbe8 <deca_sleep>
 8013744:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8013748:	4630      	mov	r0, r6
 801374a:	f7fe f8ff 	bl	801194c <ull_aon_read>
 801374e:	4607      	mov	r7, r0
 8013750:	f240 110f 	movw	r1, #271	; 0x10f
 8013754:	4630      	mov	r0, r6
 8013756:	f7fe f8f9 	bl	801194c <ull_aon_read>
 801375a:	4681      	mov	r9, r0
 801375c:	462a      	mov	r2, r5
 801375e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8013762:	4630      	mov	r0, r6
 8013764:	f7fe f912 	bl	801198c <ull_aon_write>
 8013768:	2500      	movs	r5, #0
 801376a:	9500      	str	r5, [sp, #0]
 801376c:	23ef      	movs	r3, #239	; 0xef
 801376e:	462a      	mov	r2, r5
 8013770:	4641      	mov	r1, r8
 8013772:	4630      	mov	r0, r6
 8013774:	f7fe fc94 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8013778:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 801377c:	8027      	strh	r7, [r4, #0]
 801377e:	f7ff bbdf 	b.w	8012f40 <dwt_ioctl+0x154>
 8013782:	2c00      	cmp	r4, #0
 8013784:	f001 8277 	beq.w	8014c76 <dwt_ioctl+0x1e8a>
 8013788:	78a2      	ldrb	r2, [r4, #2]
 801378a:	8821      	ldrh	r1, [r4, #0]
 801378c:	f7fe f926 	bl	80119dc <ull_configuresleep>
 8013790:	2500      	movs	r5, #0
 8013792:	f7ff bbd5 	b.w	8012f40 <dwt_ioctl+0x154>
 8013796:	2c00      	cmp	r4, #0
 8013798:	f001 8270 	beq.w	8014c7c <dwt_ioctl+0x1e90>
 801379c:	6824      	ldr	r4, [r4, #0]
 801379e:	f7fe f8a1 	bl	80118e4 <ull_clearaonconfig>
 80137a2:	2001      	movs	r0, #1
 80137a4:	f7f8 fa20 	bl	800bbe8 <deca_sleep>
 80137a8:	2303      	movs	r3, #3
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	23ff      	movs	r3, #255	; 0xff
 80137ae:	2200      	movs	r2, #0
 80137b0:	4974      	ldr	r1, [pc, #464]	; (8013984 <dwt_ioctl+0xb98>)
 80137b2:	4630      	mov	r0, r6
 80137b4:	f7fe fc74 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80137b8:	b97c      	cbnz	r4, 80137da <dwt_ioctl+0x9ee>
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff faee 	bl	8012d9c <ull_softreset_no_sema_fcmd>
 80137c0:	2001      	movs	r0, #1
 80137c2:	f7f8 fa11 	bl	800bbe8 <deca_sleep>
 80137c6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80137c8:	2500      	movs	r5, #0
 80137ca:	739d      	strb	r5, [r3, #14]
 80137cc:	2202      	movs	r2, #2
 80137ce:	821a      	strh	r2, [r3, #16]
 80137d0:	751d      	strb	r5, [r3, #20]
 80137d2:	755d      	strb	r5, [r3, #21]
 80137d4:	73dd      	strb	r5, [r3, #15]
 80137d6:	f7ff bbb3 	b.w	8012f40 <dwt_ioctl+0x154>
 80137da:	4630      	mov	r0, r6
 80137dc:	f7ff faf2 	bl	8012dc4 <ull_softreset_fcmd>
 80137e0:	e7ee      	b.n	80137c0 <dwt_ioctl+0x9d4>
 80137e2:	2c00      	cmp	r4, #0
 80137e4:	f001 824d 	beq.w	8014c82 <dwt_ioctl+0x1e96>
 80137e8:	7823      	ldrb	r3, [r4, #0]
 80137ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137ee:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80137f0:	7353      	strb	r3, [r2, #13]
 80137f2:	2200      	movs	r2, #0
 80137f4:	4964      	ldr	r1, [pc, #400]	; (8013988 <dwt_ioctl+0xb9c>)
 80137f6:	f7fe f81d 	bl	8011834 <dwt_write8bitoffsetreg>
 80137fa:	2500      	movs	r5, #0
 80137fc:	f7ff bba0 	b.w	8012f40 <dwt_ioctl+0x154>
 8013800:	2c00      	cmp	r4, #0
 8013802:	f001 8241 	beq.w	8014c88 <dwt_ioctl+0x1e9c>
 8013806:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013808:	7b5b      	ldrb	r3, [r3, #13]
 801380a:	7023      	strb	r3, [r4, #0]
 801380c:	2500      	movs	r5, #0
 801380e:	f7ff bb97 	b.w	8012f40 <dwt_ioctl+0x154>
 8013812:	2101      	movs	r1, #1
 8013814:	f7fe faf6 	bl	8011e04 <ull_enable_rf_tx>
 8013818:	4630      	mov	r0, r6
 801381a:	f7fe fb27 	bl	8011e6c <ull_enable_rftx_blocks>
 801381e:	2101      	movs	r1, #1
 8013820:	4630      	mov	r0, r6
 8013822:	f7fd fe2d 	bl	8011480 <ull_force_clocks>
 8013826:	220f      	movs	r2, #15
 8013828:	2101      	movs	r1, #1
 801382a:	4630      	mov	r0, r6
 801382c:	f7fe ff48 	bl	80126c0 <ull_repeated_cw>
 8013830:	2500      	movs	r5, #0
 8013832:	f7ff bb85 	b.w	8012f40 <dwt_ioctl+0x154>
 8013836:	2c00      	cmp	r4, #0
 8013838:	f001 8229 	beq.w	8014c8e <dwt_ioctl+0x1ea2>
 801383c:	6862      	ldr	r2, [r4, #4]
 801383e:	6821      	ldr	r1, [r4, #0]
 8013840:	f7fe ff3e 	bl	80126c0 <ull_repeated_cw>
 8013844:	2500      	movs	r5, #0
 8013846:	f7ff bb7b 	b.w	8012f40 <dwt_ioctl+0x154>
 801384a:	2c00      	cmp	r4, #0
 801384c:	f001 8222 	beq.w	8014c94 <dwt_ioctl+0x1ea8>
 8013850:	4d4e      	ldr	r5, [pc, #312]	; (801398c <dwt_ioctl+0xba0>)
 8013852:	2200      	movs	r2, #0
 8013854:	4629      	mov	r1, r5
 8013856:	f7fd fa12 	bl	8010c7e <dwt_read8bitoffsetreg>
 801385a:	4680      	mov	r8, r0
 801385c:	2302      	movs	r3, #2
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	23ff      	movs	r3, #255	; 0xff
 8013862:	2200      	movs	r2, #0
 8013864:	4629      	mov	r1, r5
 8013866:	4630      	mov	r0, r6
 8013868:	f7fe fc1a 	bl	80120a0 <dwt_modify8bitoffsetreg>
 801386c:	2304      	movs	r3, #4
 801386e:	2200      	movs	r2, #0
 8013870:	4947      	ldr	r1, [pc, #284]	; (8013990 <dwt_ioctl+0xba4>)
 8013872:	4630      	mov	r0, r6
 8013874:	f7fd ffde 	bl	8011834 <dwt_write8bitoffsetreg>
 8013878:	2301      	movs	r3, #1
 801387a:	2200      	movs	r2, #0
 801387c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013880:	4630      	mov	r0, r6
 8013882:	f7fd ffd7 	bl	8011834 <dwt_write8bitoffsetreg>
 8013886:	4f43      	ldr	r7, [pc, #268]	; (8013994 <dwt_ioctl+0xba8>)
 8013888:	2500      	movs	r5, #0
 801388a:	462a      	mov	r2, r5
 801388c:	4639      	mov	r1, r7
 801388e:	4630      	mov	r0, r6
 8013890:	f7fd f9f5 	bl	8010c7e <dwt_read8bitoffsetreg>
 8013894:	f010 0f01 	tst.w	r0, #1
 8013898:	d0f7      	beq.n	801388a <dwt_ioctl+0xa9e>
 801389a:	2200      	movs	r2, #0
 801389c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80138a0:	4630      	mov	r0, r6
 80138a2:	f7fd f9da 	bl	8010c5a <dwt_read16bitoffsetreg>
 80138a6:	4605      	mov	r5, r0
 80138a8:	2300      	movs	r3, #0
 80138aa:	461a      	mov	r2, r3
 80138ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80138b0:	4630      	mov	r0, r6
 80138b2:	f7fd ffbf 	bl	8011834 <dwt_write8bitoffsetreg>
 80138b6:	2300      	movs	r3, #0
 80138b8:	461a      	mov	r2, r3
 80138ba:	4935      	ldr	r1, [pc, #212]	; (8013990 <dwt_ioctl+0xba4>)
 80138bc:	4630      	mov	r0, r6
 80138be:	f7fd ffb9 	bl	8011834 <dwt_write8bitoffsetreg>
 80138c2:	4643      	mov	r3, r8
 80138c4:	2200      	movs	r2, #0
 80138c6:	4931      	ldr	r1, [pc, #196]	; (801398c <dwt_ioctl+0xba0>)
 80138c8:	4630      	mov	r0, r6
 80138ca:	f7fd ffb3 	bl	8011834 <dwt_write8bitoffsetreg>
 80138ce:	8025      	strh	r5, [r4, #0]
 80138d0:	2500      	movs	r5, #0
 80138d2:	f7ff bb35 	b.w	8012f40 <dwt_ioctl+0x154>
 80138d6:	2c00      	cmp	r4, #0
 80138d8:	f001 81df 	beq.w	8014c9a <dwt_ioctl+0x1eae>
 80138dc:	7923      	ldrb	r3, [r4, #4]
 80138de:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80138e0:	7a92      	ldrb	r2, [r2, #10]
 80138e2:	1a9b      	subs	r3, r3, r2
 80138e4:	ee07 3a90 	vmov	s15, r3
 80138e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8013998 <dwt_ioctl+0xbac>
 80138f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80138f4:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80138f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138fc:	edc4 7a00 	vstr	s15, [r4]
 8013900:	2500      	movs	r5, #0
 8013902:	f7ff bb1d 	b.w	8012f40 <dwt_ioctl+0x154>
 8013906:	2c00      	cmp	r4, #0
 8013908:	f001 81ca 	beq.w	8014ca0 <dwt_ioctl+0x1eb4>
 801390c:	7923      	ldrb	r3, [r4, #4]
 801390e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8013910:	7a52      	ldrb	r2, [r2, #9]
 8013912:	1a9b      	subs	r3, r3, r2
 8013914:	ee07 3a90 	vmov	s15, r3
 8013918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801391c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801399c <dwt_ioctl+0xbb0>
 8013920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013924:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8013928:	ee67 7a87 	vmul.f32	s15, s15, s14
 801392c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80139a0 <dwt_ioctl+0xbb4>
 8013930:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013934:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013938:	ee77 7a27 	vadd.f32	s15, s14, s15
 801393c:	edc4 7a00 	vstr	s15, [r4]
 8013940:	2500      	movs	r5, #0
 8013942:	f7ff bafd 	b.w	8012f40 <dwt_ioctl+0x154>
 8013946:	2c00      	cmp	r4, #0
 8013948:	f001 81ad 	beq.w	8014ca6 <dwt_ioctl+0x1eba>
 801394c:	6824      	ldr	r4, [r4, #0]
 801394e:	2101      	movs	r1, #1
 8013950:	f7fe fa58 	bl	8011e04 <ull_enable_rf_tx>
 8013954:	4630      	mov	r0, r6
 8013956:	f7fe fa89 	bl	8011e6c <ull_enable_rftx_blocks>
 801395a:	2101      	movs	r1, #1
 801395c:	4630      	mov	r0, r6
 801395e:	f7fd fd8f 	bl	8011480 <ull_force_clocks>
 8013962:	4621      	mov	r1, r4
 8013964:	4630      	mov	r0, r6
 8013966:	f7fe fc41 	bl	80121ec <ull_repeated_frames>
 801396a:	2500      	movs	r5, #0
 801396c:	f7ff bae8 	b.w	8012f40 <dwt_ioctl+0x154>
 8013970:	00180014 	.word	0x00180014
 8013974:	000c001c 	.word	0x000c001c
 8013978:	000c0018 	.word	0x000c0018
 801397c:	000a0004 	.word	0x000a0004
 8013980:	00110008 	.word	0x00110008
 8013984:	00110004 	.word	0x00110004
 8013988:	00090014 	.word	0x00090014
 801398c:	00070048 	.word	0x00070048
 8013990:	00070034 	.word	0x00070034
 8013994:	00080004 	.word	0x00080004
 8013998:	3f866666 	.word	0x3f866666
 801399c:	3ecccccd 	.word	0x3ecccccd
 80139a0:	437f0000 	.word	0x437f0000
 80139a4:	2500      	movs	r5, #0
 80139a6:	9500      	str	r5, [sp, #0]
 80139a8:	23ef      	movs	r3, #239	; 0xef
 80139aa:	462a      	mov	r2, r5
 80139ac:	49c7      	ldr	r1, [pc, #796]	; (8013ccc <dwt_ioctl+0xee0>)
 80139ae:	f7fe fb77 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80139b2:	2105      	movs	r1, #5
 80139b4:	4630      	mov	r0, r6
 80139b6:	f7fd fd63 	bl	8011480 <ull_force_clocks>
 80139ba:	2101      	movs	r1, #1
 80139bc:	4630      	mov	r0, r6
 80139be:	f7fd fee5 	bl	801178c <ull_disable_rf_tx>
 80139c2:	4630      	mov	r0, r6
 80139c4:	f7fd fed8 	bl	8011778 <ull_disable_rftx_blocks>
 80139c8:	f7ff baba 	b.w	8012f40 <dwt_ioctl+0x154>
 80139cc:	2500      	movs	r5, #0
 80139ce:	9500      	str	r5, [sp, #0]
 80139d0:	23ef      	movs	r3, #239	; 0xef
 80139d2:	462a      	mov	r2, r5
 80139d4:	49bd      	ldr	r1, [pc, #756]	; (8013ccc <dwt_ioctl+0xee0>)
 80139d6:	f7fe fb63 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80139da:	f7ff bab1 	b.w	8012f40 <dwt_ioctl+0x154>
 80139de:	2c00      	cmp	r4, #0
 80139e0:	f001 8164 	beq.w	8014cac <dwt_ioctl+0x1ec0>
 80139e4:	6821      	ldr	r1, [r4, #0]
 80139e6:	f7fe fc01 	bl	80121ec <ull_repeated_frames>
 80139ea:	2500      	movs	r5, #0
 80139ec:	f7ff baa8 	b.w	8012f40 <dwt_ioctl+0x154>
 80139f0:	2200      	movs	r2, #0
 80139f2:	49b7      	ldr	r1, [pc, #732]	; (8013cd0 <dwt_ioctl+0xee4>)
 80139f4:	f7fd f931 	bl	8010c5a <dwt_read16bitoffsetreg>
 80139f8:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80139fc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8013a00:	bf18      	it	ne
 8013a02:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8013a06:	b22d      	sxth	r5, r5
 8013a08:	8025      	strh	r5, [r4, #0]
 8013a0a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013a0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013a10:	1aed      	subs	r5, r5, r3
 8013a12:	f7ff ba95 	b.w	8012f40 <dwt_ioctl+0x154>
 8013a16:	2c00      	cmp	r4, #0
 8013a18:	f001 814b 	beq.w	8014cb2 <dwt_ioctl+0x1ec6>
 8013a1c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013a20:	7a23      	ldrb	r3, [r4, #8]
 8013a22:	f899 2013 	ldrb.w	r2, [r9, #19]
 8013a26:	2aff      	cmp	r2, #255	; 0xff
 8013a28:	f000 8122 	beq.w	8013c70 <dwt_ioctl+0xe84>
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d136      	bne.n	8013a9e <dwt_ioctl+0xcb2>
 8013a30:	f8d9 3000 	ldr.w	r3, [r9]
 8013a34:	9300      	str	r3, [sp, #0]
 8013a36:	230c      	movs	r3, #12
 8013a38:	2200      	movs	r2, #0
 8013a3a:	49a6      	ldr	r1, [pc, #664]	; (8013cd4 <dwt_ioctl+0xee8>)
 8013a3c:	f7fd fd04 	bl	8011448 <dwt_writetodevice>
 8013a40:	f899 300c 	ldrb.w	r3, [r9, #12]
 8013a44:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8013a48:	18d1      	adds	r1, r2, r3
 8013a4a:	f899 2012 	ldrb.w	r2, [r9, #18]
 8013a4e:	2a00      	cmp	r2, #0
 8013a50:	d15f      	bne.n	8013b12 <dwt_ioctl+0xd26>
 8013a52:	f899 0010 	ldrb.w	r0, [r9, #16]
 8013a56:	2800      	cmp	r0, #0
 8013a58:	bf0b      	itete	eq
 8013a5a:	227f      	moveq	r2, #127	; 0x7f
 8013a5c:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8013a60:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8013a64:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8013a68:	f899 0013 	ldrb.w	r0, [r9, #19]
 8013a6c:	1a12      	subs	r2, r2, r0
 8013a6e:	3a02      	subs	r2, #2
 8013a70:	4291      	cmp	r1, r2
 8013a72:	f200 8103 	bhi.w	8013c7c <dwt_ioctl+0xe90>
 8013a76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013a7a:	9200      	str	r2, [sp, #0]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	4629      	mov	r1, r5
 8013a80:	4630      	mov	r0, r6
 8013a82:	f7fd fce1 	bl	8011448 <dwt_writetodevice>
 8013a86:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8013a8a:	f899 200c 	ldrb.w	r2, [r9, #12]
 8013a8e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8013a92:	9100      	str	r1, [sp, #0]
 8013a94:	4629      	mov	r1, r5
 8013a96:	4630      	mov	r0, r6
 8013a98:	f7fd fcd6 	bl	8011448 <dwt_writetodevice>
 8013a9c:	e04a      	b.n	8013b34 <dwt_ioctl+0xd48>
 8013a9e:	f8d9 3000 	ldr.w	r3, [r9]
 8013aa2:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8013aa6:	7a9a      	ldrb	r2, [r3, #10]
 8013aa8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8013aac:	7a5a      	ldrb	r2, [r3, #9]
 8013aae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8013ab2:	7a1a      	ldrb	r2, [r3, #8]
 8013ab4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 8013ab8:	79da      	ldrb	r2, [r3, #7]
 8013aba:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8013abe:	799a      	ldrb	r2, [r3, #6]
 8013ac0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013ac4:	795a      	ldrb	r2, [r3, #5]
 8013ac6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 8013aca:	791a      	ldrb	r2, [r3, #4]
 8013acc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8013ad0:	78da      	ldrb	r2, [r3, #3]
 8013ad2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8013ad6:	789a      	ldrb	r2, [r3, #2]
 8013ad8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8013adc:	785a      	ldrb	r2, [r3, #1]
 8013ade:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8013ae2:	781a      	ldrb	r2, [r3, #0]
 8013ae4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8013ae8:	2200      	movs	r2, #0
 8013aea:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8013aee:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8013af2:	0a09      	lsrs	r1, r1, #8
 8013af4:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 8013af8:	7b19      	ldrb	r1, [r3, #12]
 8013afa:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 8013afe:	7adb      	ldrb	r3, [r3, #11]
 8013b00:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013b04:	ab0c      	add	r3, sp, #48	; 0x30
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	2310      	movs	r3, #16
 8013b0a:	4972      	ldr	r1, [pc, #456]	; (8013cd4 <dwt_ioctl+0xee8>)
 8013b0c:	f7fd fc9c 	bl	8011448 <dwt_writetodevice>
 8013b10:	e796      	b.n	8013a40 <dwt_ioctl+0xc54>
 8013b12:	2a01      	cmp	r2, #1
 8013b14:	f040 80af 	bne.w	8013c76 <dwt_ioctl+0xe8a>
 8013b18:	f899 3011 	ldrb.w	r3, [r9, #17]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8013b22:	bf08      	it	eq
 8013b24:	237f      	moveq	r3, #127	; 0x7f
 8013b26:	f899 2013 	ldrb.w	r2, [r9, #19]
 8013b2a:	1a9b      	subs	r3, r3, r2
 8013b2c:	3b02      	subs	r3, #2
 8013b2e:	4299      	cmp	r1, r3
 8013b30:	f200 80a7 	bhi.w	8013c82 <dwt_ioctl+0xe96>
 8013b34:	f899 2010 	ldrb.w	r2, [r9, #16]
 8013b38:	1e53      	subs	r3, r2, #1
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	2b01      	cmp	r3, #1
 8013b3e:	d940      	bls.n	8013bc2 <dwt_ioctl+0xdd6>
 8013b40:	f899 3011 	ldrb.w	r3, [r9, #17]
 8013b44:	1e59      	subs	r1, r3, #1
 8013b46:	b2c9      	uxtb	r1, r1
 8013b48:	2901      	cmp	r1, #1
 8013b4a:	d947      	bls.n	8013bdc <dwt_ioctl+0xdf0>
 8013b4c:	2b04      	cmp	r3, #4
 8013b4e:	d04c      	beq.n	8013bea <dwt_ioctl+0xdfe>
 8013b50:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8013b54:	2200      	movs	r2, #0
 8013b56:	4960      	ldr	r1, [pc, #384]	; (8013cd8 <dwt_ioctl+0xeec>)
 8013b58:	4630      	mov	r0, r6
 8013b5a:	f7fd fcdd 	bl	8011518 <dwt_write32bitoffsetreg>
 8013b5e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8013b62:	4a5e      	ldr	r2, [pc, #376]	; (8013cdc <dwt_ioctl+0xef0>)
 8013b64:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8013b68:	f899 300c 	ldrb.w	r3, [r9, #12]
 8013b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b70:	4313      	orrs	r3, r2
 8013b72:	2200      	movs	r2, #0
 8013b74:	495a      	ldr	r1, [pc, #360]	; (8013ce0 <dwt_ioctl+0xef4>)
 8013b76:	4630      	mov	r0, r6
 8013b78:	f7fd fcce 	bl	8011518 <dwt_write32bitoffsetreg>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	2200      	movs	r2, #0
 8013b80:	4958      	ldr	r1, [pc, #352]	; (8013ce4 <dwt_ioctl+0xef8>)
 8013b82:	4630      	mov	r0, r6
 8013b84:	f7fd fe56 	bl	8011834 <dwt_write8bitoffsetreg>
 8013b88:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8013ce8 <dwt_ioctl+0xefc>
 8013b8c:	2700      	movs	r7, #0
 8013b8e:	463a      	mov	r2, r7
 8013b90:	4641      	mov	r1, r8
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7fd f873 	bl	8010c7e <dwt_read8bitoffsetreg>
 8013b98:	f010 0f05 	tst.w	r0, #5
 8013b9c:	d0f7      	beq.n	8013b8e <dwt_ioctl+0xda2>
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	4950      	ldr	r1, [pc, #320]	; (8013ce8 <dwt_ioctl+0xefc>)
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	f7fd fe44 	bl	8011834 <dwt_write8bitoffsetreg>
 8013bac:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8013bb0:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d025      	beq.n	8013c04 <dwt_ioctl+0xe18>
 8013bb8:	b26b      	sxtb	r3, r5
 8013bba:	7023      	strb	r3, [r4, #0]
 8013bbc:	2500      	movs	r5, #0
 8013bbe:	f7ff b9bf 	b.w	8012f40 <dwt_ioctl+0x154>
 8013bc2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013bc4:	7b9b      	ldrb	r3, [r3, #14]
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	f001 8123 	beq.w	8014e12 <dwt_ioctl+0x2026>
 8013bcc:	f899 3011 	ldrb.w	r3, [r9, #17]
 8013bd0:	1e5a      	subs	r2, r3, #1
 8013bd2:	b2d2      	uxtb	r2, r2
 8013bd4:	2a01      	cmp	r2, #1
 8013bd6:	d912      	bls.n	8013bfe <dwt_ioctl+0xe12>
 8013bd8:	2201      	movs	r2, #1
 8013bda:	e7b7      	b.n	8013b4c <dwt_ioctl+0xd60>
 8013bdc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013bde:	7b9b      	ldrb	r3, [r3, #14]
 8013be0:	2b03      	cmp	r3, #3
 8013be2:	bf0c      	ite	eq
 8013be4:	2302      	moveq	r3, #2
 8013be6:	2301      	movne	r3, #1
 8013be8:	e7b2      	b.n	8013b50 <dwt_ioctl+0xd64>
 8013bea:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8013bee:	2910      	cmp	r1, #16
 8013bf0:	d9ae      	bls.n	8013b50 <dwt_ioctl+0xd64>
 8013bf2:	f06f 0303 	mvn.w	r3, #3
 8013bf6:	e7e0      	b.n	8013bba <dwt_ioctl+0xdce>
 8013bf8:	2202      	movs	r2, #2
 8013bfa:	4613      	mov	r3, r2
 8013bfc:	e7a8      	b.n	8013b50 <dwt_ioctl+0xd64>
 8013bfe:	2201      	movs	r2, #1
 8013c00:	4613      	mov	r3, r2
 8013c02:	e7a5      	b.n	8013b50 <dwt_ioctl+0xd64>
 8013c04:	f899 3012 	ldrb.w	r3, [r9, #18]
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d1d5      	bne.n	8013bb8 <dwt_ioctl+0xdcc>
 8013c0c:	f899 2011 	ldrb.w	r2, [r9, #17]
 8013c10:	1e53      	subs	r3, r2, #1
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d91b      	bls.n	8013c50 <dwt_ioctl+0xe64>
 8013c18:	2a03      	cmp	r2, #3
 8013c1a:	bf0c      	ite	eq
 8013c1c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8013c20:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8013c24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013c28:	b112      	cbz	r2, 8013c30 <dwt_ioctl+0xe44>
 8013c2a:	f899 300c 	ldrb.w	r3, [r9, #12]
 8013c2e:	b9c3      	cbnz	r3, 8013c62 <dwt_ioctl+0xe76>
 8013c30:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8013c34:	2900      	cmp	r1, #0
 8013c36:	d0bf      	beq.n	8013bb8 <dwt_ioctl+0xdcc>
 8013c38:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d0bb      	beq.n	8013bb8 <dwt_ioctl+0xdcc>
 8013c40:	f899 200c 	ldrb.w	r2, [r9, #12]
 8013c44:	9100      	str	r1, [sp, #0]
 8013c46:	4639      	mov	r1, r7
 8013c48:	4630      	mov	r0, r6
 8013c4a:	f7fc ffe6 	bl	8010c1a <dwt_readfromdevice>
 8013c4e:	e7b3      	b.n	8013bb8 <dwt_ioctl+0xdcc>
 8013c50:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013c52:	7b9b      	ldrb	r3, [r3, #14]
 8013c54:	2b03      	cmp	r3, #3
 8013c56:	bf0c      	ite	eq
 8013c58:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8013c5c:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8013c60:	e7e0      	b.n	8013c24 <dwt_ioctl+0xe38>
 8013c62:	9200      	str	r2, [sp, #0]
 8013c64:	2200      	movs	r2, #0
 8013c66:	4639      	mov	r1, r7
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f7fc ffd6 	bl	8010c1a <dwt_readfromdevice>
 8013c6e:	e7df      	b.n	8013c30 <dwt_ioctl+0xe44>
 8013c70:	f06f 0302 	mvn.w	r3, #2
 8013c74:	e7a1      	b.n	8013bba <dwt_ioctl+0xdce>
 8013c76:	f06f 0301 	mvn.w	r3, #1
 8013c7a:	e79e      	b.n	8013bba <dwt_ioctl+0xdce>
 8013c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c80:	e79b      	b.n	8013bba <dwt_ioctl+0xdce>
 8013c82:	f04f 33ff 	mov.w	r3, #4294967295
 8013c86:	e798      	b.n	8013bba <dwt_ioctl+0xdce>
 8013c88:	7a23      	ldrb	r3, [r4, #8]
 8013c8a:	79e1      	ldrb	r1, [r4, #7]
 8013c8c:	79a2      	ldrb	r2, [r4, #6]
 8013c8e:	00d2      	lsls	r2, r2, #3
 8013c90:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8013c94:	4313      	orrs	r3, r2
 8013c96:	7962      	ldrb	r2, [r4, #5]
 8013c98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8013c9c:	7922      	ldrb	r2, [r4, #4]
 8013c9e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013ca2:	78e2      	ldrb	r2, [r4, #3]
 8013ca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013ca8:	78a2      	ldrb	r2, [r4, #2]
 8013caa:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8013cae:	7862      	ldrb	r2, [r4, #1]
 8013cb0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8013cb4:	7822      	ldrb	r2, [r4, #0]
 8013cb6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	490b      	ldr	r1, [pc, #44]	; (8013cec <dwt_ioctl+0xf00>)
 8013cc0:	f7fd fbcd 	bl	801145e <dwt_write16bitoffsetreg>
 8013cc4:	2500      	movs	r5, #0
 8013cc6:	f7ff b93b 	b.w	8012f40 <dwt_ioctl+0x154>
 8013cca:	bf00      	nop
 8013ccc:	000f0028 	.word	0x000f0028
 8013cd0:	00020008 	.word	0x00020008
 8013cd4:	00010034 	.word	0x00010034
 8013cd8:	00010044 	.word	0x00010044
 8013cdc:	0001ff80 	.word	0x0001ff80
 8013ce0:	00010048 	.word	0x00010048
 8013ce4:	0001004c 	.word	0x0001004c
 8013ce8:	00010050 	.word	0x00010050
 8013cec:	00010030 	.word	0x00010030
 8013cf0:	2c00      	cmp	r4, #0
 8013cf2:	f000 87e1 	beq.w	8014cb8 <dwt_ioctl+0x1ecc>
 8013cf6:	7863      	ldrb	r3, [r4, #1]
 8013cf8:	b133      	cbz	r3, 8013d08 <dwt_ioctl+0xf1c>
 8013cfa:	085b      	lsrs	r3, r3, #1
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	7023      	strb	r3, [r4, #0]
 8013d02:	2500      	movs	r5, #0
 8013d04:	f7ff b91c 	b.w	8012f40 <dwt_ioctl+0x154>
 8013d08:	2300      	movs	r3, #0
 8013d0a:	e7f9      	b.n	8013d00 <dwt_ioctl+0xf14>
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	49d0      	ldr	r1, [pc, #832]	; (8014050 <dwt_ioctl+0x1264>)
 8013d10:	f7fc ff8d 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d14:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8013d18:	8023      	strh	r3, [r4, #0]
 8013d1a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8013d1e:	8060      	strh	r0, [r4, #2]
 8013d20:	2200      	movs	r2, #0
 8013d22:	49cc      	ldr	r1, [pc, #816]	; (8014054 <dwt_ioctl+0x1268>)
 8013d24:	4630      	mov	r0, r6
 8013d26:	f7fc ff82 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d2a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8013d2e:	80a3      	strh	r3, [r4, #4]
 8013d30:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8013d34:	80e0      	strh	r0, [r4, #6]
 8013d36:	2200      	movs	r2, #0
 8013d38:	49c7      	ldr	r1, [pc, #796]	; (8014058 <dwt_ioctl+0x126c>)
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f7fc ff77 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d40:	7220      	strb	r0, [r4, #8]
 8013d42:	0c00      	lsrs	r0, r0, #16
 8013d44:	7260      	strb	r0, [r4, #9]
 8013d46:	2200      	movs	r2, #0
 8013d48:	49c4      	ldr	r1, [pc, #784]	; (801405c <dwt_ioctl+0x1270>)
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f7fc ff6f 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d50:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8013d54:	81a3      	strh	r3, [r4, #12]
 8013d56:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8013d5a:	8160      	strh	r0, [r4, #10]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	49c0      	ldr	r1, [pc, #768]	; (8014060 <dwt_ioctl+0x1274>)
 8013d60:	4630      	mov	r0, r6
 8013d62:	f7fc ff64 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d66:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8013d6a:	f8a4 300f 	strh.w	r3, [r4, #15]
 8013d6e:	73a0      	strb	r0, [r4, #14]
 8013d70:	2200      	movs	r2, #0
 8013d72:	49bc      	ldr	r1, [pc, #752]	; (8014064 <dwt_ioctl+0x1278>)
 8013d74:	4630      	mov	r0, r6
 8013d76:	f7fc ff5a 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d7a:	7460      	strb	r0, [r4, #17]
 8013d7c:	0c00      	lsrs	r0, r0, #16
 8013d7e:	74a0      	strb	r0, [r4, #18]
 8013d80:	2200      	movs	r2, #0
 8013d82:	49b9      	ldr	r1, [pc, #740]	; (8014068 <dwt_ioctl+0x127c>)
 8013d84:	4630      	mov	r0, r6
 8013d86:	f7fc ff52 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013d8a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8013d8e:	f8a4 0013 	strh.w	r0, [r4, #19]
 8013d92:	2500      	movs	r5, #0
 8013d94:	7565      	strb	r5, [r4, #21]
 8013d96:	75a5      	strb	r5, [r4, #22]
 8013d98:	462a      	mov	r2, r5
 8013d9a:	49b4      	ldr	r1, [pc, #720]	; (801406c <dwt_ioctl+0x1280>)
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f7fc ff6e 	bl	8010c7e <dwt_read8bitoffsetreg>
 8013da2:	75e0      	strb	r0, [r4, #23]
 8013da4:	f7ff b8cc 	b.w	8012f40 <dwt_ioctl+0x154>
 8013da8:	4611      	mov	r1, r2
 8013daa:	f7fd fdbb 	bl	8011924 <ull_configeventcounters>
 8013dae:	2500      	movs	r5, #0
 8013db0:	f7ff b8c6 	b.w	8012f40 <dwt_ioctl+0x154>
 8013db4:	2c00      	cmp	r4, #0
 8013db6:	f000 8782 	beq.w	8014cbe <dwt_ioctl+0x1ed2>
 8013dba:	8823      	ldrh	r3, [r4, #0]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	49ac      	ldr	r1, [pc, #688]	; (8014070 <dwt_ioctl+0x1284>)
 8013dc0:	f7fd fb4d 	bl	801145e <dwt_write16bitoffsetreg>
 8013dc4:	2500      	movs	r5, #0
 8013dc6:	f7ff b8bb 	b.w	8012f40 <dwt_ioctl+0x154>
 8013dca:	2c00      	cmp	r4, #0
 8013dcc:	f000 877a 	beq.w	8014cc4 <dwt_ioctl+0x1ed8>
 8013dd0:	6825      	ldr	r5, [r4, #0]
 8013dd2:	b935      	cbnz	r5, 8013de2 <dwt_ioctl+0xff6>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	49a6      	ldr	r1, [pc, #664]	; (8014074 <dwt_ioctl+0x1288>)
 8013dda:	f7fd fb40 	bl	801145e <dwt_write16bitoffsetreg>
 8013dde:	f7ff b8af 	b.w	8012f40 <dwt_ioctl+0x154>
 8013de2:	7962      	ldrb	r2, [r4, #5]
 8013de4:	7923      	ldrb	r3, [r4, #4]
 8013de6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013dee:	2200      	movs	r2, #0
 8013df0:	49a0      	ldr	r1, [pc, #640]	; (8014074 <dwt_ioctl+0x1288>)
 8013df2:	f7fd fb34 	bl	801145e <dwt_write16bitoffsetreg>
 8013df6:	2500      	movs	r5, #0
 8013df8:	f7ff b8a2 	b.w	8012f40 <dwt_ioctl+0x154>
 8013dfc:	2c00      	cmp	r4, #0
 8013dfe:	f000 8764 	beq.w	8014cca <dwt_ioctl+0x1ede>
 8013e02:	6823      	ldr	r3, [r4, #0]
 8013e04:	b94b      	cbnz	r3, 8013e1a <dwt_ioctl+0x102e>
 8013e06:	2500      	movs	r5, #0
 8013e08:	9500      	str	r5, [sp, #0]
 8013e0a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8013e0e:	462a      	mov	r2, r5
 8013e10:	2110      	movs	r1, #16
 8013e12:	f7fe fb61 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8013e16:	f7ff b893 	b.w	8012f40 <dwt_ioctl+0x154>
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	2134      	movs	r1, #52	; 0x34
 8013e1e:	f7fd fb7b 	bl	8011518 <dwt_write32bitoffsetreg>
 8013e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	2110      	movs	r1, #16
 8013e30:	4630      	mov	r0, r6
 8013e32:	f7fe fb51 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8013e36:	2500      	movs	r5, #0
 8013e38:	f7ff b882 	b.w	8012f40 <dwt_ioctl+0x154>
 8013e3c:	2c00      	cmp	r4, #0
 8013e3e:	f000 8747 	beq.w	8014cd0 <dwt_ioctl+0x1ee4>
 8013e42:	8861      	ldrh	r1, [r4, #2]
 8013e44:	f7fd fd82 	bl	801194c <ull_aon_read>
 8013e48:	7020      	strb	r0, [r4, #0]
 8013e4a:	2500      	movs	r5, #0
 8013e4c:	f7ff b878 	b.w	8012f40 <dwt_ioctl+0x154>
 8013e50:	2c00      	cmp	r4, #0
 8013e52:	f000 8740 	beq.w	8014cd6 <dwt_ioctl+0x1eea>
 8013e56:	78a2      	ldrb	r2, [r4, #2]
 8013e58:	8821      	ldrh	r1, [r4, #0]
 8013e5a:	f7fd fd97 	bl	801198c <ull_aon_write>
 8013e5e:	2500      	movs	r5, #0
 8013e60:	f7ff b86e 	b.w	8012f40 <dwt_ioctl+0x154>
 8013e64:	4b84      	ldr	r3, [pc, #528]	; (8014078 <dwt_ioctl+0x128c>)
 8013e66:	4a85      	ldr	r2, [pc, #532]	; (801407c <dwt_ioctl+0x1290>)
 8013e68:	2d01      	cmp	r5, #1
 8013e6a:	bf18      	it	ne
 8013e6c:	4613      	movne	r3, r2
 8013e6e:	2d01      	cmp	r5, #1
 8013e70:	4983      	ldr	r1, [pc, #524]	; (8014080 <dwt_ioctl+0x1294>)
 8013e72:	bf18      	it	ne
 8013e74:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8013e78:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8013e7a:	7b92      	ldrb	r2, [r2, #14]
 8013e7c:	2a01      	cmp	r2, #1
 8013e7e:	d012      	beq.n	8013ea6 <dwt_ioctl+0x10ba>
 8013e80:	2a03      	cmp	r2, #3
 8013e82:	d117      	bne.n	8013eb4 <dwt_ioctl+0x10c8>
 8013e84:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8013e88:	3a01      	subs	r2, #1
 8013e8a:	441a      	add	r2, r3
 8013e8c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8013e90:	f7fc fee3 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013e94:	09c0      	lsrs	r0, r0, #7
 8013e96:	8020      	strh	r0, [r4, #0]
 8013e98:	8825      	ldrh	r5, [r4, #0]
 8013e9a:	3500      	adds	r5, #0
 8013e9c:	bf18      	it	ne
 8013e9e:	2501      	movne	r5, #1
 8013ea0:	426d      	negs	r5, r5
 8013ea2:	f7ff b84d 	b.w	8012f40 <dwt_ioctl+0x154>
 8013ea6:	2202      	movs	r2, #2
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	f7fc fed6 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013eae:	09c0      	lsrs	r0, r0, #7
 8013eb0:	8020      	strh	r0, [r4, #0]
 8013eb2:	e7f1      	b.n	8013e98 <dwt_ioctl+0x10ac>
 8013eb4:	2202      	movs	r2, #2
 8013eb6:	f7fc fed0 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013eba:	09c0      	lsrs	r0, r0, #7
 8013ebc:	8020      	strh	r0, [r4, #0]
 8013ebe:	e7eb      	b.n	8013e98 <dwt_ioctl+0x10ac>
 8013ec0:	2c00      	cmp	r4, #0
 8013ec2:	f000 870b 	beq.w	8014cdc <dwt_ioctl+0x1ef0>
 8013ec6:	7821      	ldrb	r1, [r4, #0]
 8013ec8:	f7fe fb20 	bl	801250c <ull_setleds>
 8013ecc:	2500      	movs	r5, #0
 8013ece:	f7ff b837 	b.w	8012f40 <dwt_ioctl+0x154>
 8013ed2:	4611      	mov	r1, r2
 8013ed4:	f7fe f9a2 	bl	801221c <ull_setdwstate>
 8013ed8:	2500      	movs	r5, #0
 8013eda:	f7ff b831 	b.w	8012f40 <dwt_ioctl+0x154>
 8013ede:	9400      	str	r4, [sp, #0]
 8013ee0:	2304      	movs	r3, #4
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	211c      	movs	r1, #28
 8013ee6:	f7fc fe98 	bl	8010c1a <dwt_readfromdevice>
 8013eea:	2500      	movs	r5, #0
 8013eec:	f7ff b828 	b.w	8012f40 <dwt_ioctl+0x154>
 8013ef0:	2c00      	cmp	r4, #0
 8013ef2:	f000 86f6 	beq.w	8014ce2 <dwt_ioctl+0x1ef6>
 8013ef6:	2202      	movs	r2, #2
 8013ef8:	2144      	movs	r1, #68	; 0x44
 8013efa:	f7fc feae 	bl	8010c5a <dwt_read16bitoffsetreg>
 8013efe:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8013f02:	7020      	strb	r0, [r4, #0]
 8013f04:	2500      	movs	r5, #0
 8013f06:	f7ff b81b 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f0a:	2c00      	cmp	r4, #0
 8013f0c:	f000 86ec 	beq.w	8014ce8 <dwt_ioctl+0x1efc>
 8013f10:	2200      	movs	r2, #0
 8013f12:	2144      	movs	r1, #68	; 0x44
 8013f14:	f7fc feb3 	bl	8010c7e <dwt_read8bitoffsetreg>
 8013f18:	f000 0001 	and.w	r0, r0, #1
 8013f1c:	7020      	strb	r0, [r4, #0]
 8013f1e:	2500      	movs	r5, #0
 8013f20:	f7ff b80e 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f24:	2c00      	cmp	r4, #0
 8013f26:	f000 86e2 	beq.w	8014cee <dwt_ioctl+0x1f02>
 8013f2a:	8862      	ldrh	r2, [r4, #2]
 8013f2c:	8821      	ldrh	r1, [r4, #0]
 8013f2e:	f7fe f9d1 	bl	80122d4 <ull_configureframefilter>
 8013f32:	2500      	movs	r5, #0
 8013f34:	f7ff b804 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f38:	9400      	str	r4, [sp, #0]
 8013f3a:	2308      	movs	r3, #8
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	2104      	movs	r1, #4
 8013f40:	f7fd fa82 	bl	8011448 <dwt_writetodevice>
 8013f44:	2500      	movs	r5, #0
 8013f46:	f7fe bffb 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f4a:	9400      	str	r4, [sp, #0]
 8013f4c:	2308      	movs	r3, #8
 8013f4e:	2200      	movs	r2, #0
 8013f50:	2104      	movs	r1, #4
 8013f52:	f7fc fe62 	bl	8010c1a <dwt_readfromdevice>
 8013f56:	2500      	movs	r5, #0
 8013f58:	f7fe bff2 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f5c:	2c00      	cmp	r4, #0
 8013f5e:	f000 86c9 	beq.w	8014cf4 <dwt_ioctl+0x1f08>
 8013f62:	8823      	ldrh	r3, [r4, #0]
 8013f64:	2202      	movs	r2, #2
 8013f66:	210c      	movs	r1, #12
 8013f68:	f7fd fa79 	bl	801145e <dwt_write16bitoffsetreg>
 8013f6c:	2500      	movs	r5, #0
 8013f6e:	f7fe bfe7 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f72:	2c00      	cmp	r4, #0
 8013f74:	f000 86c1 	beq.w	8014cfa <dwt_ioctl+0x1f0e>
 8013f78:	8823      	ldrh	r3, [r4, #0]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	210c      	movs	r1, #12
 8013f7e:	f7fd fa6e 	bl	801145e <dwt_write16bitoffsetreg>
 8013f82:	2500      	movs	r5, #0
 8013f84:	f7fe bfdc 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f88:	4621      	mov	r1, r4
 8013f8a:	f7fd fa3b 	bl	8011404 <ull_readrxtimestamp>
 8013f8e:	2500      	movs	r5, #0
 8013f90:	f7fe bfd6 	b.w	8012f40 <dwt_ioctl+0x154>
 8013f94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013f96:	7b9b      	ldrb	r3, [r3, #14]
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d00b      	beq.n	8013fb4 <dwt_ioctl+0x11c8>
 8013f9c:	2b03      	cmp	r3, #3
 8013f9e:	d112      	bne.n	8013fc6 <dwt_ioctl+0x11da>
 8013fa0:	9400      	str	r4, [sp, #0]
 8013fa2:	2305      	movs	r3, #5
 8013fa4:	2220      	movs	r2, #32
 8013fa6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8013faa:	f7fc fe36 	bl	8010c1a <dwt_readfromdevice>
 8013fae:	2500      	movs	r5, #0
 8013fb0:	f7fe bfc6 	b.w	8012f40 <dwt_ioctl+0x154>
 8013fb4:	9400      	str	r4, [sp, #0]
 8013fb6:	2305      	movs	r3, #5
 8013fb8:	2200      	movs	r2, #0
 8013fba:	4932      	ldr	r1, [pc, #200]	; (8014084 <dwt_ioctl+0x1298>)
 8013fbc:	f7fc fe2d 	bl	8010c1a <dwt_readfromdevice>
 8013fc0:	2500      	movs	r5, #0
 8013fc2:	f7fe bfbd 	b.w	8012f40 <dwt_ioctl+0x154>
 8013fc6:	9400      	str	r4, [sp, #0]
 8013fc8:	2305      	movs	r3, #5
 8013fca:	2200      	movs	r2, #0
 8013fcc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8013fd0:	f7fc fe23 	bl	8010c1a <dwt_readfromdevice>
 8013fd4:	2500      	movs	r5, #0
 8013fd6:	f7fe bfb3 	b.w	8012f40 <dwt_ioctl+0x154>
 8013fda:	2500      	movs	r5, #0
 8013fdc:	f804 5b01 	strb.w	r5, [r4], #1
 8013fe0:	9400      	str	r4, [sp, #0]
 8013fe2:	2304      	movs	r3, #4
 8013fe4:	462a      	mov	r2, r5
 8013fe6:	216c      	movs	r1, #108	; 0x6c
 8013fe8:	f7fc fe17 	bl	8010c1a <dwt_readfromdevice>
 8013fec:	f7fe bfa8 	b.w	8012f40 <dwt_ioctl+0x154>
 8013ff0:	2c00      	cmp	r4, #0
 8013ff2:	f000 8685 	beq.w	8014d00 <dwt_ioctl+0x1f14>
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	2160      	movs	r1, #96	; 0x60
 8013ffa:	f7fc fe18 	bl	8010c2e <dwt_read32bitoffsetreg>
 8013ffe:	6020      	str	r0, [r4, #0]
 8014000:	2500      	movs	r5, #0
 8014002:	f7fe bf9d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014006:	2c00      	cmp	r4, #0
 8014008:	f000 867d 	beq.w	8014d06 <dwt_ioctl+0x1f1a>
 801400c:	2200      	movs	r2, #0
 801400e:	2160      	movs	r1, #96	; 0x60
 8014010:	f7fc fe0d 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014014:	6020      	str	r0, [r4, #0]
 8014016:	2500      	movs	r5, #0
 8014018:	f7fe bf92 	b.w	8012f40 <dwt_ioctl+0x154>
 801401c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801401e:	7b9b      	ldrb	r3, [r3, #14]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d00b      	beq.n	801403c <dwt_ioctl+0x1250>
 8014024:	2b03      	cmp	r3, #3
 8014026:	d131      	bne.n	801408c <dwt_ioctl+0x12a0>
 8014028:	9400      	str	r4, [sp, #0]
 801402a:	2305      	movs	r3, #5
 801402c:	2228      	movs	r2, #40	; 0x28
 801402e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8014032:	f7fc fdf2 	bl	8010c1a <dwt_readfromdevice>
 8014036:	2500      	movs	r5, #0
 8014038:	f7fe bf82 	b.w	8012f40 <dwt_ioctl+0x154>
 801403c:	9400      	str	r4, [sp, #0]
 801403e:	2305      	movs	r3, #5
 8014040:	2200      	movs	r2, #0
 8014042:	4911      	ldr	r1, [pc, #68]	; (8014088 <dwt_ioctl+0x129c>)
 8014044:	f7fc fde9 	bl	8010c1a <dwt_readfromdevice>
 8014048:	2500      	movs	r5, #0
 801404a:	f7fe bf79 	b.w	8012f40 <dwt_ioctl+0x154>
 801404e:	bf00      	nop
 8014050:	000f0004 	.word	0x000f0004
 8014054:	000f0008 	.word	0x000f0008
 8014058:	000f000c 	.word	0x000f000c
 801405c:	000f0010 	.word	0x000f0010
 8014060:	000f0014 	.word	0x000f0014
 8014064:	000f0018 	.word	0x000f0018
 8014068:	000f001c 	.word	0x000f001c
 801406c:	000f0020 	.word	0x000f0020
 8014070:	00060004 	.word	0x00060004
 8014074:	0011001c 	.word	0x0011001c
 8014078:	00180034 	.word	0x00180034
 801407c:	0018002c 	.word	0x0018002c
 8014080:	000c0014 	.word	0x000c0014
 8014084:	00180020 	.word	0x00180020
 8014088:	00180028 	.word	0x00180028
 801408c:	9400      	str	r4, [sp, #0]
 801408e:	2305      	movs	r3, #5
 8014090:	2200      	movs	r2, #0
 8014092:	49ce      	ldr	r1, [pc, #824]	; (80143cc <dwt_ioctl+0x15e0>)
 8014094:	f7fc fdc1 	bl	8010c1a <dwt_readfromdevice>
 8014098:	2500      	movs	r5, #0
 801409a:	f7fe bf51 	b.w	8012f40 <dwt_ioctl+0x154>
 801409e:	2c00      	cmp	r4, #0
 80140a0:	f000 8634 	beq.w	8014d0c <dwt_ioctl+0x1f20>
 80140a4:	2200      	movs	r2, #0
 80140a6:	211c      	movs	r1, #28
 80140a8:	f7fc fdc1 	bl	8010c2e <dwt_read32bitoffsetreg>
 80140ac:	6020      	str	r0, [r4, #0]
 80140ae:	2500      	movs	r5, #0
 80140b0:	f7fe bf46 	b.w	8012f40 <dwt_ioctl+0x154>
 80140b4:	2c00      	cmp	r4, #0
 80140b6:	f000 862c 	beq.w	8014d12 <dwt_ioctl+0x1f26>
 80140ba:	8825      	ldrh	r5, [r4, #0]
 80140bc:	6867      	ldr	r7, [r4, #4]
 80140be:	7a23      	ldrb	r3, [r4, #8]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 8629 	beq.w	8014d18 <dwt_ioctl+0x1f2c>
 80140c6:	463c      	mov	r4, r7
 80140c8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80140cc:	4629      	mov	r1, r5
 80140ce:	4630      	mov	r0, r6
 80140d0:	f7fd fa00 	bl	80114d4 <_dwt_otpread>
 80140d4:	f844 0b04 	str.w	r0, [r4], #4
 80140d8:	3501      	adds	r5, #1
 80140da:	b2ad      	uxth	r5, r5
 80140dc:	42bc      	cmp	r4, r7
 80140de:	d1f5      	bne.n	80140cc <dwt_ioctl+0x12e0>
 80140e0:	2500      	movs	r5, #0
 80140e2:	f7fe bf2d 	b.w	8012f40 <dwt_ioctl+0x154>
 80140e6:	2c00      	cmp	r4, #0
 80140e8:	f000 8619 	beq.w	8014d1e <dwt_ioctl+0x1f32>
 80140ec:	7823      	ldrb	r3, [r4, #0]
 80140ee:	2201      	movs	r2, #1
 80140f0:	2124      	movs	r1, #36	; 0x24
 80140f2:	f7fd fb9f 	bl	8011834 <dwt_write8bitoffsetreg>
 80140f6:	2500      	movs	r5, #0
 80140f8:	f7fe bf22 	b.w	8012f40 <dwt_ioctl+0x154>
 80140fc:	f7fe f90e 	bl	801231c <ull_run_pgfcal>
 8014100:	4605      	mov	r5, r0
 8014102:	f7fe bf1d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014106:	4611      	mov	r1, r2
 8014108:	f7fe fa4e 	bl	80125a8 <ull_pgf_cal>
 801410c:	4605      	mov	r5, r0
 801410e:	f7fe bf17 	b.w	8012f40 <dwt_ioctl+0x154>
 8014112:	2c00      	cmp	r4, #0
 8014114:	f000 8606 	beq.w	8014d24 <dwt_ioctl+0x1f38>
 8014118:	78a5      	ldrb	r5, [r4, #2]
 801411a:	2101      	movs	r1, #1
 801411c:	f7fd f9b0 	bl	8011480 <ull_force_clocks>
 8014120:	2100      	movs	r1, #0
 8014122:	4630      	mov	r0, r6
 8014124:	f7fd fe6e 	bl	8011e04 <ull_enable_rf_tx>
 8014128:	4630      	mov	r0, r6
 801412a:	f7fd fe9f 	bl	8011e6c <ull_enable_rftx_blocks>
 801412e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8014132:	2200      	movs	r2, #0
 8014134:	49a6      	ldr	r1, [pc, #664]	; (80143d0 <dwt_ioctl+0x15e4>)
 8014136:	4630      	mov	r0, r6
 8014138:	f7fd fb7c 	bl	8011834 <dwt_write8bitoffsetreg>
 801413c:	2301      	movs	r3, #1
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	23ff      	movs	r3, #255	; 0xff
 8014142:	2200      	movs	r2, #0
 8014144:	49a3      	ldr	r1, [pc, #652]	; (80143d4 <dwt_ioctl+0x15e8>)
 8014146:	4630      	mov	r0, r6
 8014148:	f7fd ffaa 	bl	80120a0 <dwt_modify8bitoffsetreg>
 801414c:	4fa1      	ldr	r7, [pc, #644]	; (80143d4 <dwt_ioctl+0x15e8>)
 801414e:	2500      	movs	r5, #0
 8014150:	462a      	mov	r2, r5
 8014152:	4639      	mov	r1, r7
 8014154:	4630      	mov	r0, r6
 8014156:	f7fc fd92 	bl	8010c7e <dwt_read8bitoffsetreg>
 801415a:	f010 0f01 	tst.w	r0, #1
 801415e:	d1f7      	bne.n	8014150 <dwt_ioctl+0x1364>
 8014160:	2200      	movs	r2, #0
 8014162:	499d      	ldr	r1, [pc, #628]	; (80143d8 <dwt_ioctl+0x15ec>)
 8014164:	4630      	mov	r0, r6
 8014166:	f7fc fd78 	bl	8010c5a <dwt_read16bitoffsetreg>
 801416a:	4605      	mov	r5, r0
 801416c:	4630      	mov	r0, r6
 801416e:	f7fd fb03 	bl	8011778 <ull_disable_rftx_blocks>
 8014172:	2100      	movs	r1, #0
 8014174:	4630      	mov	r0, r6
 8014176:	f7fd fb09 	bl	801178c <ull_disable_rf_tx>
 801417a:	2105      	movs	r1, #5
 801417c:	4630      	mov	r0, r6
 801417e:	f7fd f97f 	bl	8011480 <ull_force_clocks>
 8014182:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8014186:	8025      	strh	r5, [r4, #0]
 8014188:	2500      	movs	r5, #0
 801418a:	f7fe bed9 	b.w	8012f40 <dwt_ioctl+0x154>
 801418e:	2102      	movs	r1, #2
 8014190:	f7fe f844 	bl	801221c <ull_setdwstate>
 8014194:	2101      	movs	r1, #1
 8014196:	4630      	mov	r0, r6
 8014198:	f7fe f840 	bl	801221c <ull_setdwstate>
 801419c:	2432      	movs	r4, #50	; 0x32
 801419e:	f04f 0814 	mov.w	r8, #20
 80141a2:	2700      	movs	r7, #0
 80141a4:	2544      	movs	r5, #68	; 0x44
 80141a6:	4640      	mov	r0, r8
 80141a8:	f7f7 fd29 	bl	800bbfe <deca_usleep>
 80141ac:	463a      	mov	r2, r7
 80141ae:	4629      	mov	r1, r5
 80141b0:	4630      	mov	r0, r6
 80141b2:	f7fc fd64 	bl	8010c7e <dwt_read8bitoffsetreg>
 80141b6:	f010 0f02 	tst.w	r0, #2
 80141ba:	d105      	bne.n	80141c8 <dwt_ioctl+0x13dc>
 80141bc:	1e63      	subs	r3, r4, #1
 80141be:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80141c2:	d1f0      	bne.n	80141a6 <dwt_ioctl+0x13ba>
 80141c4:	2501      	movs	r5, #1
 80141c6:	e000      	b.n	80141ca <dwt_ioctl+0x13de>
 80141c8:	2500      	movs	r5, #0
 80141ca:	426d      	negs	r5, r5
 80141cc:	f7fe beb8 	b.w	8012f40 <dwt_ioctl+0x154>
 80141d0:	2c00      	cmp	r4, #0
 80141d2:	f000 85aa 	beq.w	8014d2a <dwt_ioctl+0x1f3e>
 80141d6:	7823      	ldrb	r3, [r4, #0]
 80141d8:	031b      	lsls	r3, r3, #12
 80141da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80141de:	7862      	ldrb	r2, [r4, #1]
 80141e0:	2a01      	cmp	r2, #1
 80141e2:	bf08      	it	eq
 80141e4:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 80141ee:	2200      	movs	r2, #0
 80141f0:	497a      	ldr	r1, [pc, #488]	; (80143dc <dwt_ioctl+0x15f0>)
 80141f2:	f7fd fde3 	bl	8011dbc <dwt_modify32bitoffsetreg>
 80141f6:	2500      	movs	r5, #0
 80141f8:	f7fe bea2 	b.w	8012f40 <dwt_ioctl+0x154>
 80141fc:	2c00      	cmp	r4, #0
 80141fe:	f000 8597 	beq.w	8014d30 <dwt_ioctl+0x1f44>
 8014202:	6862      	ldr	r2, [r4, #4]
 8014204:	6821      	ldr	r1, [r4, #0]
 8014206:	f7fd fefb 	bl	8012000 <ull_setgpiomode>
 801420a:	2500      	movs	r5, #0
 801420c:	f7fe be98 	b.w	8012f40 <dwt_ioctl+0x154>
 8014210:	2c00      	cmp	r4, #0
 8014212:	f000 8590 	beq.w	8014d36 <dwt_ioctl+0x1f4a>
 8014216:	8823      	ldrh	r3, [r4, #0]
 8014218:	2200      	movs	r2, #0
 801421a:	4971      	ldr	r1, [pc, #452]	; (80143e0 <dwt_ioctl+0x15f4>)
 801421c:	f7fd f91f 	bl	801145e <dwt_write16bitoffsetreg>
 8014220:	2500      	movs	r5, #0
 8014222:	f7fe be8d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014226:	2c00      	cmp	r4, #0
 8014228:	f000 8588 	beq.w	8014d3c <dwt_ioctl+0x1f50>
 801422c:	6862      	ldr	r2, [r4, #4]
 801422e:	8821      	ldrh	r1, [r4, #0]
 8014230:	f7fe f9ea 	bl	8012608 <ull_setgpiovalue>
 8014234:	2500      	movs	r5, #0
 8014236:	f7fe be83 	b.w	8012f40 <dwt_ioctl+0x154>
 801423a:	2c00      	cmp	r4, #0
 801423c:	f000 8581 	beq.w	8014d42 <dwt_ioctl+0x1f56>
 8014240:	7865      	ldrb	r5, [r4, #1]
 8014242:	7823      	ldrb	r3, [r4, #0]
 8014244:	b18b      	cbz	r3, 801426a <dwt_ioctl+0x147e>
 8014246:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8014248:	2200      	movs	r2, #0
 801424a:	739a      	strb	r2, [r3, #14]
 801424c:	f04f 33ff 	mov.w	r3, #4294967295
 8014250:	2208      	movs	r2, #8
 8014252:	b1e5      	cbz	r5, 801428e <dwt_ioctl+0x14a2>
 8014254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014258:	9200      	str	r2, [sp, #0]
 801425a:	2200      	movs	r2, #0
 801425c:	2110      	movs	r1, #16
 801425e:	4630      	mov	r0, r6
 8014260:	f7fd fdac 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8014264:	2500      	movs	r5, #0
 8014266:	f7fe be6b 	b.w	8012f40 <dwt_ioctl+0x154>
 801426a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801426c:	2201      	movs	r2, #1
 801426e:	739a      	strb	r2, [r3, #14]
 8014270:	2318      	movs	r3, #24
 8014272:	2200      	movs	r2, #0
 8014274:	495b      	ldr	r1, [pc, #364]	; (80143e4 <dwt_ioctl+0x15f8>)
 8014276:	f7fd f94f 	bl	8011518 <dwt_write32bitoffsetreg>
 801427a:	23e8      	movs	r3, #232	; 0xe8
 801427c:	2200      	movs	r2, #0
 801427e:	495a      	ldr	r1, [pc, #360]	; (80143e8 <dwt_ioctl+0x15fc>)
 8014280:	4630      	mov	r0, r6
 8014282:	f7fd f949 	bl	8011518 <dwt_write32bitoffsetreg>
 8014286:	f06f 0308 	mvn.w	r3, #8
 801428a:	2200      	movs	r2, #0
 801428c:	e7e1      	b.n	8014252 <dwt_ioctl+0x1466>
 801428e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014292:	e7e1      	b.n	8014258 <dwt_ioctl+0x146c>
 8014294:	2c00      	cmp	r4, #0
 8014296:	f000 8557 	beq.w	8014d48 <dwt_ioctl+0x1f5c>
 801429a:	6823      	ldr	r3, [r4, #0]
 801429c:	2200      	movs	r2, #0
 801429e:	2130      	movs	r1, #48	; 0x30
 80142a0:	f7fd f93a 	bl	8011518 <dwt_write32bitoffsetreg>
 80142a4:	2500      	movs	r5, #0
 80142a6:	f7fe be4b 	b.w	8012f40 <dwt_ioctl+0x154>
 80142aa:	2c00      	cmp	r4, #0
 80142ac:	f000 854f 	beq.w	8014d4e <dwt_ioctl+0x1f62>
 80142b0:	2200      	movs	r2, #0
 80142b2:	4629      	mov	r1, r5
 80142b4:	f7fc fcbb 	bl	8010c2e <dwt_read32bitoffsetreg>
 80142b8:	6020      	str	r0, [r4, #0]
 80142ba:	2500      	movs	r5, #0
 80142bc:	f7fe be40 	b.w	8012f40 <dwt_ioctl+0x154>
 80142c0:	4623      	mov	r3, r4
 80142c2:	2200      	movs	r2, #0
 80142c4:	4629      	mov	r1, r5
 80142c6:	f7fd f927 	bl	8011518 <dwt_write32bitoffsetreg>
 80142ca:	2500      	movs	r5, #0
 80142cc:	f7fe be38 	b.w	8012f40 <dwt_ioctl+0x154>
 80142d0:	2c00      	cmp	r4, #0
 80142d2:	f000 853f 	beq.w	8014d54 <dwt_ioctl+0x1f68>
 80142d6:	2203      	movs	r2, #3
 80142d8:	4944      	ldr	r1, [pc, #272]	; (80143ec <dwt_ioctl+0x1600>)
 80142da:	f7fc fcd0 	bl	8010c7e <dwt_read8bitoffsetreg>
 80142de:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80142e2:	7020      	strb	r0, [r4, #0]
 80142e4:	2500      	movs	r5, #0
 80142e6:	f7fe be2b 	b.w	8012f40 <dwt_ioctl+0x154>
 80142ea:	2c00      	cmp	r4, #0
 80142ec:	f000 8535 	beq.w	8014d5a <dwt_ioctl+0x1f6e>
 80142f0:	6823      	ldr	r3, [r4, #0]
 80142f2:	2200      	movs	r2, #0
 80142f4:	2144      	movs	r1, #68	; 0x44
 80142f6:	f7fd f90f 	bl	8011518 <dwt_write32bitoffsetreg>
 80142fa:	2500      	movs	r5, #0
 80142fc:	f7fe be20 	b.w	8012f40 <dwt_ioctl+0x154>
 8014300:	2c00      	cmp	r4, #0
 8014302:	f000 852d 	beq.w	8014d60 <dwt_ioctl+0x1f74>
 8014306:	8823      	ldrh	r3, [r4, #0]
 8014308:	2200      	movs	r2, #0
 801430a:	2148      	movs	r1, #72	; 0x48
 801430c:	f7fd f8a7 	bl	801145e <dwt_write16bitoffsetreg>
 8014310:	2500      	movs	r5, #0
 8014312:	f7fe be15 	b.w	8012f40 <dwt_ioctl+0x154>
 8014316:	2c00      	cmp	r4, #0
 8014318:	f000 8525 	beq.w	8014d66 <dwt_ioctl+0x1f7a>
 801431c:	2200      	movs	r2, #0
 801431e:	2144      	movs	r1, #68	; 0x44
 8014320:	f7fc fc85 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014324:	6020      	str	r0, [r4, #0]
 8014326:	2500      	movs	r5, #0
 8014328:	f7fe be0a 	b.w	8012f40 <dwt_ioctl+0x154>
 801432c:	2c00      	cmp	r4, #0
 801432e:	f000 851d 	beq.w	8014d6c <dwt_ioctl+0x1f80>
 8014332:	2200      	movs	r2, #0
 8014334:	2148      	movs	r1, #72	; 0x48
 8014336:	f7fc fc90 	bl	8010c5a <dwt_read16bitoffsetreg>
 801433a:	6020      	str	r0, [r4, #0]
 801433c:	2500      	movs	r5, #0
 801433e:	f7fe bdff 	b.w	8012f40 <dwt_ioctl+0x154>
 8014342:	2c00      	cmp	r4, #0
 8014344:	f000 8515 	beq.w	8014d72 <dwt_ioctl+0x1f86>
 8014348:	7823      	ldrb	r3, [r4, #0]
 801434a:	2200      	movs	r2, #0
 801434c:	4928      	ldr	r1, [pc, #160]	; (80143f0 <dwt_ioctl+0x1604>)
 801434e:	f7fd fa71 	bl	8011834 <dwt_write8bitoffsetreg>
 8014352:	2500      	movs	r5, #0
 8014354:	f7fe bdf4 	b.w	8012f40 <dwt_ioctl+0x154>
 8014358:	2c00      	cmp	r4, #0
 801435a:	f000 850d 	beq.w	8014d78 <dwt_ioctl+0x1f8c>
 801435e:	2200      	movs	r2, #0
 8014360:	2144      	movs	r1, #68	; 0x44
 8014362:	f7fc fc8c 	bl	8010c7e <dwt_read8bitoffsetreg>
 8014366:	7020      	strb	r0, [r4, #0]
 8014368:	2500      	movs	r5, #0
 801436a:	f7fe bde9 	b.w	8012f40 <dwt_ioctl+0x154>
 801436e:	2c00      	cmp	r4, #0
 8014370:	f000 8505 	beq.w	8014d7e <dwt_ioctl+0x1f92>
 8014374:	f7fd fa6a 	bl	801184c <ull_getframelength>
 8014378:	6020      	str	r0, [r4, #0]
 801437a:	2500      	movs	r5, #0
 801437c:	f7fe bde0 	b.w	8012f40 <dwt_ioctl+0x154>
 8014380:	2c00      	cmp	r4, #0
 8014382:	f000 84ff 	beq.w	8014d84 <dwt_ioctl+0x1f98>
 8014386:	2200      	movs	r2, #0
 8014388:	491a      	ldr	r1, [pc, #104]	; (80143f4 <dwt_ioctl+0x1608>)
 801438a:	f7fc fc66 	bl	8010c5a <dwt_read16bitoffsetreg>
 801438e:	8020      	strh	r0, [r4, #0]
 8014390:	2500      	movs	r5, #0
 8014392:	f7fe bdd5 	b.w	8012f40 <dwt_ioctl+0x154>
 8014396:	2c00      	cmp	r4, #0
 8014398:	f000 84f7 	beq.w	8014d8a <dwt_ioctl+0x1f9e>
 801439c:	2200      	movs	r2, #0
 801439e:	4916      	ldr	r1, [pc, #88]	; (80143f8 <dwt_ioctl+0x160c>)
 80143a0:	f7fc fc45 	bl	8010c2e <dwt_read32bitoffsetreg>
 80143a4:	6020      	str	r0, [r4, #0]
 80143a6:	2500      	movs	r5, #0
 80143a8:	f7fe bdca 	b.w	8012f40 <dwt_ioctl+0x154>
 80143ac:	2c00      	cmp	r4, #0
 80143ae:	f000 84ef 	beq.w	8014d90 <dwt_ioctl+0x1fa4>
 80143b2:	8823      	ldrh	r3, [r4, #0]
 80143b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80143be:	2200      	movs	r2, #0
 80143c0:	490d      	ldr	r1, [pc, #52]	; (80143f8 <dwt_ioctl+0x160c>)
 80143c2:	f7fe f889 	bl	80124d8 <dwt_modify16bitoffsetreg>
 80143c6:	2500      	movs	r5, #0
 80143c8:	f7fe bdba 	b.w	8012f40 <dwt_ioctl+0x154>
 80143cc:	000c0008 	.word	0x000c0008
 80143d0:	0007001c 	.word	0x0007001c
 80143d4:	00080010 	.word	0x00080010
 80143d8:	00080014 	.word	0x00080014
 80143dc:	00070014 	.word	0x00070014
 80143e0:	00050008 	.word	0x00050008
 80143e4:	001f000c 	.word	0x001f000c
 80143e8:	001f0010 	.word	0x001f0010
 80143ec:	00030060 	.word	0x00030060
 80143f0:	00010018 	.word	0x00010018
 80143f4:	0005002c 	.word	0x0005002c
 80143f8:	000e001c 	.word	0x000e001c
 80143fc:	2c00      	cmp	r4, #0
 80143fe:	f000 84ca 	beq.w	8014d96 <dwt_ioctl+0x1faa>
 8014402:	88a7      	ldrh	r7, [r4, #4]
 8014404:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8014408:	7b23      	ldrb	r3, [r4, #12]
 801440a:	9306      	str	r3, [sp, #24]
 801440c:	6922      	ldr	r2, [r4, #16]
 801440e:	9204      	str	r2, [sp, #16]
 8014410:	6962      	ldr	r2, [r4, #20]
 8014412:	9205      	str	r2, [sp, #20]
 8014414:	f00b 0203 	and.w	r2, fp, #3
 8014418:	f3cb 0085 	ubfx	r0, fp, #2, #6
 801441c:	2b05      	cmp	r3, #5
 801441e:	d145      	bne.n	80144ac <dwt_ioctl+0x16c0>
 8014420:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8014424:	bf28      	it	cs
 8014426:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 801442a:	f8df 9338 	ldr.w	r9, [pc, #824]	; 8014764 <dwt_ioctl+0x1978>
 801442e:	2f04      	cmp	r7, #4
 8014430:	d805      	bhi.n	801443e <dwt_ioctl+0x1652>
 8014432:	eb09 0300 	add.w	r3, r9, r0
 8014436:	785b      	ldrb	r3, [r3, #1]
 8014438:	3b05      	subs	r3, #5
 801443a:	429f      	cmp	r7, r3
 801443c:	db3e      	blt.n	80144bc <dwt_ioctl+0x16d0>
 801443e:	2a01      	cmp	r2, #1
 8014440:	d87c      	bhi.n	801453c <dwt_ioctl+0x1750>
 8014442:	4bc4      	ldr	r3, [pc, #784]	; (8014754 <dwt_ioctl+0x1968>)
 8014444:	5c99      	ldrb	r1, [r3, r2]
 8014446:	463e      	mov	r6, r7
 8014448:	42b9      	cmp	r1, r7
 801444a:	da79      	bge.n	8014540 <dwt_ioctl+0x1754>
 801444c:	1c55      	adds	r5, r2, #1
 801444e:	fa53 f585 	uxtab	r5, r3, r5
 8014452:	2300      	movs	r3, #0
 8014454:	440b      	add	r3, r1
 8014456:	b29b      	uxth	r3, r3
 8014458:	3201      	adds	r2, #1
 801445a:	b2d2      	uxtb	r2, r2
 801445c:	2a02      	cmp	r2, #2
 801445e:	d005      	beq.n	801446c <dwt_ioctl+0x1680>
 8014460:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014464:	eba6 0c03 	sub.w	ip, r6, r3
 8014468:	4561      	cmp	r1, ip
 801446a:	dbf3      	blt.n	8014454 <dwt_ioctl+0x1668>
 801446c:	429f      	cmp	r7, r3
 801446e:	bf08      	it	eq
 8014470:	9003      	streq	r0, [sp, #12]
 8014472:	d069      	beq.n	8014548 <dwt_ioctl+0x175c>
 8014474:	f107 0805 	add.w	r8, r7, #5
 8014478:	fa1f f888 	uxth.w	r8, r8
 801447c:	2580      	movs	r5, #128	; 0x80
 801447e:	2100      	movs	r1, #0
 8014480:	9107      	str	r1, [sp, #28]
 8014482:	9103      	str	r1, [sp, #12]
 8014484:	9108      	str	r1, [sp, #32]
 8014486:	460e      	mov	r6, r1
 8014488:	2105      	movs	r1, #5
 801448a:	46be      	mov	lr, r7
 801448c:	428f      	cmp	r7, r1
 801448e:	bf38      	it	cc
 8014490:	468e      	movcc	lr, r1
 8014492:	f1ae 0e05 	sub.w	lr, lr, #5
 8014496:	fa1f fe8e 	uxth.w	lr, lr
 801449a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8014754 <dwt_ioctl+0x1968>
 801449e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80144a2:	468b      	mov	fp, r1
 80144a4:	46bc      	mov	ip, r7
 80144a6:	4637      	mov	r7, r6
 80144a8:	f000 bcec 	b.w	8014e84 <dwt_ioctl+0x2098>
 80144ac:	f240 1331 	movw	r3, #305	; 0x131
 80144b0:	429f      	cmp	r7, r3
 80144b2:	bf28      	it	cs
 80144b4:	461f      	movcs	r7, r3
 80144b6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8014768 <dwt_ioctl+0x197c>
 80144ba:	e7b8      	b.n	801442e <dwt_ioctl+0x1642>
 80144bc:	2300      	movs	r3, #0
 80144be:	9a05      	ldr	r2, [sp, #20]
 80144c0:	8013      	strh	r3, [r2, #0]
 80144c2:	9a04      	ldr	r2, [sp, #16]
 80144c4:	f8c2 b000 	str.w	fp, [r2]
 80144c8:	e04d      	b.n	8014566 <dwt_ioctl+0x177a>
 80144ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80144ce:	2300      	movs	r3, #0
 80144d0:	9a05      	ldr	r2, [sp, #20]
 80144d2:	8013      	strh	r3, [r2, #0]
 80144d4:	9b04      	ldr	r3, [sp, #16]
 80144d6:	f8c3 b000 	str.w	fp, [r3]
 80144da:	f04f 33ff 	mov.w	r3, #4294967295
 80144de:	e042      	b.n	8014566 <dwt_ioctl+0x177a>
 80144e0:	fa1f fb81 	uxth.w	fp, r1
 80144e4:	9207      	str	r2, [sp, #28]
 80144e6:	9003      	str	r0, [sp, #12]
 80144e8:	9308      	str	r3, [sp, #32]
 80144ea:	2701      	movs	r7, #1
 80144ec:	f000 bcdb 	b.w	8014ea6 <dwt_ioctl+0x20ba>
 80144f0:	2f00      	cmp	r7, #0
 80144f2:	f040 849b 	bne.w	8014e2c <dwt_ioctl+0x2040>
 80144f6:	4598      	cmp	r8, r3
 80144f8:	f200 84b0 	bhi.w	8014e5c <dwt_ioctl+0x2070>
 80144fc:	2e00      	cmp	r6, #0
 80144fe:	d039      	beq.n	8014574 <dwt_ioctl+0x1788>
 8014500:	283f      	cmp	r0, #63	; 0x3f
 8014502:	f000 84d5 	beq.w	8014eb0 <dwt_ioctl+0x20c4>
 8014506:	2700      	movs	r7, #0
 8014508:	f819 1000 	ldrb.w	r1, [r9, r0]
 801450c:	1a5b      	subs	r3, r3, r1
 801450e:	b29b      	uxth	r3, r3
 8014510:	1e46      	subs	r6, r0, #1
 8014512:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8014516:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 801451a:	bf18      	it	ne
 801451c:	2601      	movne	r6, #1
 801451e:	f000 bca9 	b.w	8014e74 <dwt_ioctl+0x2088>
 8014522:	9906      	ldr	r1, [sp, #24]
 8014524:	2909      	cmp	r1, #9
 8014526:	f040 84c9 	bne.w	8014ebc <dwt_ioctl+0x20d0>
 801452a:	213f      	movs	r1, #63	; 0x3f
 801452c:	9103      	str	r1, [sp, #12]
 801452e:	e00b      	b.n	8014548 <dwt_ioctl+0x175c>
 8014530:	b2b3      	uxth	r3, r6
 8014532:	3201      	adds	r2, #1
 8014534:	b2d2      	uxtb	r2, r2
 8014536:	213f      	movs	r1, #63	; 0x3f
 8014538:	9103      	str	r1, [sp, #12]
 801453a:	e005      	b.n	8014548 <dwt_ioctl+0x175c>
 801453c:	2300      	movs	r3, #0
 801453e:	e795      	b.n	801446c <dwt_ioctl+0x1680>
 8014540:	2300      	movs	r3, #0
 8014542:	e793      	b.n	801446c <dwt_ioctl+0x1680>
 8014544:	9003      	str	r0, [sp, #12]
 8014546:	4663      	mov	r3, ip
 8014548:	9905      	ldr	r1, [sp, #20]
 801454a:	800b      	strh	r3, [r1, #0]
 801454c:	9b03      	ldr	r3, [sp, #12]
 801454e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8014552:	b2d2      	uxtb	r2, r2
 8014554:	0413      	lsls	r3, r2, #16
 8014556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801455a:	4313      	orrs	r3, r2
 801455c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014560:	9a04      	ldr	r2, [sp, #16]
 8014562:	6013      	str	r3, [r2, #0]
 8014564:	2300      	movs	r3, #0
 8014566:	6023      	str	r3, [r4, #0]
 8014568:	2500      	movs	r5, #0
 801456a:	f7fe bce9 	b.w	8012f40 <dwt_ioctl+0x154>
 801456e:	9a07      	ldr	r2, [sp, #28]
 8014570:	9b08      	ldr	r3, [sp, #32]
 8014572:	e7e9      	b.n	8014548 <dwt_ioctl+0x175c>
 8014574:	9003      	str	r0, [sp, #12]
 8014576:	e7e7      	b.n	8014548 <dwt_ioctl+0x175c>
 8014578:	9a07      	ldr	r2, [sp, #28]
 801457a:	9b08      	ldr	r3, [sp, #32]
 801457c:	e7e4      	b.n	8014548 <dwt_ioctl+0x175c>
 801457e:	213f      	movs	r1, #63	; 0x3f
 8014580:	9103      	str	r1, [sp, #12]
 8014582:	e7e1      	b.n	8014548 <dwt_ioctl+0x175c>
 8014584:	2c00      	cmp	r4, #0
 8014586:	f000 8409 	beq.w	8014d9c <dwt_ioctl+0x1fb0>
 801458a:	7827      	ldrb	r7, [r4, #0]
 801458c:	7864      	ldrb	r4, [r4, #1]
 801458e:	f7f7 fb0d 	bl	800bbac <decamutexon>
 8014592:	4605      	mov	r5, r0
 8014594:	2c02      	cmp	r4, #2
 8014596:	d00e      	beq.n	80145b6 <dwt_ioctl+0x17ca>
 8014598:	2c04      	cmp	r4, #4
 801459a:	d00c      	beq.n	80145b6 <dwt_ioctl+0x17ca>
 801459c:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 80145a0:	2c01      	cmp	r4, #1
 80145a2:	d01a      	beq.n	80145da <dwt_ioctl+0x17ee>
 80145a4:	43fb      	mvns	r3, r7
 80145a6:	2200      	movs	r2, #0
 80145a8:	9200      	str	r2, [sp, #0]
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	496a      	ldr	r1, [pc, #424]	; (8014758 <dwt_ioctl+0x196c>)
 80145ae:	4630      	mov	r0, r6
 80145b0:	f7fd fd76 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80145b4:	e005      	b.n	80145c2 <dwt_ioctl+0x17d6>
 80145b6:	463b      	mov	r3, r7
 80145b8:	2200      	movs	r2, #0
 80145ba:	4967      	ldr	r1, [pc, #412]	; (8014758 <dwt_ioctl+0x196c>)
 80145bc:	4630      	mov	r0, r6
 80145be:	f7fd f939 	bl	8011834 <dwt_write8bitoffsetreg>
 80145c2:	463b      	mov	r3, r7
 80145c4:	2200      	movs	r2, #0
 80145c6:	4965      	ldr	r1, [pc, #404]	; (801475c <dwt_ioctl+0x1970>)
 80145c8:	4630      	mov	r0, r6
 80145ca:	f7fc ffa5 	bl	8011518 <dwt_write32bitoffsetreg>
 80145ce:	4628      	mov	r0, r5
 80145d0:	f7f7 fafd 	bl	800bbce <decamutexoff>
 80145d4:	2500      	movs	r5, #0
 80145d6:	f7fe bcb3 	b.w	8012f40 <dwt_ioctl+0x154>
 80145da:	9700      	str	r7, [sp, #0]
 80145dc:	23ff      	movs	r3, #255	; 0xff
 80145de:	2200      	movs	r2, #0
 80145e0:	495d      	ldr	r1, [pc, #372]	; (8014758 <dwt_ioctl+0x196c>)
 80145e2:	4630      	mov	r0, r6
 80145e4:	f7fd fd5c 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80145e8:	e7eb      	b.n	80145c2 <dwt_ioctl+0x17d6>
 80145ea:	2302      	movs	r3, #2
 80145ec:	9301      	str	r3, [sp, #4]
 80145ee:	2500      	movs	r5, #0
 80145f0:	9500      	str	r5, [sp, #0]
 80145f2:	462b      	mov	r3, r5
 80145f4:	462a      	mov	r2, r5
 80145f6:	211a      	movs	r1, #26
 80145f8:	f7fc fa91 	bl	8010b1e <dwt_xfer3xxx>
 80145fc:	f7fe bca0 	b.w	8012f40 <dwt_ioctl+0x154>
 8014600:	f7fe fbe0 	bl	8012dc4 <ull_softreset_fcmd>
 8014604:	2500      	movs	r5, #0
 8014606:	f7fe bc9b 	b.w	8012f40 <dwt_ioctl+0x154>
 801460a:	f7fe fbc7 	bl	8012d9c <ull_softreset_no_sema_fcmd>
 801460e:	2500      	movs	r5, #0
 8014610:	f7fe bc96 	b.w	8012f40 <dwt_ioctl+0x154>
 8014614:	2302      	movs	r3, #2
 8014616:	9301      	str	r3, [sp, #4]
 8014618:	2500      	movs	r5, #0
 801461a:	9500      	str	r5, [sp, #0]
 801461c:	462b      	mov	r3, r5
 801461e:	462a      	mov	r2, r5
 8014620:	2114      	movs	r1, #20
 8014622:	f7fc fa7c 	bl	8010b1e <dwt_xfer3xxx>
 8014626:	f7fe bc8b 	b.w	8012f40 <dwt_ioctl+0x154>
 801462a:	2402      	movs	r4, #2
 801462c:	9401      	str	r4, [sp, #4]
 801462e:	2500      	movs	r5, #0
 8014630:	9500      	str	r5, [sp, #0]
 8014632:	462b      	mov	r3, r5
 8014634:	462a      	mov	r2, r5
 8014636:	2115      	movs	r1, #21
 8014638:	f7fc fa71 	bl	8010b1e <dwt_xfer3xxx>
 801463c:	9401      	str	r4, [sp, #4]
 801463e:	9500      	str	r5, [sp, #0]
 8014640:	462b      	mov	r3, r5
 8014642:	462a      	mov	r2, r5
 8014644:	2115      	movs	r1, #21
 8014646:	4630      	mov	r0, r6
 8014648:	f7fc fa69 	bl	8010b1e <dwt_xfer3xxx>
 801464c:	f7fe bc78 	b.w	8012f40 <dwt_ioctl+0x154>
 8014650:	2302      	movs	r3, #2
 8014652:	9301      	str	r3, [sp, #4]
 8014654:	2500      	movs	r5, #0
 8014656:	9500      	str	r5, [sp, #0]
 8014658:	462b      	mov	r3, r5
 801465a:	462a      	mov	r2, r5
 801465c:	2116      	movs	r1, #22
 801465e:	f7fc fa5e 	bl	8010b1e <dwt_xfer3xxx>
 8014662:	f7fe bc6d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014666:	2c00      	cmp	r4, #0
 8014668:	f000 839b 	beq.w	8014da2 <dwt_ioctl+0x1fb6>
 801466c:	b93a      	cbnz	r2, 801467e <dwt_ioctl+0x1892>
 801466e:	2200      	movs	r2, #0
 8014670:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8014674:	f7fc fb03 	bl	8010c7e <dwt_read8bitoffsetreg>
 8014678:	7020      	strb	r0, [r4, #0]
 801467a:	f7fe bc61 	b.w	8012f40 <dwt_ioctl+0x154>
 801467e:	2201      	movs	r2, #1
 8014680:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8014684:	f7fc fafb 	bl	8010c7e <dwt_read8bitoffsetreg>
 8014688:	7020      	strb	r0, [r4, #0]
 801468a:	2500      	movs	r5, #0
 801468c:	f7fe bc58 	b.w	8012f40 <dwt_ioctl+0x154>
 8014690:	2c00      	cmp	r4, #0
 8014692:	f000 8389 	beq.w	8014da8 <dwt_ioctl+0x1fbc>
 8014696:	7824      	ldrb	r4, [r4, #0]
 8014698:	2200      	movs	r2, #0
 801469a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801469e:	f7fc faee 	bl	8010c7e <dwt_read8bitoffsetreg>
 80146a2:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 80146a6:	4323      	orrs	r3, r4
 80146a8:	2200      	movs	r2, #0
 80146aa:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80146ae:	4630      	mov	r0, r6
 80146b0:	f7fd f8c0 	bl	8011834 <dwt_write8bitoffsetreg>
 80146b4:	2500      	movs	r5, #0
 80146b6:	f7fe bc43 	b.w	8012f40 <dwt_ioctl+0x154>
 80146ba:	2c00      	cmp	r4, #0
 80146bc:	f000 8377 	beq.w	8014dae <dwt_ioctl+0x1fc2>
 80146c0:	7824      	ldrb	r4, [r4, #0]
 80146c2:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 80146c6:	d01e      	beq.n	8014706 <dwt_ioctl+0x191a>
 80146c8:	2d01      	cmp	r5, #1
 80146ca:	f040 8373 	bne.w	8014db4 <dwt_ioctl+0x1fc8>
 80146ce:	2502      	movs	r5, #2
 80146d0:	2201      	movs	r2, #1
 80146d2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80146d6:	4630      	mov	r0, r6
 80146d8:	f7fc fad1 	bl	8010c7e <dwt_read8bitoffsetreg>
 80146dc:	b9ac      	cbnz	r4, 801470a <dwt_ioctl+0x191e>
 80146de:	ea20 0305 	bic.w	r3, r0, r5
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	2201      	movs	r2, #1
 80146e6:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80146ea:	4630      	mov	r0, r6
 80146ec:	f7fd f8a2 	bl	8011834 <dwt_write8bitoffsetreg>
 80146f0:	2200      	movs	r2, #0
 80146f2:	2110      	movs	r1, #16
 80146f4:	4630      	mov	r0, r6
 80146f6:	f7fc fa9a 	bl	8010c2e <dwt_read32bitoffsetreg>
 80146fa:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80146fe:	d00b      	beq.n	8014718 <dwt_ioctl+0x192c>
 8014700:	2500      	movs	r5, #0
 8014702:	f7fe bc1d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014706:	2504      	movs	r5, #4
 8014708:	e7e2      	b.n	80146d0 <dwt_ioctl+0x18e4>
 801470a:	2c01      	cmp	r4, #1
 801470c:	f040 8356 	bne.w	8014dbc <dwt_ioctl+0x1fd0>
 8014710:	ea40 0305 	orr.w	r3, r0, r5
 8014714:	b2db      	uxtb	r3, r3
 8014716:	e7e5      	b.n	80146e4 <dwt_ioctl+0x18f8>
 8014718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801471c:	9300      	str	r3, [sp, #0]
 801471e:	f04f 33ff 	mov.w	r3, #4294967295
 8014722:	2200      	movs	r2, #0
 8014724:	2110      	movs	r1, #16
 8014726:	4630      	mov	r0, r6
 8014728:	f7fd fb48 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801472c:	2500      	movs	r5, #0
 801472e:	f7fe bc07 	b.w	8012f40 <dwt_ioctl+0x154>
 8014732:	2c00      	cmp	r4, #0
 8014734:	f000 8346 	beq.w	8014dc4 <dwt_ioctl+0x1fd8>
 8014738:	7823      	ldrb	r3, [r4, #0]
 801473a:	035b      	lsls	r3, r3, #13
 801473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8014746:	2200      	movs	r2, #0
 8014748:	4905      	ldr	r1, [pc, #20]	; (8014760 <dwt_ioctl+0x1974>)
 801474a:	f7fd fec5 	bl	80124d8 <dwt_modify16bitoffsetreg>
 801474e:	2500      	movs	r5, #0
 8014750:	f7fe bbf6 	b.w	8012f40 <dwt_ioctl+0x154>
 8014754:	08020674 	.word	0x08020674
 8014758:	0001001c 	.word	0x0001001c
 801475c:	00010018 	.word	0x00010018
 8014760:	000e000c 	.word	0x000e000c
 8014764:	080205f4 	.word	0x080205f4
 8014768:	08020634 	.word	0x08020634
 801476c:	2c00      	cmp	r4, #0
 801476e:	f000 832c 	beq.w	8014dca <dwt_ioctl+0x1fde>
 8014772:	7825      	ldrb	r5, [r4, #0]
 8014774:	6862      	ldr	r2, [r4, #4]
 8014776:	2a01      	cmp	r2, #1
 8014778:	bf15      	itete	ne
 801477a:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 801477e:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8014782:	27df      	movne	r7, #223	; 0xdf
 8014784:	27ef      	moveq	r7, #239	; 0xef
 8014786:	bf14      	ite	ne
 8014788:	f04f 0820 	movne.w	r8, #32
 801478c:	f04f 0810 	moveq.w	r8, #16
 8014790:	2400      	movs	r4, #0
 8014792:	9400      	str	r4, [sp, #0]
 8014794:	4622      	mov	r2, r4
 8014796:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801479a:	f7fd fb0f 	bl	8011dbc <dwt_modify32bitoffsetreg>
 801479e:	9400      	str	r4, [sp, #0]
 80147a0:	463b      	mov	r3, r7
 80147a2:	4622      	mov	r2, r4
 80147a4:	49be      	ldr	r1, [pc, #760]	; (8014aa0 <dwt_ioctl+0x1cb4>)
 80147a6:	4630      	mov	r0, r6
 80147a8:	f7fd fc7a 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80147ac:	2d01      	cmp	r5, #1
 80147ae:	d003      	beq.n	80147b8 <dwt_ioctl+0x19cc>
 80147b0:	b165      	cbz	r5, 80147cc <dwt_ioctl+0x19e0>
 80147b2:	2500      	movs	r5, #0
 80147b4:	f7fe bbc4 	b.w	8012f40 <dwt_ioctl+0x154>
 80147b8:	4625      	mov	r5, r4
 80147ba:	9400      	str	r4, [sp, #0]
 80147bc:	463b      	mov	r3, r7
 80147be:	4622      	mov	r2, r4
 80147c0:	49b8      	ldr	r1, [pc, #736]	; (8014aa4 <dwt_ioctl+0x1cb8>)
 80147c2:	4630      	mov	r0, r6
 80147c4:	f7fd fc6c 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80147c8:	f7fe bbba 	b.w	8012f40 <dwt_ioctl+0x154>
 80147cc:	f8cd 8000 	str.w	r8, [sp]
 80147d0:	23ff      	movs	r3, #255	; 0xff
 80147d2:	2200      	movs	r2, #0
 80147d4:	49b3      	ldr	r1, [pc, #716]	; (8014aa4 <dwt_ioctl+0x1cb8>)
 80147d6:	4630      	mov	r0, r6
 80147d8:	f7fd fc62 	bl	80120a0 <dwt_modify8bitoffsetreg>
 80147dc:	f7fe bbb0 	b.w	8012f40 <dwt_ioctl+0x154>
 80147e0:	2c00      	cmp	r4, #0
 80147e2:	f000 82f5 	beq.w	8014dd0 <dwt_ioctl+0x1fe4>
 80147e6:	7822      	ldrb	r2, [r4, #0]
 80147e8:	f012 0f01 	tst.w	r2, #1
 80147ec:	d02d      	beq.n	801484a <dwt_ioctl+0x1a5e>
 80147ee:	0157      	lsls	r7, r2, #5
 80147f0:	f007 0740 	and.w	r7, r7, #64	; 0x40
 80147f4:	2440      	movs	r4, #64	; 0x40
 80147f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80147fa:	f012 0f04 	tst.w	r2, #4
 80147fe:	d028      	beq.n	8014852 <dwt_ioctl+0x1a66>
 8014800:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8014804:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8014808:	0112      	lsls	r2, r2, #4
 801480a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801480e:	4317      	orrs	r7, r2
 8014810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014814:	9200      	str	r2, [sp, #0]
 8014816:	43db      	mvns	r3, r3
 8014818:	2200      	movs	r2, #0
 801481a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801481e:	4630      	mov	r0, r6
 8014820:	f7fd facc 	bl	8011dbc <dwt_modify32bitoffsetreg>
 8014824:	43e4      	mvns	r4, r4
 8014826:	b2a4      	uxth	r4, r4
 8014828:	2500      	movs	r5, #0
 801482a:	9500      	str	r5, [sp, #0]
 801482c:	4623      	mov	r3, r4
 801482e:	462a      	mov	r2, r5
 8014830:	499b      	ldr	r1, [pc, #620]	; (8014aa0 <dwt_ioctl+0x1cb4>)
 8014832:	4630      	mov	r0, r6
 8014834:	f7fd fe50 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8014838:	9700      	str	r7, [sp, #0]
 801483a:	4623      	mov	r3, r4
 801483c:	462a      	mov	r2, r5
 801483e:	4999      	ldr	r1, [pc, #612]	; (8014aa4 <dwt_ioctl+0x1cb8>)
 8014840:	4630      	mov	r0, r6
 8014842:	f7fd fe49 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8014846:	f7fe bb7b 	b.w	8012f40 <dwt_ioctl+0x154>
 801484a:	2700      	movs	r7, #0
 801484c:	463c      	mov	r4, r7
 801484e:	463b      	mov	r3, r7
 8014850:	e7d3      	b.n	80147fa <dwt_ioctl+0x1a0e>
 8014852:	2200      	movs	r2, #0
 8014854:	e7de      	b.n	8014814 <dwt_ioctl+0x1a28>
 8014856:	2308      	movs	r3, #8
 8014858:	9300      	str	r3, [sp, #0]
 801485a:	23ff      	movs	r3, #255	; 0xff
 801485c:	2201      	movs	r2, #1
 801485e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8014862:	f7fd fc1d 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8014866:	4c90      	ldr	r4, [pc, #576]	; (8014aa8 <dwt_ioctl+0x1cbc>)
 8014868:	2302      	movs	r3, #2
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	23ff      	movs	r3, #255	; 0xff
 801486e:	2203      	movs	r2, #3
 8014870:	4621      	mov	r1, r4
 8014872:	4630      	mov	r0, r6
 8014874:	f7fd fc14 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8014878:	2500      	movs	r5, #0
 801487a:	9500      	str	r5, [sp, #0]
 801487c:	23f7      	movs	r3, #247	; 0xf7
 801487e:	2201      	movs	r2, #1
 8014880:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8014884:	4630      	mov	r0, r6
 8014886:	f7fd fc0b 	bl	80120a0 <dwt_modify8bitoffsetreg>
 801488a:	9500      	str	r5, [sp, #0]
 801488c:	23fd      	movs	r3, #253	; 0xfd
 801488e:	2203      	movs	r2, #3
 8014890:	4621      	mov	r1, r4
 8014892:	4630      	mov	r0, r6
 8014894:	f7fd fc04 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8014898:	f7fe bb52 	b.w	8012f40 <dwt_ioctl+0x154>
 801489c:	2c00      	cmp	r4, #0
 801489e:	f000 829a 	beq.w	8014dd6 <dwt_ioctl+0x1fea>
 80148a2:	8863      	ldrh	r3, [r4, #2]
 80148a4:	00db      	lsls	r3, r3, #3
 80148a6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80148aa:	7822      	ldrb	r2, [r4, #0]
 80148ac:	b10a      	cbz	r2, 80148b2 <dwt_ioctl+0x1ac6>
 80148ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80148b2:	9300      	str	r3, [sp, #0]
 80148b4:	f24f 0307 	movw	r3, #61447	; 0xf007
 80148b8:	2200      	movs	r2, #0
 80148ba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80148be:	4630      	mov	r0, r6
 80148c0:	f7fd fe0a 	bl	80124d8 <dwt_modify16bitoffsetreg>
 80148c4:	2500      	movs	r5, #0
 80148c6:	f7fe bb3b 	b.w	8012f40 <dwt_ioctl+0x154>
 80148ca:	2c00      	cmp	r4, #0
 80148cc:	f000 8286 	beq.w	8014ddc <dwt_ioctl+0x1ff0>
 80148d0:	b2e3      	uxtb	r3, r4
 80148d2:	1c9a      	adds	r2, r3, #2
 80148d4:	2301      	movs	r3, #1
 80148d6:	4093      	lsls	r3, r2
 80148d8:	3b01      	subs	r3, #1
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	2200      	movs	r2, #0
 80148de:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80148e2:	f7fc ffa7 	bl	8011834 <dwt_write8bitoffsetreg>
 80148e6:	2500      	movs	r5, #0
 80148e8:	f7fe bb2a 	b.w	8012f40 <dwt_ioctl+0x154>
 80148ec:	2c00      	cmp	r4, #0
 80148ee:	f000 8278 	beq.w	8014de2 <dwt_ioctl+0x1ff6>
 80148f2:	7ae3      	ldrb	r3, [r4, #11]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	f000 8277 	beq.w	8014de8 <dwt_ioctl+0x1ffc>
 80148fa:	7b63      	ldrb	r3, [r4, #13]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d921      	bls.n	8014944 <dwt_ioctl+0x1b58>
 8014900:	7b22      	ldrb	r2, [r4, #12]
 8014902:	4b6a      	ldr	r3, [pc, #424]	; (8014aac <dwt_ioctl+0x1cc0>)
 8014904:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8014908:	0112      	lsls	r2, r2, #4
 801490a:	0ad3      	lsrs	r3, r2, #11
 801490c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8014910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014914:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8014918:	bf28      	it	cs
 801491a:	3301      	addcs	r3, #1
 801491c:	b29b      	uxth	r3, r3
 801491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	f64f 7380 	movw	r3, #65408	; 0xff80
 8014928:	2202      	movs	r2, #2
 801492a:	4961      	ldr	r1, [pc, #388]	; (8014ab0 <dwt_ioctl+0x1cc4>)
 801492c:	4630      	mov	r0, r6
 801492e:	f7fd fdd3 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8014932:	2394      	movs	r3, #148	; 0x94
 8014934:	2200      	movs	r2, #0
 8014936:	495f      	ldr	r1, [pc, #380]	; (8014ab4 <dwt_ioctl+0x1cc8>)
 8014938:	4630      	mov	r0, r6
 801493a:	f7fc ff7b 	bl	8011834 <dwt_write8bitoffsetreg>
 801493e:	2500      	movs	r5, #0
 8014940:	f7fe bafe 	b.w	8012f40 <dwt_ioctl+0x154>
 8014944:	7b22      	ldrb	r2, [r4, #12]
 8014946:	4b59      	ldr	r3, [pc, #356]	; (8014aac <dwt_ioctl+0x1cc0>)
 8014948:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801494c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8014950:	fb02 f203 	mul.w	r2, r2, r3
 8014954:	0c93      	lsrs	r3, r2, #18
 8014956:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 801495a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801495e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8014962:	bf28      	it	cs
 8014964:	3301      	addcs	r3, #1
 8014966:	b29b      	uxth	r3, r3
 8014968:	e7d9      	b.n	801491e <dwt_ioctl+0x1b32>
 801496a:	2c00      	cmp	r4, #0
 801496c:	f000 823f 	beq.w	8014dee <dwt_ioctl+0x2002>
 8014970:	2200      	movs	r2, #0
 8014972:	4951      	ldr	r1, [pc, #324]	; (8014ab8 <dwt_ioctl+0x1ccc>)
 8014974:	f7fc f95b 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014978:	6020      	str	r0, [r4, #0]
 801497a:	2500      	movs	r5, #0
 801497c:	f7fe bae0 	b.w	8012f40 <dwt_ioctl+0x154>
 8014980:	2c00      	cmp	r4, #0
 8014982:	f000 8237 	beq.w	8014df4 <dwt_ioctl+0x2008>
 8014986:	2200      	movs	r2, #0
 8014988:	494c      	ldr	r1, [pc, #304]	; (8014abc <dwt_ioctl+0x1cd0>)
 801498a:	f7fc f950 	bl	8010c2e <dwt_read32bitoffsetreg>
 801498e:	6020      	str	r0, [r4, #0]
 8014990:	2500      	movs	r5, #0
 8014992:	f7fe bad5 	b.w	8012f40 <dwt_ioctl+0x154>
 8014996:	2c00      	cmp	r4, #0
 8014998:	f000 822f 	beq.w	8014dfa <dwt_ioctl+0x200e>
 801499c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80149a0:	6023      	str	r3, [r4, #0]
 80149a2:	2500      	movs	r5, #0
 80149a4:	f7fe bacc 	b.w	8012f40 <dwt_ioctl+0x154>
 80149a8:	2c00      	cmp	r4, #0
 80149aa:	f000 8229 	beq.w	8014e00 <dwt_ioctl+0x2014>
 80149ae:	2500      	movs	r5, #0
 80149b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80149b2:	af10      	add	r7, sp, #64	; 0x40
 80149b4:	2319      	movs	r3, #25
 80149b6:	f847 3d10 	str.w	r3, [r7, #-16]!
 80149ba:	9700      	str	r7, [sp, #0]
 80149bc:	2304      	movs	r3, #4
 80149be:	462a      	mov	r2, r5
 80149c0:	493f      	ldr	r1, [pc, #252]	; (8014ac0 <dwt_ioctl+0x1cd4>)
 80149c2:	f7fc fd41 	bl	8011448 <dwt_writetodevice>
 80149c6:	f641 7348 	movw	r3, #8008	; 0x1f48
 80149ca:	930c      	str	r3, [sp, #48]	; 0x30
 80149cc:	9700      	str	r7, [sp, #0]
 80149ce:	2304      	movs	r3, #4
 80149d0:	462a      	mov	r2, r5
 80149d2:	493c      	ldr	r1, [pc, #240]	; (8014ac4 <dwt_ioctl+0x1cd8>)
 80149d4:	4630      	mov	r0, r6
 80149d6:	f7fc fd37 	bl	8011448 <dwt_writetodevice>
 80149da:	ab0b      	add	r3, sp, #44	; 0x2c
 80149dc:	9300      	str	r3, [sp, #0]
 80149de:	2304      	movs	r3, #4
 80149e0:	462a      	mov	r2, r5
 80149e2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80149e6:	4630      	mov	r0, r6
 80149e8:	f7fc f917 	bl	8010c1a <dwt_readfromdevice>
 80149ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149ee:	6023      	str	r3, [r4, #0]
 80149f0:	f7fe baa6 	b.w	8012f40 <dwt_ioctl+0x154>
 80149f4:	2c00      	cmp	r4, #0
 80149f6:	f000 8206 	beq.w	8014e06 <dwt_ioctl+0x201a>
 80149fa:	2200      	movs	r2, #0
 80149fc:	4932      	ldr	r1, [pc, #200]	; (8014ac8 <dwt_ioctl+0x1cdc>)
 80149fe:	f7fc f916 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a02:	b280      	uxth	r0, r0
 8014a04:	6020      	str	r0, [r4, #0]
 8014a06:	2200      	movs	r2, #0
 8014a08:	4930      	ldr	r1, [pc, #192]	; (8014acc <dwt_ioctl+0x1ce0>)
 8014a0a:	4630      	mov	r0, r6
 8014a0c:	f7fc f90f 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a10:	0d43      	lsrs	r3, r0, #21
 8014a12:	019b      	lsls	r3, r3, #6
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	6063      	str	r3, [r4, #4]
 8014a18:	2500      	movs	r5, #0
 8014a1a:	f7fe ba91 	b.w	8012f40 <dwt_ioctl+0x154>
 8014a1e:	2c00      	cmp	r4, #0
 8014a20:	f000 81f4 	beq.w	8014e0c <dwt_ioctl+0x2020>
 8014a24:	7d63      	ldrb	r3, [r4, #21]
 8014a26:	b133      	cbz	r3, 8014a36 <dwt_ioctl+0x1c4a>
 8014a28:	2b01      	cmp	r3, #1
 8014a2a:	d05b      	beq.n	8014ae4 <dwt_ioctl+0x1cf8>
 8014a2c:	2b02      	cmp	r3, #2
 8014a2e:	f000 8082 	beq.w	8014b36 <dwt_ioctl+0x1d4a>
 8014a32:	23ff      	movs	r3, #255	; 0xff
 8014a34:	e02f      	b.n	8014a96 <dwt_ioctl+0x1caa>
 8014a36:	2200      	movs	r2, #0
 8014a38:	4925      	ldr	r1, [pc, #148]	; (8014ad0 <dwt_ioctl+0x1ce4>)
 8014a3a:	f7fc f8f8 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a3e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014a42:	6020      	str	r0, [r4, #0]
 8014a44:	2200      	movs	r2, #0
 8014a46:	4923      	ldr	r1, [pc, #140]	; (8014ad4 <dwt_ioctl+0x1ce8>)
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f7fc f8f0 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a4e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014a52:	6060      	str	r0, [r4, #4]
 8014a54:	2200      	movs	r2, #0
 8014a56:	4920      	ldr	r1, [pc, #128]	; (8014ad8 <dwt_ioctl+0x1cec>)
 8014a58:	4630      	mov	r0, r6
 8014a5a:	f7fc f8e8 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a5e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014a62:	60a0      	str	r0, [r4, #8]
 8014a64:	2200      	movs	r2, #0
 8014a66:	491d      	ldr	r1, [pc, #116]	; (8014adc <dwt_ioctl+0x1cf0>)
 8014a68:	4630      	mov	r0, r6
 8014a6a:	f7fc f8e0 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a6e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014a72:	60e0      	str	r0, [r4, #12]
 8014a74:	2200      	movs	r2, #0
 8014a76:	491a      	ldr	r1, [pc, #104]	; (8014ae0 <dwt_ioctl+0x1cf4>)
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f7fc f8d8 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014a7e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8014a82:	6120      	str	r0, [r4, #16]
 8014a84:	2203      	movs	r2, #3
 8014a86:	490c      	ldr	r1, [pc, #48]	; (8014ab8 <dwt_ioctl+0x1ccc>)
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f7fc f8f8 	bl	8010c7e <dwt_read8bitoffsetreg>
 8014a8e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8014a92:	7520      	strb	r0, [r4, #20]
 8014a94:	2300      	movs	r3, #0
 8014a96:	75a3      	strb	r3, [r4, #22]
 8014a98:	2500      	movs	r5, #0
 8014a9a:	f7fe ba51 	b.w	8012f40 <dwt_ioctl+0x154>
 8014a9e:	bf00      	nop
 8014aa0:	00050008 	.word	0x00050008
 8014aa4:	0005000c 	.word	0x0005000c
 8014aa8:	00110008 	.word	0x00110008
 8014aac:	08020680 	.word	0x08020680
 8014ab0:	000e0014 	.word	0x000e0014
 8014ab4:	000e0018 	.word	0x000e0018
 8014ab8:	00030060 	.word	0x00030060
 8014abc:	000f004c 	.word	0x000f004c
 8014ac0:	001f0004 	.word	0x001f0004
 8014ac4:	001f0008 	.word	0x001f0008
 8014ac8:	000c0048 	.word	0x000c0048
 8014acc:	000c0028 	.word	0x000c0028
 8014ad0:	000c0058 	.word	0x000c0058
 8014ad4:	000c0030 	.word	0x000c0030
 8014ad8:	000c0034 	.word	0x000c0034
 8014adc:	000c0038 	.word	0x000c0038
 8014ae0:	000c002c 	.word	0x000c002c
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	49d4      	ldr	r1, [pc, #848]	; (8014e38 <dwt_ioctl+0x204c>)
 8014ae8:	f7fc f8a1 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014aec:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014af0:	6020      	str	r0, [r4, #0]
 8014af2:	2200      	movs	r2, #0
 8014af4:	49d1      	ldr	r1, [pc, #836]	; (8014e3c <dwt_ioctl+0x2050>)
 8014af6:	4630      	mov	r0, r6
 8014af8:	f7fc f899 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014afc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014b00:	6060      	str	r0, [r4, #4]
 8014b02:	2200      	movs	r2, #0
 8014b04:	49ce      	ldr	r1, [pc, #824]	; (8014e40 <dwt_ioctl+0x2054>)
 8014b06:	4630      	mov	r0, r6
 8014b08:	f7fc f891 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b0c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014b10:	60a0      	str	r0, [r4, #8]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8014b18:	4630      	mov	r0, r6
 8014b1a:	f7fc f888 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b1e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014b22:	60e0      	str	r0, [r4, #12]
 8014b24:	2200      	movs	r2, #0
 8014b26:	49c7      	ldr	r1, [pc, #796]	; (8014e44 <dwt_ioctl+0x2058>)
 8014b28:	4630      	mov	r0, r6
 8014b2a:	f7fc f880 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b2e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8014b32:	6120      	str	r0, [r4, #16]
 8014b34:	e7a6      	b.n	8014a84 <dwt_ioctl+0x1c98>
 8014b36:	2200      	movs	r2, #0
 8014b38:	49c3      	ldr	r1, [pc, #780]	; (8014e48 <dwt_ioctl+0x205c>)
 8014b3a:	f7fc f878 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b3e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014b42:	6020      	str	r0, [r4, #0]
 8014b44:	2200      	movs	r2, #0
 8014b46:	49c1      	ldr	r1, [pc, #772]	; (8014e4c <dwt_ioctl+0x2060>)
 8014b48:	4630      	mov	r0, r6
 8014b4a:	f7fc f870 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b4e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014b52:	6060      	str	r0, [r4, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	49be      	ldr	r1, [pc, #760]	; (8014e50 <dwt_ioctl+0x2064>)
 8014b58:	4630      	mov	r0, r6
 8014b5a:	f7fc f868 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b5e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014b62:	60a0      	str	r0, [r4, #8]
 8014b64:	2200      	movs	r2, #0
 8014b66:	49bb      	ldr	r1, [pc, #748]	; (8014e54 <dwt_ioctl+0x2068>)
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f7fc f860 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b6e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014b72:	60e0      	str	r0, [r4, #12]
 8014b74:	2200      	movs	r2, #0
 8014b76:	49b8      	ldr	r1, [pc, #736]	; (8014e58 <dwt_ioctl+0x206c>)
 8014b78:	4630      	mov	r0, r6
 8014b7a:	f7fc f858 	bl	8010c2e <dwt_read32bitoffsetreg>
 8014b7e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8014b82:	6120      	str	r0, [r4, #16]
 8014b84:	e77e      	b.n	8014a84 <dwt_ioctl+0x1c98>
 8014b86:	2500      	movs	r5, #0
 8014b88:	f7fe b9da 	b.w	8012f40 <dwt_ioctl+0x154>
 8014b8c:	2500      	movs	r5, #0
 8014b8e:	f7fe b9d7 	b.w	8012f40 <dwt_ioctl+0x154>
 8014b92:	2500      	movs	r5, #0
 8014b94:	f7fe b9d4 	b.w	8012f40 <dwt_ioctl+0x154>
 8014b98:	2500      	movs	r5, #0
 8014b9a:	f7fe b9d1 	b.w	8012f40 <dwt_ioctl+0x154>
 8014b9e:	2500      	movs	r5, #0
 8014ba0:	f7fe b9ce 	b.w	8012f40 <dwt_ioctl+0x154>
 8014ba4:	2500      	movs	r5, #0
 8014ba6:	f7fe b9cb 	b.w	8012f40 <dwt_ioctl+0x154>
 8014baa:	2500      	movs	r5, #0
 8014bac:	f7fe b9c8 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bb0:	2500      	movs	r5, #0
 8014bb2:	f7fe b9c5 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bb6:	2500      	movs	r5, #0
 8014bb8:	f7fe b9c2 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	f7fe b9bf 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bc2:	2500      	movs	r5, #0
 8014bc4:	f7fe b9bc 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bc8:	2500      	movs	r5, #0
 8014bca:	f7fe b9b9 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bce:	2500      	movs	r5, #0
 8014bd0:	f7fe b9b6 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bd4:	2500      	movs	r5, #0
 8014bd6:	f7fe b9b3 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bda:	2500      	movs	r5, #0
 8014bdc:	f7fe b9b0 	b.w	8012f40 <dwt_ioctl+0x154>
 8014be0:	2500      	movs	r5, #0
 8014be2:	f7fe b9ad 	b.w	8012f40 <dwt_ioctl+0x154>
 8014be6:	2500      	movs	r5, #0
 8014be8:	f7fe b9aa 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bec:	2500      	movs	r5, #0
 8014bee:	f7fe b9a7 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bf2:	2500      	movs	r5, #0
 8014bf4:	f7fe b9a4 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bf8:	2500      	movs	r5, #0
 8014bfa:	f7fe b9a1 	b.w	8012f40 <dwt_ioctl+0x154>
 8014bfe:	2500      	movs	r5, #0
 8014c00:	f7fe b99e 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c04:	2500      	movs	r5, #0
 8014c06:	f7fe b99b 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c0a:	2500      	movs	r5, #0
 8014c0c:	f7fe b998 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c10:	2500      	movs	r5, #0
 8014c12:	f7fe b995 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c16:	2500      	movs	r5, #0
 8014c18:	f7fe b992 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c1c:	2500      	movs	r5, #0
 8014c1e:	f7fe b98f 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c22:	2500      	movs	r5, #0
 8014c24:	f7fe b98c 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c28:	2500      	movs	r5, #0
 8014c2a:	f7fe b989 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c2e:	2500      	movs	r5, #0
 8014c30:	f7fe b986 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c34:	2500      	movs	r5, #0
 8014c36:	f7fe b983 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c3a:	2500      	movs	r5, #0
 8014c3c:	f7fe b980 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c40:	2500      	movs	r5, #0
 8014c42:	f7fe b97d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c46:	2500      	movs	r5, #0
 8014c48:	f7fe b97a 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c4c:	2500      	movs	r5, #0
 8014c4e:	f7fe b977 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c52:	2500      	movs	r5, #0
 8014c54:	f7fe b974 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c58:	2500      	movs	r5, #0
 8014c5a:	f7fe b971 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c5e:	2500      	movs	r5, #0
 8014c60:	f7fe b96e 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c64:	2500      	movs	r5, #0
 8014c66:	f7fe b96b 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c6a:	2500      	movs	r5, #0
 8014c6c:	f7fe b968 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c70:	2500      	movs	r5, #0
 8014c72:	f7fe b965 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c76:	2500      	movs	r5, #0
 8014c78:	f7fe b962 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c7c:	2500      	movs	r5, #0
 8014c7e:	f7fe b95f 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c82:	2500      	movs	r5, #0
 8014c84:	f7fe b95c 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c88:	2500      	movs	r5, #0
 8014c8a:	f7fe b959 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c8e:	2500      	movs	r5, #0
 8014c90:	f7fe b956 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c94:	2500      	movs	r5, #0
 8014c96:	f7fe b953 	b.w	8012f40 <dwt_ioctl+0x154>
 8014c9a:	2500      	movs	r5, #0
 8014c9c:	f7fe b950 	b.w	8012f40 <dwt_ioctl+0x154>
 8014ca0:	2500      	movs	r5, #0
 8014ca2:	f7fe b94d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014ca6:	2500      	movs	r5, #0
 8014ca8:	f7fe b94a 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cac:	2500      	movs	r5, #0
 8014cae:	f7fe b947 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cb2:	2500      	movs	r5, #0
 8014cb4:	f7fe b944 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cb8:	2500      	movs	r5, #0
 8014cba:	f7fe b941 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cbe:	2500      	movs	r5, #0
 8014cc0:	f7fe b93e 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cc4:	2500      	movs	r5, #0
 8014cc6:	f7fe b93b 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cca:	2500      	movs	r5, #0
 8014ccc:	f7fe b938 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cd0:	2500      	movs	r5, #0
 8014cd2:	f7fe b935 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cd6:	2500      	movs	r5, #0
 8014cd8:	f7fe b932 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cdc:	2500      	movs	r5, #0
 8014cde:	f7fe b92f 	b.w	8012f40 <dwt_ioctl+0x154>
 8014ce2:	2500      	movs	r5, #0
 8014ce4:	f7fe b92c 	b.w	8012f40 <dwt_ioctl+0x154>
 8014ce8:	2500      	movs	r5, #0
 8014cea:	f7fe b929 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cee:	2500      	movs	r5, #0
 8014cf0:	f7fe b926 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cf4:	2500      	movs	r5, #0
 8014cf6:	f7fe b923 	b.w	8012f40 <dwt_ioctl+0x154>
 8014cfa:	2500      	movs	r5, #0
 8014cfc:	f7fe b920 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d00:	2500      	movs	r5, #0
 8014d02:	f7fe b91d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d06:	2500      	movs	r5, #0
 8014d08:	f7fe b91a 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d0c:	2500      	movs	r5, #0
 8014d0e:	f7fe b917 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d12:	2500      	movs	r5, #0
 8014d14:	f7fe b914 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d18:	2500      	movs	r5, #0
 8014d1a:	f7fe b911 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d1e:	2500      	movs	r5, #0
 8014d20:	f7fe b90e 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d24:	2500      	movs	r5, #0
 8014d26:	f7fe b90b 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d2a:	2500      	movs	r5, #0
 8014d2c:	f7fe b908 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d30:	2500      	movs	r5, #0
 8014d32:	f7fe b905 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d36:	2500      	movs	r5, #0
 8014d38:	f7fe b902 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d3c:	2500      	movs	r5, #0
 8014d3e:	f7fe b8ff 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d42:	2500      	movs	r5, #0
 8014d44:	f7fe b8fc 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d48:	2500      	movs	r5, #0
 8014d4a:	f7fe b8f9 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d4e:	2500      	movs	r5, #0
 8014d50:	f7fe b8f6 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d54:	2500      	movs	r5, #0
 8014d56:	f7fe b8f3 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d5a:	2500      	movs	r5, #0
 8014d5c:	f7fe b8f0 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d60:	2500      	movs	r5, #0
 8014d62:	f7fe b8ed 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d66:	2500      	movs	r5, #0
 8014d68:	f7fe b8ea 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d6c:	2500      	movs	r5, #0
 8014d6e:	f7fe b8e7 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d72:	2500      	movs	r5, #0
 8014d74:	f7fe b8e4 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d78:	2500      	movs	r5, #0
 8014d7a:	f7fe b8e1 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d7e:	2500      	movs	r5, #0
 8014d80:	f7fe b8de 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d84:	2500      	movs	r5, #0
 8014d86:	f7fe b8db 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d8a:	2500      	movs	r5, #0
 8014d8c:	f7fe b8d8 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d90:	2500      	movs	r5, #0
 8014d92:	f7fe b8d5 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d96:	2500      	movs	r5, #0
 8014d98:	f7fe b8d2 	b.w	8012f40 <dwt_ioctl+0x154>
 8014d9c:	2500      	movs	r5, #0
 8014d9e:	f7fe b8cf 	b.w	8012f40 <dwt_ioctl+0x154>
 8014da2:	2500      	movs	r5, #0
 8014da4:	f7fe b8cc 	b.w	8012f40 <dwt_ioctl+0x154>
 8014da8:	2500      	movs	r5, #0
 8014daa:	f7fe b8c9 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dae:	2500      	movs	r5, #0
 8014db0:	f7fe b8c6 	b.w	8012f40 <dwt_ioctl+0x154>
 8014db4:	f04f 35ff 	mov.w	r5, #4294967295
 8014db8:	f7fe b8c2 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8014dc0:	f7fe b8be 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dc4:	2500      	movs	r5, #0
 8014dc6:	f7fe b8bb 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dca:	2500      	movs	r5, #0
 8014dcc:	f7fe b8b8 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dd0:	2500      	movs	r5, #0
 8014dd2:	f7fe b8b5 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dd6:	2500      	movs	r5, #0
 8014dd8:	f7fe b8b2 	b.w	8012f40 <dwt_ioctl+0x154>
 8014ddc:	2500      	movs	r5, #0
 8014dde:	f7fe b8af 	b.w	8012f40 <dwt_ioctl+0x154>
 8014de2:	2500      	movs	r5, #0
 8014de4:	f7fe b8ac 	b.w	8012f40 <dwt_ioctl+0x154>
 8014de8:	2500      	movs	r5, #0
 8014dea:	f7fe b8a9 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dee:	2500      	movs	r5, #0
 8014df0:	f7fe b8a6 	b.w	8012f40 <dwt_ioctl+0x154>
 8014df4:	2500      	movs	r5, #0
 8014df6:	f7fe b8a3 	b.w	8012f40 <dwt_ioctl+0x154>
 8014dfa:	2500      	movs	r5, #0
 8014dfc:	f7fe b8a0 	b.w	8012f40 <dwt_ioctl+0x154>
 8014e00:	2500      	movs	r5, #0
 8014e02:	f7fe b89d 	b.w	8012f40 <dwt_ioctl+0x154>
 8014e06:	2500      	movs	r5, #0
 8014e08:	f7fe b89a 	b.w	8012f40 <dwt_ioctl+0x154>
 8014e0c:	2500      	movs	r5, #0
 8014e0e:	f7fe b897 	b.w	8012f40 <dwt_ioctl+0x154>
 8014e12:	f899 3011 	ldrb.w	r3, [r9, #17]
 8014e16:	1e5a      	subs	r2, r3, #1
 8014e18:	b2d2      	uxtb	r2, r2
 8014e1a:	2a01      	cmp	r2, #1
 8014e1c:	f67e aeec 	bls.w	8013bf8 <dwt_ioctl+0xe0c>
 8014e20:	2202      	movs	r2, #2
 8014e22:	f7fe be93 	b.w	8013b4c <dwt_ioctl+0xd60>
 8014e26:	2f00      	cmp	r7, #0
 8014e28:	f43f ab68 	beq.w	80144fc <dwt_ioctl+0x1710>
 8014e2c:	f819 1000 	ldrb.w	r1, [r9, r0]
 8014e30:	1a5b      	subs	r3, r3, r1
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	f7ff bb88 	b.w	8014548 <dwt_ioctl+0x175c>
 8014e38:	000d0020 	.word	0x000d0020
 8014e3c:	000c0064 	.word	0x000c0064
 8014e40:	000c0068 	.word	0x000c0068
 8014e44:	000c0060 	.word	0x000c0060
 8014e48:	000d0068 	.word	0x000d0068
 8014e4c:	000d0040 	.word	0x000d0040
 8014e50:	000d0044 	.word	0x000d0044
 8014e54:	000d0048 	.word	0x000d0048
 8014e58:	000d003c 	.word	0x000d003c
 8014e5c:	283f      	cmp	r0, #63	; 0x3f
 8014e5e:	d027      	beq.n	8014eb0 <dwt_ioctl+0x20c4>
 8014e60:	2e00      	cmp	r6, #0
 8014e62:	f47f ab51 	bne.w	8014508 <dwt_ioctl+0x171c>
 8014e66:	3001      	adds	r0, #1
 8014e68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014e6c:	f819 1000 	ldrb.w	r1, [r9, r0]
 8014e70:	440b      	add	r3, r1
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	459c      	cmp	ip, r3
 8014e76:	f43f ab65 	beq.w	8014544 <dwt_ioctl+0x1758>
 8014e7a:	3d01      	subs	r5, #1
 8014e7c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8014e80:	f43f ab23 	beq.w	80144ca <dwt_ioctl+0x16de>
 8014e84:	459e      	cmp	lr, r3
 8014e86:	f4bf ab33 	bcs.w	80144f0 <dwt_ioctl+0x1704>
 8014e8a:	4598      	cmp	r8, r3
 8014e8c:	d9cb      	bls.n	8014e26 <dwt_ioctl+0x203a>
 8014e8e:	ebac 0103 	sub.w	r1, ip, r3
 8014e92:	b209      	sxth	r1, r1
 8014e94:	2900      	cmp	r1, #0
 8014e96:	bfb8      	it	lt
 8014e98:	4249      	neglt	r1, r1
 8014e9a:	4559      	cmp	r1, fp
 8014e9c:	f77f ab20 	ble.w	80144e0 <dwt_ioctl+0x16f4>
 8014ea0:	2f00      	cmp	r7, #0
 8014ea2:	f47f ab64 	bne.w	801456e <dwt_ioctl+0x1782>
 8014ea6:	283f      	cmp	r0, #63	; 0x3f
 8014ea8:	d1da      	bne.n	8014e60 <dwt_ioctl+0x2074>
 8014eaa:	2f00      	cmp	r7, #0
 8014eac:	f47f ab64 	bne.w	8014578 <dwt_ioctl+0x178c>
 8014eb0:	2a03      	cmp	r2, #3
 8014eb2:	f43f ab64 	beq.w	801457e <dwt_ioctl+0x1792>
 8014eb6:	2a02      	cmp	r2, #2
 8014eb8:	f43f ab33 	beq.w	8014522 <dwt_ioctl+0x1736>
 8014ebc:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8014ec0:	185e      	adds	r6, r3, r1
 8014ec2:	4566      	cmp	r6, ip
 8014ec4:	f77f ab34 	ble.w	8014530 <dwt_ioctl+0x1744>
 8014ec8:	440b      	add	r3, r1
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	3201      	adds	r2, #1
 8014ece:	b2d2      	uxtb	r2, r2
 8014ed0:	2700      	movs	r7, #0
 8014ed2:	f7ff bb19 	b.w	8014508 <dwt_ioctl+0x171c>
 8014ed6:	bf00      	nop

08014ed8 <_init>:
 8014ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eda:	b085      	sub	sp, #20
 8014edc:	4604      	mov	r4, r0
 8014ede:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014ee0:	6819      	ldr	r1, [r3, #0]
 8014ee2:	f7fd fe57 	bl	8012b94 <ull_initialise>
 8014ee6:	4606      	mov	r6, r0
 8014ee8:	6823      	ldr	r3, [r4, #0]
 8014eea:	691b      	ldr	r3, [r3, #16]
 8014eec:	4798      	blx	r3
 8014eee:	ab03      	add	r3, sp, #12
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f7fd ff79 	bl	8012dec <dwt_ioctl>
 8014efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014efe:	6819      	ldr	r1, [r3, #0]
 8014f00:	4620      	mov	r0, r4
 8014f02:	f7fd fc07 	bl	8012714 <ull_configure>
 8014f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f0a:	6859      	ldr	r1, [r3, #4]
 8014f0c:	4620      	mov	r0, r4
 8014f0e:	f7fd f953 	bl	80121b8 <ull_configuretxrf>
 8014f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f16:	89db      	ldrh	r3, [r3, #14]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f7fc fa9d 	bl	801145e <dwt_write16bitoffsetreg>
 8014f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f28:	899b      	ldrh	r3, [r3, #12]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	217c      	movs	r1, #124	; 0x7c
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f7fc fa95 	bl	801145e <dwt_write16bitoffsetreg>
 8014f34:	2100      	movs	r1, #0
 8014f36:	4620      	mov	r0, r4
 8014f38:	f7fc fb29 	bl	801158e <ull_setrxaftertxdelay>
 8014f3c:	2500      	movs	r5, #0
 8014f3e:	9500      	str	r5, [sp, #0]
 8014f40:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8014f44:	462a      	mov	r2, r5
 8014f46:	2110      	movs	r1, #16
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f7fd fac5 	bl	80124d8 <dwt_modify16bitoffsetreg>
 8014f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f52:	895a      	ldrh	r2, [r3, #10]
 8014f54:	8919      	ldrh	r1, [r3, #8]
 8014f56:	4620      	mov	r0, r4
 8014f58:	f7fd f9bc 	bl	80122d4 <ull_configureframefilter>
 8014f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f60:	8a1b      	ldrh	r3, [r3, #16]
 8014f62:	2202      	movs	r2, #2
 8014f64:	210c      	movs	r1, #12
 8014f66:	4620      	mov	r0, r4
 8014f68:	f7fc fa79 	bl	801145e <dwt_write16bitoffsetreg>
 8014f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f70:	8a5b      	ldrh	r3, [r3, #18]
 8014f72:	462a      	mov	r2, r5
 8014f74:	210c      	movs	r1, #12
 8014f76:	4620      	mov	r0, r4
 8014f78:	f7fc fa71 	bl	801145e <dwt_write16bitoffsetreg>
 8014f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f7e:	7a19      	ldrb	r1, [r3, #8]
 8014f80:	4620      	mov	r0, r4
 8014f82:	f7fd fac3 	bl	801250c <ull_setleds>
 8014f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f88:	68d9      	ldr	r1, [r3, #12]
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f7fc fb13 	bl	80115b6 <ull_setlnapamode>
 8014f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f92:	7e0b      	ldrb	r3, [r1, #24]
 8014f94:	694a      	ldr	r2, [r1, #20]
 8014f96:	6909      	ldr	r1, [r1, #16]
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f7fd fa21 	bl	80123e0 <ull_setinterrupt>
 8014f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fa0:	7f9a      	ldrb	r2, [r3, #30]
 8014fa2:	8b99      	ldrh	r1, [r3, #28]
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f7fc fd19 	bl	80119dc <ull_configuresleep>
 8014faa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014fac:	7b53      	ldrb	r3, [r2, #13]
 8014fae:	2b2e      	cmp	r3, #46	; 0x2e
 8014fb0:	d005      	beq.n	8014fbe <_init+0xe6>
 8014fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014fb8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8014fbc:	d00a      	beq.n	8014fd4 <_init+0xfc>
 8014fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fc8:	7353      	strb	r3, [r2, #13]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	492a      	ldr	r1, [pc, #168]	; (8015078 <_init+0x1a0>)
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f7fc fc30 	bl	8011834 <dwt_write8bitoffsetreg>
 8014fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fd6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f7fd f874 	bl	80120c8 <ull_configciadiag>
 8014fe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fe2:	6a19      	ldr	r1, [r3, #32]
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	f7fc fb07 	bl	80115f8 <ull_configurestskey>
 8014fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f7fc fb26 	bl	8011640 <ull_configurestsiv>
 8014ff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ff6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8014ffa:	bb9b      	cbnz	r3, 8015064 <_init+0x18c>
 8014ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ffe:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8015002:	4620      	mov	r0, r4
 8015004:	f7fc fc8e 	bl	8011924 <ull_configeventcounters>
 8015008:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 801500c:	2d00      	cmp	r5, #0
 801500e:	db26      	blt.n	801505e <_init+0x186>
 8015010:	2301      	movs	r3, #1
 8015012:	fa03 f505 	lsl.w	r5, r3, r5
 8015016:	b2af      	uxth	r7, r5
 8015018:	4a18      	ldr	r2, [pc, #96]	; (801507c <_init+0x1a4>)
 801501a:	4639      	mov	r1, r7
 801501c:	4620      	mov	r0, r4
 801501e:	f7fc ffef 	bl	8012000 <ull_setgpiomode>
 8015022:	f10d 030a 	add.w	r3, sp, #10
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	2302      	movs	r3, #2
 801502a:	2200      	movs	r2, #0
 801502c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8015030:	4620      	mov	r0, r4
 8015032:	f7fb fdf2 	bl	8010c1a <dwt_readfromdevice>
 8015036:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801503a:	ea23 0305 	bic.w	r3, r3, r5
 801503e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015042:	2200      	movs	r2, #0
 8015044:	490e      	ldr	r1, [pc, #56]	; (8015080 <_init+0x1a8>)
 8015046:	4620      	mov	r0, r4
 8015048:	f7fc fa09 	bl	801145e <dwt_write16bitoffsetreg>
 801504c:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8015050:	fab2 f282 	clz	r2, r2
 8015054:	0952      	lsrs	r2, r2, #5
 8015056:	4639      	mov	r1, r7
 8015058:	4620      	mov	r0, r4
 801505a:	f7fd fad5 	bl	8012608 <ull_setgpiovalue>
 801505e:	4630      	mov	r0, r6
 8015060:	b005      	add	sp, #20
 8015062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015064:	2301      	movs	r3, #1
 8015066:	9300      	str	r3, [sp, #0]
 8015068:	23ff      	movs	r3, #255	; 0xff
 801506a:	2200      	movs	r2, #0
 801506c:	4905      	ldr	r1, [pc, #20]	; (8015084 <_init+0x1ac>)
 801506e:	4620      	mov	r0, r4
 8015070:	f7fd f816 	bl	80120a0 <dwt_modify8bitoffsetreg>
 8015074:	e7c2      	b.n	8014ffc <_init+0x124>
 8015076:	bf00      	nop
 8015078:	00090014 	.word	0x00090014
 801507c:	01200492 	.word	0x01200492
 8015080:	00050008 	.word	0x00050008
 8015084:	00020004 	.word	0x00020004

08015088 <ull_wakeup_ic>:
 8015088:	b508      	push	{r3, lr}
 801508a:	6843      	ldr	r3, [r0, #4]
 801508c:	4798      	blx	r3
 801508e:	bd08      	pop	{r3, pc}

08015090 <get_sts_mnth>:
 8015090:	fb01 f100 	mul.w	r1, r1, r0
 8015094:	2a03      	cmp	r2, #3
 8015096:	d00a      	beq.n	80150ae <get_sts_mnth+0x1e>
 8015098:	0ac8      	lsrs	r0, r1, #11
 801509a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801509e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80150a2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80150a6:	bf28      	it	cs
 80150a8:	3001      	addcs	r0, #1
 80150aa:	b280      	uxth	r0, r0
 80150ac:	4770      	bx	lr
 80150ae:	20b5      	movs	r0, #181	; 0xb5
 80150b0:	fb00 f101 	mul.w	r1, r0, r1
 80150b4:	09c9      	lsrs	r1, r1, #7
 80150b6:	e7ef      	b.n	8015098 <get_sts_mnth+0x8>

080150b8 <dwt_dbg_fn>:
 80150b8:	2998      	cmp	r1, #152	; 0x98
 80150ba:	4802      	ldr	r0, [pc, #8]	; (80150c4 <dwt_dbg_fn+0xc>)
 80150bc:	bf18      	it	ne
 80150be:	2000      	movne	r0, #0
 80150c0:	4770      	bx	lr
 80150c2:	bf00      	nop
 80150c4:	08020788 	.word	0x08020788

080150c8 <_deinit>:
 80150c8:	4770      	bx	lr

080150ca <dwt_xfer3xxx>:
 80150ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ce:	b084      	sub	sp, #16
 80150d0:	4605      	mov	r5, r0
 80150d2:	460f      	mov	r7, r1
 80150d4:	461e      	mov	r6, r3
 80150d6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80150da:	1e59      	subs	r1, r3, #1
 80150dc:	b289      	uxth	r1, r1
 80150de:	2901      	cmp	r1, #1
 80150e0:	d91c      	bls.n	801511c <dwt_xfer3xxx+0x52>
 80150e2:	19d0      	adds	r0, r2, r7
 80150e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80150e8:	443a      	add	r2, r7
 80150ea:	f3c2 4104 	ubfx	r1, r2, #16, #5
 80150ee:	0082      	lsls	r2, r0, #2
 80150f0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80150f4:	ea43 0102 	orr.w	r1, r3, r2
 80150f8:	0a09      	lsrs	r1, r1, #8
 80150fa:	f88d 100c 	strb.w	r1, [sp, #12]
 80150fe:	b920      	cbnz	r0, 801510a <dwt_xfer3xxx+0x40>
 8015100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015104:	d018      	beq.n	8015138 <dwt_xfer3xxx+0x6e>
 8015106:	2b00      	cmp	r3, #0
 8015108:	d037      	beq.n	801517a <dwt_xfer3xxx+0xb0>
 801510a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 801510e:	f88d 100c 	strb.w	r1, [sp, #12]
 8015112:	431a      	orrs	r2, r3
 8015114:	f88d 200d 	strb.w	r2, [sp, #13]
 8015118:	2402      	movs	r4, #2
 801511a:	e005      	b.n	8015128 <dwt_xfer3xxx+0x5e>
 801511c:	007a      	lsls	r2, r7, #1
 801511e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8015122:	f88d 200c 	strb.w	r2, [sp, #12]
 8015126:	2401      	movs	r4, #1
 8015128:	2b02      	cmp	r3, #2
 801512a:	d006      	beq.n	801513a <dwt_xfer3xxx+0x70>
 801512c:	d326      	bcc.n	801517c <dwt_xfer3xxx+0xb2>
 801512e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8015132:	2b03      	cmp	r3, #3
 8015134:	d901      	bls.n	801513a <dwt_xfer3xxx+0x70>
 8015136:	e7fe      	b.n	8015136 <dwt_xfer3xxx+0x6c>
 8015138:	2401      	movs	r4, #1
 801513a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801513c:	7d1b      	ldrb	r3, [r3, #20]
 801513e:	b94b      	cbnz	r3, 8015154 <dwt_xfer3xxx+0x8a>
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	685d      	ldr	r5, [r3, #4]
 8015144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015146:	4632      	mov	r2, r6
 8015148:	a903      	add	r1, sp, #12
 801514a:	4620      	mov	r0, r4
 801514c:	47a8      	blx	r5
 801514e:	b004      	add	sp, #16
 8015150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015154:	2200      	movs	r2, #0
 8015156:	4621      	mov	r1, r4
 8015158:	a803      	add	r0, sp, #12
 801515a:	f7f7 fae5 	bl	800c728 <dwt_generatecrc8>
 801515e:	4602      	mov	r2, r0
 8015160:	4631      	mov	r1, r6
 8015162:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015164:	f7f7 fae0 	bl	800c728 <dwt_generatecrc8>
 8015168:	682b      	ldr	r3, [r5, #0]
 801516a:	9000      	str	r0, [sp, #0]
 801516c:	689d      	ldr	r5, [r3, #8]
 801516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015170:	4632      	mov	r2, r6
 8015172:	a903      	add	r1, sp, #12
 8015174:	4620      	mov	r0, r4
 8015176:	47a8      	blx	r5
 8015178:	e7e9      	b.n	801514e <dwt_xfer3xxx+0x84>
 801517a:	2401      	movs	r4, #1
 801517c:	682b      	ldr	r3, [r5, #0]
 801517e:	f8d3 8000 	ldr.w	r8, [r3]
 8015182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015184:	4632      	mov	r2, r6
 8015186:	a903      	add	r1, sp, #12
 8015188:	4620      	mov	r0, r4
 801518a:	47c0      	blx	r8
 801518c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801518e:	7d1b      	ldrb	r3, [r3, #20]
 8015190:	2b02      	cmp	r3, #2
 8015192:	d1dc      	bne.n	801514e <dwt_xfer3xxx+0x84>
 8015194:	2f18      	cmp	r7, #24
 8015196:	d0da      	beq.n	801514e <dwt_xfer3xxx+0x84>
 8015198:	2200      	movs	r2, #0
 801519a:	4621      	mov	r1, r4
 801519c:	a803      	add	r0, sp, #12
 801519e:	f7f7 fac3 	bl	800c728 <dwt_generatecrc8>
 80151a2:	4602      	mov	r2, r0
 80151a4:	4631      	mov	r1, r6
 80151a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151a8:	f7f7 fabe 	bl	800c728 <dwt_generatecrc8>
 80151ac:	4604      	mov	r4, r0
 80151ae:	2200      	movs	r2, #0
 80151b0:	2118      	movs	r1, #24
 80151b2:	4628      	mov	r0, r5
 80151b4:	f000 f866 	bl	8015284 <dwt_read8bitoffsetreg>
 80151b8:	4284      	cmp	r4, r0
 80151ba:	d0c8      	beq.n	801514e <dwt_xfer3xxx+0x84>
 80151bc:	68eb      	ldr	r3, [r5, #12]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d0c5      	beq.n	801514e <dwt_xfer3xxx+0x84>
 80151c2:	4798      	blx	r3
 80151c4:	e7c3      	b.n	801514e <dwt_xfer3xxx+0x84>

080151c6 <dwt_readfromdevice>:
 80151c6:	b510      	push	{r4, lr}
 80151c8:	b082      	sub	sp, #8
 80151ca:	2400      	movs	r4, #0
 80151cc:	9401      	str	r4, [sp, #4]
 80151ce:	9c04      	ldr	r4, [sp, #16]
 80151d0:	9400      	str	r4, [sp, #0]
 80151d2:	f7ff ff7a 	bl	80150ca <dwt_xfer3xxx>
 80151d6:	b002      	add	sp, #8
 80151d8:	bd10      	pop	{r4, pc}

080151da <dwt_read32bitoffsetreg>:
 80151da:	b500      	push	{lr}
 80151dc:	b085      	sub	sp, #20
 80151de:	ab03      	add	r3, sp, #12
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	2304      	movs	r3, #4
 80151e4:	b292      	uxth	r2, r2
 80151e6:	f7ff ffee 	bl	80151c6 <dwt_readfromdevice>
 80151ea:	f10d 030f 	add.w	r3, sp, #15
 80151ee:	f10d 010b 	add.w	r1, sp, #11
 80151f2:	2000      	movs	r0, #0
 80151f4:	f813 2901 	ldrb.w	r2, [r3], #-1
 80151f8:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80151fc:	428b      	cmp	r3, r1
 80151fe:	d1f9      	bne.n	80151f4 <dwt_read32bitoffsetreg+0x1a>
 8015200:	b005      	add	sp, #20
 8015202:	f85d fb04 	ldr.w	pc, [sp], #4

08015206 <dwt_read16bitoffsetreg>:
 8015206:	b500      	push	{lr}
 8015208:	b085      	sub	sp, #20
 801520a:	ab03      	add	r3, sp, #12
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	2302      	movs	r3, #2
 8015210:	b292      	uxth	r2, r2
 8015212:	f7ff ffd8 	bl	80151c6 <dwt_readfromdevice>
 8015216:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801521a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801521e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8015222:	b280      	uxth	r0, r0
 8015224:	b005      	add	sp, #20
 8015226:	f85d fb04 	ldr.w	pc, [sp], #4

0801522a <ull_getrxantennadelay>:
 801522a:	b508      	push	{r3, lr}
 801522c:	2200      	movs	r2, #0
 801522e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8015232:	f7ff ffe8 	bl	8015206 <dwt_read16bitoffsetreg>
 8015236:	bd08      	pop	{r3, pc}

08015238 <ull_gettxantennadelay>:
 8015238:	b508      	push	{r3, lr}
 801523a:	2200      	movs	r2, #0
 801523c:	217c      	movs	r1, #124	; 0x7c
 801523e:	f7ff ffe2 	bl	8015206 <dwt_read16bitoffsetreg>
 8015242:	bd08      	pop	{r3, pc}

08015244 <ull_readclockoffset>:
 8015244:	b508      	push	{r3, lr}
 8015246:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015248:	7b9b      	ldrb	r3, [r3, #14]
 801524a:	2b01      	cmp	r3, #1
 801524c:	d00a      	beq.n	8015264 <ull_readclockoffset+0x20>
 801524e:	2b03      	cmp	r3, #3
 8015250:	d10e      	bne.n	8015270 <ull_readclockoffset+0x2c>
 8015252:	220c      	movs	r2, #12
 8015254:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8015258:	f7ff ffd5 	bl	8015206 <dwt_read16bitoffsetreg>
 801525c:	b200      	sxth	r0, r0
 801525e:	f340 000c 	sbfx	r0, r0, #0, #13
 8015262:	bd08      	pop	{r3, pc}
 8015264:	2200      	movs	r2, #0
 8015266:	4905      	ldr	r1, [pc, #20]	; (801527c <ull_readclockoffset+0x38>)
 8015268:	f7ff ffcd 	bl	8015206 <dwt_read16bitoffsetreg>
 801526c:	b200      	sxth	r0, r0
 801526e:	e7f6      	b.n	801525e <ull_readclockoffset+0x1a>
 8015270:	2200      	movs	r2, #0
 8015272:	4903      	ldr	r1, [pc, #12]	; (8015280 <ull_readclockoffset+0x3c>)
 8015274:	f7ff ffc7 	bl	8015206 <dwt_read16bitoffsetreg>
 8015278:	b200      	sxth	r0, r0
 801527a:	e7f0      	b.n	801525e <ull_readclockoffset+0x1a>
 801527c:	0018000c 	.word	0x0018000c
 8015280:	000c0020 	.word	0x000c0020

08015284 <dwt_read8bitoffsetreg>:
 8015284:	b500      	push	{lr}
 8015286:	b085      	sub	sp, #20
 8015288:	f10d 030f 	add.w	r3, sp, #15
 801528c:	9300      	str	r3, [sp, #0]
 801528e:	2301      	movs	r3, #1
 8015290:	b292      	uxth	r2, r2
 8015292:	f7ff ff98 	bl	80151c6 <dwt_readfromdevice>
 8015296:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801529a:	b005      	add	sp, #20
 801529c:	f85d fb04 	ldr.w	pc, [sp], #4

080152a0 <ull_readcarrierintegrator>:
 80152a0:	b500      	push	{lr}
 80152a2:	b085      	sub	sp, #20
 80152a4:	ab03      	add	r3, sp, #12
 80152a6:	9300      	str	r3, [sp, #0]
 80152a8:	2303      	movs	r3, #3
 80152aa:	2200      	movs	r2, #0
 80152ac:	490b      	ldr	r1, [pc, #44]	; (80152dc <ull_readcarrierintegrator+0x3c>)
 80152ae:	f7ff ff8a 	bl	80151c6 <dwt_readfromdevice>
 80152b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80152b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80152ba:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 80152be:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80152c2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80152c6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80152ca:	bf1c      	itt	ne
 80152cc:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 80152d0:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 80152d4:	b005      	add	sp, #20
 80152d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80152da:	bf00      	nop
 80152dc:	00060029 	.word	0x00060029

080152e0 <ull_readdiagnostics>:
 80152e0:	b530      	push	{r4, r5, lr}
 80152e2:	b0bd      	sub	sp, #244	; 0xf4
 80152e4:	4605      	mov	r5, r0
 80152e6:	460c      	mov	r4, r1
 80152e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80152ea:	7b9a      	ldrb	r2, [r3, #14]
 80152ec:	2a01      	cmp	r2, #1
 80152ee:	d01c      	beq.n	801532a <ull_readdiagnostics+0x4a>
 80152f0:	2a03      	cmp	r2, #3
 80152f2:	f040 81f1 	bne.w	80156d8 <ull_readdiagnostics+0x3f8>
 80152f6:	7d9b      	ldrb	r3, [r3, #22]
 80152f8:	f013 0f08 	tst.w	r3, #8
 80152fc:	d10c      	bne.n	8015318 <ull_readdiagnostics+0x38>
 80152fe:	f013 0f04 	tst.w	r3, #4
 8015302:	ab02      	add	r3, sp, #8
 8015304:	9300      	str	r3, [sp, #0]
 8015306:	bf14      	ite	ne
 8015308:	2338      	movne	r3, #56	; 0x38
 801530a:	2320      	moveq	r3, #32
 801530c:	2200      	movs	r2, #0
 801530e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8015312:	f7ff ff58 	bl	80151c6 <dwt_readfromdevice>
 8015316:	e019      	b.n	801534c <ull_readdiagnostics+0x6c>
 8015318:	ab02      	add	r3, sp, #8
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	23e8      	movs	r3, #232	; 0xe8
 801531e:	2200      	movs	r2, #0
 8015320:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8015324:	f7ff ff4f 	bl	80151c6 <dwt_readfromdevice>
 8015328:	e010      	b.n	801534c <ull_readdiagnostics+0x6c>
 801532a:	7d9b      	ldrb	r3, [r3, #22]
 801532c:	f013 0f08 	tst.w	r3, #8
 8015330:	f040 81c9 	bne.w	80156c6 <ull_readdiagnostics+0x3e6>
 8015334:	f013 0f04 	tst.w	r3, #4
 8015338:	ab02      	add	r3, sp, #8
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	bf14      	ite	ne
 801533e:	2338      	movne	r3, #56	; 0x38
 8015340:	2320      	moveq	r3, #32
 8015342:	2200      	movs	r2, #0
 8015344:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8015348:	f7ff ff3d 	bl	80151c6 <dwt_readfromdevice>
 801534c:	f10d 0217 	add.w	r2, sp, #23
 8015350:	f104 031a 	add.w	r3, r4, #26
 8015354:	f104 0020 	add.w	r0, r4, #32
 8015358:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801535c:	f803 1b01 	strb.w	r1, [r3], #1
 8015360:	4283      	cmp	r3, r0
 8015362:	d1f9      	bne.n	8015358 <ull_readdiagnostics+0x78>
 8015364:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8015368:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801536c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015374:	8463      	strh	r3, [r4, #34]	; 0x22
 8015376:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801537a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801537e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015382:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015386:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801538a:	bf1c      	itt	ne
 801538c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8015390:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8015394:	8423      	strh	r3, [r4, #32]
 8015396:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 801539a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801539e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80153a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80153a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80153a8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80153aa:	7d9b      	ldrb	r3, [r3, #22]
 80153ac:	f013 0f02 	tst.w	r3, #2
 80153b0:	f040 817e 	bne.w	80156b0 <ull_readdiagnostics+0x3d0>
 80153b4:	aa0a      	add	r2, sp, #40	; 0x28
 80153b6:	1e63      	subs	r3, r4, #1
 80153b8:	1d20      	adds	r0, r4, #4
 80153ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80153be:	f803 1f01 	strb.w	r1, [r3, #1]!
 80153c2:	79d1      	ldrb	r1, [r2, #7]
 80153c4:	7219      	strb	r1, [r3, #8]
 80153c6:	7bd1      	ldrb	r1, [r2, #15]
 80153c8:	7459      	strb	r1, [r3, #17]
 80153ca:	4283      	cmp	r3, r0
 80153cc:	d1f5      	bne.n	80153ba <ull_readdiagnostics+0xda>
 80153ce:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80153d2:	7163      	strb	r3, [r4, #5]
 80153d4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80153d8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80153dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80153e0:	80e3      	strh	r3, [r4, #6]
 80153e2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 80153e6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80153ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80153ee:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 80153f2:	f8a4 300d 	strh.w	r3, [r4, #13]
 80153f6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80153fa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80153fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015402:	f8a4 300f 	strh.w	r3, [r4, #15]
 8015406:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 801540a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801540e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015412:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8015416:	82e3      	strh	r3, [r4, #22]
 8015418:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 801541c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8015420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015424:	8323      	strh	r3, [r4, #24]
 8015426:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015428:	7d9b      	ldrb	r3, [r3, #22]
 801542a:	f013 0f04 	tst.w	r3, #4
 801542e:	f040 813f 	bne.w	80156b0 <ull_readdiagnostics+0x3d0>
 8015432:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8015436:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801543a:	041b      	lsls	r3, r3, #16
 801543c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015440:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8015444:	4313      	orrs	r3, r2
 8015446:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 801544a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801544e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8015452:	6263      	str	r3, [r4, #36]	; 0x24
 8015454:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8015458:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 801545c:	041b      	lsls	r3, r3, #16
 801545e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015462:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8015466:	4313      	orrs	r3, r2
 8015468:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 801546c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015474:	62a3      	str	r3, [r4, #40]	; 0x28
 8015476:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 801547a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 801547e:	041b      	lsls	r3, r3, #16
 8015480:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015484:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8015488:	4313      	orrs	r3, r2
 801548a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 801548e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015496:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015498:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 801549c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80154a0:	041b      	lsls	r3, r3, #16
 80154a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80154a6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80154aa:	4313      	orrs	r3, r2
 80154ac:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 80154b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80154b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80154b8:	6323      	str	r3, [r4, #48]	; 0x30
 80154ba:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 80154be:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 80154c2:	041b      	lsls	r3, r3, #16
 80154c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80154c8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80154cc:	4313      	orrs	r3, r2
 80154ce:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80154d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80154d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80154da:	6363      	str	r3, [r4, #52]	; 0x34
 80154dc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 80154e0:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 80154e4:	041b      	lsls	r3, r3, #16
 80154e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80154ea:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80154ee:	4313      	orrs	r3, r2
 80154f0:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 80154f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80154f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80154fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80154fe:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8015502:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015506:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801550a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801550c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8015510:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8015514:	041b      	lsls	r3, r3, #16
 8015516:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801551a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801551e:	4313      	orrs	r3, r2
 8015520:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8015524:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015528:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801552c:	6423      	str	r3, [r4, #64]	; 0x40
 801552e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8015532:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8015536:	041b      	lsls	r3, r3, #16
 8015538:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801553c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8015540:	4313      	orrs	r3, r2
 8015542:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8015546:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801554a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801554e:	6463      	str	r3, [r4, #68]	; 0x44
 8015550:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8015554:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8015558:	041b      	lsls	r3, r3, #16
 801555a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801555e:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8015562:	4313      	orrs	r3, r2
 8015564:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8015568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801556c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015570:	64a3      	str	r3, [r4, #72]	; 0x48
 8015572:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8015576:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 801557a:	041b      	lsls	r3, r3, #16
 801557c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015580:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8015584:	4313      	orrs	r3, r2
 8015586:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 801558a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801558e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015592:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015594:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8015598:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 801559c:	041b      	lsls	r3, r3, #16
 801559e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80155a2:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 80155a6:	4313      	orrs	r3, r2
 80155a8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80155ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80155b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80155b4:	6523      	str	r3, [r4, #80]	; 0x50
 80155b6:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 80155ba:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80155be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80155c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80155c6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80155ca:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 80155ce:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80155d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80155d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80155da:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80155de:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80155e2:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80155e6:	041b      	lsls	r3, r3, #16
 80155e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80155ec:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 80155f0:	4313      	orrs	r3, r2
 80155f2:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 80155f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80155fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80155fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8015600:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8015604:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8015608:	041b      	lsls	r3, r3, #16
 801560a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801560e:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8015612:	4313      	orrs	r3, r2
 8015614:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8015618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801561c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015620:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015622:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8015626:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 801562a:	041b      	lsls	r3, r3, #16
 801562c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015630:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8015634:	4313      	orrs	r3, r2
 8015636:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 801563a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801563e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015642:	6623      	str	r3, [r4, #96]	; 0x60
 8015644:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8015648:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 801564c:	041b      	lsls	r3, r3, #16
 801564e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015652:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8015656:	4313      	orrs	r3, r2
 8015658:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 801565c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015660:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015664:	6663      	str	r3, [r4, #100]	; 0x64
 8015666:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 801566a:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 801566e:	041b      	lsls	r3, r3, #16
 8015670:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015674:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8015678:	4313      	orrs	r3, r2
 801567a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 801567e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015682:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015686:	66a3      	str	r3, [r4, #104]	; 0x68
 8015688:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 801568c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8015690:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015694:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015698:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 801569c:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 80156a0:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80156a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80156a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80156ac:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80156b0:	f994 301b 	ldrsb.w	r3, [r4, #27]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f2c0 81d0 	blt.w	8015a5a <ull_readdiagnostics+0x77a>
 80156ba:	7fe3      	ldrb	r3, [r4, #31]
 80156bc:	f003 0301 	and.w	r3, r3, #1
 80156c0:	77e3      	strb	r3, [r4, #31]
 80156c2:	b03d      	add	sp, #244	; 0xf4
 80156c4:	bd30      	pop	{r4, r5, pc}
 80156c6:	ab02      	add	r3, sp, #8
 80156c8:	9300      	str	r3, [sp, #0]
 80156ca:	23e8      	movs	r3, #232	; 0xe8
 80156cc:	2200      	movs	r2, #0
 80156ce:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80156d2:	f7ff fd78 	bl	80151c6 <dwt_readfromdevice>
 80156d6:	e639      	b.n	801534c <ull_readdiagnostics+0x6c>
 80156d8:	7d9b      	ldrb	r3, [r3, #22]
 80156da:	f013 0f01 	tst.w	r3, #1
 80156de:	f000 81b3 	beq.w	8015a48 <ull_readdiagnostics+0x768>
 80156e2:	ab02      	add	r3, sp, #8
 80156e4:	9300      	str	r3, [sp, #0]
 80156e6:	236c      	movs	r3, #108	; 0x6c
 80156e8:	2200      	movs	r2, #0
 80156ea:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80156ee:	f7ff fd6a 	bl	80151c6 <dwt_readfromdevice>
 80156f2:	ab1d      	add	r3, sp, #116	; 0x74
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	236c      	movs	r3, #108	; 0x6c
 80156f8:	2200      	movs	r2, #0
 80156fa:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80156fe:	4628      	mov	r0, r5
 8015700:	f7ff fd61 	bl	80151c6 <dwt_readfromdevice>
 8015704:	aa02      	add	r2, sp, #8
 8015706:	1e63      	subs	r3, r4, #1
 8015708:	1d20      	adds	r0, r4, #4
 801570a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801570e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8015712:	79d1      	ldrb	r1, [r2, #7]
 8015714:	7219      	strb	r1, [r3, #8]
 8015716:	7bd1      	ldrb	r1, [r2, #15]
 8015718:	7459      	strb	r1, [r3, #17]
 801571a:	7dd1      	ldrb	r1, [r2, #23]
 801571c:	7699      	strb	r1, [r3, #26]
 801571e:	4283      	cmp	r3, r0
 8015720:	d1f3      	bne.n	801570a <ull_readdiagnostics+0x42a>
 8015722:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015726:	77e3      	strb	r3, [r4, #31]
 8015728:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801572c:	7163      	strb	r3, [r4, #5]
 801572e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8015732:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801573a:	80e3      	strh	r3, [r4, #6]
 801573c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015740:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015744:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8015748:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 801574c:	f8a4 200d 	strh.w	r2, [r4, #13]
 8015750:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8015754:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8015758:	f8a4 200f 	strh.w	r2, [r4, #15]
 801575c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015764:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8015768:	82e3      	strh	r3, [r4, #22]
 801576a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 801576e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8015772:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015776:	8323      	strh	r3, [r4, #24]
 8015778:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801577c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8015780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015784:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015788:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801578c:	bf1c      	itt	ne
 801578e:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8015792:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8015796:	8423      	strh	r3, [r4, #32]
 8015798:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801579c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80157a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80157a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157a8:	8463      	strh	r3, [r4, #34]	; 0x22
 80157aa:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80157ae:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80157b2:	041b      	lsls	r3, r3, #16
 80157b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80157b8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80157bc:	4313      	orrs	r3, r2
 80157be:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80157c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80157c6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80157ca:	6263      	str	r3, [r4, #36]	; 0x24
 80157cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80157ce:	7d9b      	ldrb	r3, [r3, #22]
 80157d0:	f013 0f01 	tst.w	r3, #1
 80157d4:	f43f af6c 	beq.w	80156b0 <ull_readdiagnostics+0x3d0>
 80157d8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80157dc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80157e0:	041b      	lsls	r3, r3, #16
 80157e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80157e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80157ea:	4313      	orrs	r3, r2
 80157ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80157f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80157f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80157fa:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 80157fe:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8015802:	041b      	lsls	r3, r3, #16
 8015804:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015808:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801580c:	4313      	orrs	r3, r2
 801580e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8015812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801581a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801581c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8015820:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8015824:	041b      	lsls	r3, r3, #16
 8015826:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801582a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801582e:	4313      	orrs	r3, r2
 8015830:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8015834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015838:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801583c:	6323      	str	r3, [r4, #48]	; 0x30
 801583e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8015842:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8015846:	041b      	lsls	r3, r3, #16
 8015848:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801584c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8015850:	4313      	orrs	r3, r2
 8015852:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8015856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801585a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801585e:	6363      	str	r3, [r4, #52]	; 0x34
 8015860:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8015864:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8015868:	041b      	lsls	r3, r3, #16
 801586a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801586e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8015872:	4313      	orrs	r3, r2
 8015874:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8015878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801587c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015880:	63a3      	str	r3, [r4, #56]	; 0x38
 8015882:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8015886:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801588a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801588e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8015890:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8015894:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8015898:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801589c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80158a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80158a2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80158a6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80158aa:	041b      	lsls	r3, r3, #16
 80158ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80158b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80158b4:	4313      	orrs	r3, r2
 80158b6:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80158ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80158be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80158c2:	6423      	str	r3, [r4, #64]	; 0x40
 80158c4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80158c8:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 80158cc:	041b      	lsls	r3, r3, #16
 80158ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80158d2:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 80158d6:	4313      	orrs	r3, r2
 80158d8:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80158dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80158e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80158e4:	6463      	str	r3, [r4, #68]	; 0x44
 80158e6:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 80158ea:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 80158ee:	041b      	lsls	r3, r3, #16
 80158f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80158f4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80158f8:	4313      	orrs	r3, r2
 80158fa:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 80158fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015902:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015906:	64a3      	str	r3, [r4, #72]	; 0x48
 8015908:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 801590c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8015910:	041b      	lsls	r3, r3, #16
 8015912:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015916:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 801591a:	4313      	orrs	r3, r2
 801591c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8015920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015924:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015928:	64e3      	str	r3, [r4, #76]	; 0x4c
 801592a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 801592e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8015932:	041b      	lsls	r3, r3, #16
 8015934:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015938:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801593c:	4313      	orrs	r3, r2
 801593e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8015942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015946:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801594a:	6523      	str	r3, [r4, #80]	; 0x50
 801594c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8015950:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8015954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015958:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801595c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8015960:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8015964:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8015968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015970:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8015974:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8015978:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 801597c:	041b      	lsls	r3, r3, #16
 801597e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015982:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8015986:	4313      	orrs	r3, r2
 8015988:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 801598c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015990:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8015994:	65a3      	str	r3, [r4, #88]	; 0x58
 8015996:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 801599a:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 801599e:	041b      	lsls	r3, r3, #16
 80159a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80159a4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80159a8:	4313      	orrs	r3, r2
 80159aa:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80159ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80159b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80159b8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80159bc:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80159c0:	041b      	lsls	r3, r3, #16
 80159c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80159c6:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80159ca:	4313      	orrs	r3, r2
 80159cc:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80159d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80159d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80159d8:	6623      	str	r3, [r4, #96]	; 0x60
 80159da:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80159de:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80159e2:	041b      	lsls	r3, r3, #16
 80159e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80159e8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80159ec:	4313      	orrs	r3, r2
 80159ee:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 80159f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80159f6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80159fa:	6663      	str	r3, [r4, #100]	; 0x64
 80159fc:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8015a00:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8015a04:	041b      	lsls	r3, r3, #16
 8015a06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015a0a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8015a0e:	4313      	orrs	r3, r2
 8015a10:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8015a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015a1c:	66a3      	str	r3, [r4, #104]	; 0x68
 8015a1e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8015a22:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8015a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015a2e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8015a32:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8015a36:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8015a3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015a42:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8015a46:	e633      	b.n	80156b0 <ull_readdiagnostics+0x3d0>
 8015a48:	ab02      	add	r3, sp, #8
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	2328      	movs	r3, #40	; 0x28
 8015a4e:	2200      	movs	r2, #0
 8015a50:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8015a54:	f7ff fbb7 	bl	80151c6 <dwt_readfromdevice>
 8015a58:	e654      	b.n	8015704 <ull_readdiagnostics+0x424>
 8015a5a:	23ff      	movs	r3, #255	; 0xff
 8015a5c:	7723      	strb	r3, [r4, #28]
 8015a5e:	7763      	strb	r3, [r4, #29]
 8015a60:	77a3      	strb	r3, [r4, #30]
 8015a62:	77e3      	strb	r3, [r4, #31]
 8015a64:	e629      	b.n	80156ba <ull_readdiagnostics+0x3da>
	...

08015a68 <ull_readrxtimestamp>:
 8015a68:	b500      	push	{lr}
 8015a6a:	b083      	sub	sp, #12
 8015a6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015a6e:	7b9b      	ldrb	r3, [r3, #14]
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	d00b      	beq.n	8015a8c <ull_readrxtimestamp+0x24>
 8015a74:	2b03      	cmp	r3, #3
 8015a76:	d110      	bne.n	8015a9a <ull_readrxtimestamp+0x32>
 8015a78:	9100      	str	r1, [sp, #0]
 8015a7a:	2305      	movs	r3, #5
 8015a7c:	2204      	movs	r2, #4
 8015a7e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8015a82:	f7ff fba0 	bl	80151c6 <dwt_readfromdevice>
 8015a86:	b003      	add	sp, #12
 8015a88:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a8c:	9100      	str	r1, [sp, #0]
 8015a8e:	2305      	movs	r3, #5
 8015a90:	2200      	movs	r2, #0
 8015a92:	4905      	ldr	r1, [pc, #20]	; (8015aa8 <ull_readrxtimestamp+0x40>)
 8015a94:	f7ff fb97 	bl	80151c6 <dwt_readfromdevice>
 8015a98:	e7f5      	b.n	8015a86 <ull_readrxtimestamp+0x1e>
 8015a9a:	9100      	str	r1, [sp, #0]
 8015a9c:	2305      	movs	r3, #5
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	2160      	movs	r1, #96	; 0x60
 8015aa2:	f7ff fb90 	bl	80151c6 <dwt_readfromdevice>
 8015aa6:	e7ee      	b.n	8015a86 <ull_readrxtimestamp+0x1e>
 8015aa8:	00180004 	.word	0x00180004

08015aac <dwt_writetodevice>:
 8015aac:	b510      	push	{r4, lr}
 8015aae:	b082      	sub	sp, #8
 8015ab0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8015ab4:	9401      	str	r4, [sp, #4]
 8015ab6:	9c04      	ldr	r4, [sp, #16]
 8015ab8:	9400      	str	r4, [sp, #0]
 8015aba:	f7ff fb06 	bl	80150ca <dwt_xfer3xxx>
 8015abe:	b002      	add	sp, #8
 8015ac0:	bd10      	pop	{r4, pc}

08015ac2 <dwt_write16bitoffsetreg>:
 8015ac2:	b500      	push	{lr}
 8015ac4:	b085      	sub	sp, #20
 8015ac6:	f88d 300c 	strb.w	r3, [sp, #12]
 8015aca:	0a1b      	lsrs	r3, r3, #8
 8015acc:	f88d 300d 	strb.w	r3, [sp, #13]
 8015ad0:	ab03      	add	r3, sp, #12
 8015ad2:	9300      	str	r3, [sp, #0]
 8015ad4:	2302      	movs	r3, #2
 8015ad6:	b292      	uxth	r2, r2
 8015ad8:	f7ff ffe8 	bl	8015aac <dwt_writetodevice>
 8015adc:	b005      	add	sp, #20
 8015ade:	f85d fb04 	ldr.w	pc, [sp], #4

08015ae2 <ull_setrxantennadelay>:
 8015ae2:	b508      	push	{r3, lr}
 8015ae4:	460b      	mov	r3, r1
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8015aec:	f7ff ffe9 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015af0:	bd08      	pop	{r3, pc}

08015af2 <ull_settxantennadelay>:
 8015af2:	b508      	push	{r3, lr}
 8015af4:	460b      	mov	r3, r1
 8015af6:	2200      	movs	r2, #0
 8015af8:	217c      	movs	r1, #124	; 0x7c
 8015afa:	f7ff ffe2 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015afe:	bd08      	pop	{r3, pc}

08015b00 <ull_force_clocks>:
 8015b00:	b508      	push	{r3, lr}
 8015b02:	2901      	cmp	r1, #1
 8015b04:	d002      	beq.n	8015b0c <ull_force_clocks+0xc>
 8015b06:	2905      	cmp	r1, #5
 8015b08:	d007      	beq.n	8015b1a <ull_force_clocks+0x1a>
 8015b0a:	bd08      	pop	{r3, pc}
 8015b0c:	f641 0322 	movw	r3, #6178	; 0x1822
 8015b10:	2200      	movs	r2, #0
 8015b12:	4905      	ldr	r1, [pc, #20]	; (8015b28 <ull_force_clocks+0x28>)
 8015b14:	f7ff ffd5 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b18:	e7f7      	b.n	8015b0a <ull_force_clocks+0xa>
 8015b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b1e:	2200      	movs	r2, #0
 8015b20:	4901      	ldr	r1, [pc, #4]	; (8015b28 <ull_force_clocks+0x28>)
 8015b22:	f7ff ffce 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b26:	e7f0      	b.n	8015b0a <ull_force_clocks+0xa>
 8015b28:	00110004 	.word	0x00110004

08015b2c <__dwt_otp_write_wdata_id_reg>:
 8015b2c:	b538      	push	{r3, r4, r5, lr}
 8015b2e:	4605      	mov	r5, r0
 8015b30:	460c      	mov	r4, r1
 8015b32:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	2200      	movs	r2, #0
 8015b3a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8015b3e:	f7ff ffc0 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b42:	b2a3      	uxth	r3, r4
 8015b44:	2200      	movs	r2, #0
 8015b46:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8015b4a:	4628      	mov	r0, r5
 8015b4c:	f7ff ffb9 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b50:	bd38      	pop	{r3, r4, r5, pc}
	...

08015b54 <_dwt_otpread>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	4604      	mov	r4, r0
 8015b58:	460e      	mov	r6, r1
 8015b5a:	4d0c      	ldr	r5, [pc, #48]	; (8015b8c <_dwt_otpread+0x38>)
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	2200      	movs	r2, #0
 8015b60:	4629      	mov	r1, r5
 8015b62:	f7ff ffae 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b66:	4633      	mov	r3, r6
 8015b68:	2200      	movs	r2, #0
 8015b6a:	4909      	ldr	r1, [pc, #36]	; (8015b90 <_dwt_otpread+0x3c>)
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	f7ff ffa8 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b72:	2302      	movs	r3, #2
 8015b74:	2200      	movs	r2, #0
 8015b76:	4629      	mov	r1, r5
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f7ff ffa2 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8015b7e:	2200      	movs	r2, #0
 8015b80:	4904      	ldr	r1, [pc, #16]	; (8015b94 <_dwt_otpread+0x40>)
 8015b82:	4620      	mov	r0, r4
 8015b84:	f7ff fb29 	bl	80151da <dwt_read32bitoffsetreg>
 8015b88:	bd70      	pop	{r4, r5, r6, pc}
 8015b8a:	bf00      	nop
 8015b8c:	000b0008 	.word	0x000b0008
 8015b90:	000b0004 	.word	0x000b0004
 8015b94:	000b0010 	.word	0x000b0010

08015b98 <dwt_write32bitoffsetreg>:
 8015b98:	b510      	push	{r4, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	f88d 300c 	strb.w	r3, [sp, #12]
 8015ba0:	0a1c      	lsrs	r4, r3, #8
 8015ba2:	f88d 400d 	strb.w	r4, [sp, #13]
 8015ba6:	0c1c      	lsrs	r4, r3, #16
 8015ba8:	f88d 400e 	strb.w	r4, [sp, #14]
 8015bac:	0e1b      	lsrs	r3, r3, #24
 8015bae:	f88d 300f 	strb.w	r3, [sp, #15]
 8015bb2:	ab03      	add	r3, sp, #12
 8015bb4:	9300      	str	r3, [sp, #0]
 8015bb6:	2304      	movs	r3, #4
 8015bb8:	b292      	uxth	r2, r2
 8015bba:	f7ff ff77 	bl	8015aac <dwt_writetodevice>
 8015bbe:	b004      	add	sp, #16
 8015bc0:	bd10      	pop	{r4, pc}

08015bc2 <_dwt_adjust_delaytime>:
 8015bc2:	b538      	push	{r3, r4, r5, lr}
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	b989      	cbnz	r1, 8015bec <_dwt_adjust_delaytime+0x2a>
 8015bc8:	2200      	movs	r2, #0
 8015bca:	2128      	movs	r1, #40	; 0x28
 8015bcc:	f7ff fb05 	bl	80151da <dwt_read32bitoffsetreg>
 8015bd0:	4605      	mov	r5, r0
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f7ff fb53 	bl	8015284 <dwt_read8bitoffsetreg>
 8015bde:	1a2b      	subs	r3, r5, r0
 8015be0:	2200      	movs	r2, #0
 8015be2:	2128      	movs	r1, #40	; 0x28
 8015be4:	4620      	mov	r0, r4
 8015be6:	f7ff ffd7 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015bea:	bd38      	pop	{r3, r4, r5, pc}
 8015bec:	2200      	movs	r2, #0
 8015bee:	2128      	movs	r1, #40	; 0x28
 8015bf0:	f7ff faf3 	bl	80151da <dwt_read32bitoffsetreg>
 8015bf4:	4605      	mov	r5, r0
 8015bf6:	2201      	movs	r2, #1
 8015bf8:	217c      	movs	r1, #124	; 0x7c
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f7ff fb42 	bl	8015284 <dwt_read8bitoffsetreg>
 8015c00:	1a2b      	subs	r3, r5, r0
 8015c02:	2200      	movs	r2, #0
 8015c04:	2128      	movs	r1, #40	; 0x28
 8015c06:	4620      	mov	r0, r4
 8015c08:	f7ff ffc6 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015c0c:	e7ed      	b.n	8015bea <_dwt_adjust_delaytime+0x28>

08015c0e <ull_setrxaftertxdelay>:
 8015c0e:	b538      	push	{r3, r4, r5, lr}
 8015c10:	4605      	mov	r5, r0
 8015c12:	460c      	mov	r4, r1
 8015c14:	2200      	movs	r2, #0
 8015c16:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8015c1a:	f7ff fade 	bl	80151da <dwt_read32bitoffsetreg>
 8015c1e:	0d00      	lsrs	r0, r0, #20
 8015c20:	0500      	lsls	r0, r0, #20
 8015c22:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015c26:	4303      	orrs	r3, r0
 8015c28:	2200      	movs	r2, #0
 8015c2a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8015c2e:	4628      	mov	r0, r5
 8015c30:	f7ff ffb2 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015c34:	bd38      	pop	{r3, r4, r5, pc}
	...

08015c38 <ull_setfinegraintxseq>:
 8015c38:	b508      	push	{r3, lr}
 8015c3a:	b929      	cbnz	r1, 8015c48 <ull_setfinegraintxseq+0x10>
 8015c3c:	4b05      	ldr	r3, [pc, #20]	; (8015c54 <ull_setfinegraintxseq+0x1c>)
 8015c3e:	2202      	movs	r2, #2
 8015c40:	4905      	ldr	r1, [pc, #20]	; (8015c58 <ull_setfinegraintxseq+0x20>)
 8015c42:	f7ff ffa9 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015c46:	bd08      	pop	{r3, pc}
 8015c48:	4b04      	ldr	r3, [pc, #16]	; (8015c5c <ull_setfinegraintxseq+0x24>)
 8015c4a:	2202      	movs	r2, #2
 8015c4c:	4902      	ldr	r1, [pc, #8]	; (8015c58 <ull_setfinegraintxseq+0x20>)
 8015c4e:	f7ff ffa3 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015c52:	e7f8      	b.n	8015c46 <ull_setfinegraintxseq+0xe>
 8015c54:	00d20874 	.word	0x00d20874
 8015c58:	00110010 	.word	0x00110010
 8015c5c:	04d28874 	.word	0x04d28874

08015c60 <ull_setlnapamode>:
 8015c60:	b538      	push	{r3, r4, r5, lr}
 8015c62:	4605      	mov	r5, r0
 8015c64:	460c      	mov	r4, r1
 8015c66:	2200      	movs	r2, #0
 8015c68:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8015c6c:	f7ff fab5 	bl	80151da <dwt_read32bitoffsetreg>
 8015c70:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 8015c74:	f014 0f01 	tst.w	r4, #1
 8015c78:	bf18      	it	ne
 8015c7a:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8015c7e:	f014 0f02 	tst.w	r4, #2
 8015c82:	bf18      	it	ne
 8015c84:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 8015c88:	f014 0f04 	tst.w	r4, #4
 8015c8c:	bf18      	it	ne
 8015c8e:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 8015c92:	2200      	movs	r2, #0
 8015c94:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8015c98:	4628      	mov	r0, r5
 8015c9a:	f7ff ff7d 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015c9e:	bd38      	pop	{r3, r4, r5, pc}

08015ca0 <ull_configurestskey>:
 8015ca0:	b538      	push	{r3, r4, r5, lr}
 8015ca2:	4605      	mov	r5, r0
 8015ca4:	460c      	mov	r4, r1
 8015ca6:	680b      	ldr	r3, [r1, #0]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	490b      	ldr	r1, [pc, #44]	; (8015cd8 <ull_configurestskey+0x38>)
 8015cac:	f7ff ff74 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015cb0:	6863      	ldr	r3, [r4, #4]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	4909      	ldr	r1, [pc, #36]	; (8015cdc <ull_configurestskey+0x3c>)
 8015cb6:	4628      	mov	r0, r5
 8015cb8:	f7ff ff6e 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015cbc:	68a3      	ldr	r3, [r4, #8]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	4907      	ldr	r1, [pc, #28]	; (8015ce0 <ull_configurestskey+0x40>)
 8015cc2:	4628      	mov	r0, r5
 8015cc4:	f7ff ff68 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015cc8:	68e3      	ldr	r3, [r4, #12]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	4905      	ldr	r1, [pc, #20]	; (8015ce4 <ull_configurestskey+0x44>)
 8015cce:	4628      	mov	r0, r5
 8015cd0:	f7ff ff62 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015cd4:	bd38      	pop	{r3, r4, r5, pc}
 8015cd6:	bf00      	nop
 8015cd8:	0002000c 	.word	0x0002000c
 8015cdc:	00020010 	.word	0x00020010
 8015ce0:	00020014 	.word	0x00020014
 8015ce4:	00020018 	.word	0x00020018

08015ce8 <ull_configurestsiv>:
 8015ce8:	b538      	push	{r3, r4, r5, lr}
 8015cea:	4605      	mov	r5, r0
 8015cec:	460c      	mov	r4, r1
 8015cee:	680b      	ldr	r3, [r1, #0]
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	490b      	ldr	r1, [pc, #44]	; (8015d20 <ull_configurestsiv+0x38>)
 8015cf4:	f7ff ff50 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015cf8:	6863      	ldr	r3, [r4, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	4909      	ldr	r1, [pc, #36]	; (8015d24 <ull_configurestsiv+0x3c>)
 8015cfe:	4628      	mov	r0, r5
 8015d00:	f7ff ff4a 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015d04:	68a3      	ldr	r3, [r4, #8]
 8015d06:	2200      	movs	r2, #0
 8015d08:	4907      	ldr	r1, [pc, #28]	; (8015d28 <ull_configurestsiv+0x40>)
 8015d0a:	4628      	mov	r0, r5
 8015d0c:	f7ff ff44 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015d10:	68e3      	ldr	r3, [r4, #12]
 8015d12:	2200      	movs	r2, #0
 8015d14:	4905      	ldr	r1, [pc, #20]	; (8015d2c <ull_configurestsiv+0x44>)
 8015d16:	4628      	mov	r0, r5
 8015d18:	f7ff ff3e 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015d1c:	bd38      	pop	{r3, r4, r5, pc}
 8015d1e:	bf00      	nop
 8015d20:	0002001c 	.word	0x0002001c
 8015d24:	00020020 	.word	0x00020020
 8015d28:	00020024 	.word	0x00020024
 8015d2c:	00020028 	.word	0x00020028

08015d30 <ull_configmrxlut>:
 8015d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d34:	4604      	mov	r4, r0
 8015d36:	4d35      	ldr	r5, [pc, #212]	; (8015e0c <ull_configmrxlut+0xdc>)
 8015d38:	4b35      	ldr	r3, [pc, #212]	; (8015e10 <ull_configmrxlut+0xe0>)
 8015d3a:	2905      	cmp	r1, #5
 8015d3c:	bf18      	it	ne
 8015d3e:	461d      	movne	r5, r3
 8015d40:	4e34      	ldr	r6, [pc, #208]	; (8015e14 <ull_configmrxlut+0xe4>)
 8015d42:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015d46:	2905      	cmp	r1, #5
 8015d48:	bf18      	it	ne
 8015d4a:	461e      	movne	r6, r3
 8015d4c:	4f32      	ldr	r7, [pc, #200]	; (8015e18 <ull_configmrxlut+0xe8>)
 8015d4e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015d52:	2905      	cmp	r1, #5
 8015d54:	bf18      	it	ne
 8015d56:	461f      	movne	r7, r3
 8015d58:	4a30      	ldr	r2, [pc, #192]	; (8015e1c <ull_configmrxlut+0xec>)
 8015d5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015d5e:	2905      	cmp	r1, #5
 8015d60:	bf0c      	ite	eq
 8015d62:	4690      	moveq	r8, r2
 8015d64:	4698      	movne	r8, r3
 8015d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d6a:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 8015d6e:	2905      	cmp	r1, #5
 8015d70:	bf0c      	ite	eq
 8015d72:	4691      	moveq	r9, r2
 8015d74:	4699      	movne	r9, r3
 8015d76:	4a2a      	ldr	r2, [pc, #168]	; (8015e20 <ull_configmrxlut+0xf0>)
 8015d78:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 8015d7c:	2905      	cmp	r1, #5
 8015d7e:	bf0c      	ite	eq
 8015d80:	4692      	moveq	sl, r2
 8015d82:	469a      	movne	sl, r3
 8015d84:	4b27      	ldr	r3, [pc, #156]	; (8015e24 <ull_configmrxlut+0xf4>)
 8015d86:	4a28      	ldr	r2, [pc, #160]	; (8015e28 <ull_configmrxlut+0xf8>)
 8015d88:	2905      	cmp	r1, #5
 8015d8a:	bf0c      	ite	eq
 8015d8c:	469b      	moveq	fp, r3
 8015d8e:	4693      	movne	fp, r2
 8015d90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8015d94:	2200      	movs	r2, #0
 8015d96:	4925      	ldr	r1, [pc, #148]	; (8015e2c <ull_configmrxlut+0xfc>)
 8015d98:	f7ff fefe 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015d9c:	4b24      	ldr	r3, [pc, #144]	; (8015e30 <ull_configmrxlut+0x100>)
 8015d9e:	2200      	movs	r2, #0
 8015da0:	4924      	ldr	r1, [pc, #144]	; (8015e34 <ull_configmrxlut+0x104>)
 8015da2:	4620      	mov	r0, r4
 8015da4:	f7ff fef8 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015da8:	4b23      	ldr	r3, [pc, #140]	; (8015e38 <ull_configmrxlut+0x108>)
 8015daa:	2200      	movs	r2, #0
 8015dac:	4923      	ldr	r1, [pc, #140]	; (8015e3c <ull_configmrxlut+0x10c>)
 8015dae:	4620      	mov	r0, r4
 8015db0:	f7ff fef2 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015db4:	465b      	mov	r3, fp
 8015db6:	2200      	movs	r2, #0
 8015db8:	4921      	ldr	r1, [pc, #132]	; (8015e40 <ull_configmrxlut+0x110>)
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f7ff feec 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015dc0:	4653      	mov	r3, sl
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	491f      	ldr	r1, [pc, #124]	; (8015e44 <ull_configmrxlut+0x114>)
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	f7ff fee6 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015dcc:	464b      	mov	r3, r9
 8015dce:	2200      	movs	r2, #0
 8015dd0:	491d      	ldr	r1, [pc, #116]	; (8015e48 <ull_configmrxlut+0x118>)
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f7ff fee0 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015dd8:	4643      	mov	r3, r8
 8015dda:	2200      	movs	r2, #0
 8015ddc:	491b      	ldr	r1, [pc, #108]	; (8015e4c <ull_configmrxlut+0x11c>)
 8015dde:	4620      	mov	r0, r4
 8015de0:	f7ff feda 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015de4:	463b      	mov	r3, r7
 8015de6:	2200      	movs	r2, #0
 8015de8:	4919      	ldr	r1, [pc, #100]	; (8015e50 <ull_configmrxlut+0x120>)
 8015dea:	4620      	mov	r0, r4
 8015dec:	f7ff fed4 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015df0:	4633      	mov	r3, r6
 8015df2:	2200      	movs	r2, #0
 8015df4:	4917      	ldr	r1, [pc, #92]	; (8015e54 <ull_configmrxlut+0x124>)
 8015df6:	4620      	mov	r0, r4
 8015df8:	f7ff fece 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015dfc:	462b      	mov	r3, r5
 8015dfe:	2200      	movs	r2, #0
 8015e00:	4915      	ldr	r1, [pc, #84]	; (8015e58 <ull_configmrxlut+0x128>)
 8015e02:	4620      	mov	r0, r4
 8015e04:	f7ff fec8 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0c:	00039ff6 	.word	0x00039ff6
 8015e10:	00055ffe 	.word	0x00055ffe
 8015e14:	00039dfe 	.word	0x00039dfe
 8015e18:	00039c7e 	.word	0x00039c7e
 8015e1c:	00038efe 	.word	0x00038efe
 8015e20:	0003876e 	.word	0x0003876e
 8015e24:	0003803e 	.word	0x0003803e
 8015e28:	0005407e 	.word	0x0005407e
 8015e2c:	0003001c 	.word	0x0003001c
 8015e30:	1a491248 	.word	0x1a491248
 8015e34:	00030020 	.word	0x00030020
 8015e38:	2db248db 	.word	0x2db248db
 8015e3c:	00030024 	.word	0x00030024
 8015e40:	0003002c 	.word	0x0003002c
 8015e44:	00030030 	.word	0x00030030
 8015e48:	00030034 	.word	0x00030034
 8015e4c:	00030038 	.word	0x00030038
 8015e50:	0003003c 	.word	0x0003003c
 8015e54:	00030040 	.word	0x00030040
 8015e58:	00030044 	.word	0x00030044

08015e5c <ull_disable_rftx_blocks>:
 8015e5c:	b508      	push	{r3, lr}
 8015e5e:	2300      	movs	r3, #0
 8015e60:	461a      	mov	r2, r3
 8015e62:	4902      	ldr	r1, [pc, #8]	; (8015e6c <ull_disable_rftx_blocks+0x10>)
 8015e64:	f7ff fe98 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015e68:	bd08      	pop	{r3, pc}
 8015e6a:	bf00      	nop
 8015e6c:	00070004 	.word	0x00070004

08015e70 <ull_disable_rf_tx>:
 8015e70:	b538      	push	{r3, r4, r5, lr}
 8015e72:	4604      	mov	r4, r0
 8015e74:	460d      	mov	r5, r1
 8015e76:	2300      	movs	r3, #0
 8015e78:	461a      	mov	r2, r3
 8015e7a:	490a      	ldr	r1, [pc, #40]	; (8015ea4 <ull_disable_rf_tx+0x34>)
 8015e7c:	f7ff fe8c 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015e80:	2300      	movs	r3, #0
 8015e82:	461a      	mov	r2, r3
 8015e84:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8015e88:	4620      	mov	r0, r4
 8015e8a:	f7ff fe85 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015e8e:	b905      	cbnz	r5, 8015e92 <ull_disable_rf_tx+0x22>
 8015e90:	bd38      	pop	{r3, r4, r5, pc}
 8015e92:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8015e96:	2200      	movs	r2, #0
 8015e98:	4903      	ldr	r1, [pc, #12]	; (8015ea8 <ull_disable_rf_tx+0x38>)
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f7ff fe7c 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015ea0:	e7f6      	b.n	8015e90 <ull_disable_rf_tx+0x20>
 8015ea2:	bf00      	nop
 8015ea4:	00070048 	.word	0x00070048
 8015ea8:	00070014 	.word	0x00070014

08015eac <ull_repeated_cw>:
 8015eac:	b570      	push	{r4, r5, r6, lr}
 8015eae:	4606      	mov	r6, r0
 8015eb0:	460c      	mov	r4, r1
 8015eb2:	4615      	mov	r5, r2
 8015eb4:	2100      	movs	r1, #0
 8015eb6:	f7ff febf 	bl	8015c38 <ull_setfinegraintxseq>
 8015eba:	2d0f      	cmp	r5, #15
 8015ebc:	bfa8      	it	ge
 8015ebe:	250f      	movge	r5, #15
 8015ec0:	1e63      	subs	r3, r4, #1
 8015ec2:	2b03      	cmp	r3, #3
 8015ec4:	bf28      	it	cs
 8015ec6:	2404      	movcs	r4, #4
 8015ec8:	2310      	movs	r3, #16
 8015eca:	4123      	asrs	r3, r4
 8015ecc:	2200      	movs	r2, #0
 8015ece:	4907      	ldr	r1, [pc, #28]	; (8015eec <ull_repeated_cw+0x40>)
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	f7ff fe61 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015ed6:	1e63      	subs	r3, r4, #1
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	fa05 f303 	lsl.w	r3, r5, r3
 8015ede:	2200      	movs	r2, #0
 8015ee0:	4903      	ldr	r1, [pc, #12]	; (8015ef0 <ull_repeated_cw+0x44>)
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	f7ff fe58 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015ee8:	bd70      	pop	{r4, r5, r6, pc}
 8015eea:	bf00      	nop
 8015eec:	00070028 	.word	0x00070028
 8015ef0:	00080018 	.word	0x00080018

08015ef4 <ull_readrxdata>:
 8015ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ef6:	b083      	sub	sp, #12
 8015ef8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8015efa:	7ba4      	ldrb	r4, [r4, #14]
 8015efc:	2c03      	cmp	r4, #3
 8015efe:	bf0c      	ite	eq
 8015f00:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8015f04:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8015f08:	189c      	adds	r4, r3, r2
 8015f0a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015f0e:	da19      	bge.n	8015f44 <ull_readrxdata+0x50>
 8015f10:	461d      	mov	r5, r3
 8015f12:	4616      	mov	r6, r2
 8015f14:	460f      	mov	r7, r1
 8015f16:	4604      	mov	r4, r0
 8015f18:	2b7f      	cmp	r3, #127	; 0x7f
 8015f1a:	d915      	bls.n	8015f48 <ull_readrxdata+0x54>
 8015f1c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8015f20:	2200      	movs	r2, #0
 8015f22:	490d      	ldr	r1, [pc, #52]	; (8015f58 <ull_readrxdata+0x64>)
 8015f24:	f7ff fe38 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015f28:	462b      	mov	r3, r5
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	490b      	ldr	r1, [pc, #44]	; (8015f5c <ull_readrxdata+0x68>)
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f7ff fe32 	bl	8015b98 <dwt_write32bitoffsetreg>
 8015f34:	9700      	str	r7, [sp, #0]
 8015f36:	4633      	mov	r3, r6
 8015f38:	2200      	movs	r2, #0
 8015f3a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8015f3e:	4620      	mov	r0, r4
 8015f40:	f7ff f941 	bl	80151c6 <dwt_readfromdevice>
 8015f44:	b003      	add	sp, #12
 8015f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f48:	9100      	str	r1, [sp, #0]
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	462a      	mov	r2, r5
 8015f4e:	4661      	mov	r1, ip
 8015f50:	f7ff f939 	bl	80151c6 <dwt_readfromdevice>
 8015f54:	e7f6      	b.n	8015f44 <ull_readrxdata+0x50>
 8015f56:	bf00      	nop
 8015f58:	001f0004 	.word	0x001f0004
 8015f5c:	001f0008 	.word	0x001f0008

08015f60 <dwt_write8bitoffsetreg>:
 8015f60:	b510      	push	{r4, lr}
 8015f62:	b084      	sub	sp, #16
 8015f64:	ac04      	add	r4, sp, #16
 8015f66:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8015f6a:	9400      	str	r4, [sp, #0]
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	b292      	uxth	r2, r2
 8015f70:	f7ff fd9c 	bl	8015aac <dwt_writetodevice>
 8015f74:	b004      	add	sp, #16
 8015f76:	bd10      	pop	{r4, pc}

08015f78 <ull_getframelength>:
 8015f78:	b510      	push	{r4, lr}
 8015f7a:	4604      	mov	r4, r0
 8015f7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015f7e:	7b9b      	ldrb	r3, [r3, #14]
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d013      	beq.n	8015fac <ull_getframelength+0x34>
 8015f84:	2b03      	cmp	r3, #3
 8015f86:	d11d      	bne.n	8015fc4 <ull_getframelength+0x4c>
 8015f88:	23f0      	movs	r3, #240	; 0xf0
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	4912      	ldr	r1, [pc, #72]	; (8015fd8 <ull_getframelength+0x60>)
 8015f8e:	f7ff ffe7 	bl	8015f60 <dwt_write8bitoffsetreg>
 8015f92:	2200      	movs	r2, #0
 8015f94:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8015f98:	4620      	mov	r0, r4
 8015f9a:	f7ff f934 	bl	8015206 <dwt_read16bitoffsetreg>
 8015f9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015fa0:	7ada      	ldrb	r2, [r3, #11]
 8015fa2:	b1a2      	cbz	r2, 8015fce <ull_getframelength+0x56>
 8015fa4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8015fa8:	83d8      	strh	r0, [r3, #30]
 8015faa:	bd10      	pop	{r4, pc}
 8015fac:	230f      	movs	r3, #15
 8015fae:	2200      	movs	r2, #0
 8015fb0:	4909      	ldr	r1, [pc, #36]	; (8015fd8 <ull_getframelength+0x60>)
 8015fb2:	f7ff ffd5 	bl	8015f60 <dwt_write8bitoffsetreg>
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	f7ff f922 	bl	8015206 <dwt_read16bitoffsetreg>
 8015fc2:	e7ec      	b.n	8015f9e <ull_getframelength+0x26>
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	214c      	movs	r1, #76	; 0x4c
 8015fc8:	f7ff f91d 	bl	8015206 <dwt_read16bitoffsetreg>
 8015fcc:	e7e7      	b.n	8015f9e <ull_getframelength+0x26>
 8015fce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8015fd2:	83d8      	strh	r0, [r3, #30]
 8015fd4:	e7e9      	b.n	8015faa <ull_getframelength+0x32>
 8015fd6:	bf00      	nop
 8015fd8:	00010018 	.word	0x00010018

08015fdc <_dwt_clear_db_events>:
 8015fdc:	b510      	push	{r4, lr}
 8015fde:	4604      	mov	r4, r0
 8015fe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015fe2:	7b9b      	ldrb	r3, [r3, #14]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d004      	beq.n	8015ff2 <_dwt_clear_db_events+0x16>
 8015fe8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015fea:	7b9b      	ldrb	r3, [r3, #14]
 8015fec:	2b03      	cmp	r3, #3
 8015fee:	d006      	beq.n	8015ffe <_dwt_clear_db_events+0x22>
 8015ff0:	bd10      	pop	{r4, pc}
 8015ff2:	230f      	movs	r3, #15
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	4905      	ldr	r1, [pc, #20]	; (801600c <_dwt_clear_db_events+0x30>)
 8015ff8:	f7ff ffb2 	bl	8015f60 <dwt_write8bitoffsetreg>
 8015ffc:	e7f4      	b.n	8015fe8 <_dwt_clear_db_events+0xc>
 8015ffe:	23f0      	movs	r3, #240	; 0xf0
 8016000:	2200      	movs	r2, #0
 8016002:	4902      	ldr	r1, [pc, #8]	; (801600c <_dwt_clear_db_events+0x30>)
 8016004:	4620      	mov	r0, r4
 8016006:	f7ff ffab 	bl	8015f60 <dwt_write8bitoffsetreg>
 801600a:	e7f1      	b.n	8015ff0 <_dwt_clear_db_events+0x14>
 801600c:	00010018 	.word	0x00010018

08016010 <ull_clearaonconfig>:
 8016010:	b538      	push	{r3, r4, r5, lr}
 8016012:	4604      	mov	r4, r0
 8016014:	2300      	movs	r3, #0
 8016016:	461a      	mov	r2, r3
 8016018:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 801601c:	f7ff fd51 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016020:	2300      	movs	r3, #0
 8016022:	461a      	mov	r2, r3
 8016024:	4908      	ldr	r1, [pc, #32]	; (8016048 <ull_clearaonconfig+0x38>)
 8016026:	4620      	mov	r0, r4
 8016028:	f7ff ff9a 	bl	8015f60 <dwt_write8bitoffsetreg>
 801602c:	4d07      	ldr	r5, [pc, #28]	; (801604c <ull_clearaonconfig+0x3c>)
 801602e:	2300      	movs	r3, #0
 8016030:	461a      	mov	r2, r3
 8016032:	4629      	mov	r1, r5
 8016034:	4620      	mov	r0, r4
 8016036:	f7ff ff93 	bl	8015f60 <dwt_write8bitoffsetreg>
 801603a:	2302      	movs	r3, #2
 801603c:	2200      	movs	r2, #0
 801603e:	4629      	mov	r1, r5
 8016040:	4620      	mov	r0, r4
 8016042:	f7ff ff8d 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016046:	bd38      	pop	{r3, r4, r5, pc}
 8016048:	000a0014 	.word	0x000a0014
 801604c:	000a0004 	.word	0x000a0004

08016050 <ull_configeventcounters>:
 8016050:	b538      	push	{r3, r4, r5, lr}
 8016052:	4605      	mov	r5, r0
 8016054:	460c      	mov	r4, r1
 8016056:	2302      	movs	r3, #2
 8016058:	2200      	movs	r2, #0
 801605a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801605e:	f7ff ff7f 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016062:	b904      	cbnz	r4, 8016066 <ull_configeventcounters+0x16>
 8016064:	bd38      	pop	{r3, r4, r5, pc}
 8016066:	2301      	movs	r3, #1
 8016068:	2200      	movs	r2, #0
 801606a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801606e:	4628      	mov	r0, r5
 8016070:	f7ff ff76 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016074:	e7f6      	b.n	8016064 <ull_configeventcounters+0x14>
	...

08016078 <ull_aon_read>:
 8016078:	b538      	push	{r3, r4, r5, lr}
 801607a:	4604      	mov	r4, r0
 801607c:	460b      	mov	r3, r1
 801607e:	2200      	movs	r2, #0
 8016080:	490a      	ldr	r1, [pc, #40]	; (80160ac <ull_aon_read+0x34>)
 8016082:	f7ff fd1e 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016086:	4d0a      	ldr	r5, [pc, #40]	; (80160b0 <ull_aon_read+0x38>)
 8016088:	2388      	movs	r3, #136	; 0x88
 801608a:	2200      	movs	r2, #0
 801608c:	4629      	mov	r1, r5
 801608e:	4620      	mov	r0, r4
 8016090:	f7ff ff66 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016094:	2300      	movs	r3, #0
 8016096:	461a      	mov	r2, r3
 8016098:	4629      	mov	r1, r5
 801609a:	4620      	mov	r0, r4
 801609c:	f7ff ff60 	bl	8015f60 <dwt_write8bitoffsetreg>
 80160a0:	2200      	movs	r2, #0
 80160a2:	4904      	ldr	r1, [pc, #16]	; (80160b4 <ull_aon_read+0x3c>)
 80160a4:	4620      	mov	r0, r4
 80160a6:	f7ff f8ed 	bl	8015284 <dwt_read8bitoffsetreg>
 80160aa:	bd38      	pop	{r3, r4, r5, pc}
 80160ac:	000a000c 	.word	0x000a000c
 80160b0:	000a0004 	.word	0x000a0004
 80160b4:	000a0008 	.word	0x000a0008

080160b8 <ull_aon_write>:
 80160b8:	b570      	push	{r4, r5, r6, lr}
 80160ba:	4604      	mov	r4, r0
 80160bc:	460b      	mov	r3, r1
 80160be:	4615      	mov	r5, r2
 80160c0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80160c4:	bf34      	ite	cc
 80160c6:	2600      	movcc	r6, #0
 80160c8:	2620      	movcs	r6, #32
 80160ca:	2200      	movs	r2, #0
 80160cc:	490b      	ldr	r1, [pc, #44]	; (80160fc <ull_aon_write+0x44>)
 80160ce:	f7ff fcf8 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80160d2:	462b      	mov	r3, r5
 80160d4:	2200      	movs	r2, #0
 80160d6:	490a      	ldr	r1, [pc, #40]	; (8016100 <ull_aon_write+0x48>)
 80160d8:	4620      	mov	r0, r4
 80160da:	f7ff ff41 	bl	8015f60 <dwt_write8bitoffsetreg>
 80160de:	4d09      	ldr	r5, [pc, #36]	; (8016104 <ull_aon_write+0x4c>)
 80160e0:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80160e4:	2200      	movs	r2, #0
 80160e6:	4629      	mov	r1, r5
 80160e8:	4620      	mov	r0, r4
 80160ea:	f7ff ff39 	bl	8015f60 <dwt_write8bitoffsetreg>
 80160ee:	2300      	movs	r3, #0
 80160f0:	461a      	mov	r2, r3
 80160f2:	4629      	mov	r1, r5
 80160f4:	4620      	mov	r0, r4
 80160f6:	f7ff ff33 	bl	8015f60 <dwt_write8bitoffsetreg>
 80160fa:	bd70      	pop	{r4, r5, r6, pc}
 80160fc:	000a000c 	.word	0x000a000c
 8016100:	000a0010 	.word	0x000a0010
 8016104:	000a0004 	.word	0x000a0004

08016108 <ull_configuresleep>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	4604      	mov	r4, r0
 801610c:	460d      	mov	r5, r1
 801610e:	4616      	mov	r6, r2
 8016110:	2200      	movs	r2, #0
 8016112:	f240 110b 	movw	r1, #267	; 0x10b
 8016116:	f7ff ffcf 	bl	80160b8 <ull_aon_write>
 801611a:	f44f 7182 	mov.w	r1, #260	; 0x104
 801611e:	4620      	mov	r0, r4
 8016120:	f7ff ffaa 	bl	8016078 <ull_aon_read>
 8016124:	f000 021f 	and.w	r2, r0, #31
 8016128:	f44f 7182 	mov.w	r1, #260	; 0x104
 801612c:	4620      	mov	r0, r4
 801612e:	f7ff ffc3 	bl	80160b8 <ull_aon_write>
 8016132:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016134:	8a1a      	ldrh	r2, [r3, #16]
 8016136:	4315      	orrs	r5, r2
 8016138:	821d      	strh	r5, [r3, #16]
 801613a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801613c:	8a13      	ldrh	r3, [r2, #16]
 801613e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8016142:	bf1c      	itt	ne
 8016144:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 8016148:	8213      	strhne	r3, [r2, #16]
 801614a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801614c:	8a1b      	ldrh	r3, [r3, #16]
 801614e:	2200      	movs	r2, #0
 8016150:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8016154:	4620      	mov	r0, r4
 8016156:	f7ff fcb4 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801615a:	4633      	mov	r3, r6
 801615c:	2200      	movs	r2, #0
 801615e:	4902      	ldr	r1, [pc, #8]	; (8016168 <ull_configuresleep+0x60>)
 8016160:	4620      	mov	r0, r4
 8016162:	f7ff fefd 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016166:	bd70      	pop	{r4, r5, r6, pc}
 8016168:	000a0014 	.word	0x000a0014

0801616c <ull_setplenfine>:
 801616c:	b508      	push	{r3, lr}
 801616e:	460b      	mov	r3, r1
 8016170:	2201      	movs	r2, #1
 8016172:	2124      	movs	r1, #36	; 0x24
 8016174:	f7ff fef4 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016178:	bd08      	pop	{r3, pc}
	...

0801617c <ull_update_nonce_GCM>:
 801617c:	b500      	push	{lr}
 801617e:	b083      	sub	sp, #12
 8016180:	9100      	str	r1, [sp, #0]
 8016182:	230c      	movs	r3, #12
 8016184:	2200      	movs	r2, #0
 8016186:	4903      	ldr	r1, [pc, #12]	; (8016194 <ull_update_nonce_GCM+0x18>)
 8016188:	f7ff fc90 	bl	8015aac <dwt_writetodevice>
 801618c:	b003      	add	sp, #12
 801618e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016192:	bf00      	nop
 8016194:	00010034 	.word	0x00010034

08016198 <ull_update_nonce_CCM>:
 8016198:	b500      	push	{lr}
 801619a:	b087      	sub	sp, #28
 801619c:	4613      	mov	r3, r2
 801619e:	7a8a      	ldrb	r2, [r1, #10]
 80161a0:	f88d 2008 	strb.w	r2, [sp, #8]
 80161a4:	7a4a      	ldrb	r2, [r1, #9]
 80161a6:	f88d 2009 	strb.w	r2, [sp, #9]
 80161aa:	7a0a      	ldrb	r2, [r1, #8]
 80161ac:	f88d 200a 	strb.w	r2, [sp, #10]
 80161b0:	79ca      	ldrb	r2, [r1, #7]
 80161b2:	f88d 200b 	strb.w	r2, [sp, #11]
 80161b6:	798a      	ldrb	r2, [r1, #6]
 80161b8:	f88d 200c 	strb.w	r2, [sp, #12]
 80161bc:	794a      	ldrb	r2, [r1, #5]
 80161be:	f88d 200d 	strb.w	r2, [sp, #13]
 80161c2:	790a      	ldrb	r2, [r1, #4]
 80161c4:	f88d 200e 	strb.w	r2, [sp, #14]
 80161c8:	78ca      	ldrb	r2, [r1, #3]
 80161ca:	f88d 200f 	strb.w	r2, [sp, #15]
 80161ce:	788a      	ldrb	r2, [r1, #2]
 80161d0:	f88d 2010 	strb.w	r2, [sp, #16]
 80161d4:	784a      	ldrb	r2, [r1, #1]
 80161d6:	f88d 2011 	strb.w	r2, [sp, #17]
 80161da:	780a      	ldrb	r2, [r1, #0]
 80161dc:	f88d 2012 	strb.w	r2, [sp, #18]
 80161e0:	2200      	movs	r2, #0
 80161e2:	f88d 2013 	strb.w	r2, [sp, #19]
 80161e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80161ea:	0a1b      	lsrs	r3, r3, #8
 80161ec:	f88d 3015 	strb.w	r3, [sp, #21]
 80161f0:	7b0b      	ldrb	r3, [r1, #12]
 80161f2:	f88d 3016 	strb.w	r3, [sp, #22]
 80161f6:	7acb      	ldrb	r3, [r1, #11]
 80161f8:	f88d 3017 	strb.w	r3, [sp, #23]
 80161fc:	ab02      	add	r3, sp, #8
 80161fe:	9300      	str	r3, [sp, #0]
 8016200:	2310      	movs	r3, #16
 8016202:	4903      	ldr	r1, [pc, #12]	; (8016210 <ull_update_nonce_CCM+0x78>)
 8016204:	f7ff fc52 	bl	8015aac <dwt_writetodevice>
 8016208:	b007      	add	sp, #28
 801620a:	f85d fb04 	ldr.w	pc, [sp], #4
 801620e:	bf00      	nop
 8016210:	00010034 	.word	0x00010034

08016214 <ull_writetxdata>:
 8016214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016216:	b083      	sub	sp, #12
 8016218:	185c      	adds	r4, r3, r1
 801621a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801621e:	da24      	bge.n	801626a <ull_writetxdata+0x56>
 8016220:	461c      	mov	r4, r3
 8016222:	4617      	mov	r7, r2
 8016224:	460e      	mov	r6, r1
 8016226:	4605      	mov	r5, r0
 8016228:	2b7f      	cmp	r3, #127	; 0x7f
 801622a:	d915      	bls.n	8016258 <ull_writetxdata+0x44>
 801622c:	2314      	movs	r3, #20
 801622e:	2200      	movs	r2, #0
 8016230:	490f      	ldr	r1, [pc, #60]	; (8016270 <ull_writetxdata+0x5c>)
 8016232:	f7ff fcb1 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016236:	4623      	mov	r3, r4
 8016238:	2200      	movs	r2, #0
 801623a:	490e      	ldr	r1, [pc, #56]	; (8016274 <ull_writetxdata+0x60>)
 801623c:	4628      	mov	r0, r5
 801623e:	f7ff fcab 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016242:	9700      	str	r7, [sp, #0]
 8016244:	4633      	mov	r3, r6
 8016246:	2200      	movs	r2, #0
 8016248:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801624c:	4628      	mov	r0, r5
 801624e:	f7ff fc2d 	bl	8015aac <dwt_writetodevice>
 8016252:	2000      	movs	r0, #0
 8016254:	b003      	add	sp, #12
 8016256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016258:	9200      	str	r2, [sp, #0]
 801625a:	460b      	mov	r3, r1
 801625c:	4622      	mov	r2, r4
 801625e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8016262:	f7ff fc23 	bl	8015aac <dwt_writetodevice>
 8016266:	2000      	movs	r0, #0
 8016268:	e7f4      	b.n	8016254 <ull_writetxdata+0x40>
 801626a:	f04f 30ff 	mov.w	r0, #4294967295
 801626e:	e7f1      	b.n	8016254 <ull_writetxdata+0x40>
 8016270:	001f0004 	.word	0x001f0004
 8016274:	001f0008 	.word	0x001f0008

08016278 <ull_signal_rx_buff_free>:
 8016278:	b510      	push	{r4, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	4604      	mov	r4, r0
 801627e:	2302      	movs	r3, #2
 8016280:	9301      	str	r3, [sp, #4]
 8016282:	2200      	movs	r2, #0
 8016284:	9200      	str	r2, [sp, #0]
 8016286:	4613      	mov	r3, r2
 8016288:	2113      	movs	r1, #19
 801628a:	f7fe ff1e 	bl	80150ca <dwt_xfer3xxx>
 801628e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016290:	7b9a      	ldrb	r2, [r3, #14]
 8016292:	2a03      	cmp	r2, #3
 8016294:	bf0c      	ite	eq
 8016296:	2201      	moveq	r2, #1
 8016298:	2203      	movne	r2, #3
 801629a:	739a      	strb	r2, [r3, #14]
 801629c:	b002      	add	sp, #8
 801629e:	bd10      	pop	{r4, pc}

080162a0 <ull_isr>:
 80162a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a4:	4604      	mov	r4, r0
 80162a6:	2200      	movs	r2, #0
 80162a8:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 80162ac:	f7fe ffea 	bl	8015284 <dwt_read8bitoffsetreg>
 80162b0:	4605      	mov	r5, r0
 80162b2:	2200      	movs	r2, #0
 80162b4:	2144      	movs	r1, #68	; 0x44
 80162b6:	4620      	mov	r0, r4
 80162b8:	f7fe ff8f 	bl	80151da <dwt_read32bitoffsetreg>
 80162bc:	4606      	mov	r6, r0
 80162be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80162c0:	2200      	movs	r2, #0
 80162c2:	83da      	strh	r2, [r3, #30]
 80162c4:	f883 2020 	strb.w	r2, [r3, #32]
 80162c8:	619a      	str	r2, [r3, #24]
 80162ca:	839a      	strh	r2, [r3, #28]
 80162cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80162d0:	625a      	str	r2, [r3, #36]	; 0x24
 80162d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80162d4:	625c      	str	r4, [r3, #36]	; 0x24
 80162d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80162d8:	7b9f      	ldrb	r7, [r3, #14]
 80162da:	2f00      	cmp	r7, #0
 80162dc:	d17f      	bne.n	80163de <ull_isr+0x13e>
 80162de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80162e0:	619e      	str	r6, [r3, #24]
 80162e2:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 80162e6:	f898 3015 	ldrb.w	r3, [r8, #21]
 80162ea:	f003 0303 	and.w	r3, r3, #3
 80162ee:	2b03      	cmp	r3, #3
 80162f0:	f000 8090 	beq.w	8016414 <ull_isr+0x174>
 80162f4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80162f8:	f040 8093 	bne.w	8016422 <ull_isr+0x182>
 80162fc:	f015 0f01 	tst.w	r5, #1
 8016300:	f040 80c1 	bne.w	8016486 <ull_isr+0x1e6>
 8016304:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016308:	d00b      	beq.n	8016322 <ull_isr+0x82>
 801630a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801630c:	b113      	cbz	r3, 8016314 <ull_isr+0x74>
 801630e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8016310:	3018      	adds	r0, #24
 8016312:	4798      	blx	r3
 8016314:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8016318:	2202      	movs	r2, #2
 801631a:	2144      	movs	r1, #68	; 0x44
 801631c:	4620      	mov	r0, r4
 801631e:	f7ff fbd0 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016322:	f015 0f08 	tst.w	r5, #8
 8016326:	d107      	bne.n	8016338 <ull_isr+0x98>
 8016328:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801632a:	7b9b      	ldrb	r3, [r3, #14]
 801632c:	2b00      	cmp	r3, #0
 801632e:	f000 80ea 	beq.w	8016506 <ull_isr+0x266>
 8016332:	2f00      	cmp	r7, #0
 8016334:	f000 80e7 	beq.w	8016506 <ull_isr+0x266>
 8016338:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801633a:	2200      	movs	r2, #0
 801633c:	f883 2020 	strb.w	r2, [r3, #32]
 8016340:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8016344:	f000 80ad 	beq.w	80164a2 <ull_isr+0x202>
 8016348:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801634a:	f892 3020 	ldrb.w	r3, [r2, #32]
 801634e:	f043 0308 	orr.w	r3, r3, #8
 8016352:	f882 3020 	strb.w	r3, [r2, #32]
 8016356:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 801635a:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 801635e:	d008      	beq.n	8016372 <ull_isr+0xd2>
 8016360:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8016362:	f892 3020 	ldrb.w	r3, [r2, #32]
 8016366:	f043 0310 	orr.w	r3, r3, #16
 801636a:	f882 3020 	strb.w	r3, [r2, #32]
 801636e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8016372:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8016376:	d006      	beq.n	8016386 <ull_isr+0xe6>
 8016378:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801637a:	7d53      	ldrb	r3, [r2, #21]
 801637c:	f003 0303 	and.w	r3, r3, #3
 8016380:	2b03      	cmp	r3, #3
 8016382:	f000 809a 	beq.w	80164ba <ull_isr+0x21a>
 8016386:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 801638a:	f040 80a2 	bne.w	80164d2 <ull_isr+0x232>
 801638e:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8016392:	2200      	movs	r2, #0
 8016394:	2144      	movs	r1, #68	; 0x44
 8016396:	4620      	mov	r0, r4
 8016398:	f7ff fbfe 	bl	8015b98 <dwt_write32bitoffsetreg>
 801639c:	4620      	mov	r0, r4
 801639e:	f7ff fe1d 	bl	8015fdc <_dwt_clear_db_events>
 80163a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80163a4:	8bc3      	ldrh	r3, [r0, #30]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	f040 80a2 	bne.w	80164f0 <ull_isr+0x250>
 80163ac:	7d43      	ldrb	r3, [r0, #21]
 80163ae:	f003 0303 	and.w	r3, r3, #3
 80163b2:	2b03      	cmp	r3, #3
 80163b4:	f000 809c 	beq.w	80164f0 <ull_isr+0x250>
 80163b8:	6983      	ldr	r3, [r0, #24]
 80163ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80163be:	6183      	str	r3, [r0, #24]
 80163c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80163c2:	6993      	ldr	r3, [r2, #24]
 80163c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80163c8:	6193      	str	r3, [r2, #24]
 80163ca:	69e3      	ldr	r3, [r4, #28]
 80163cc:	b113      	cbz	r3, 80163d4 <ull_isr+0x134>
 80163ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80163d0:	3018      	adds	r0, #24
 80163d2:	4798      	blx	r3
 80163d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80163d6:	2200      	movs	r2, #0
 80163d8:	f883 2020 	strb.w	r2, [r3, #32]
 80163dc:	e08c      	b.n	80164f8 <ull_isr+0x258>
 80163de:	496d      	ldr	r1, [pc, #436]	; (8016594 <ull_isr+0x2f4>)
 80163e0:	4620      	mov	r0, r4
 80163e2:	f7fe ff4f 	bl	8015284 <dwt_read8bitoffsetreg>
 80163e6:	4607      	mov	r7, r0
 80163e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80163ea:	7b9b      	ldrb	r3, [r3, #14]
 80163ec:	2b03      	cmp	r3, #3
 80163ee:	bf08      	it	eq
 80163f0:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 80163f4:	f017 0f01 	tst.w	r7, #1
 80163f8:	bf18      	it	ne
 80163fa:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 80163fe:	f017 0f02 	tst.w	r7, #2
 8016402:	bf18      	it	ne
 8016404:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8016408:	f017 0f04 	tst.w	r7, #4
 801640c:	bf18      	it	ne
 801640e:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8016412:	e764      	b.n	80162de <ull_isr+0x3e>
 8016414:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8016418:	bf1c      	itt	ne
 801641a:	f045 0508 	orrne.w	r5, r5, #8
 801641e:	b2ed      	uxtbne	r5, r5
 8016420:	e768      	b.n	80162f4 <ull_isr+0x54>
 8016422:	2200      	movs	r2, #0
 8016424:	2148      	movs	r1, #72	; 0x48
 8016426:	4620      	mov	r0, r4
 8016428:	f7fe feed 	bl	8015206 <dwt_read16bitoffsetreg>
 801642c:	f8a8 001c 	strh.w	r0, [r8, #28]
 8016430:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016432:	7d1a      	ldrb	r2, [r3, #20]
 8016434:	b11a      	cbz	r2, 801643e <ull_isr+0x19e>
 8016436:	699a      	ldr	r2, [r3, #24]
 8016438:	f012 0f04 	tst.w	r2, #4
 801643c:	d103      	bne.n	8016446 <ull_isr+0x1a6>
 801643e:	8b9b      	ldrh	r3, [r3, #28]
 8016440:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8016444:	b18b      	cbz	r3, 801646a <ull_isr+0x1ca>
 8016446:	2304      	movs	r3, #4
 8016448:	2200      	movs	r2, #0
 801644a:	2144      	movs	r1, #68	; 0x44
 801644c:	4620      	mov	r0, r4
 801644e:	f7ff fd87 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016452:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8016456:	2200      	movs	r2, #0
 8016458:	2148      	movs	r1, #72	; 0x48
 801645a:	4620      	mov	r0, r4
 801645c:	f7ff fb31 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016460:	6a23      	ldr	r3, [r4, #32]
 8016462:	b113      	cbz	r3, 801646a <ull_isr+0x1ca>
 8016464:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8016466:	3018      	adds	r0, #24
 8016468:	4798      	blx	r3
 801646a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801646c:	8b9b      	ldrh	r3, [r3, #28]
 801646e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8016472:	f43f af43 	beq.w	80162fc <ull_isr+0x5c>
 8016476:	f44f 7380 	mov.w	r3, #256	; 0x100
 801647a:	2200      	movs	r2, #0
 801647c:	2148      	movs	r1, #72	; 0x48
 801647e:	4620      	mov	r0, r4
 8016480:	f7ff fb1f 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016484:	e73a      	b.n	80162fc <ull_isr+0x5c>
 8016486:	23f8      	movs	r3, #248	; 0xf8
 8016488:	2200      	movs	r2, #0
 801648a:	2144      	movs	r1, #68	; 0x44
 801648c:	4620      	mov	r0, r4
 801648e:	f7ff fd67 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016492:	6923      	ldr	r3, [r4, #16]
 8016494:	2b00      	cmp	r3, #0
 8016496:	f43f af35 	beq.w	8016304 <ull_isr+0x64>
 801649a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801649c:	3018      	adds	r0, #24
 801649e:	4798      	blx	r3
 80164a0:	e730      	b.n	8016304 <ull_isr+0x64>
 80164a2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80164a6:	bf1f      	itttt	ne
 80164a8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 80164aa:	f892 3020 	ldrbne.w	r3, [r2, #32]
 80164ae:	f043 0304 	orrne.w	r3, r3, #4
 80164b2:	f882 3020 	strbne.w	r3, [r2, #32]
 80164b6:	2700      	movs	r7, #0
 80164b8:	e74f      	b.n	801635a <ull_isr+0xba>
 80164ba:	f892 3020 	ldrb.w	r3, [r2, #32]
 80164be:	f043 0302 	orr.w	r3, r3, #2
 80164c2:	f882 3020 	strb.w	r3, [r2, #32]
 80164c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80164c8:	2200      	movs	r2, #0
 80164ca:	83da      	strh	r2, [r3, #30]
 80164cc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80164d0:	e75d      	b.n	801638e <ull_isr+0xee>
 80164d2:	4620      	mov	r0, r4
 80164d4:	f7ff fd50 	bl	8015f78 <ull_getframelength>
 80164d8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80164dc:	f43f af57 	beq.w	801638e <ull_isr+0xee>
 80164e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80164e2:	f892 3020 	ldrb.w	r3, [r2, #32]
 80164e6:	f043 0301 	orr.w	r3, r3, #1
 80164ea:	f882 3020 	strb.w	r3, [r2, #32]
 80164ee:	e74e      	b.n	801638e <ull_isr+0xee>
 80164f0:	6963      	ldr	r3, [r4, #20]
 80164f2:	b10b      	cbz	r3, 80164f8 <ull_isr+0x258>
 80164f4:	3018      	adds	r0, #24
 80164f6:	4798      	blx	r3
 80164f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80164fa:	7b9b      	ldrb	r3, [r3, #14]
 80164fc:	bb03      	cbnz	r3, 8016540 <ull_isr+0x2a0>
 80164fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016500:	2200      	movs	r2, #0
 8016502:	f883 2020 	strb.w	r2, [r3, #32]
 8016506:	f015 0f10 	tst.w	r5, #16
 801650a:	d11d      	bne.n	8016548 <ull_isr+0x2a8>
 801650c:	f015 0f20 	tst.w	r5, #32
 8016510:	d12d      	bne.n	801656e <ull_isr+0x2ce>
 8016512:	2200      	movs	r2, #0
 8016514:	4920      	ldr	r1, [pc, #128]	; (8016598 <ull_isr+0x2f8>)
 8016516:	4620      	mov	r0, r4
 8016518:	f7fe feb4 	bl	8015284 <dwt_read8bitoffsetreg>
 801651c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801651e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8016522:	f010 0303 	ands.w	r3, r0, #3
 8016526:	d009      	beq.n	801653c <ull_isr+0x29c>
 8016528:	2200      	movs	r2, #0
 801652a:	491b      	ldr	r1, [pc, #108]	; (8016598 <ull_isr+0x2f8>)
 801652c:	4620      	mov	r0, r4
 801652e:	f7ff fd17 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016534:	b113      	cbz	r3, 801653c <ull_isr+0x29c>
 8016536:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8016538:	3018      	adds	r0, #24
 801653a:	4798      	blx	r3
 801653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016540:	4620      	mov	r0, r4
 8016542:	f7ff fe99 	bl	8016278 <ull_signal_rx_buff_free>
 8016546:	e7da      	b.n	80164fe <ull_isr+0x25e>
 8016548:	4b14      	ldr	r3, [pc, #80]	; (801659c <ull_isr+0x2fc>)
 801654a:	2200      	movs	r2, #0
 801654c:	2144      	movs	r1, #68	; 0x44
 801654e:	4620      	mov	r0, r4
 8016550:	f7ff fb22 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016554:	4620      	mov	r0, r4
 8016556:	f7ff fd41 	bl	8015fdc <_dwt_clear_db_events>
 801655a:	69e3      	ldr	r3, [r4, #28]
 801655c:	b113      	cbz	r3, 8016564 <ull_isr+0x2c4>
 801655e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8016560:	3018      	adds	r0, #24
 8016562:	4798      	blx	r3
 8016564:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016566:	2200      	movs	r2, #0
 8016568:	f883 2020 	strb.w	r2, [r3, #32]
 801656c:	e7ce      	b.n	801650c <ull_isr+0x26c>
 801656e:	4b0c      	ldr	r3, [pc, #48]	; (80165a0 <ull_isr+0x300>)
 8016570:	2200      	movs	r2, #0
 8016572:	2144      	movs	r1, #68	; 0x44
 8016574:	4620      	mov	r0, r4
 8016576:	f7ff fb0f 	bl	8015b98 <dwt_write32bitoffsetreg>
 801657a:	4620      	mov	r0, r4
 801657c:	f7ff fd2e 	bl	8015fdc <_dwt_clear_db_events>
 8016580:	69a3      	ldr	r3, [r4, #24]
 8016582:	b113      	cbz	r3, 801658a <ull_isr+0x2ea>
 8016584:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8016586:	3018      	adds	r0, #24
 8016588:	4798      	blx	r3
 801658a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801658c:	2200      	movs	r2, #0
 801658e:	f883 2020 	strb.w	r2, [r3, #32]
 8016592:	e7be      	b.n	8016512 <ull_isr+0x272>
 8016594:	00010018 	.word	0x00010018
 8016598:	00110038 	.word	0x00110038
 801659c:	34059400 	.word	0x34059400
 80165a0:	10220400 	.word	0x10220400

080165a4 <dwt_modify32bitoffsetreg>:
 80165a4:	b530      	push	{r4, r5, lr}
 80165a6:	b085      	sub	sp, #20
 80165a8:	9c08      	ldr	r4, [sp, #32]
 80165aa:	f88d 3008 	strb.w	r3, [sp, #8]
 80165ae:	0a1d      	lsrs	r5, r3, #8
 80165b0:	f88d 5009 	strb.w	r5, [sp, #9]
 80165b4:	0c1d      	lsrs	r5, r3, #16
 80165b6:	f88d 500a 	strb.w	r5, [sp, #10]
 80165ba:	0e1b      	lsrs	r3, r3, #24
 80165bc:	f88d 300b 	strb.w	r3, [sp, #11]
 80165c0:	f88d 400c 	strb.w	r4, [sp, #12]
 80165c4:	0a23      	lsrs	r3, r4, #8
 80165c6:	f88d 300d 	strb.w	r3, [sp, #13]
 80165ca:	0c23      	lsrs	r3, r4, #16
 80165cc:	f88d 300e 	strb.w	r3, [sp, #14]
 80165d0:	0e24      	lsrs	r4, r4, #24
 80165d2:	f88d 400f 	strb.w	r4, [sp, #15]
 80165d6:	f248 0303 	movw	r3, #32771	; 0x8003
 80165da:	9301      	str	r3, [sp, #4]
 80165dc:	ab02      	add	r3, sp, #8
 80165de:	9300      	str	r3, [sp, #0]
 80165e0:	2308      	movs	r3, #8
 80165e2:	b292      	uxth	r2, r2
 80165e4:	f7fe fd71 	bl	80150ca <dwt_xfer3xxx>
 80165e8:	b005      	add	sp, #20
 80165ea:	bd30      	pop	{r4, r5, pc}

080165ec <ull_enablegpioclocks>:
 80165ec:	b500      	push	{lr}
 80165ee:	b083      	sub	sp, #12
 80165f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80165f4:	9300      	str	r3, [sp, #0]
 80165f6:	f04f 33ff 	mov.w	r3, #4294967295
 80165fa:	2200      	movs	r2, #0
 80165fc:	4902      	ldr	r1, [pc, #8]	; (8016608 <ull_enablegpioclocks+0x1c>)
 80165fe:	f7ff ffd1 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016602:	b003      	add	sp, #12
 8016604:	f85d fb04 	ldr.w	pc, [sp], #4
 8016608:	00110004 	.word	0x00110004

0801660c <ull_enable_rf_tx>:
 801660c:	b570      	push	{r4, r5, r6, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	4604      	mov	r4, r0
 8016612:	460e      	mov	r6, r1
 8016614:	4d13      	ldr	r5, [pc, #76]	; (8016664 <ull_enable_rf_tx+0x58>)
 8016616:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 801661a:	9300      	str	r3, [sp, #0]
 801661c:	f04f 33ff 	mov.w	r3, #4294967295
 8016620:	2200      	movs	r2, #0
 8016622:	4629      	mov	r1, r5
 8016624:	f7ff ffbe 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016628:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 801662c:	9300      	str	r3, [sp, #0]
 801662e:	f04f 33ff 	mov.w	r3, #4294967295
 8016632:	2200      	movs	r2, #0
 8016634:	4629      	mov	r1, r5
 8016636:	4620      	mov	r0, r4
 8016638:	f7ff ffb4 	bl	80165a4 <dwt_modify32bitoffsetreg>
 801663c:	4b0a      	ldr	r3, [pc, #40]	; (8016668 <ull_enable_rf_tx+0x5c>)
 801663e:	9300      	str	r3, [sp, #0]
 8016640:	f04f 33ff 	mov.w	r3, #4294967295
 8016644:	2200      	movs	r2, #0
 8016646:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801664a:	4620      	mov	r0, r4
 801664c:	f7ff ffaa 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016650:	b90e      	cbnz	r6, 8016656 <ull_enable_rf_tx+0x4a>
 8016652:	b002      	add	sp, #8
 8016654:	bd70      	pop	{r4, r5, r6, pc}
 8016656:	4b05      	ldr	r3, [pc, #20]	; (801666c <ull_enable_rf_tx+0x60>)
 8016658:	2200      	movs	r2, #0
 801665a:	4905      	ldr	r1, [pc, #20]	; (8016670 <ull_enable_rf_tx+0x64>)
 801665c:	4620      	mov	r0, r4
 801665e:	f7ff fa9b 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016662:	e7f6      	b.n	8016652 <ull_enable_rf_tx+0x46>
 8016664:	00070048 	.word	0x00070048
 8016668:	02003c00 	.word	0x02003c00
 801666c:	01011100 	.word	0x01011100
 8016670:	00070014 	.word	0x00070014

08016674 <ull_enable_rftx_blocks>:
 8016674:	b500      	push	{lr}
 8016676:	b083      	sub	sp, #12
 8016678:	4b05      	ldr	r3, [pc, #20]	; (8016690 <ull_enable_rftx_blocks+0x1c>)
 801667a:	9300      	str	r3, [sp, #0]
 801667c:	f04f 33ff 	mov.w	r3, #4294967295
 8016680:	2200      	movs	r2, #0
 8016682:	4904      	ldr	r1, [pc, #16]	; (8016694 <ull_enable_rftx_blocks+0x20>)
 8016684:	f7ff ff8e 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016688:	b003      	add	sp, #12
 801668a:	f85d fb04 	ldr.w	pc, [sp], #4
 801668e:	bf00      	nop
 8016690:	02003c00 	.word	0x02003c00
 8016694:	00070004 	.word	0x00070004

08016698 <_dwt_otpprogword32>:
 8016698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801669c:	b083      	sub	sp, #12
 801669e:	4604      	mov	r4, r0
 80166a0:	460d      	mov	r5, r1
 80166a2:	4617      	mov	r7, r2
 80166a4:	4e56      	ldr	r6, [pc, #344]	; (8016800 <_dwt_otpprogword32+0x168>)
 80166a6:	2200      	movs	r2, #0
 80166a8:	4631      	mov	r1, r6
 80166aa:	f7fe fd96 	bl	80151da <dwt_read32bitoffsetreg>
 80166ae:	4681      	mov	r9, r0
 80166b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	f04f 33ff 	mov.w	r3, #4294967295
 80166ba:	2200      	movs	r2, #0
 80166bc:	4631      	mov	r1, r6
 80166be:	4620      	mov	r0, r4
 80166c0:	f7ff ff70 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80166c4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8016804 <_dwt_otpprogword32+0x16c>
 80166c8:	2318      	movs	r3, #24
 80166ca:	2200      	movs	r2, #0
 80166cc:	4641      	mov	r1, r8
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ff f9f7 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80166d4:	2125      	movs	r1, #37	; 0x25
 80166d6:	4620      	mov	r0, r4
 80166d8:	f7ff fa28 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 80166dc:	2102      	movs	r1, #2
 80166de:	4620      	mov	r0, r4
 80166e0:	f7ff fa24 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 80166e4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 80166e8:	4620      	mov	r0, r4
 80166ea:	f7ff fa1f 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 80166ee:	b2f9      	uxtb	r1, r7
 80166f0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7ff fa19 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 80166fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80166fe:	4620      	mov	r0, r4
 8016700:	f7ff fa14 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016704:	2100      	movs	r1, #0
 8016706:	4620      	mov	r0, r4
 8016708:	f7ff fa10 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 801670c:	2102      	movs	r1, #2
 801670e:	4620      	mov	r0, r4
 8016710:	f7ff fa0c 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016714:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8016718:	4620      	mov	r0, r4
 801671a:	f7ff fa07 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 801671e:	b2e9      	uxtb	r1, r5
 8016720:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8016724:	4620      	mov	r0, r4
 8016726:	f7ff fa01 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 801672a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801672e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8016732:	4620      	mov	r0, r4
 8016734:	f7ff f9fa 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016738:	f3c5 4107 	ubfx	r1, r5, #16, #8
 801673c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8016740:	4620      	mov	r0, r4
 8016742:	f7ff f9f3 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016746:	0e29      	lsrs	r1, r5, #24
 8016748:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801674c:	4620      	mov	r0, r4
 801674e:	f7ff f9ed 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016752:	2100      	movs	r1, #0
 8016754:	4620      	mov	r0, r4
 8016756:	f7ff f9e9 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 801675a:	213a      	movs	r1, #58	; 0x3a
 801675c:	4620      	mov	r0, r4
 801675e:	f7ff f9e5 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016762:	f240 11ff 	movw	r1, #511	; 0x1ff
 8016766:	4620      	mov	r0, r4
 8016768:	f7ff f9e0 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 801676c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8016770:	4620      	mov	r0, r4
 8016772:	f7ff f9db 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016776:	2100      	movs	r1, #0
 8016778:	4620      	mov	r0, r4
 801677a:	f7ff f9d7 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 801677e:	213a      	movs	r1, #58	; 0x3a
 8016780:	4620      	mov	r0, r4
 8016782:	f7ff f9d3 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016786:	f240 1101 	movw	r1, #257	; 0x101
 801678a:	4620      	mov	r0, r4
 801678c:	f7ff f9ce 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 8016790:	2302      	movs	r3, #2
 8016792:	2200      	movs	r2, #0
 8016794:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8016798:	4620      	mov	r0, r4
 801679a:	f7ff f992 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801679e:	2300      	movs	r3, #0
 80167a0:	461a      	mov	r2, r3
 80167a2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80167a6:	4620      	mov	r0, r4
 80167a8:	f7ff f98b 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80167ac:	2002      	movs	r0, #2
 80167ae:	f7f5 fa1b 	bl	800bbe8 <deca_sleep>
 80167b2:	213a      	movs	r1, #58	; 0x3a
 80167b4:	4620      	mov	r0, r4
 80167b6:	f7ff f9b9 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 80167ba:	f44f 7181 	mov.w	r1, #258	; 0x102
 80167be:	4620      	mov	r0, r4
 80167c0:	f7ff f9b4 	bl	8015b2c <__dwt_otp_write_wdata_id_reg>
 80167c4:	2302      	movs	r3, #2
 80167c6:	2200      	movs	r2, #0
 80167c8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80167cc:	4620      	mov	r0, r4
 80167ce:	f7ff f978 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80167d2:	2300      	movs	r3, #0
 80167d4:	461a      	mov	r2, r3
 80167d6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80167da:	4620      	mov	r0, r4
 80167dc:	f7ff f971 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80167e0:	2300      	movs	r3, #0
 80167e2:	461a      	mov	r2, r3
 80167e4:	4641      	mov	r1, r8
 80167e6:	4620      	mov	r0, r4
 80167e8:	f7ff f96b 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80167ec:	464b      	mov	r3, r9
 80167ee:	2200      	movs	r2, #0
 80167f0:	4631      	mov	r1, r6
 80167f2:	4620      	mov	r0, r4
 80167f4:	f7ff f9d0 	bl	8015b98 <dwt_write32bitoffsetreg>
 80167f8:	b003      	add	sp, #12
 80167fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167fe:	bf00      	nop
 8016800:	00070044 	.word	0x00070044
 8016804:	000b0008 	.word	0x000b0008

08016808 <ull_setgpiomode>:
 8016808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801680a:	b083      	sub	sp, #12
 801680c:	2400      	movs	r4, #0
 801680e:	4623      	mov	r3, r4
 8016810:	2601      	movs	r6, #1
 8016812:	2707      	movs	r7, #7
 8016814:	e002      	b.n	801681c <ull_setgpiomode+0x14>
 8016816:	3401      	adds	r4, #1
 8016818:	2c09      	cmp	r4, #9
 801681a:	d009      	beq.n	8016830 <ull_setgpiomode+0x28>
 801681c:	fa06 f504 	lsl.w	r5, r6, r4
 8016820:	420d      	tst	r5, r1
 8016822:	d0f8      	beq.n	8016816 <ull_setgpiomode+0xe>
 8016824:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016828:	fa07 f505 	lsl.w	r5, r7, r5
 801682c:	432b      	orrs	r3, r5
 801682e:	e7f2      	b.n	8016816 <ull_setgpiomode+0xe>
 8016830:	401a      	ands	r2, r3
 8016832:	9200      	str	r2, [sp, #0]
 8016834:	43db      	mvns	r3, r3
 8016836:	2200      	movs	r2, #0
 8016838:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801683c:	f7ff feb2 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016840:	b003      	add	sp, #12
 8016842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016844 <ull_writetxfctrl>:
 8016844:	b500      	push	{lr}
 8016846:	b083      	sub	sp, #12
 8016848:	2a7f      	cmp	r2, #127	; 0x7f
 801684a:	bf88      	it	hi
 801684c:	3280      	addhi	r2, #128	; 0x80
 801684e:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8016852:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016856:	9100      	str	r1, [sp, #0]
 8016858:	4b03      	ldr	r3, [pc, #12]	; (8016868 <ull_writetxfctrl+0x24>)
 801685a:	2200      	movs	r2, #0
 801685c:	2120      	movs	r1, #32
 801685e:	f7ff fea1 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016862:	b003      	add	sp, #12
 8016864:	f85d fb04 	ldr.w	pc, [sp], #4
 8016868:	fc00f400 	.word	0xfc00f400

0801686c <prs_sys_status_and_or>:
 801686c:	b500      	push	{lr}
 801686e:	b083      	sub	sp, #12
 8016870:	9200      	str	r2, [sp, #0]
 8016872:	460b      	mov	r3, r1
 8016874:	2200      	movs	r2, #0
 8016876:	2144      	movs	r1, #68	; 0x44
 8016878:	f7ff fe94 	bl	80165a4 <dwt_modify32bitoffsetreg>
 801687c:	2000      	movs	r0, #0
 801687e:	b003      	add	sp, #12
 8016880:	f85d fb04 	ldr.w	pc, [sp], #4

08016884 <dwt_modify8bitoffsetreg>:
 8016884:	b500      	push	{lr}
 8016886:	b085      	sub	sp, #20
 8016888:	f88d 300c 	strb.w	r3, [sp, #12]
 801688c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8016890:	f88d 300d 	strb.w	r3, [sp, #13]
 8016894:	f248 0301 	movw	r3, #32769	; 0x8001
 8016898:	9301      	str	r3, [sp, #4]
 801689a:	ab03      	add	r3, sp, #12
 801689c:	9300      	str	r3, [sp, #0]
 801689e:	2302      	movs	r3, #2
 80168a0:	b292      	uxth	r2, r2
 80168a2:	f7fe fc12 	bl	80150ca <dwt_xfer3xxx>
 80168a6:	b005      	add	sp, #20
 80168a8:	f85d fb04 	ldr.w	pc, [sp], #4

080168ac <ull_enablespicrccheck>:
 80168ac:	b570      	push	{r4, r5, r6, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	4604      	mov	r4, r0
 80168b2:	460d      	mov	r5, r1
 80168b4:	b159      	cbz	r1, 80168ce <ull_enablespicrccheck+0x22>
 80168b6:	4616      	mov	r6, r2
 80168b8:	2340      	movs	r3, #64	; 0x40
 80168ba:	9300      	str	r3, [sp, #0]
 80168bc:	23ff      	movs	r3, #255	; 0xff
 80168be:	2200      	movs	r2, #0
 80168c0:	2110      	movs	r1, #16
 80168c2:	f7ff ffdf 	bl	8016884 <dwt_modify8bitoffsetreg>
 80168c6:	2d02      	cmp	r5, #2
 80168c8:	d107      	bne.n	80168da <ull_enablespicrccheck+0x2e>
 80168ca:	60e6      	str	r6, [r4, #12]
 80168cc:	e005      	b.n	80168da <ull_enablespicrccheck+0x2e>
 80168ce:	2200      	movs	r2, #0
 80168d0:	9200      	str	r2, [sp, #0]
 80168d2:	23bf      	movs	r3, #191	; 0xbf
 80168d4:	2110      	movs	r1, #16
 80168d6:	f7ff ffd5 	bl	8016884 <dwt_modify8bitoffsetreg>
 80168da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80168dc:	751d      	strb	r5, [r3, #20]
 80168de:	b002      	add	sp, #8
 80168e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080168e4 <ull_configciadiag>:
 80168e4:	b530      	push	{r4, r5, lr}
 80168e6:	b083      	sub	sp, #12
 80168e8:	4604      	mov	r4, r0
 80168ea:	460d      	mov	r5, r1
 80168ec:	f011 0f01 	tst.w	r1, #1
 80168f0:	d015      	beq.n	801691e <ull_configciadiag+0x3a>
 80168f2:	2300      	movs	r3, #0
 80168f4:	9300      	str	r3, [sp, #0]
 80168f6:	23ef      	movs	r3, #239	; 0xef
 80168f8:	2202      	movs	r2, #2
 80168fa:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80168fe:	f7ff ffc1 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016902:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016904:	759d      	strb	r5, [r3, #22]
 8016906:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016908:	7d9b      	ldrb	r3, [r3, #22]
 801690a:	085b      	lsrs	r3, r3, #1
 801690c:	d010      	beq.n	8016930 <ull_configciadiag+0x4c>
 801690e:	086b      	lsrs	r3, r5, #1
 8016910:	2200      	movs	r2, #0
 8016912:	490e      	ldr	r1, [pc, #56]	; (801694c <ull_configciadiag+0x68>)
 8016914:	4620      	mov	r0, r4
 8016916:	f7ff fb23 	bl	8015f60 <dwt_write8bitoffsetreg>
 801691a:	b003      	add	sp, #12
 801691c:	bd30      	pop	{r4, r5, pc}
 801691e:	2310      	movs	r3, #16
 8016920:	9300      	str	r3, [sp, #0]
 8016922:	23ff      	movs	r3, #255	; 0xff
 8016924:	2202      	movs	r2, #2
 8016926:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801692a:	f7ff ffab 	bl	8016884 <dwt_modify8bitoffsetreg>
 801692e:	e7e8      	b.n	8016902 <ull_configciadiag+0x1e>
 8016930:	2301      	movs	r3, #1
 8016932:	9300      	str	r3, [sp, #0]
 8016934:	23ff      	movs	r3, #255	; 0xff
 8016936:	2200      	movs	r2, #0
 8016938:	4904      	ldr	r1, [pc, #16]	; (801694c <ull_configciadiag+0x68>)
 801693a:	4620      	mov	r0, r4
 801693c:	f7ff ffa2 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016940:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8016942:	7d93      	ldrb	r3, [r2, #22]
 8016944:	f043 0302 	orr.w	r3, r3, #2
 8016948:	7593      	strb	r3, [r2, #22]
 801694a:	e7e6      	b.n	801691a <ull_configciadiag+0x36>
 801694c:	00010020 	.word	0x00010020

08016950 <ull_configurestsloadiv>:
 8016950:	b500      	push	{lr}
 8016952:	b083      	sub	sp, #12
 8016954:	2301      	movs	r3, #1
 8016956:	9300      	str	r3, [sp, #0]
 8016958:	23ff      	movs	r3, #255	; 0xff
 801695a:	2200      	movs	r2, #0
 801695c:	4902      	ldr	r1, [pc, #8]	; (8016968 <ull_configurestsloadiv+0x18>)
 801695e:	f7ff ff91 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016962:	b003      	add	sp, #12
 8016964:	f85d fb04 	ldr.w	pc, [sp], #4
 8016968:	00020004 	.word	0x00020004

0801696c <ull_adcoffsetscalibration>:
 801696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016970:	b08b      	sub	sp, #44	; 0x2c
 8016972:	4607      	mov	r7, r0
 8016974:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8016b98 <ull_adcoffsetscalibration+0x22c>
 8016978:	2200      	movs	r2, #0
 801697a:	4641      	mov	r1, r8
 801697c:	f7fe fc2d 	bl	80151da <dwt_read32bitoffsetreg>
 8016980:	9004      	str	r0, [sp, #16]
 8016982:	4c7d      	ldr	r4, [pc, #500]	; (8016b78 <ull_adcoffsetscalibration+0x20c>)
 8016984:	2200      	movs	r2, #0
 8016986:	4621      	mov	r1, r4
 8016988:	4638      	mov	r0, r7
 801698a:	f7fe fc26 	bl	80151da <dwt_read32bitoffsetreg>
 801698e:	9005      	str	r0, [sp, #20]
 8016990:	4d7a      	ldr	r5, [pc, #488]	; (8016b7c <ull_adcoffsetscalibration+0x210>)
 8016992:	2200      	movs	r2, #0
 8016994:	4629      	mov	r1, r5
 8016996:	4638      	mov	r0, r7
 8016998:	f7fe fc74 	bl	8015284 <dwt_read8bitoffsetreg>
 801699c:	9006      	str	r0, [sp, #24]
 801699e:	4e78      	ldr	r6, [pc, #480]	; (8016b80 <ull_adcoffsetscalibration+0x214>)
 80169a0:	2200      	movs	r2, #0
 80169a2:	4631      	mov	r1, r6
 80169a4:	4638      	mov	r0, r7
 80169a6:	f7fe fc18 	bl	80151da <dwt_read32bitoffsetreg>
 80169aa:	4682      	mov	sl, r0
 80169ac:	9007      	str	r0, [sp, #28]
 80169ae:	2200      	movs	r2, #0
 80169b0:	4974      	ldr	r1, [pc, #464]	; (8016b84 <ull_adcoffsetscalibration+0x218>)
 80169b2:	4638      	mov	r0, r7
 80169b4:	f7fe fc11 	bl	80151da <dwt_read32bitoffsetreg>
 80169b8:	4681      	mov	r9, r0
 80169ba:	4b73      	ldr	r3, [pc, #460]	; (8016b88 <ull_adcoffsetscalibration+0x21c>)
 80169bc:	9300      	str	r3, [sp, #0]
 80169be:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 80169c2:	2200      	movs	r2, #0
 80169c4:	4641      	mov	r1, r8
 80169c6:	4638      	mov	r0, r7
 80169c8:	f7ff fdec 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80169cc:	464b      	mov	r3, r9
 80169ce:	2200      	movs	r2, #0
 80169d0:	4631      	mov	r1, r6
 80169d2:	4638      	mov	r0, r7
 80169d4:	f7ff f8e0 	bl	8015b98 <dwt_write32bitoffsetreg>
 80169d8:	4653      	mov	r3, sl
 80169da:	00db      	lsls	r3, r3, #3
 80169dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80169e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169e4:	9300      	str	r3, [sp, #0]
 80169e6:	2386      	movs	r3, #134	; 0x86
 80169e8:	2200      	movs	r2, #0
 80169ea:	4621      	mov	r1, r4
 80169ec:	4638      	mov	r0, r7
 80169ee:	f7ff ff49 	bl	8016884 <dwt_modify8bitoffsetreg>
 80169f2:	2300      	movs	r3, #0
 80169f4:	2203      	movs	r2, #3
 80169f6:	4621      	mov	r1, r4
 80169f8:	4638      	mov	r0, r7
 80169fa:	f7ff fab1 	bl	8015f60 <dwt_write8bitoffsetreg>
 80169fe:	f04f 0900 	mov.w	r9, #0
 8016a02:	f8cd 9000 	str.w	r9, [sp]
 8016a06:	23fe      	movs	r3, #254	; 0xfe
 8016a08:	464a      	mov	r2, r9
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	4638      	mov	r0, r7
 8016a0e:	f7ff ff39 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016a12:	464a      	mov	r2, r9
 8016a14:	213c      	movs	r1, #60	; 0x3c
 8016a16:	4638      	mov	r0, r7
 8016a18:	f7fe fbdf 	bl	80151da <dwt_read32bitoffsetreg>
 8016a1c:	9008      	str	r0, [sp, #32]
 8016a1e:	464a      	mov	r2, r9
 8016a20:	2140      	movs	r1, #64	; 0x40
 8016a22:	4638      	mov	r0, r7
 8016a24:	f7fe fbd9 	bl	80151da <dwt_read32bitoffsetreg>
 8016a28:	9009      	str	r0, [sp, #36]	; 0x24
 8016a2a:	464b      	mov	r3, r9
 8016a2c:	464a      	mov	r2, r9
 8016a2e:	213c      	movs	r1, #60	; 0x3c
 8016a30:	4638      	mov	r0, r7
 8016a32:	f7ff f8b1 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016a36:	464b      	mov	r3, r9
 8016a38:	464a      	mov	r2, r9
 8016a3a:	2140      	movs	r1, #64	; 0x40
 8016a3c:	4638      	mov	r0, r7
 8016a3e:	f7ff f8ab 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016a42:	f7f5 fe1f 	bl	800c684 <dwt_forcetrxoff>
 8016a46:	f04f 0b02 	mov.w	fp, #2
 8016a4a:	464c      	mov	r4, r9
 8016a4c:	464d      	mov	r5, r9
 8016a4e:	464e      	mov	r6, r9
 8016a50:	46c8      	mov	r8, r9
 8016a52:	f8cd 900c 	str.w	r9, [sp, #12]
 8016a56:	46ca      	mov	sl, r9
 8016a58:	e00e      	b.n	8016a78 <ull_adcoffsetscalibration+0x10c>
 8016a5a:	f7f5 fe13 	bl	800c684 <dwt_forcetrxoff>
 8016a5e:	9b03      	ldr	r3, [sp, #12]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f000 8082 	beq.w	8016b6a <ull_adcoffsetscalibration+0x1fe>
 8016a66:	f1bb 0f01 	cmp.w	fp, #1
 8016a6a:	f000 8081 	beq.w	8016b70 <ull_adcoffsetscalibration+0x204>
 8016a6e:	2301      	movs	r3, #1
 8016a70:	9303      	str	r3, [sp, #12]
 8016a72:	f1bb 0b01 	subs.w	fp, fp, #1
 8016a76:	d043      	beq.n	8016b00 <ull_adcoffsetscalibration+0x194>
 8016a78:	4650      	mov	r0, sl
 8016a7a:	f7f5 fe11 	bl	800c6a0 <dwt_rxenable>
 8016a7e:	2014      	movs	r0, #20
 8016a80:	f7f5 f8bd 	bl	800bbfe <deca_usleep>
 8016a84:	f04f 0904 	mov.w	r9, #4
 8016a88:	f8cd a000 	str.w	sl, [sp]
 8016a8c:	23fe      	movs	r3, #254	; 0xfe
 8016a8e:	4652      	mov	r2, sl
 8016a90:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8016a94:	4638      	mov	r0, r7
 8016a96:	f7ff fef5 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	23fe      	movs	r3, #254	; 0xfe
 8016aa0:	4652      	mov	r2, sl
 8016aa2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	f7ff feec 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016aac:	4652      	mov	r2, sl
 8016aae:	4937      	ldr	r1, [pc, #220]	; (8016b8c <ull_adcoffsetscalibration+0x220>)
 8016ab0:	4638      	mov	r0, r7
 8016ab2:	f7fe fb92 	bl	80151da <dwt_read32bitoffsetreg>
 8016ab6:	fa58 f880 	uxtab	r8, r8, r0
 8016aba:	fa1f f888 	uxth.w	r8, r8
 8016abe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016ac2:	441e      	add	r6, r3
 8016ac4:	b2b6      	uxth	r6, r6
 8016ac6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016aca:	441d      	add	r5, r3
 8016acc:	b2ad      	uxth	r5, r5
 8016ace:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 8016ad2:	b2a4      	uxth	r4, r4
 8016ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8016ad8:	d1d6      	bne.n	8016a88 <ull_adcoffsetscalibration+0x11c>
 8016ada:	f3c8 0887 	ubfx	r8, r8, #2, #8
 8016ade:	f3c6 0687 	ubfx	r6, r6, #2, #8
 8016ae2:	f3c5 0587 	ubfx	r5, r5, #2, #8
 8016ae6:	f3c4 0487 	ubfx	r4, r4, #2, #8
 8016aea:	4652      	mov	r2, sl
 8016aec:	2144      	movs	r1, #68	; 0x44
 8016aee:	4638      	mov	r0, r7
 8016af0:	f7fe fb73 	bl	80151da <dwt_read32bitoffsetreg>
 8016af4:	4b26      	ldr	r3, [pc, #152]	; (8016b90 <ull_adcoffsetscalibration+0x224>)
 8016af6:	4218      	tst	r0, r3
 8016af8:	d0af      	beq.n	8016a5a <ull_adcoffsetscalibration+0xee>
 8016afa:	f7f5 fdc3 	bl	800c684 <dwt_forcetrxoff>
 8016afe:	e7b2      	b.n	8016a66 <ull_adcoffsetscalibration+0xfa>
 8016b00:	f04f 0900 	mov.w	r9, #0
 8016b04:	9b08      	ldr	r3, [sp, #32]
 8016b06:	2200      	movs	r2, #0
 8016b08:	213c      	movs	r1, #60	; 0x3c
 8016b0a:	4638      	mov	r0, r7
 8016b0c:	f7ff f844 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b12:	2200      	movs	r2, #0
 8016b14:	2140      	movs	r1, #64	; 0x40
 8016b16:	4638      	mov	r0, r7
 8016b18:	f7ff f83e 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016b1c:	042b      	lsls	r3, r5, #16
 8016b1e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 8016b22:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8016b26:	4443      	add	r3, r8
 8016b28:	2200      	movs	r2, #0
 8016b2a:	491a      	ldr	r1, [pc, #104]	; (8016b94 <ull_adcoffsetscalibration+0x228>)
 8016b2c:	4638      	mov	r0, r7
 8016b2e:	f7ff f833 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016b32:	9b04      	ldr	r3, [sp, #16]
 8016b34:	2200      	movs	r2, #0
 8016b36:	4918      	ldr	r1, [pc, #96]	; (8016b98 <ull_adcoffsetscalibration+0x22c>)
 8016b38:	4638      	mov	r0, r7
 8016b3a:	f7ff f82d 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016b3e:	9b05      	ldr	r3, [sp, #20]
 8016b40:	2200      	movs	r2, #0
 8016b42:	490d      	ldr	r1, [pc, #52]	; (8016b78 <ull_adcoffsetscalibration+0x20c>)
 8016b44:	4638      	mov	r0, r7
 8016b46:	f7ff f827 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016b4a:	9b06      	ldr	r3, [sp, #24]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	490b      	ldr	r1, [pc, #44]	; (8016b7c <ull_adcoffsetscalibration+0x210>)
 8016b50:	4638      	mov	r0, r7
 8016b52:	f7ff fa05 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016b56:	9b07      	ldr	r3, [sp, #28]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	4909      	ldr	r1, [pc, #36]	; (8016b80 <ull_adcoffsetscalibration+0x214>)
 8016b5c:	4638      	mov	r0, r7
 8016b5e:	f7ff f81b 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016b62:	4648      	mov	r0, r9
 8016b64:	b00b      	add	sp, #44	; 0x2c
 8016b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b6a:	f04f 0900 	mov.w	r9, #0
 8016b6e:	e7c9      	b.n	8016b04 <ull_adcoffsetscalibration+0x198>
 8016b70:	f06f 0905 	mvn.w	r9, #5
 8016b74:	e7c6      	b.n	8016b04 <ull_adcoffsetscalibration+0x198>
 8016b76:	bf00      	nop
 8016b78:	00030014 	.word	0x00030014
 8016b7c:	00030018 	.word	0x00030018
 8016b80:	0003002c 	.word	0x0003002c
 8016b84:	00030044 	.word	0x00030044
 8016b88:	38010000 	.word	0x38010000
 8016b8c:	0003004c 	.word	0x0003004c
 8016b90:	3427ff00 	.word	0x3427ff00
 8016b94:	00030010 	.word	0x00030010
 8016b98:	00070014 	.word	0x00070014

08016b9c <ull_restoreconfig>:
 8016b9c:	b510      	push	{r4, lr}
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016ba2:	7d9b      	ldrb	r3, [r3, #22]
 8016ba4:	085b      	lsrs	r3, r3, #1
 8016ba6:	d01a      	beq.n	8016bde <ull_restoreconfig+0x42>
 8016ba8:	2200      	movs	r2, #0
 8016baa:	4912      	ldr	r1, [pc, #72]	; (8016bf4 <ull_restoreconfig+0x58>)
 8016bac:	4620      	mov	r0, r4
 8016bae:	f7fe fb2a 	bl	8015206 <dwt_read16bitoffsetreg>
 8016bb2:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8016bb6:	3b09      	subs	r3, #9
 8016bb8:	2b0f      	cmp	r3, #15
 8016bba:	d80c      	bhi.n	8016bd6 <ull_restoreconfig+0x3a>
 8016bbc:	f000 0001 	and.w	r0, r0, #1
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	bf0c      	ite	eq
 8016bc4:	2105      	moveq	r1, #5
 8016bc6:	2109      	movne	r1, #9
 8016bc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016bca:	7a1b      	ldrb	r3, [r3, #8]
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	d002      	beq.n	8016bd6 <ull_restoreconfig+0x3a>
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f7ff f8ad 	bl	8015d30 <ull_configmrxlut>
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f7ff fec8 	bl	801696c <ull_adcoffsetscalibration>
 8016bdc:	bd10      	pop	{r4, pc}
 8016bde:	2301      	movs	r3, #1
 8016be0:	2200      	movs	r2, #0
 8016be2:	4905      	ldr	r1, [pc, #20]	; (8016bf8 <ull_restoreconfig+0x5c>)
 8016be4:	f7ff f9bc 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016be8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8016bea:	7d93      	ldrb	r3, [r2, #22]
 8016bec:	f043 0302 	orr.w	r3, r3, #2
 8016bf0:	7593      	strb	r3, [r2, #22]
 8016bf2:	e7d9      	b.n	8016ba8 <ull_restoreconfig+0xc>
 8016bf4:	00010008 	.word	0x00010008
 8016bf8:	00010020 	.word	0x00010020

08016bfc <ull_calcbandwidthadj>:
 8016bfc:	b570      	push	{r4, r5, r6, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	4604      	mov	r4, r0
 8016c02:	460d      	mov	r5, r1
 8016c04:	2101      	movs	r1, #1
 8016c06:	f7fe ff7b 	bl	8015b00 <ull_force_clocks>
 8016c0a:	2100      	movs	r1, #0
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f7ff fcfd 	bl	801660c <ull_enable_rf_tx>
 8016c12:	4620      	mov	r0, r4
 8016c14:	f7ff fd2e 	bl	8016674 <ull_enable_rftx_blocks>
 8016c18:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	4915      	ldr	r1, [pc, #84]	; (8016c74 <ull_calcbandwidthadj+0x78>)
 8016c20:	4620      	mov	r0, r4
 8016c22:	f7fe ff4e 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016c26:	2303      	movs	r3, #3
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	23ff      	movs	r3, #255	; 0xff
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	4912      	ldr	r1, [pc, #72]	; (8016c78 <ull_calcbandwidthadj+0x7c>)
 8016c30:	4620      	mov	r0, r4
 8016c32:	f7ff fe27 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016c36:	4e10      	ldr	r6, [pc, #64]	; (8016c78 <ull_calcbandwidthadj+0x7c>)
 8016c38:	2500      	movs	r5, #0
 8016c3a:	462a      	mov	r2, r5
 8016c3c:	4631      	mov	r1, r6
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f7fe fb20 	bl	8015284 <dwt_read8bitoffsetreg>
 8016c44:	f010 0f01 	tst.w	r0, #1
 8016c48:	d1f7      	bne.n	8016c3a <ull_calcbandwidthadj+0x3e>
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	f7ff f906 	bl	8015e5c <ull_disable_rftx_blocks>
 8016c50:	2100      	movs	r1, #0
 8016c52:	4620      	mov	r0, r4
 8016c54:	f7ff f90c 	bl	8015e70 <ull_disable_rf_tx>
 8016c58:	2105      	movs	r1, #5
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	f7fe ff50 	bl	8015b00 <ull_force_clocks>
 8016c60:	2200      	movs	r2, #0
 8016c62:	4906      	ldr	r1, [pc, #24]	; (8016c7c <ull_calcbandwidthadj+0x80>)
 8016c64:	4620      	mov	r0, r4
 8016c66:	f7fe fb0d 	bl	8015284 <dwt_read8bitoffsetreg>
 8016c6a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8016c6e:	b002      	add	sp, #8
 8016c70:	bd70      	pop	{r4, r5, r6, pc}
 8016c72:	bf00      	nop
 8016c74:	0008001c 	.word	0x0008001c
 8016c78:	00080010 	.word	0x00080010
 8016c7c:	0007001c 	.word	0x0007001c

08016c80 <ull_configuretxrf>:
 8016c80:	b538      	push	{r3, r4, r5, lr}
 8016c82:	4605      	mov	r5, r0
 8016c84:	460c      	mov	r4, r1
 8016c86:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8016c8a:	b149      	cbz	r1, 8016ca0 <ull_configuretxrf+0x20>
 8016c8c:	f7ff ffb6 	bl	8016bfc <ull_calcbandwidthadj>
 8016c90:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8016c94:	2200      	movs	r2, #0
 8016c96:	4905      	ldr	r1, [pc, #20]	; (8016cac <ull_configuretxrf+0x2c>)
 8016c98:	4628      	mov	r0, r5
 8016c9a:	f7fe ff7d 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016c9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ca0:	7823      	ldrb	r3, [r4, #0]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	4902      	ldr	r1, [pc, #8]	; (8016cb0 <ull_configuretxrf+0x30>)
 8016ca6:	f7ff f95b 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016caa:	e7f1      	b.n	8016c90 <ull_configuretxrf+0x10>
 8016cac:	00010004 	.word	0x00010004
 8016cb0:	0007001c 	.word	0x0007001c

08016cb4 <ull_repeated_frames>:
 8016cb4:	b530      	push	{r4, r5, lr}
 8016cb6:	b083      	sub	sp, #12
 8016cb8:	4604      	mov	r4, r0
 8016cba:	460d      	mov	r5, r1
 8016cbc:	2310      	movs	r3, #16
 8016cbe:	9300      	str	r3, [sp, #0]
 8016cc0:	23ff      	movs	r3, #255	; 0xff
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	4906      	ldr	r1, [pc, #24]	; (8016ce0 <ull_repeated_frames+0x2c>)
 8016cc6:	f7ff fddd 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016cca:	462b      	mov	r3, r5
 8016ccc:	2d02      	cmp	r5, #2
 8016cce:	bf38      	it	cc
 8016cd0:	2302      	movcc	r3, #2
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	2128      	movs	r1, #40	; 0x28
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f7fe ff5e 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016cdc:	b003      	add	sp, #12
 8016cde:	bd30      	pop	{r4, r5, pc}
 8016ce0:	000f0028 	.word	0x000f0028

08016ce4 <ull_setdwstate>:
 8016ce4:	b530      	push	{r4, r5, lr}
 8016ce6:	b083      	sub	sp, #12
 8016ce8:	4604      	mov	r4, r0
 8016cea:	2901      	cmp	r1, #1
 8016cec:	d01d      	beq.n	8016d2a <ull_setdwstate+0x46>
 8016cee:	2902      	cmp	r1, #2
 8016cf0:	d030      	beq.n	8016d54 <ull_setdwstate+0x70>
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	9300      	str	r3, [sp, #0]
 8016cf6:	23ff      	movs	r3, #255	; 0xff
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	4926      	ldr	r1, [pc, #152]	; (8016d94 <ull_setdwstate+0xb0>)
 8016cfc:	f7ff fdc2 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016d00:	4d25      	ldr	r5, [pc, #148]	; (8016d98 <ull_setdwstate+0xb4>)
 8016d02:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016d06:	9300      	str	r3, [sp, #0]
 8016d08:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	4629      	mov	r1, r5
 8016d10:	4620      	mov	r0, r4
 8016d12:	f7ff fc47 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016d16:	2300      	movs	r3, #0
 8016d18:	9300      	str	r3, [sp, #0]
 8016d1a:	237f      	movs	r3, #127	; 0x7f
 8016d1c:	2202      	movs	r2, #2
 8016d1e:	4629      	mov	r1, r5
 8016d20:	4620      	mov	r0, r4
 8016d22:	f7ff fdaf 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016d26:	b003      	add	sp, #12
 8016d28:	bd30      	pop	{r4, r5, pc}
 8016d2a:	2105      	movs	r1, #5
 8016d2c:	f7fe fee8 	bl	8015b00 <ull_force_clocks>
 8016d30:	f44f 7381 	mov.w	r3, #258	; 0x102
 8016d34:	9300      	str	r3, [sp, #0]
 8016d36:	f04f 33ff 	mov.w	r3, #4294967295
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	4917      	ldr	r1, [pc, #92]	; (8016d9c <ull_setdwstate+0xb8>)
 8016d3e:	4620      	mov	r0, r4
 8016d40:	f7ff fc30 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016d44:	2201      	movs	r2, #1
 8016d46:	9200      	str	r2, [sp, #0]
 8016d48:	23ff      	movs	r3, #255	; 0xff
 8016d4a:	4913      	ldr	r1, [pc, #76]	; (8016d98 <ull_setdwstate+0xb4>)
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f7ff fd99 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016d52:	e7e8      	b.n	8016d26 <ull_setdwstate+0x42>
 8016d54:	2303      	movs	r3, #3
 8016d56:	9300      	str	r3, [sp, #0]
 8016d58:	23ff      	movs	r3, #255	; 0xff
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	490d      	ldr	r1, [pc, #52]	; (8016d94 <ull_setdwstate+0xb0>)
 8016d5e:	f7ff fd91 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016d62:	4d0d      	ldr	r5, [pc, #52]	; (8016d98 <ull_setdwstate+0xb4>)
 8016d64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016d68:	9300      	str	r3, [sp, #0]
 8016d6a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8016d6e:	2200      	movs	r2, #0
 8016d70:	4629      	mov	r1, r5
 8016d72:	4620      	mov	r0, r4
 8016d74:	f7ff fc16 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016d78:	2300      	movs	r3, #0
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	237f      	movs	r3, #127	; 0x7f
 8016d7e:	2202      	movs	r2, #2
 8016d80:	4629      	mov	r1, r5
 8016d82:	4620      	mov	r0, r4
 8016d84:	f7ff fd7e 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016d88:	2105      	movs	r1, #5
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7fe feb8 	bl	8015b00 <ull_force_clocks>
 8016d90:	e7c9      	b.n	8016d26 <ull_setdwstate+0x42>
 8016d92:	bf00      	nop
 8016d94:	00110004 	.word	0x00110004
 8016d98:	00110008 	.word	0x00110008
 8016d9c:	00090008 	.word	0x00090008

08016da0 <ull_configureframefilter>:
 8016da0:	b530      	push	{r4, r5, lr}
 8016da2:	b083      	sub	sp, #12
 8016da4:	4605      	mov	r5, r0
 8016da6:	2902      	cmp	r1, #2
 8016da8:	d00e      	beq.n	8016dc8 <ull_configureframefilter+0x28>
 8016daa:	2400      	movs	r4, #0
 8016dac:	9400      	str	r4, [sp, #0]
 8016dae:	23fe      	movs	r3, #254	; 0xfe
 8016db0:	4622      	mov	r2, r4
 8016db2:	2110      	movs	r1, #16
 8016db4:	f7ff fd66 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016db8:	4623      	mov	r3, r4
 8016dba:	4622      	mov	r2, r4
 8016dbc:	2114      	movs	r1, #20
 8016dbe:	4628      	mov	r0, r5
 8016dc0:	f7fe fe7f 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016dc4:	b003      	add	sp, #12
 8016dc6:	bd30      	pop	{r4, r5, pc}
 8016dc8:	4614      	mov	r4, r2
 8016dca:	2301      	movs	r3, #1
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	23ff      	movs	r3, #255	; 0xff
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	2110      	movs	r1, #16
 8016dd4:	f7ff fd56 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016dd8:	4623      	mov	r3, r4
 8016dda:	2200      	movs	r2, #0
 8016ddc:	2114      	movs	r1, #20
 8016dde:	4628      	mov	r0, r5
 8016de0:	f7fe fe6f 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8016de4:	e7ee      	b.n	8016dc4 <ull_configureframefilter+0x24>
	...

08016de8 <ull_run_pgfcal>:
 8016de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dec:	b082      	sub	sp, #8
 8016dee:	4605      	mov	r5, r0
 8016df0:	4c2a      	ldr	r4, [pc, #168]	; (8016e9c <ull_run_pgfcal+0xb4>)
 8016df2:	2301      	movs	r3, #1
 8016df4:	9300      	str	r3, [sp, #0]
 8016df6:	23ff      	movs	r3, #255	; 0xff
 8016df8:	2200      	movs	r2, #0
 8016dfa:	4621      	mov	r1, r4
 8016dfc:	f7ff fd42 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016e00:	2310      	movs	r3, #16
 8016e02:	9300      	str	r3, [sp, #0]
 8016e04:	23ff      	movs	r3, #255	; 0xff
 8016e06:	2200      	movs	r2, #0
 8016e08:	4621      	mov	r1, r4
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	f7ff fd3a 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016e10:	2403      	movs	r4, #3
 8016e12:	f04f 0814 	mov.w	r8, #20
 8016e16:	4f22      	ldr	r7, [pc, #136]	; (8016ea0 <ull_run_pgfcal+0xb8>)
 8016e18:	2600      	movs	r6, #0
 8016e1a:	4640      	mov	r0, r8
 8016e1c:	f7f4 feef 	bl	800bbfe <deca_usleep>
 8016e20:	4632      	mov	r2, r6
 8016e22:	4639      	mov	r1, r7
 8016e24:	4628      	mov	r0, r5
 8016e26:	f7fe fa2d 	bl	8015284 <dwt_read8bitoffsetreg>
 8016e2a:	2801      	cmp	r0, #1
 8016e2c:	d034      	beq.n	8016e98 <ull_run_pgfcal+0xb0>
 8016e2e:	1e63      	subs	r3, r4, #1
 8016e30:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8016e34:	d1f1      	bne.n	8016e1a <ull_run_pgfcal+0x32>
 8016e36:	f06f 0402 	mvn.w	r4, #2
 8016e3a:	4e18      	ldr	r6, [pc, #96]	; (8016e9c <ull_run_pgfcal+0xb4>)
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	461a      	mov	r2, r3
 8016e40:	4631      	mov	r1, r6
 8016e42:	4628      	mov	r0, r5
 8016e44:	f7ff f88c 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016e48:	2301      	movs	r3, #1
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	4914      	ldr	r1, [pc, #80]	; (8016ea0 <ull_run_pgfcal+0xb8>)
 8016e4e:	4628      	mov	r0, r5
 8016e50:	f7ff f886 	bl	8015f60 <dwt_write8bitoffsetreg>
 8016e54:	2301      	movs	r3, #1
 8016e56:	9300      	str	r3, [sp, #0]
 8016e58:	23ff      	movs	r3, #255	; 0xff
 8016e5a:	2202      	movs	r2, #2
 8016e5c:	4631      	mov	r1, r6
 8016e5e:	4628      	mov	r0, r5
 8016e60:	f7ff fd10 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016e64:	2200      	movs	r2, #0
 8016e66:	490f      	ldr	r1, [pc, #60]	; (8016ea4 <ull_run_pgfcal+0xbc>)
 8016e68:	4628      	mov	r0, r5
 8016e6a:	f7fe f9b6 	bl	80151da <dwt_read32bitoffsetreg>
 8016e6e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016e72:	4298      	cmp	r0, r3
 8016e74:	bf08      	it	eq
 8016e76:	f06f 0403 	mvneq.w	r4, #3
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	490a      	ldr	r1, [pc, #40]	; (8016ea8 <ull_run_pgfcal+0xc0>)
 8016e7e:	4628      	mov	r0, r5
 8016e80:	f7fe f9ab 	bl	80151da <dwt_read32bitoffsetreg>
 8016e84:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016e88:	4298      	cmp	r0, r3
 8016e8a:	bf14      	ite	ne
 8016e8c:	4620      	movne	r0, r4
 8016e8e:	f06f 0004 	mvneq.w	r0, #4
 8016e92:	b002      	add	sp, #8
 8016e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e98:	2400      	movs	r4, #0
 8016e9a:	e7ce      	b.n	8016e3a <ull_run_pgfcal+0x52>
 8016e9c:	0004000c 	.word	0x0004000c
 8016ea0:	00040020 	.word	0x00040020
 8016ea4:	00040014 	.word	0x00040014
 8016ea8:	0004001c 	.word	0x0004001c

08016eac <ull_setinterrupt>:
 8016eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016eb0:	b083      	sub	sp, #12
 8016eb2:	4605      	mov	r5, r0
 8016eb4:	4688      	mov	r8, r1
 8016eb6:	4617      	mov	r7, r2
 8016eb8:	461c      	mov	r4, r3
 8016eba:	f7f4 fe77 	bl	800bbac <decamutexon>
 8016ebe:	4606      	mov	r6, r0
 8016ec0:	2c02      	cmp	r4, #2
 8016ec2:	d019      	beq.n	8016ef8 <ull_setinterrupt+0x4c>
 8016ec4:	2c04      	cmp	r4, #4
 8016ec6:	d017      	beq.n	8016ef8 <ull_setinterrupt+0x4c>
 8016ec8:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d03f      	beq.n	8016f50 <ull_setinterrupt+0xa4>
 8016ed0:	f04f 0900 	mov.w	r9, #0
 8016ed4:	f8cd 9000 	str.w	r9, [sp]
 8016ed8:	ea6f 0308 	mvn.w	r3, r8
 8016edc:	464a      	mov	r2, r9
 8016ede:	213c      	movs	r1, #60	; 0x3c
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	f7ff fb5f 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016ee6:	f8cd 9000 	str.w	r9, [sp]
 8016eea:	43fb      	mvns	r3, r7
 8016eec:	464a      	mov	r2, r9
 8016eee:	2140      	movs	r1, #64	; 0x40
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	f7ff fb57 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016ef6:	e00b      	b.n	8016f10 <ull_setinterrupt+0x64>
 8016ef8:	4643      	mov	r3, r8
 8016efa:	2200      	movs	r2, #0
 8016efc:	213c      	movs	r1, #60	; 0x3c
 8016efe:	4628      	mov	r0, r5
 8016f00:	f7fe fe4a 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016f04:	463b      	mov	r3, r7
 8016f06:	2200      	movs	r2, #0
 8016f08:	2140      	movs	r1, #64	; 0x40
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f7fe fe44 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016f10:	3c03      	subs	r4, #3
 8016f12:	b2e4      	uxtb	r4, r4
 8016f14:	2c01      	cmp	r4, #1
 8016f16:	d92d      	bls.n	8016f74 <ull_setinterrupt+0xc8>
 8016f18:	2200      	movs	r2, #0
 8016f1a:	213c      	movs	r1, #60	; 0x3c
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	f7fe f95c 	bl	80151da <dwt_read32bitoffsetreg>
 8016f22:	4603      	mov	r3, r0
 8016f24:	2200      	movs	r2, #0
 8016f26:	2144      	movs	r1, #68	; 0x44
 8016f28:	4628      	mov	r0, r5
 8016f2a:	f7fe fe35 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016f2e:	2200      	movs	r2, #0
 8016f30:	2140      	movs	r1, #64	; 0x40
 8016f32:	4628      	mov	r0, r5
 8016f34:	f7fe f951 	bl	80151da <dwt_read32bitoffsetreg>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	2148      	movs	r1, #72	; 0x48
 8016f3e:	4628      	mov	r0, r5
 8016f40:	f7fe fe2a 	bl	8015b98 <dwt_write32bitoffsetreg>
 8016f44:	4630      	mov	r0, r6
 8016f46:	f7f4 fe42 	bl	800bbce <decamutexoff>
 8016f4a:	b003      	add	sp, #12
 8016f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f50:	f8cd 8000 	str.w	r8, [sp]
 8016f54:	f04f 33ff 	mov.w	r3, #4294967295
 8016f58:	2200      	movs	r2, #0
 8016f5a:	213c      	movs	r1, #60	; 0x3c
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	f7ff fb21 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016f62:	9700      	str	r7, [sp, #0]
 8016f64:	f04f 33ff 	mov.w	r3, #4294967295
 8016f68:	2200      	movs	r2, #0
 8016f6a:	2140      	movs	r1, #64	; 0x40
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	f7ff fb19 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8016f72:	e7cd      	b.n	8016f10 <ull_setinterrupt+0x64>
 8016f74:	2110      	movs	r1, #16
 8016f76:	9100      	str	r1, [sp, #0]
 8016f78:	23ff      	movs	r3, #255	; 0xff
 8016f7a:	2202      	movs	r2, #2
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f7ff fc81 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016f82:	e7c9      	b.n	8016f18 <ull_setinterrupt+0x6c>

08016f84 <prs_ack_enable>:
 8016f84:	b500      	push	{lr}
 8016f86:	b083      	sub	sp, #12
 8016f88:	2900      	cmp	r1, #0
 8016f8a:	bf0b      	itete	eq
 8016f8c:	23ff      	moveq	r3, #255	; 0xff
 8016f8e:	23f7      	movne	r3, #247	; 0xf7
 8016f90:	2200      	moveq	r2, #0
 8016f92:	2208      	movne	r2, #8
 8016f94:	9200      	str	r2, [sp, #0]
 8016f96:	2201      	movs	r2, #1
 8016f98:	2110      	movs	r1, #16
 8016f9a:	f7ff fc73 	bl	8016884 <dwt_modify8bitoffsetreg>
 8016f9e:	b003      	add	sp, #12
 8016fa0:	f85d fb04 	ldr.w	pc, [sp], #4

08016fa4 <dwt_modify16bitoffsetreg>:
 8016fa4:	b510      	push	{r4, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8016fac:	f88d 300c 	strb.w	r3, [sp, #12]
 8016fb0:	0a1b      	lsrs	r3, r3, #8
 8016fb2:	f88d 300d 	strb.w	r3, [sp, #13]
 8016fb6:	f88d 400e 	strb.w	r4, [sp, #14]
 8016fba:	0a24      	lsrs	r4, r4, #8
 8016fbc:	f88d 400f 	strb.w	r4, [sp, #15]
 8016fc0:	f248 0302 	movw	r3, #32770	; 0x8002
 8016fc4:	9301      	str	r3, [sp, #4]
 8016fc6:	ab03      	add	r3, sp, #12
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	2304      	movs	r3, #4
 8016fcc:	b292      	uxth	r2, r2
 8016fce:	f7fe f87c 	bl	80150ca <dwt_xfer3xxx>
 8016fd2:	b004      	add	sp, #16
 8016fd4:	bd10      	pop	{r4, pc}
	...

08016fd8 <ull_configurestsmode>:
 8016fd8:	b530      	push	{r4, r5, lr}
 8016fda:	b083      	sub	sp, #12
 8016fdc:	4605      	mov	r5, r0
 8016fde:	460c      	mov	r4, r1
 8016fe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016fe2:	7559      	strb	r1, [r3, #21]
 8016fe4:	030b      	lsls	r3, r1, #12
 8016fe6:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	2110      	movs	r1, #16
 8016ff4:	f7ff ffd6 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8016ff8:	f004 0403 	and.w	r4, r4, #3
 8016ffc:	2c03      	cmp	r4, #3
 8016ffe:	bf0c      	ite	eq
 8017000:	4b04      	ldreq	r3, [pc, #16]	; (8017014 <ull_configurestsmode+0x3c>)
 8017002:	4b05      	ldrne	r3, [pc, #20]	; (8017018 <ull_configurestsmode+0x40>)
 8017004:	2200      	movs	r2, #0
 8017006:	4905      	ldr	r1, [pc, #20]	; (801701c <ull_configurestsmode+0x44>)
 8017008:	4628      	mov	r0, r5
 801700a:	f7fe fdc5 	bl	8015b98 <dwt_write32bitoffsetreg>
 801700e:	b003      	add	sp, #12
 8017010:	bd30      	pop	{r4, r5, pc}
 8017012:	bf00      	nop
 8017014:	af5f35cc 	.word	0xaf5f35cc
 8017018:	af5f584c 	.word	0xaf5f584c
 801701c:	0006000c 	.word	0x0006000c

08017020 <ull_setleds>:
 8017020:	b530      	push	{r4, r5, lr}
 8017022:	b083      	sub	sp, #12
 8017024:	4604      	mov	r4, r0
 8017026:	f011 0f01 	tst.w	r1, #1
 801702a:	d01f      	beq.n	801706c <ull_setleds+0x4c>
 801702c:	460d      	mov	r5, r1
 801702e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8017038:	2200      	movs	r2, #0
 801703a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801703e:	f7ff fab1 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8017042:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8017046:	9300      	str	r3, [sp, #0]
 8017048:	f04f 33ff 	mov.w	r3, #4294967295
 801704c:	2200      	movs	r2, #0
 801704e:	4918      	ldr	r1, [pc, #96]	; (80170b0 <ull_setleds+0x90>)
 8017050:	4620      	mov	r0, r4
 8017052:	f7ff faa7 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8017056:	f015 0f02 	tst.w	r5, #2
 801705a:	d11a      	bne.n	8017092 <ull_setleds+0x72>
 801705c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017060:	2200      	movs	r2, #0
 8017062:	4914      	ldr	r1, [pc, #80]	; (80170b4 <ull_setleds+0x94>)
 8017064:	4620      	mov	r0, r4
 8017066:	f7fe fd97 	bl	8015b98 <dwt_write32bitoffsetreg>
 801706a:	e010      	b.n	801708e <ull_setleds+0x6e>
 801706c:	2500      	movs	r5, #0
 801706e:	9500      	str	r5, [sp, #0]
 8017070:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8017074:	462a      	mov	r2, r5
 8017076:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801707a:	f7ff fa93 	bl	80165a4 <dwt_modify32bitoffsetreg>
 801707e:	9500      	str	r5, [sp, #0]
 8017080:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017084:	462a      	mov	r2, r5
 8017086:	490b      	ldr	r1, [pc, #44]	; (80170b4 <ull_setleds+0x94>)
 8017088:	4620      	mov	r0, r4
 801708a:	f7ff ff8b 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 801708e:	b003      	add	sp, #12
 8017090:	bd30      	pop	{r4, r5, pc}
 8017092:	4d08      	ldr	r5, [pc, #32]	; (80170b4 <ull_setleds+0x94>)
 8017094:	4b08      	ldr	r3, [pc, #32]	; (80170b8 <ull_setleds+0x98>)
 8017096:	2200      	movs	r2, #0
 8017098:	4629      	mov	r1, r5
 801709a:	4620      	mov	r0, r4
 801709c:	f7fe fd7c 	bl	8015b98 <dwt_write32bitoffsetreg>
 80170a0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80170a4:	2200      	movs	r2, #0
 80170a6:	4629      	mov	r1, r5
 80170a8:	4620      	mov	r0, r4
 80170aa:	f7fe fd75 	bl	8015b98 <dwt_write32bitoffsetreg>
 80170ae:	e7ee      	b.n	801708e <ull_setleds+0x6e>
 80170b0:	00110004 	.word	0x00110004
 80170b4:	00110018 	.word	0x00110018
 80170b8:	000f0110 	.word	0x000f0110

080170bc <ull_pgf_cal>:
 80170bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170be:	b083      	sub	sp, #12
 80170c0:	4604      	mov	r4, r0
 80170c2:	2901      	cmp	r1, #1
 80170c4:	d009      	beq.n	80170da <ull_pgf_cal+0x1e>
 80170c6:	2014      	movs	r0, #20
 80170c8:	f7f4 fd99 	bl	800bbfe <deca_usleep>
 80170cc:	4620      	mov	r0, r4
 80170ce:	f7ff fe8b 	bl	8016de8 <ull_run_pgfcal>
 80170d2:	4605      	mov	r5, r0
 80170d4:	4628      	mov	r0, r5
 80170d6:	b003      	add	sp, #12
 80170d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170da:	4e0f      	ldr	r6, [pc, #60]	; (8017118 <ull_pgf_cal+0x5c>)
 80170dc:	2200      	movs	r2, #0
 80170de:	4631      	mov	r1, r6
 80170e0:	f7fe f891 	bl	8015206 <dwt_read16bitoffsetreg>
 80170e4:	4607      	mov	r7, r0
 80170e6:	f240 1307 	movw	r3, #263	; 0x107
 80170ea:	9300      	str	r3, [sp, #0]
 80170ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170f0:	2200      	movs	r2, #0
 80170f2:	4631      	mov	r1, r6
 80170f4:	4620      	mov	r0, r4
 80170f6:	f7ff ff55 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80170fa:	2014      	movs	r0, #20
 80170fc:	f7f4 fd7f 	bl	800bbfe <deca_usleep>
 8017100:	4620      	mov	r0, r4
 8017102:	f7ff fe71 	bl	8016de8 <ull_run_pgfcal>
 8017106:	4605      	mov	r5, r0
 8017108:	2200      	movs	r2, #0
 801710a:	9200      	str	r2, [sp, #0]
 801710c:	463b      	mov	r3, r7
 801710e:	4631      	mov	r1, r6
 8017110:	4620      	mov	r0, r4
 8017112:	f7ff ff47 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017116:	e7dd      	b.n	80170d4 <ull_pgf_cal+0x18>
 8017118:	00070048 	.word	0x00070048

0801711c <ull_setgpiovalue>:
 801711c:	b500      	push	{lr}
 801711e:	b083      	sub	sp, #12
 8017120:	2a01      	cmp	r2, #1
 8017122:	d009      	beq.n	8017138 <ull_setgpiovalue+0x1c>
 8017124:	43cb      	mvns	r3, r1
 8017126:	2200      	movs	r2, #0
 8017128:	9200      	str	r2, [sp, #0]
 801712a:	b29b      	uxth	r3, r3
 801712c:	4906      	ldr	r1, [pc, #24]	; (8017148 <ull_setgpiovalue+0x2c>)
 801712e:	f7ff ff39 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017132:	b003      	add	sp, #12
 8017134:	f85d fb04 	ldr.w	pc, [sp], #4
 8017138:	9100      	str	r1, [sp, #0]
 801713a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801713e:	2200      	movs	r2, #0
 8017140:	4901      	ldr	r1, [pc, #4]	; (8017148 <ull_setgpiovalue+0x2c>)
 8017142:	f7ff ff2f 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017146:	e7f4      	b.n	8017132 <ull_setgpiovalue+0x16>
 8017148:	0005000c 	.word	0x0005000c

0801714c <ull_readaccdata>:
 801714c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801714e:	b083      	sub	sp, #12
 8017150:	4604      	mov	r4, r0
 8017152:	460f      	mov	r7, r1
 8017154:	4616      	mov	r6, r2
 8017156:	461d      	mov	r5, r3
 8017158:	f248 0340 	movw	r3, #32832	; 0x8040
 801715c:	9300      	str	r3, [sp, #0]
 801715e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017162:	2200      	movs	r2, #0
 8017164:	4918      	ldr	r1, [pc, #96]	; (80171c8 <ull_readaccdata+0x7c>)
 8017166:	f7ff ff1d 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 801716a:	19aa      	adds	r2, r5, r6
 801716c:	f243 0301 	movw	r3, #12289	; 0x3001
 8017170:	429a      	cmp	r2, r3
 8017172:	dc15      	bgt.n	80171a0 <ull_readaccdata+0x54>
 8017174:	2d7f      	cmp	r5, #127	; 0x7f
 8017176:	d91d      	bls.n	80171b4 <ull_readaccdata+0x68>
 8017178:	2315      	movs	r3, #21
 801717a:	2200      	movs	r2, #0
 801717c:	4913      	ldr	r1, [pc, #76]	; (80171cc <ull_readaccdata+0x80>)
 801717e:	4620      	mov	r0, r4
 8017180:	f7fe fd0a 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017184:	462b      	mov	r3, r5
 8017186:	2200      	movs	r2, #0
 8017188:	4911      	ldr	r1, [pc, #68]	; (80171d0 <ull_readaccdata+0x84>)
 801718a:	4620      	mov	r0, r4
 801718c:	f7fe fd04 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017190:	9700      	str	r7, [sp, #0]
 8017192:	4633      	mov	r3, r6
 8017194:	2200      	movs	r2, #0
 8017196:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801719a:	4620      	mov	r0, r4
 801719c:	f7fe f813 	bl	80151c6 <dwt_readfromdevice>
 80171a0:	2200      	movs	r2, #0
 80171a2:	9200      	str	r2, [sp, #0]
 80171a4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80171a8:	4907      	ldr	r1, [pc, #28]	; (80171c8 <ull_readaccdata+0x7c>)
 80171aa:	4620      	mov	r0, r4
 80171ac:	f7ff fefa 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80171b0:	b003      	add	sp, #12
 80171b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171b4:	9700      	str	r7, [sp, #0]
 80171b6:	4633      	mov	r3, r6
 80171b8:	462a      	mov	r2, r5
 80171ba:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80171be:	4620      	mov	r0, r4
 80171c0:	f7fe f801 	bl	80151c6 <dwt_readfromdevice>
 80171c4:	e7ec      	b.n	80171a0 <ull_readaccdata+0x54>
 80171c6:	bf00      	nop
 80171c8:	00110004 	.word	0x00110004
 80171cc:	001f0004 	.word	0x001f0004
 80171d0:	001f0008 	.word	0x001f0008

080171d4 <ull_configure>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	b083      	sub	sp, #12
 80171da:	4604      	mov	r4, r0
 80171dc:	460d      	mov	r5, r1
 80171de:	f891 9000 	ldrb.w	r9, [r1]
 80171e2:	790b      	ldrb	r3, [r1, #4]
 80171e4:	2b18      	cmp	r3, #24
 80171e6:	d814      	bhi.n	8017212 <ull_configure+0x3e>
 80171e8:	78cf      	ldrb	r7, [r1, #3]
 80171ea:	2f18      	cmp	r7, #24
 80171ec:	bf94      	ite	ls
 80171ee:	2700      	movls	r7, #0
 80171f0:	2701      	movhi	r7, #1
 80171f2:	b2ff      	uxtb	r7, r7
 80171f4:	79eb      	ldrb	r3, [r5, #7]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	bf0c      	ite	eq
 80171fa:	2110      	moveq	r1, #16
 80171fc:	2100      	movne	r1, #0
 80171fe:	786b      	ldrb	r3, [r5, #1]
 8017200:	3b01      	subs	r3, #1
 8017202:	2b06      	cmp	r3, #6
 8017204:	d810      	bhi.n	8017228 <ull_configure+0x54>
 8017206:	e8df f003 	tbb	[pc, r3]
 801720a:	0f06      	.short	0x0f06
 801720c:	0f0c120f 	.word	0x0f0c120f
 8017210:	09          	.byte	0x09
 8017211:	00          	.byte	0x00
 8017212:	2701      	movs	r7, #1
 8017214:	e7ed      	b.n	80171f2 <ull_configure+0x1e>
 8017216:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801721a:	e00a      	b.n	8017232 <ull_configure+0x5e>
 801721c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8017220:	e007      	b.n	8017232 <ull_configure+0x5e>
 8017222:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8017226:	e004      	b.n	8017232 <ull_configure+0x5e>
 8017228:	f44f 7a80 	mov.w	sl, #256	; 0x100
 801722c:	e001      	b.n	8017232 <ull_configure+0x5e>
 801722e:	f04f 0a20 	mov.w	sl, #32
 8017232:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8017234:	8a13      	ldrh	r3, [r2, #16]
 8017236:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801723a:	8213      	strh	r3, [r2, #16]
 801723c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801723e:	79ea      	ldrb	r2, [r5, #7]
 8017240:	72da      	strb	r2, [r3, #11]
 8017242:	7b2e      	ldrb	r6, [r5, #12]
 8017244:	1cb3      	adds	r3, r6, #2
 8017246:	2601      	movs	r6, #1
 8017248:	409e      	lsls	r6, r3
 801724a:	fa1f f886 	uxth.w	r8, r6
 801724e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8017250:	4bca      	ldr	r3, [pc, #808]	; (801757c <ull_configure+0x3a8>)
 8017252:	fb03 f308 	mul.w	r3, r3, r8
 8017256:	0bdb      	lsrs	r3, r3, #15
 8017258:	8253      	strh	r3, [r2, #18]
 801725a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801725c:	7aea      	ldrb	r2, [r5, #11]
 801725e:	755a      	strb	r2, [r3, #21]
 8017260:	7a2b      	ldrb	r3, [r5, #8]
 8017262:	015b      	lsls	r3, r3, #5
 8017264:	f003 0320 	and.w	r3, r3, #32
 8017268:	7b6a      	ldrb	r2, [r5, #13]
 801726a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801726e:	7aea      	ldrb	r2, [r5, #11]
 8017270:	0312      	lsls	r2, r2, #12
 8017272:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8017276:	4313      	orrs	r3, r2
 8017278:	430b      	orrs	r3, r1
 801727a:	9300      	str	r3, [sp, #0]
 801727c:	4bc0      	ldr	r3, [pc, #768]	; (8017580 <ull_configure+0x3ac>)
 801727e:	2200      	movs	r2, #0
 8017280:	2110      	movs	r1, #16
 8017282:	4620      	mov	r0, r4
 8017284:	f7ff f98e 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8017288:	2f00      	cmp	r7, #0
 801728a:	f040 80fe 	bne.w	801748a <ull_configure+0x2b6>
 801728e:	7aeb      	ldrb	r3, [r5, #11]
 8017290:	b1bb      	cbz	r3, 80172c2 <ull_configure+0xee>
 8017292:	7b6b      	ldrb	r3, [r5, #13]
 8017294:	2b01      	cmp	r3, #1
 8017296:	7b28      	ldrb	r0, [r5, #12]
 8017298:	bf94      	ite	ls
 801729a:	2203      	movls	r2, #3
 801729c:	2204      	movhi	r2, #4
 801729e:	2110      	movs	r1, #16
 80172a0:	4bb8      	ldr	r3, [pc, #736]	; (8017584 <ull_configure+0x3b0>)
 80172a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80172a6:	f7fd fef3 	bl	8015090 <get_sts_mnth>
 80172aa:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 80172ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80172b2:	9000      	str	r0, [sp, #0]
 80172b4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80172b8:	2202      	movs	r2, #2
 80172ba:	49b3      	ldr	r1, [pc, #716]	; (8017588 <ull_configure+0x3b4>)
 80172bc:	4620      	mov	r0, r4
 80172be:	f7ff fe71 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80172c2:	2394      	movs	r3, #148	; 0x94
 80172c4:	9300      	str	r3, [sp, #0]
 80172c6:	4bb1      	ldr	r3, [pc, #708]	; (801758c <ull_configure+0x3b8>)
 80172c8:	2200      	movs	r2, #0
 80172ca:	49b1      	ldr	r1, [pc, #708]	; (8017590 <ull_configure+0x3bc>)
 80172cc:	4620      	mov	r0, r4
 80172ce:	f7ff f969 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80172d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80172d6:	f340 8103 	ble.w	80174e0 <ull_configure+0x30c>
 80172da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80172dc:	8a13      	ldrh	r3, [r2, #16]
 80172de:	f043 0320 	orr.w	r3, r3, #32
 80172e2:	8213      	strh	r3, [r2, #16]
 80172e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172e8:	9300      	str	r3, [sp, #0]
 80172ea:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80172ee:	2200      	movs	r2, #0
 80172f0:	49a8      	ldr	r1, [pc, #672]	; (8017594 <ull_configure+0x3c0>)
 80172f2:	4620      	mov	r0, r4
 80172f4:	f7ff fe56 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80172f8:	7b6b      	ldrb	r3, [r5, #13]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	f000 80fb 	beq.w	80174f6 <ull_configure+0x322>
 8017300:	78ab      	ldrb	r3, [r5, #2]
 8017302:	f043 0310 	orr.w	r3, r3, #16
 8017306:	9300      	str	r3, [sp, #0]
 8017308:	23fc      	movs	r3, #252	; 0xfc
 801730a:	2200      	movs	r2, #0
 801730c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8017310:	4620      	mov	r0, r4
 8017312:	f7ff fab7 	bl	8016884 <dwt_modify8bitoffsetreg>
 8017316:	1e73      	subs	r3, r6, #1
 8017318:	b2db      	uxtb	r3, r3
 801731a:	2200      	movs	r2, #0
 801731c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017320:	4620      	mov	r0, r4
 8017322:	f7fe fe1d 	bl	8015f60 <dwt_write8bitoffsetreg>
 8017326:	786b      	ldrb	r3, [r5, #1]
 8017328:	2b07      	cmp	r3, #7
 801732a:	bf0c      	ite	eq
 801732c:	2108      	moveq	r1, #8
 801732e:	2100      	movne	r1, #0
 8017330:	4620      	mov	r0, r4
 8017332:	f7fe ff1b 	bl	801616c <ull_setplenfine>
 8017336:	7aeb      	ldrb	r3, [r5, #11]
 8017338:	f003 0303 	and.w	r3, r3, #3
 801733c:	2b03      	cmp	r3, #3
 801733e:	bf0c      	ite	eq
 8017340:	4b95      	ldreq	r3, [pc, #596]	; (8017598 <ull_configure+0x3c4>)
 8017342:	4b96      	ldrne	r3, [pc, #600]	; (801759c <ull_configure+0x3c8>)
 8017344:	2200      	movs	r2, #0
 8017346:	4996      	ldr	r1, [pc, #600]	; (80175a0 <ull_configure+0x3cc>)
 8017348:	4620      	mov	r0, r4
 801734a:	f7fe fc25 	bl	8015b98 <dwt_write32bitoffsetreg>
 801734e:	2200      	movs	r2, #0
 8017350:	4994      	ldr	r1, [pc, #592]	; (80175a4 <ull_configure+0x3d0>)
 8017352:	4620      	mov	r0, r4
 8017354:	f7fd ff41 	bl	80151da <dwt_read32bitoffsetreg>
 8017358:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 801735c:	f020 001f 	bic.w	r0, r0, #31
 8017360:	f1b9 0f09 	cmp.w	r9, #9
 8017364:	bf08      	it	eq
 8017366:	f040 0001 	orreq.w	r0, r0, #1
 801736a:	792a      	ldrb	r2, [r5, #4]
 801736c:	0212      	lsls	r2, r2, #8
 801736e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8017372:	78eb      	ldrb	r3, [r5, #3]
 8017374:	00db      	lsls	r3, r3, #3
 8017376:	b2db      	uxtb	r3, r3
 8017378:	431a      	orrs	r2, r3
 801737a:	796b      	ldrb	r3, [r5, #5]
 801737c:	005b      	lsls	r3, r3, #1
 801737e:	f003 0306 	and.w	r3, r3, #6
 8017382:	4313      	orrs	r3, r2
 8017384:	4303      	orrs	r3, r0
 8017386:	2200      	movs	r2, #0
 8017388:	4986      	ldr	r1, [pc, #536]	; (80175a4 <ull_configure+0x3d0>)
 801738a:	4620      	mov	r0, r4
 801738c:	f7fe fc04 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017390:	79aa      	ldrb	r2, [r5, #6]
 8017392:	786b      	ldrb	r3, [r5, #1]
 8017394:	031b      	lsls	r3, r3, #12
 8017396:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80173a0:	2200      	movs	r2, #0
 80173a2:	2120      	movs	r1, #32
 80173a4:	4620      	mov	r0, r4
 80173a6:	f7ff f8fd 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80173aa:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80173ae:	b923      	cbnz	r3, 80173ba <ull_configure+0x1e6>
 80173b0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80173b4:	726b      	strb	r3, [r5, #9]
 80173b6:	2300      	movs	r3, #0
 80173b8:	72ab      	strb	r3, [r5, #10]
 80173ba:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80173be:	2202      	movs	r2, #2
 80173c0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80173c4:	4620      	mov	r0, r4
 80173c6:	f7fe fb7c 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80173ca:	2202      	movs	r2, #2
 80173cc:	4976      	ldr	r1, [pc, #472]	; (80175a8 <ull_configure+0x3d4>)
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7fd ff58 	bl	8015284 <dwt_read8bitoffsetreg>
 80173d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80173d6:	7bdb      	ldrb	r3, [r3, #15]
 80173d8:	454b      	cmp	r3, r9
 80173da:	f000 8096 	beq.w	801750a <ull_configure+0x336>
 80173de:	2803      	cmp	r0, #3
 80173e0:	f000 8097 	beq.w	8017512 <ull_configure+0x33e>
 80173e4:	f1b9 0f09 	cmp.w	r9, #9
 80173e8:	f000 8098 	beq.w	801751c <ull_configure+0x348>
 80173ec:	4b6f      	ldr	r3, [pc, #444]	; (80175ac <ull_configure+0x3d8>)
 80173ee:	9300      	str	r3, [sp, #0]
 80173f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80173f4:	2200      	movs	r2, #0
 80173f6:	496e      	ldr	r1, [pc, #440]	; (80175b0 <ull_configure+0x3dc>)
 80173f8:	4620      	mov	r0, r4
 80173fa:	f7ff f8d3 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80173fe:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8017402:	2200      	movs	r2, #0
 8017404:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8017408:	4620      	mov	r0, r4
 801740a:	f7fe fb5a 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801740e:	2314      	movs	r3, #20
 8017410:	2201      	movs	r2, #1
 8017412:	4968      	ldr	r1, [pc, #416]	; (80175b4 <ull_configure+0x3e0>)
 8017414:	4620      	mov	r0, r4
 8017416:	f7fe fda3 	bl	8015f60 <dwt_write8bitoffsetreg>
 801741a:	230e      	movs	r3, #14
 801741c:	2202      	movs	r2, #2
 801741e:	4966      	ldr	r1, [pc, #408]	; (80175b8 <ull_configure+0x3e4>)
 8017420:	4620      	mov	r0, r4
 8017422:	f7fe fd9d 	bl	8015f60 <dwt_write8bitoffsetreg>
 8017426:	2381      	movs	r3, #129	; 0x81
 8017428:	2200      	movs	r2, #0
 801742a:	4964      	ldr	r1, [pc, #400]	; (80175bc <ull_configure+0x3e8>)
 801742c:	4620      	mov	r0, r4
 801742e:	f7fe fd97 	bl	8015f60 <dwt_write8bitoffsetreg>
 8017432:	2600      	movs	r6, #0
 8017434:	9600      	str	r6, [sp, #0]
 8017436:	23fc      	movs	r3, #252	; 0xfc
 8017438:	2203      	movs	r2, #3
 801743a:	4961      	ldr	r1, [pc, #388]	; (80175c0 <ull_configure+0x3ec>)
 801743c:	4620      	mov	r0, r4
 801743e:	f7ff fa21 	bl	8016884 <dwt_modify8bitoffsetreg>
 8017442:	2302      	movs	r3, #2
 8017444:	4632      	mov	r2, r6
 8017446:	2144      	movs	r1, #68	; 0x44
 8017448:	4620      	mov	r0, r4
 801744a:	f7fe fd89 	bl	8015f60 <dwt_write8bitoffsetreg>
 801744e:	2101      	movs	r1, #1
 8017450:	4620      	mov	r0, r4
 8017452:	f7ff fc47 	bl	8016ce4 <ull_setdwstate>
 8017456:	f04f 0b32 	mov.w	fp, #50	; 0x32
 801745a:	f04f 0814 	mov.w	r8, #20
 801745e:	4637      	mov	r7, r6
 8017460:	2644      	movs	r6, #68	; 0x44
 8017462:	4640      	mov	r0, r8
 8017464:	f7f4 fbcb 	bl	800bbfe <deca_usleep>
 8017468:	463a      	mov	r2, r7
 801746a:	4631      	mov	r1, r6
 801746c:	4620      	mov	r0, r4
 801746e:	f7fd ff09 	bl	8015284 <dwt_read8bitoffsetreg>
 8017472:	f010 0f02 	tst.w	r0, #2
 8017476:	f040 80af 	bne.w	80175d8 <ull_configure+0x404>
 801747a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801747e:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 8017482:	d1ee      	bne.n	8017462 <ull_configure+0x28e>
 8017484:	f06f 0001 	mvn.w	r0, #1
 8017488:	e0e6      	b.n	8017658 <ull_configure+0x484>
 801748a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801748c:	8a13      	ldrh	r3, [r2, #16]
 801748e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8017492:	8213      	strh	r3, [r2, #16]
 8017494:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017498:	9300      	str	r3, [sp, #0]
 801749a:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 801749e:	2200      	movs	r2, #0
 80174a0:	493c      	ldr	r1, [pc, #240]	; (8017594 <ull_configure+0x3c0>)
 80174a2:	4620      	mov	r0, r4
 80174a4:	f7ff f87e 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80174a8:	f240 3306 	movw	r3, #774	; 0x306
 80174ac:	2200      	movs	r2, #0
 80174ae:	4945      	ldr	r1, [pc, #276]	; (80175c4 <ull_configure+0x3f0>)
 80174b0:	4620      	mov	r0, r4
 80174b2:	f7fe fb71 	bl	8015b98 <dwt_write32bitoffsetreg>
 80174b6:	2300      	movs	r3, #0
 80174b8:	461a      	mov	r2, r3
 80174ba:	4943      	ldr	r1, [pc, #268]	; (80175c8 <ull_configure+0x3f4>)
 80174bc:	4620      	mov	r0, r4
 80174be:	f7fe fb6b 	bl	8015b98 <dwt_write32bitoffsetreg>
 80174c2:	4b42      	ldr	r3, [pc, #264]	; (80175cc <ull_configure+0x3f8>)
 80174c4:	2200      	movs	r2, #0
 80174c6:	4930      	ldr	r1, [pc, #192]	; (8017588 <ull_configure+0x3b4>)
 80174c8:	4620      	mov	r0, r4
 80174ca:	f7fe fb65 	bl	8015b98 <dwt_write32bitoffsetreg>
 80174ce:	239d      	movs	r3, #157	; 0x9d
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	4b2e      	ldr	r3, [pc, #184]	; (801758c <ull_configure+0x3b8>)
 80174d4:	2200      	movs	r2, #0
 80174d6:	492e      	ldr	r1, [pc, #184]	; (8017590 <ull_configure+0x3bc>)
 80174d8:	4620      	mov	r0, r4
 80174da:	f7ff f863 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80174de:	e70b      	b.n	80172f8 <ull_configure+0x124>
 80174e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80174e4:	9300      	str	r3, [sp, #0]
 80174e6:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80174ea:	2200      	movs	r2, #0
 80174ec:	4929      	ldr	r1, [pc, #164]	; (8017594 <ull_configure+0x3c0>)
 80174ee:	4620      	mov	r0, r4
 80174f0:	f7ff fd58 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80174f4:	e700      	b.n	80172f8 <ull_configure+0x124>
 80174f6:	78ab      	ldrb	r3, [r5, #2]
 80174f8:	9300      	str	r3, [sp, #0]
 80174fa:	23ec      	movs	r3, #236	; 0xec
 80174fc:	2200      	movs	r2, #0
 80174fe:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8017502:	4620      	mov	r0, r4
 8017504:	f7ff f9be 	bl	8016884 <dwt_modify8bitoffsetreg>
 8017508:	e705      	b.n	8017316 <ull_configure+0x142>
 801750a:	2803      	cmp	r0, #3
 801750c:	f47f af6a 	bne.w	80173e4 <ull_configure+0x210>
 8017510:	e065      	b.n	80175de <ull_configure+0x40a>
 8017512:	2102      	movs	r1, #2
 8017514:	4620      	mov	r0, r4
 8017516:	f7ff fbe5 	bl	8016ce4 <ull_setdwstate>
 801751a:	e763      	b.n	80173e4 <ull_configure+0x210>
 801751c:	4b2c      	ldr	r3, [pc, #176]	; (80175d0 <ull_configure+0x3fc>)
 801751e:	9300      	str	r3, [sp, #0]
 8017520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017524:	2200      	movs	r2, #0
 8017526:	4922      	ldr	r1, [pc, #136]	; (80175b0 <ull_configure+0x3dc>)
 8017528:	4620      	mov	r0, r4
 801752a:	f7ff f83b 	bl	80165a4 <dwt_modify32bitoffsetreg>
 801752e:	f640 733c 	movw	r3, #3900	; 0xf3c
 8017532:	2200      	movs	r2, #0
 8017534:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8017538:	4620      	mov	r0, r4
 801753a:	f7fe fac2 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801753e:	e766      	b.n	801740e <ull_configure+0x23a>
 8017540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017544:	9300      	str	r3, [sp, #0]
 8017546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801754a:	2200      	movs	r2, #0
 801754c:	4911      	ldr	r1, [pc, #68]	; (8017594 <ull_configure+0x3c0>)
 801754e:	4620      	mov	r0, r4
 8017550:	f7ff fd28 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017554:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8017556:	8a13      	ldrh	r3, [r2, #16]
 8017558:	f043 0308 	orr.w	r3, r3, #8
 801755c:	8213      	strh	r3, [r2, #16]
 801755e:	e050      	b.n	8017602 <ull_configure+0x42e>
 8017560:	2200      	movs	r2, #0
 8017562:	9200      	str	r2, [sp, #0]
 8017564:	23fe      	movs	r3, #254	; 0xfe
 8017566:	491b      	ldr	r1, [pc, #108]	; (80175d4 <ull_configure+0x400>)
 8017568:	4620      	mov	r0, r4
 801756a:	f7ff f98b 	bl	8016884 <dwt_modify8bitoffsetreg>
 801756e:	e052      	b.n	8017616 <ull_configure+0x442>
 8017570:	2101      	movs	r1, #1
 8017572:	4620      	mov	r0, r4
 8017574:	f7ff fda2 	bl	80170bc <ull_pgf_cal>
 8017578:	e06b      	b.n	8017652 <ull_configure+0x47e>
 801757a:	bf00      	nop
 801757c:	00026668 	.word	0x00026668
 8017580:	fffc4fcf 	.word	0xfffc4fcf
 8017584:	08020790 	.word	0x08020790
 8017588:	000e0014 	.word	0x000e0014
 801758c:	bfffff00 	.word	0xbfffff00
 8017590:	000e0018 	.word	0x000e0018
 8017594:	000b0008 	.word	0x000b0008
 8017598:	af5f35cc 	.word	0xaf5f35cc
 801759c:	af5f584c 	.word	0xaf5f584c
 80175a0:	0006000c 	.word	0x0006000c
 80175a4:	00010008 	.word	0x00010008
 80175a8:	000f0030 	.word	0x000f0030
 80175ac:	1c071134 	.word	0x1c071134
 80175b0:	0007001c 	.word	0x0007001c
 80175b4:	00070050 	.word	0x00070050
 80175b8:	00070018 	.word	0x00070018
 80175bc:	00090008 	.word	0x00090008
 80175c0:	00090004 	.word	0x00090004
 80175c4:	000e000c 	.word	0x000e000c
 80175c8:	000e0010 	.word	0x000e0010
 80175cc:	000c5a0a 	.word	0x000c5a0a
 80175d0:	1c010034 	.word	0x1c010034
 80175d4:	00030018 	.word	0x00030018
 80175d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80175da:	f883 900f 	strb.w	r9, [r3, #15]
 80175de:	792b      	ldrb	r3, [r5, #4]
 80175e0:	3b09      	subs	r3, #9
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	2b0f      	cmp	r3, #15
 80175e6:	d8bb      	bhi.n	8017560 <ull_configure+0x38c>
 80175e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80175ea:	7a1b      	ldrb	r3, [r3, #8]
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d0a7      	beq.n	8017540 <ull_configure+0x36c>
 80175f0:	4649      	mov	r1, r9
 80175f2:	4620      	mov	r0, r4
 80175f4:	f7fe fb9c 	bl	8015d30 <ull_configmrxlut>
 80175f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80175fa:	8a13      	ldrh	r3, [r2, #16]
 80175fc:	f023 0308 	bic.w	r3, r3, #8
 8017600:	8213      	strh	r3, [r2, #16]
 8017602:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8017606:	9300      	str	r3, [sp, #0]
 8017608:	f248 13ff 	movw	r3, #33279	; 0x81ff
 801760c:	2200      	movs	r2, #0
 801760e:	4914      	ldr	r1, [pc, #80]	; (8017660 <ull_configure+0x48c>)
 8017610:	4620      	mov	r0, r4
 8017612:	f7ff fcc7 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017616:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801761a:	bfcc      	ite	gt
 801761c:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8017620:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8017624:	9300      	str	r3, [sp, #0]
 8017626:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801762a:	2200      	movs	r2, #0
 801762c:	490d      	ldr	r1, [pc, #52]	; (8017664 <ull_configure+0x490>)
 801762e:	4620      	mov	r0, r4
 8017630:	f7fe ffb8 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8017634:	2301      	movs	r3, #1
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	23ff      	movs	r3, #255	; 0xff
 801763a:	2202      	movs	r2, #2
 801763c:	490a      	ldr	r1, [pc, #40]	; (8017668 <ull_configure+0x494>)
 801763e:	4620      	mov	r0, r4
 8017640:	f7ff f920 	bl	8016884 <dwt_modify8bitoffsetreg>
 8017644:	2200      	movs	r2, #0
 8017646:	4909      	ldr	r1, [pc, #36]	; (801766c <ull_configure+0x498>)
 8017648:	4620      	mov	r0, r4
 801764a:	f7fd fdc6 	bl	80151da <dwt_read32bitoffsetreg>
 801764e:	2800      	cmp	r0, #0
 8017650:	d08e      	beq.n	8017570 <ull_configure+0x39c>
 8017652:	4620      	mov	r0, r4
 8017654:	f7ff f98a 	bl	801696c <ull_adcoffsetscalibration>
 8017658:	b003      	add	sp, #12
 801765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801765e:	bf00      	nop
 8017660:	00030018 	.word	0x00030018
 8017664:	00060010 	.word	0x00060010
 8017668:	0004000c 	.word	0x0004000c
 801766c:	00040014 	.word	0x00040014

08017670 <ull_initialise>:
 8017670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017674:	b082      	sub	sp, #8
 8017676:	4605      	mov	r5, r0
 8017678:	460e      	mov	r6, r1
 801767a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801767c:	2b00      	cmp	r3, #0
 801767e:	d05b      	beq.n	8017738 <ull_initialise+0xc8>
 8017680:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8017682:	2300      	movs	r3, #0
 8017684:	73a3      	strb	r3, [r4, #14]
 8017686:	2202      	movs	r2, #2
 8017688:	8222      	strh	r2, [r4, #16]
 801768a:	7523      	strb	r3, [r4, #20]
 801768c:	7563      	strb	r3, [r4, #21]
 801768e:	73e3      	strb	r3, [r4, #15]
 8017690:	7263      	strb	r3, [r4, #9]
 8017692:	72a3      	strb	r3, [r4, #10]
 8017694:	2104      	movs	r1, #4
 8017696:	4628      	mov	r0, r5
 8017698:	f7fe fa5c 	bl	8015b54 <_dwt_otpread>
 801769c:	4607      	mov	r7, r0
 801769e:	2105      	movs	r1, #5
 80176a0:	4628      	mov	r0, r5
 80176a2:	f7fe fa57 	bl	8015b54 <_dwt_otpread>
 80176a6:	4680      	mov	r8, r0
 80176a8:	210a      	movs	r1, #10
 80176aa:	4628      	mov	r0, r5
 80176ac:	f7fe fa52 	bl	8015b54 <_dwt_otpread>
 80176b0:	b12f      	cbz	r7, 80176be <ull_initialise+0x4e>
 80176b2:	f1b8 0f00 	cmp.w	r8, #0
 80176b6:	d002      	beq.n	80176be <ull_initialise+0x4e>
 80176b8:	b280      	uxth	r0, r0
 80176ba:	2800      	cmp	r0, #0
 80176bc:	d141      	bne.n	8017742 <ull_initialise+0xd2>
 80176be:	2120      	movs	r1, #32
 80176c0:	4628      	mov	r0, r5
 80176c2:	f7fe fa47 	bl	8015b54 <_dwt_otpread>
 80176c6:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 80176ca:	bf0c      	ite	eq
 80176cc:	2301      	moveq	r3, #1
 80176ce:	2300      	movne	r3, #0
 80176d0:	7223      	strb	r3, [r4, #8]
 80176d2:	f016 0f10 	tst.w	r6, #16
 80176d6:	d143      	bne.n	8017760 <ull_initialise+0xf0>
 80176d8:	f016 0f20 	tst.w	r6, #32
 80176dc:	d146      	bne.n	801776c <ull_initialise+0xfc>
 80176de:	f016 0f40 	tst.w	r6, #64	; 0x40
 80176e2:	d149      	bne.n	8017778 <ull_initialise+0x108>
 80176e4:	f016 0f80 	tst.w	r6, #128	; 0x80
 80176e8:	d14d      	bne.n	8017786 <ull_initialise+0x116>
 80176ea:	7aa3      	ldrb	r3, [r4, #10]
 80176ec:	b90b      	cbnz	r3, 80176f2 <ull_initialise+0x82>
 80176ee:	2385      	movs	r3, #133	; 0x85
 80176f0:	72a3      	strb	r3, [r4, #10]
 80176f2:	7a63      	ldrb	r3, [r4, #9]
 80176f4:	b90b      	cbnz	r3, 80176fa <ull_initialise+0x8a>
 80176f6:	2374      	movs	r3, #116	; 0x74
 80176f8:	7263      	strb	r3, [r4, #9]
 80176fa:	211f      	movs	r1, #31
 80176fc:	4628      	mov	r0, r5
 80176fe:	f7fe fa29 	bl	8015b54 <_dwt_otpread>
 8017702:	7320      	strb	r0, [r4, #12]
 8017704:	211e      	movs	r1, #30
 8017706:	4628      	mov	r0, r5
 8017708:	f7fe fa24 	bl	8015b54 <_dwt_otpread>
 801770c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8017710:	bf12      	itee	ne
 8017712:	7360      	strbne	r0, [r4, #13]
 8017714:	232e      	moveq	r3, #46	; 0x2e
 8017716:	7363      	strbeq	r3, [r4, #13]
 8017718:	7b63      	ldrb	r3, [r4, #13]
 801771a:	2200      	movs	r2, #0
 801771c:	4920      	ldr	r1, [pc, #128]	; (80177a0 <ull_initialise+0x130>)
 801771e:	4628      	mov	r0, r5
 8017720:	f7fe fc1e 	bl	8015f60 <dwt_write8bitoffsetreg>
 8017724:	2135      	movs	r1, #53	; 0x35
 8017726:	4628      	mov	r0, r5
 8017728:	f7fe fa14 	bl	8015b54 <_dwt_otpread>
 801772c:	4603      	mov	r3, r0
 801772e:	bb80      	cbnz	r0, 8017792 <ull_initialise+0x122>
 8017730:	2000      	movs	r0, #0
 8017732:	b002      	add	sp, #8
 8017734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017738:	2028      	movs	r0, #40	; 0x28
 801773a:	f002 f9db 	bl	8019af4 <malloc>
 801773e:	6528      	str	r0, [r5, #80]	; 0x50
 8017740:	e79e      	b.n	8017680 <ull_initialise+0x10>
 8017742:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8017746:	9300      	str	r3, [sp, #0]
 8017748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801774c:	2200      	movs	r2, #0
 801774e:	4915      	ldr	r1, [pc, #84]	; (80177a4 <ull_initialise+0x134>)
 8017750:	4628      	mov	r0, r5
 8017752:	f7ff fc27 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017756:	8a23      	ldrh	r3, [r4, #16]
 8017758:	f043 0314 	orr.w	r3, r3, #20
 801775c:	8223      	strh	r3, [r4, #16]
 801775e:	e7ae      	b.n	80176be <ull_initialise+0x4e>
 8017760:	2106      	movs	r1, #6
 8017762:	4628      	mov	r0, r5
 8017764:	f7fe f9f6 	bl	8015b54 <_dwt_otpread>
 8017768:	6020      	str	r0, [r4, #0]
 801776a:	e7b5      	b.n	80176d8 <ull_initialise+0x68>
 801776c:	2107      	movs	r1, #7
 801776e:	4628      	mov	r0, r5
 8017770:	f7fe f9f0 	bl	8015b54 <_dwt_otpread>
 8017774:	6060      	str	r0, [r4, #4]
 8017776:	e7b2      	b.n	80176de <ull_initialise+0x6e>
 8017778:	2108      	movs	r1, #8
 801777a:	4628      	mov	r0, r5
 801777c:	f7fe f9ea 	bl	8015b54 <_dwt_otpread>
 8017780:	0c00      	lsrs	r0, r0, #16
 8017782:	7260      	strb	r0, [r4, #9]
 8017784:	e7ae      	b.n	80176e4 <ull_initialise+0x74>
 8017786:	2109      	movs	r1, #9
 8017788:	4628      	mov	r0, r5
 801778a:	f7fe f9e3 	bl	8015b54 <_dwt_otpread>
 801778e:	72a0      	strb	r0, [r4, #10]
 8017790:	e7ab      	b.n	80176ea <ull_initialise+0x7a>
 8017792:	2200      	movs	r2, #0
 8017794:	4904      	ldr	r1, [pc, #16]	; (80177a8 <ull_initialise+0x138>)
 8017796:	4628      	mov	r0, r5
 8017798:	f7fe f9fe 	bl	8015b98 <dwt_write32bitoffsetreg>
 801779c:	e7c8      	b.n	8017730 <ull_initialise+0xc0>
 801779e:	bf00      	nop
 80177a0:	00090014 	.word	0x00090014
 80177a4:	000b0008 	.word	0x000b0008
 80177a8:	00090004 	.word	0x00090004

080177ac <ull_rxenable>:
 80177ac:	b530      	push	{r4, r5, lr}
 80177ae:	b083      	sub	sp, #12
 80177b0:	4605      	mov	r5, r0
 80177b2:	460c      	mov	r4, r1
 80177b4:	b171      	cbz	r1, 80177d4 <ull_rxenable+0x28>
 80177b6:	f021 0302 	bic.w	r3, r1, #2
 80177ba:	3b01      	subs	r3, #1
 80177bc:	2b0f      	cmp	r3, #15
 80177be:	d862      	bhi.n	8017886 <ull_rxenable+0xda>
 80177c0:	e8df f003 	tbb	[pc, r3]
 80177c4:	24616111 	.word	0x24616111
 80177c8:	2d616161 	.word	0x2d616161
 80177cc:	61616161 	.word	0x61616161
 80177d0:	3a616161 	.word	0x3a616161
 80177d4:	2102      	movs	r1, #2
 80177d6:	9101      	str	r1, [sp, #4]
 80177d8:	2200      	movs	r2, #0
 80177da:	9200      	str	r2, [sp, #0]
 80177dc:	4613      	mov	r3, r2
 80177de:	f7fd fc74 	bl	80150ca <dwt_xfer3xxx>
 80177e2:	4620      	mov	r0, r4
 80177e4:	e010      	b.n	8017808 <ull_rxenable+0x5c>
 80177e6:	2302      	movs	r3, #2
 80177e8:	9301      	str	r3, [sp, #4]
 80177ea:	2200      	movs	r2, #0
 80177ec:	9200      	str	r2, [sp, #0]
 80177ee:	4613      	mov	r3, r2
 80177f0:	2104      	movs	r1, #4
 80177f2:	f7fd fc6a 	bl	80150ca <dwt_xfer3xxx>
 80177f6:	2203      	movs	r2, #3
 80177f8:	2144      	movs	r1, #68	; 0x44
 80177fa:	4628      	mov	r0, r5
 80177fc:	f7fd fd42 	bl	8015284 <dwt_read8bitoffsetreg>
 8017800:	f010 0f08 	tst.w	r0, #8
 8017804:	d125      	bne.n	8017852 <ull_rxenable+0xa6>
 8017806:	2000      	movs	r0, #0
 8017808:	b003      	add	sp, #12
 801780a:	bd30      	pop	{r4, r5, pc}
 801780c:	2302      	movs	r3, #2
 801780e:	9301      	str	r3, [sp, #4]
 8017810:	2200      	movs	r2, #0
 8017812:	9200      	str	r2, [sp, #0]
 8017814:	4613      	mov	r3, r2
 8017816:	210a      	movs	r1, #10
 8017818:	f7fd fc57 	bl	80150ca <dwt_xfer3xxx>
 801781c:	e7eb      	b.n	80177f6 <ull_rxenable+0x4a>
 801781e:	2100      	movs	r1, #0
 8017820:	f7fe f9cf 	bl	8015bc2 <_dwt_adjust_delaytime>
 8017824:	2302      	movs	r3, #2
 8017826:	9301      	str	r3, [sp, #4]
 8017828:	2200      	movs	r2, #0
 801782a:	9200      	str	r2, [sp, #0]
 801782c:	4613      	mov	r3, r2
 801782e:	2108      	movs	r1, #8
 8017830:	4628      	mov	r0, r5
 8017832:	f7fd fc4a 	bl	80150ca <dwt_xfer3xxx>
 8017836:	e7de      	b.n	80177f6 <ull_rxenable+0x4a>
 8017838:	2101      	movs	r1, #1
 801783a:	f7fe f9c2 	bl	8015bc2 <_dwt_adjust_delaytime>
 801783e:	2302      	movs	r3, #2
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	2200      	movs	r2, #0
 8017844:	9200      	str	r2, [sp, #0]
 8017846:	4613      	mov	r3, r2
 8017848:	2106      	movs	r1, #6
 801784a:	4628      	mov	r0, r5
 801784c:	f7fd fc3d 	bl	80150ca <dwt_xfer3xxx>
 8017850:	e7d1      	b.n	80177f6 <ull_rxenable+0x4a>
 8017852:	2302      	movs	r3, #2
 8017854:	9301      	str	r3, [sp, #4]
 8017856:	2100      	movs	r1, #0
 8017858:	9100      	str	r1, [sp, #0]
 801785a:	460b      	mov	r3, r1
 801785c:	460a      	mov	r2, r1
 801785e:	4628      	mov	r0, r5
 8017860:	f7fd fc33 	bl	80150ca <dwt_xfer3xxx>
 8017864:	f014 0f02 	tst.w	r4, #2
 8017868:	d002      	beq.n	8017870 <ull_rxenable+0xc4>
 801786a:	f04f 30ff 	mov.w	r0, #4294967295
 801786e:	e7cb      	b.n	8017808 <ull_rxenable+0x5c>
 8017870:	2102      	movs	r1, #2
 8017872:	9101      	str	r1, [sp, #4]
 8017874:	2200      	movs	r2, #0
 8017876:	9200      	str	r2, [sp, #0]
 8017878:	4613      	mov	r3, r2
 801787a:	4628      	mov	r0, r5
 801787c:	f7fd fc25 	bl	80150ca <dwt_xfer3xxx>
 8017880:	f04f 30ff 	mov.w	r0, #4294967295
 8017884:	e7c0      	b.n	8017808 <ull_rxenable+0x5c>
 8017886:	f04f 30ff 	mov.w	r0, #4294967295
 801788a:	e7bd      	b.n	8017808 <ull_rxenable+0x5c>

0801788c <ull_softreset_no_sema_fcmd>:
 801788c:	b570      	push	{r4, r5, r6, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	4606      	mov	r6, r0
 8017892:	2502      	movs	r5, #2
 8017894:	9501      	str	r5, [sp, #4]
 8017896:	2400      	movs	r4, #0
 8017898:	9400      	str	r4, [sp, #0]
 801789a:	4623      	mov	r3, r4
 801789c:	4622      	mov	r2, r4
 801789e:	2119      	movs	r1, #25
 80178a0:	f7fd fc13 	bl	80150ca <dwt_xfer3xxx>
 80178a4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80178a6:	739c      	strb	r4, [r3, #14]
 80178a8:	821d      	strh	r5, [r3, #16]
 80178aa:	751c      	strb	r4, [r3, #20]
 80178ac:	755c      	strb	r4, [r3, #21]
 80178ae:	73dc      	strb	r4, [r3, #15]
 80178b0:	b002      	add	sp, #8
 80178b2:	bd70      	pop	{r4, r5, r6, pc}

080178b4 <ull_softreset_fcmd>:
 80178b4:	b570      	push	{r4, r5, r6, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	4606      	mov	r6, r0
 80178ba:	2502      	movs	r5, #2
 80178bc:	9501      	str	r5, [sp, #4]
 80178be:	2400      	movs	r4, #0
 80178c0:	9400      	str	r4, [sp, #0]
 80178c2:	4623      	mov	r3, r4
 80178c4:	4622      	mov	r2, r4
 80178c6:	2118      	movs	r1, #24
 80178c8:	f7fd fbff 	bl	80150ca <dwt_xfer3xxx>
 80178cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80178ce:	739c      	strb	r4, [r3, #14]
 80178d0:	821d      	strh	r5, [r3, #16]
 80178d2:	751c      	strb	r4, [r3, #20]
 80178d4:	755c      	strb	r4, [r3, #21]
 80178d6:	73dc      	strb	r4, [r3, #15]
 80178d8:	b002      	add	sp, #8
 80178da:	bd70      	pop	{r4, r5, r6, pc}

080178dc <dwt_ioctl>:
 80178dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e0:	b08d      	sub	sp, #52	; 0x34
 80178e2:	4606      	mov	r6, r0
 80178e4:	4615      	mov	r5, r2
 80178e6:	461c      	mov	r4, r3
 80178e8:	299c      	cmp	r1, #156	; 0x9c
 80178ea:	f200 809f 	bhi.w	8017a2c <dwt_ioctl+0x150>
 80178ee:	e8df f011 	tbh	[pc, r1, lsl #1]
 80178f2:	09b9      	.short	0x09b9
 80178f4:	00a109c4 	.word	0x00a109c4
 80178f8:	00c100a6 	.word	0x00c100a6
 80178fc:	019d0151 	.word	0x019d0151
 8017900:	015c0176 	.word	0x015c0176
 8017904:	01b301ae 	.word	0x01b301ae
 8017908:	01c501bc 	.word	0x01c501bc
 801790c:	01d701ce 	.word	0x01d701ce
 8017910:	01e501e0 	.word	0x01e501e0
 8017914:	027201ee 	.word	0x027201ee
 8017918:	027e0278 	.word	0x027e0278
 801791c:	028f0289 	.word	0x028f0289
 8017920:	029a0295 	.word	0x029a0295
 8017924:	02a502a0 	.word	0x02a502a0
 8017928:	02b702ae 	.word	0x02b702ae
 801792c:	02c902c0 	.word	0x02c902c0
 8017930:	02f90304 	.word	0x02f90304
 8017934:	02d202ee 	.word	0x02d202ee
 8017938:	031e02e0 	.word	0x031e02e0
 801793c:	021a01f8 	.word	0x021a01f8
 8017940:	02420239 	.word	0x02420239
 8017944:	08ba0258 	.word	0x08ba0258
 8017948:	031508bf 	.word	0x031508bf
 801794c:	032c0327 	.word	0x032c0327
 8017950:	033c0336 	.word	0x033c0336
 8017954:	03520347 	.word	0x03520347
 8017958:	0386035b 	.word	0x0386035b
 801795c:	03a9039d 	.word	0x03a9039d
 8017960:	03b5030a 	.word	0x03b5030a
 8017964:	03d203bf 	.word	0x03d203bf
 8017968:	040b03f9 	.word	0x040b03f9
 801796c:	0457044d 	.word	0x0457044d
 8017970:	048c047d 	.word	0x048c047d
 8017974:	049504a7 	.word	0x049504a7
 8017978:	04f704b1 	.word	0x04f704b1
 801797c:	052f050f 	.word	0x052f050f
 8017980:	05580544 	.word	0x05580544
 8017984:	057d0561 	.word	0x057d0561
 8017988:	0692056a 	.word	0x0692056a
 801798c:	071106c1 	.word	0x071106c1
 8017990:	07220717 	.word	0x07220717
 8017994:	075b073b 	.word	0x075b073b
 8017998:	078f0765 	.word	0x078f0765
 801799c:	07c607bd 	.word	0x07c607bd
 80179a0:	07d507cc 	.word	0x07d507cc
 80179a4:	07ef07e2 	.word	0x07ef07e2
 80179a8:	080207f9 	.word	0x080207f9
 80179ac:	0816080b 	.word	0x0816080b
 80179b0:	08270821 	.word	0x08270821
 80179b4:	0855084a 	.word	0x0855084a
 80179b8:	086b0860 	.word	0x086b0860
 80179bc:	0898088d 	.word	0x0898088d
 80179c0:	08c508b1 	.word	0x08c508b1
 80179c4:	0959094f 	.word	0x0959094f
 80179c8:	09cc0964 	.word	0x09cc0964
 80179cc:	09ae096e 	.word	0x09ae096e
 80179d0:	090306b3 	.word	0x090306b3
 80179d4:	0a3a0924 	.word	0x0a3a0924
 80179d8:	09d90a2f 	.word	0x09d90a2f
 80179dc:	09ef09e4 	.word	0x09ef09e4
 80179e0:	0a0509fa 	.word	0x0a0509fa
 80179e4:	0a1b0a10 	.word	0x0a1b0a10
 80179e8:	0c320a24 	.word	0x0c320a24
 80179ec:	0ca30c69 	.word	0x0ca30c69
 80179f0:	0e2d0cc5 	.word	0x0e2d0cc5
 80179f4:	0a4a0e41 	.word	0x0a4a0e41
 80179f8:	0b890b57 	.word	0x0b890b57
 80179fc:	0b970b93 	.word	0x0b970b93
 8017a00:	0ba50b9b 	.word	0x0ba50b9b
 8017a04:	0bc10bb7 	.word	0x0bc10bb7
 8017a08:	0be80bd4 	.word	0x0be80bd4
 8017a0c:	0cdb0c22 	.word	0x0cdb0c22
 8017a10:	0cfd0ce5 	.word	0x0cfd0ce5
 8017a14:	0d2d0d18 	.word	0x0d2d0d18
 8017a18:	0d890d4d 	.word	0x0d890d4d
 8017a1c:	0db70da1 	.word	0x0db70da1
 8017a20:	0efc0dc7 	.word	0x0efc0dc7
 8017a24:	0dec0df6 	.word	0x0dec0df6
 8017a28:	0e000e08 	.word	0x0e000e08
 8017a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8017a30:	f001 be5c 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017a34:	f7fd fb28 	bl	8015088 <ull_wakeup_ic>
 8017a38:	2500      	movs	r5, #0
 8017a3a:	f001 be57 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017a3e:	2202      	movs	r2, #2
 8017a40:	49c0      	ldr	r1, [pc, #768]	; (8017d44 <dwt_ioctl+0x468>)
 8017a42:	f7fd fc1f 	bl	8015284 <dwt_read8bitoffsetreg>
 8017a46:	2803      	cmp	r0, #3
 8017a48:	d802      	bhi.n	8017a50 <dwt_ioctl+0x174>
 8017a4a:	2500      	movs	r5, #0
 8017a4c:	f001 be4e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017a50:	f7f4 f8ac 	bl	800bbac <decamutexon>
 8017a54:	4604      	mov	r4, r0
 8017a56:	2302      	movs	r3, #2
 8017a58:	9301      	str	r3, [sp, #4]
 8017a5a:	2500      	movs	r5, #0
 8017a5c:	9500      	str	r5, [sp, #0]
 8017a5e:	462b      	mov	r3, r5
 8017a60:	462a      	mov	r2, r5
 8017a62:	4629      	mov	r1, r5
 8017a64:	4630      	mov	r0, r6
 8017a66:	f7fd fb30 	bl	80150ca <dwt_xfer3xxx>
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	f7f4 f8af 	bl	800bbce <decamutexoff>
 8017a70:	f001 be3c 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017a74:	2c00      	cmp	r4, #0
 8017a76:	f001 863d 	beq.w	80196f4 <dwt_ioctl+0x1e18>
 8017a7a:	7824      	ldrb	r4, [r4, #0]
 8017a7c:	f014 0f1d 	tst.w	r4, #29
 8017a80:	d063      	beq.n	8017b4a <dwt_ioctl+0x26e>
 8017a82:	f014 0f01 	tst.w	r4, #1
 8017a86:	d025      	beq.n	8017ad4 <dwt_ioctl+0x1f8>
 8017a88:	f014 0f02 	tst.w	r4, #2
 8017a8c:	f04f 0302 	mov.w	r3, #2
 8017a90:	9301      	str	r3, [sp, #4]
 8017a92:	f04f 0200 	mov.w	r2, #0
 8017a96:	9200      	str	r2, [sp, #0]
 8017a98:	4613      	mov	r3, r2
 8017a9a:	bf14      	ite	ne
 8017a9c:	210d      	movne	r1, #13
 8017a9e:	2103      	moveq	r1, #3
 8017aa0:	f7fd fb13 	bl	80150ca <dwt_xfer3xxx>
 8017aa4:	2203      	movs	r2, #3
 8017aa6:	2144      	movs	r1, #68	; 0x44
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	f7fd fbeb 	bl	8015284 <dwt_read8bitoffsetreg>
 8017aae:	f010 0f08 	tst.w	r0, #8
 8017ab2:	bf08      	it	eq
 8017ab4:	2500      	moveq	r5, #0
 8017ab6:	f001 8619 	beq.w	80196ec <dwt_ioctl+0x1e10>
 8017aba:	2302      	movs	r3, #2
 8017abc:	9301      	str	r3, [sp, #4]
 8017abe:	2100      	movs	r1, #0
 8017ac0:	9100      	str	r1, [sp, #0]
 8017ac2:	460b      	mov	r3, r1
 8017ac4:	460a      	mov	r2, r1
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	f7fd faff 	bl	80150ca <dwt_xfer3xxx>
 8017acc:	f04f 35ff 	mov.w	r5, #4294967295
 8017ad0:	f001 be0c 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017ad4:	f014 0f08 	tst.w	r4, #8
 8017ad8:	d111      	bne.n	8017afe <dwt_ioctl+0x222>
 8017ada:	f014 0f10 	tst.w	r4, #16
 8017ade:	d121      	bne.n	8017b24 <dwt_ioctl+0x248>
 8017ae0:	f014 0f02 	tst.w	r4, #2
 8017ae4:	f04f 0302 	mov.w	r3, #2
 8017ae8:	9301      	str	r3, [sp, #4]
 8017aea:	f04f 0200 	mov.w	r2, #0
 8017aee:	9200      	str	r2, [sp, #0]
 8017af0:	4613      	mov	r3, r2
 8017af2:	bf14      	ite	ne
 8017af4:	2110      	movne	r1, #16
 8017af6:	2109      	moveq	r1, #9
 8017af8:	f7fd fae7 	bl	80150ca <dwt_xfer3xxx>
 8017afc:	e7d2      	b.n	8017aa4 <dwt_ioctl+0x1c8>
 8017afe:	2100      	movs	r1, #0
 8017b00:	f7fe f85f 	bl	8015bc2 <_dwt_adjust_delaytime>
 8017b04:	f014 0f02 	tst.w	r4, #2
 8017b08:	f04f 0302 	mov.w	r3, #2
 8017b0c:	9301      	str	r3, [sp, #4]
 8017b0e:	f04f 0200 	mov.w	r2, #0
 8017b12:	9200      	str	r2, [sp, #0]
 8017b14:	4613      	mov	r3, r2
 8017b16:	bf14      	ite	ne
 8017b18:	210f      	movne	r1, #15
 8017b1a:	2107      	moveq	r1, #7
 8017b1c:	4630      	mov	r0, r6
 8017b1e:	f7fd fad4 	bl	80150ca <dwt_xfer3xxx>
 8017b22:	e7bf      	b.n	8017aa4 <dwt_ioctl+0x1c8>
 8017b24:	2101      	movs	r1, #1
 8017b26:	f7fe f84c 	bl	8015bc2 <_dwt_adjust_delaytime>
 8017b2a:	f014 0f02 	tst.w	r4, #2
 8017b2e:	f04f 0302 	mov.w	r3, #2
 8017b32:	9301      	str	r3, [sp, #4]
 8017b34:	f04f 0200 	mov.w	r2, #0
 8017b38:	9200      	str	r2, [sp, #0]
 8017b3a:	4613      	mov	r3, r2
 8017b3c:	bf14      	ite	ne
 8017b3e:	210e      	movne	r1, #14
 8017b40:	2105      	moveq	r1, #5
 8017b42:	4630      	mov	r0, r6
 8017b44:	f7fd fac1 	bl	80150ca <dwt_xfer3xxx>
 8017b48:	e7ac      	b.n	8017aa4 <dwt_ioctl+0x1c8>
 8017b4a:	f014 0f20 	tst.w	r4, #32
 8017b4e:	d010      	beq.n	8017b72 <dwt_ioctl+0x296>
 8017b50:	f014 0f02 	tst.w	r4, #2
 8017b54:	f04f 0302 	mov.w	r3, #2
 8017b58:	9301      	str	r3, [sp, #4]
 8017b5a:	f04f 0500 	mov.w	r5, #0
 8017b5e:	9500      	str	r5, [sp, #0]
 8017b60:	462b      	mov	r3, r5
 8017b62:	462a      	mov	r2, r5
 8017b64:	bf14      	ite	ne
 8017b66:	2111      	movne	r1, #17
 8017b68:	210b      	moveq	r1, #11
 8017b6a:	f7fd faae 	bl	80150ca <dwt_xfer3xxx>
 8017b6e:	f001 bdbd 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017b72:	f014 0f02 	tst.w	r4, #2
 8017b76:	f04f 0302 	mov.w	r3, #2
 8017b7a:	9301      	str	r3, [sp, #4]
 8017b7c:	f04f 0500 	mov.w	r5, #0
 8017b80:	9500      	str	r5, [sp, #0]
 8017b82:	462b      	mov	r3, r5
 8017b84:	462a      	mov	r2, r5
 8017b86:	bf14      	ite	ne
 8017b88:	210c      	movne	r1, #12
 8017b8a:	2101      	moveq	r1, #1
 8017b8c:	f7fd fa9d 	bl	80150ca <dwt_xfer3xxx>
 8017b90:	f001 bdac 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017b94:	2c00      	cmp	r4, #0
 8017b96:	f001 85af 	beq.w	80196f8 <dwt_ioctl+0x1e1c>
 8017b9a:	6823      	ldr	r3, [r4, #0]
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	2128      	movs	r1, #40	; 0x28
 8017ba0:	f7fd fffa 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017ba4:	2500      	movs	r5, #0
 8017ba6:	f001 bda1 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017baa:	6823      	ldr	r3, [r4, #0]
 8017bac:	2200      	movs	r2, #0
 8017bae:	4966      	ldr	r1, [pc, #408]	; (8017d48 <dwt_ioctl+0x46c>)
 8017bb0:	f7fd fff2 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017bb4:	6863      	ldr	r3, [r4, #4]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	4964      	ldr	r1, [pc, #400]	; (8017d4c <dwt_ioctl+0x470>)
 8017bba:	4630      	mov	r0, r6
 8017bbc:	f7fd ffec 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017bc0:	68a3      	ldr	r3, [r4, #8]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	4962      	ldr	r1, [pc, #392]	; (8017d50 <dwt_ioctl+0x474>)
 8017bc6:	4630      	mov	r0, r6
 8017bc8:	f7fd ffe6 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017bcc:	68e3      	ldr	r3, [r4, #12]
 8017bce:	2200      	movs	r2, #0
 8017bd0:	4960      	ldr	r1, [pc, #384]	; (8017d54 <dwt_ioctl+0x478>)
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	f7fd ffe0 	bl	8015b98 <dwt_write32bitoffsetreg>
 8017bd8:	2500      	movs	r5, #0
 8017bda:	f001 bd87 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017bde:	2c00      	cmp	r4, #0
 8017be0:	f001 858c 	beq.w	80196fc <dwt_ioctl+0x1e20>
 8017be4:	8823      	ldrh	r3, [r4, #0]
 8017be6:	6865      	ldr	r5, [r4, #4]
 8017be8:	2d03      	cmp	r5, #3
 8017bea:	f201 8589 	bhi.w	8019700 <dwt_ioctl+0x1e24>
 8017bee:	e8df f005 	tbb	[pc, r5]
 8017bf2:	0802      	.short	0x0802
 8017bf4:	160f      	.short	0x160f
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	4957      	ldr	r1, [pc, #348]	; (8017d58 <dwt_ioctl+0x47c>)
 8017bfa:	f7fd ff62 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8017bfe:	f001 bd75 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c02:	2202      	movs	r2, #2
 8017c04:	4954      	ldr	r1, [pc, #336]	; (8017d58 <dwt_ioctl+0x47c>)
 8017c06:	f7fd ff5c 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8017c0a:	2500      	movs	r5, #0
 8017c0c:	f001 bd6e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c10:	2200      	movs	r2, #0
 8017c12:	4952      	ldr	r1, [pc, #328]	; (8017d5c <dwt_ioctl+0x480>)
 8017c14:	f7fd ff55 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8017c18:	2500      	movs	r5, #0
 8017c1a:	f001 bd67 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c1e:	2202      	movs	r2, #2
 8017c20:	494e      	ldr	r1, [pc, #312]	; (8017d5c <dwt_ioctl+0x480>)
 8017c22:	f7fd ff4e 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8017c26:	2500      	movs	r5, #0
 8017c28:	f001 bd60 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c2c:	2c00      	cmp	r4, #0
 8017c2e:	f001 8569 	beq.w	8019704 <dwt_ioctl+0x1e28>
 8017c32:	7823      	ldrb	r3, [r4, #0]
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	f003 0306 	and.w	r3, r3, #6
 8017c3a:	9300      	str	r3, [sp, #0]
 8017c3c:	f06f 0306 	mvn.w	r3, #6
 8017c40:	2200      	movs	r2, #0
 8017c42:	4947      	ldr	r1, [pc, #284]	; (8017d60 <dwt_ioctl+0x484>)
 8017c44:	f7fe fcae 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8017c48:	2500      	movs	r5, #0
 8017c4a:	f001 bd4f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c4e:	f7fe fccd 	bl	80165ec <ull_enablegpioclocks>
 8017c52:	2500      	movs	r5, #0
 8017c54:	f001 bd4a 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c58:	2c00      	cmp	r4, #0
 8017c5a:	f001 8555 	beq.w	8019708 <dwt_ioctl+0x1e2c>
 8017c5e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017c60:	7b1b      	ldrb	r3, [r3, #12]
 8017c62:	7023      	strb	r3, [r4, #0]
 8017c64:	2500      	movs	r5, #0
 8017c66:	f001 bd41 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c6a:	2c00      	cmp	r4, #0
 8017c6c:	f001 854e 	beq.w	801970c <dwt_ioctl+0x1e30>
 8017c70:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017c72:	7a5b      	ldrb	r3, [r3, #9]
 8017c74:	7023      	strb	r3, [r4, #0]
 8017c76:	2500      	movs	r5, #0
 8017c78:	f001 bd38 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c7c:	2c00      	cmp	r4, #0
 8017c7e:	f001 8547 	beq.w	8019710 <dwt_ioctl+0x1e34>
 8017c82:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017c84:	7a9b      	ldrb	r3, [r3, #10]
 8017c86:	7023      	strb	r3, [r4, #0]
 8017c88:	2500      	movs	r5, #0
 8017c8a:	f001 bd2f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017c8e:	2c00      	cmp	r4, #0
 8017c90:	f001 8540 	beq.w	8019714 <dwt_ioctl+0x1e38>
 8017c94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	6023      	str	r3, [r4, #0]
 8017c9a:	2500      	movs	r5, #0
 8017c9c:	f001 bd26 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017ca0:	2c00      	cmp	r4, #0
 8017ca2:	f001 8539 	beq.w	8019718 <dwt_ioctl+0x1e3c>
 8017ca6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017ca8:	685b      	ldr	r3, [r3, #4]
 8017caa:	6023      	str	r3, [r4, #0]
 8017cac:	2500      	movs	r5, #0
 8017cae:	f001 bd1d 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017cb2:	f7fe fae1 	bl	8016278 <ull_signal_rx_buff_free>
 8017cb6:	2500      	movs	r5, #0
 8017cb8:	f001 bd18 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017cbc:	2c00      	cmp	r4, #0
 8017cbe:	f001 852d 	beq.w	801971c <dwt_ioctl+0x1e40>
 8017cc2:	6821      	ldr	r1, [r4, #0]
 8017cc4:	f7fd ffa3 	bl	8015c0e <ull_setrxaftertxdelay>
 8017cc8:	2500      	movs	r5, #0
 8017cca:	f001 bd0f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017cce:	2c00      	cmp	r4, #0
 8017cd0:	f001 8526 	beq.w	8019720 <dwt_ioctl+0x1e44>
 8017cd4:	6862      	ldr	r2, [r4, #4]
 8017cd6:	7821      	ldrb	r1, [r4, #0]
 8017cd8:	f7fe fde8 	bl	80168ac <ull_enablespicrccheck>
 8017cdc:	2500      	movs	r5, #0
 8017cde:	f001 bd05 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017ce2:	2c00      	cmp	r4, #0
 8017ce4:	f001 851e 	beq.w	8019724 <dwt_ioctl+0x1e48>
 8017ce8:	6865      	ldr	r5, [r4, #4]
 8017cea:	7823      	ldrb	r3, [r4, #0]
 8017cec:	2203      	movs	r2, #3
 8017cee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8017cf2:	f7fe f935 	bl	8015f60 <dwt_write8bitoffsetreg>
 8017cf6:	b94d      	cbnz	r5, 8017d0c <dwt_ioctl+0x430>
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	9200      	str	r2, [sp, #0]
 8017cfc:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8017d00:	2110      	movs	r1, #16
 8017d02:	4630      	mov	r0, r6
 8017d04:	f7ff f94e 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017d08:	f001 bcf0 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017d0c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8017d10:	9300      	str	r3, [sp, #0]
 8017d12:	f04f 33ff 	mov.w	r3, #4294967295
 8017d16:	2200      	movs	r2, #0
 8017d18:	2110      	movs	r1, #16
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f7fe fc42 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8017d20:	2500      	movs	r5, #0
 8017d22:	f001 bce3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017d26:	2200      	movs	r2, #0
 8017d28:	4611      	mov	r1, r2
 8017d2a:	f7fd fa56 	bl	80151da <dwt_read32bitoffsetreg>
 8017d2e:	68b2      	ldr	r2, [r6, #8]
 8017d30:	6813      	ldr	r3, [r2, #0]
 8017d32:	4043      	eors	r3, r0
 8017d34:	6852      	ldr	r2, [r2, #4]
 8017d36:	4213      	tst	r3, r2
 8017d38:	bf14      	ite	ne
 8017d3a:	f04f 35ff 	movne.w	r5, #4294967295
 8017d3e:	2500      	moveq	r5, #0
 8017d40:	f001 bcd4 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017d44:	000f0030 	.word	0x000f0030
 8017d48:	00010054 	.word	0x00010054
 8017d4c:	00010058 	.word	0x00010058
 8017d50:	0001005c 	.word	0x0001005c
 8017d54:	00010060 	.word	0x00010060
 8017d58:	0001000c 	.word	0x0001000c
 8017d5c:	00010010 	.word	0x00010010
 8017d60:	00010008 	.word	0x00010008
 8017d64:	2c00      	cmp	r4, #0
 8017d66:	f001 84df 	beq.w	8019728 <dwt_ioctl+0x1e4c>
 8017d6a:	7821      	ldrb	r1, [r4, #0]
 8017d6c:	f7fe fdba 	bl	80168e4 <ull_configciadiag>
 8017d70:	2500      	movs	r5, #0
 8017d72:	f001 bcbb 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017d76:	b942      	cbnz	r2, 8017d8a <dwt_ioctl+0x4ae>
 8017d78:	2200      	movs	r2, #0
 8017d7a:	9200      	str	r2, [sp, #0]
 8017d7c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8017d80:	49d2      	ldr	r1, [pc, #840]	; (80180cc <dwt_ioctl+0x7f0>)
 8017d82:	f7ff f90f 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017d86:	f001 bcb1 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017d8e:	9300      	str	r3, [sp, #0]
 8017d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d94:	2200      	movs	r2, #0
 8017d96:	49cd      	ldr	r1, [pc, #820]	; (80180cc <dwt_ioctl+0x7f0>)
 8017d98:	f7ff f904 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017d9c:	2500      	movs	r5, #0
 8017d9e:	f001 bca5 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017da2:	f002 0201 	and.w	r2, r2, #1
 8017da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017daa:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8017dae:	2a00      	cmp	r2, #0
 8017db0:	bf08      	it	eq
 8017db2:	460b      	moveq	r3, r1
 8017db4:	02d2      	lsls	r2, r2, #11
 8017db6:	f015 0f02 	tst.w	r5, #2
 8017dba:	bf12      	itee	ne
 8017dbc:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8017dc0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017dc4:	b29b      	uxtheq	r3, r3
 8017dc6:	9200      	str	r2, [sp, #0]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	49c0      	ldr	r1, [pc, #768]	; (80180cc <dwt_ioctl+0x7f0>)
 8017dcc:	f7ff f8ea 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8017dd0:	2500      	movs	r5, #0
 8017dd2:	f001 bc8b 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017dd6:	4611      	mov	r1, r2
 8017dd8:	f7fd ff2e 	bl	8015c38 <ull_setfinegraintxseq>
 8017ddc:	2500      	movs	r5, #0
 8017dde:	f001 bc85 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017de2:	4611      	mov	r1, r2
 8017de4:	f7fd ff3c 	bl	8015c60 <ull_setlnapamode>
 8017de8:	2500      	movs	r5, #0
 8017dea:	f001 bc7f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017dee:	2c00      	cmp	r4, #0
 8017df0:	f001 849c 	beq.w	801972c <dwt_ioctl+0x1e50>
 8017df4:	2200      	movs	r2, #0
 8017df6:	49b6      	ldr	r1, [pc, #728]	; (80180d0 <dwt_ioctl+0x7f4>)
 8017df8:	f7fd fa44 	bl	8015284 <dwt_read8bitoffsetreg>
 8017dfc:	7020      	strb	r0, [r4, #0]
 8017dfe:	2500      	movs	r5, #0
 8017e00:	f001 bc74 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e04:	4621      	mov	r1, r4
 8017e06:	f7fd ff4b 	bl	8015ca0 <ull_configurestskey>
 8017e0a:	2500      	movs	r5, #0
 8017e0c:	f001 bc6e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e10:	4621      	mov	r1, r4
 8017e12:	f7fd ff69 	bl	8015ce8 <ull_configurestsiv>
 8017e16:	2500      	movs	r5, #0
 8017e18:	f001 bc68 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e1c:	f7fe fd98 	bl	8016950 <ull_configurestsloadiv>
 8017e20:	2500      	movs	r5, #0
 8017e22:	f001 bc63 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e26:	4611      	mov	r1, r2
 8017e28:	f7fd ff82 	bl	8015d30 <ull_configmrxlut>
 8017e2c:	2500      	movs	r5, #0
 8017e2e:	f001 bc5d 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e32:	f7fe feb3 	bl	8016b9c <ull_restoreconfig>
 8017e36:	2500      	movs	r5, #0
 8017e38:	f001 bc58 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e3c:	2c00      	cmp	r4, #0
 8017e3e:	f001 8477 	beq.w	8019730 <dwt_ioctl+0x1e54>
 8017e42:	7821      	ldrb	r1, [r4, #0]
 8017e44:	f7ff f8c8 	bl	8016fd8 <ull_configurestsmode>
 8017e48:	2500      	movs	r5, #0
 8017e4a:	f001 bc4f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e4e:	2c00      	cmp	r4, #0
 8017e50:	f001 8470 	beq.w	8019734 <dwt_ioctl+0x1e58>
 8017e54:	8821      	ldrh	r1, [r4, #0]
 8017e56:	f7fd fe44 	bl	8015ae2 <ull_setrxantennadelay>
 8017e5a:	2500      	movs	r5, #0
 8017e5c:	f001 bc46 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e60:	2c00      	cmp	r4, #0
 8017e62:	f001 8469 	beq.w	8019738 <dwt_ioctl+0x1e5c>
 8017e66:	f7fd f9e0 	bl	801522a <ull_getrxantennadelay>
 8017e6a:	8020      	strh	r0, [r4, #0]
 8017e6c:	2500      	movs	r5, #0
 8017e6e:	f001 bc3d 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e72:	2c00      	cmp	r4, #0
 8017e74:	f001 8462 	beq.w	801973c <dwt_ioctl+0x1e60>
 8017e78:	8821      	ldrh	r1, [r4, #0]
 8017e7a:	f7fd fe3a 	bl	8015af2 <ull_settxantennadelay>
 8017e7e:	2500      	movs	r5, #0
 8017e80:	f001 bc34 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e84:	2c00      	cmp	r4, #0
 8017e86:	f001 845b 	beq.w	8019740 <dwt_ioctl+0x1e64>
 8017e8a:	f7fd f9d5 	bl	8015238 <ull_gettxantennadelay>
 8017e8e:	8020      	strh	r0, [r4, #0]
 8017e90:	2500      	movs	r5, #0
 8017e92:	f001 bc2b 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017e96:	2c00      	cmp	r4, #0
 8017e98:	f001 8454 	beq.w	8019744 <dwt_ioctl+0x1e68>
 8017e9c:	88a3      	ldrh	r3, [r4, #4]
 8017e9e:	88e2      	ldrh	r2, [r4, #6]
 8017ea0:	6821      	ldr	r1, [r4, #0]
 8017ea2:	9100      	str	r1, [sp, #0]
 8017ea4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8017ea8:	f7fd fe00 	bl	8015aac <dwt_writetodevice>
 8017eac:	2500      	movs	r5, #0
 8017eae:	f001 bc1d 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017eb2:	2c00      	cmp	r4, #0
 8017eb4:	f001 8448 	beq.w	8019748 <dwt_ioctl+0x1e6c>
 8017eb8:	88a3      	ldrh	r3, [r4, #4]
 8017eba:	88e2      	ldrh	r2, [r4, #6]
 8017ebc:	6821      	ldr	r1, [r4, #0]
 8017ebe:	9100      	str	r1, [sp, #0]
 8017ec0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8017ec4:	f7fd f97f 	bl	80151c6 <dwt_readfromdevice>
 8017ec8:	2500      	movs	r5, #0
 8017eca:	f001 bc0f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017ece:	2c00      	cmp	r4, #0
 8017ed0:	f001 843c 	beq.w	801974c <dwt_ioctl+0x1e70>
 8017ed4:	88e3      	ldrh	r3, [r4, #6]
 8017ed6:	88a2      	ldrh	r2, [r4, #4]
 8017ed8:	6821      	ldr	r1, [r4, #0]
 8017eda:	f7fe f80b 	bl	8015ef4 <ull_readrxdata>
 8017ede:	2500      	movs	r5, #0
 8017ee0:	f001 bc04 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017ee4:	2c00      	cmp	r4, #0
 8017ee6:	f001 8433 	beq.w	8019750 <dwt_ioctl+0x1e74>
 8017eea:	88e3      	ldrh	r3, [r4, #6]
 8017eec:	6822      	ldr	r2, [r4, #0]
 8017eee:	88a1      	ldrh	r1, [r4, #4]
 8017ef0:	f7fe f990 	bl	8016214 <ull_writetxdata>
 8017ef4:	2500      	movs	r5, #0
 8017ef6:	f001 bbf9 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017efa:	4611      	mov	r1, r2
 8017efc:	f7ff fc56 	bl	80177ac <ull_rxenable>
 8017f00:	2500      	movs	r5, #0
 8017f02:	f001 bbf3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f06:	2c00      	cmp	r4, #0
 8017f08:	f001 8424 	beq.w	8019754 <dwt_ioctl+0x1e78>
 8017f0c:	7923      	ldrb	r3, [r4, #4]
 8017f0e:	8862      	ldrh	r2, [r4, #2]
 8017f10:	8821      	ldrh	r1, [r4, #0]
 8017f12:	f7fe fc97 	bl	8016844 <ull_writetxfctrl>
 8017f16:	2500      	movs	r5, #0
 8017f18:	f001 bbe8 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f1c:	2c00      	cmp	r4, #0
 8017f1e:	f001 841b 	beq.w	8019758 <dwt_ioctl+0x1e7c>
 8017f22:	f7fd f98f 	bl	8015244 <ull_readclockoffset>
 8017f26:	8020      	strh	r0, [r4, #0]
 8017f28:	2500      	movs	r5, #0
 8017f2a:	f001 bbdf 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f2e:	2c00      	cmp	r4, #0
 8017f30:	f001 8414 	beq.w	801975c <dwt_ioctl+0x1e80>
 8017f34:	f7fd f9b4 	bl	80152a0 <ull_readcarrierintegrator>
 8017f38:	6020      	str	r0, [r4, #0]
 8017f3a:	2500      	movs	r5, #0
 8017f3c:	f001 bbd6 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f40:	f7fe f866 	bl	8016010 <ull_clearaonconfig>
 8017f44:	2500      	movs	r5, #0
 8017f46:	f001 bbd1 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f4a:	2c00      	cmp	r4, #0
 8017f4c:	f001 8408 	beq.w	8019760 <dwt_ioctl+0x1e84>
 8017f50:	8861      	ldrh	r1, [r4, #2]
 8017f52:	f7fe fe53 	bl	8016bfc <ull_calcbandwidthadj>
 8017f56:	7020      	strb	r0, [r4, #0]
 8017f58:	2500      	movs	r5, #0
 8017f5a:	f001 bbc7 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f5e:	4621      	mov	r1, r4
 8017f60:	f7fd f9be 	bl	80152e0 <ull_readdiagnostics>
 8017f64:	2500      	movs	r5, #0
 8017f66:	f001 bbc1 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f6a:	2c00      	cmp	r4, #0
 8017f6c:	f001 83fa 	beq.w	8019764 <dwt_ioctl+0x1e88>
 8017f70:	2201      	movs	r2, #1
 8017f72:	2170      	movs	r1, #112	; 0x70
 8017f74:	f7fd f931 	bl	80151da <dwt_read32bitoffsetreg>
 8017f78:	6020      	str	r0, [r4, #0]
 8017f7a:	2500      	movs	r5, #0
 8017f7c:	f001 bbb6 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f80:	2c00      	cmp	r4, #0
 8017f82:	f001 83f1 	beq.w	8019768 <dwt_ioctl+0x1e8c>
 8017f86:	2200      	movs	r2, #0
 8017f88:	2170      	movs	r1, #112	; 0x70
 8017f8a:	f7fd f926 	bl	80151da <dwt_read32bitoffsetreg>
 8017f8e:	6020      	str	r0, [r4, #0]
 8017f90:	2500      	movs	r5, #0
 8017f92:	f001 bbab 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017f96:	9400      	str	r4, [sp, #0]
 8017f98:	2305      	movs	r3, #5
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	2170      	movs	r1, #112	; 0x70
 8017f9e:	f7fd f912 	bl	80151c6 <dwt_readfromdevice>
 8017fa2:	2500      	movs	r5, #0
 8017fa4:	f001 bba2 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017fa8:	2c00      	cmp	r4, #0
 8017faa:	f001 83df 	beq.w	801976c <dwt_ioctl+0x1e90>
 8017fae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017fb0:	7b9b      	ldrb	r3, [r3, #14]
 8017fb2:	2b01      	cmp	r3, #1
 8017fb4:	d015      	beq.n	8017fe2 <dwt_ioctl+0x706>
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d11a      	bne.n	8017ff0 <dwt_ioctl+0x714>
 8017fba:	2216      	movs	r2, #22
 8017fbc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8017fc0:	f7fd f921 	bl	8015206 <dwt_read16bitoffsetreg>
 8017fc4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8017fc8:	b283      	uxth	r3, r0
 8017fca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8017fce:	d004      	beq.n	8017fda <dwt_ioctl+0x6fe>
 8017fd0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8017fd4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8017fd8:	b218      	sxth	r0, r3
 8017fda:	8020      	strh	r0, [r4, #0]
 8017fdc:	2500      	movs	r5, #0
 8017fde:	f001 bb85 	b.w	80196ec <dwt_ioctl+0x1e10>
 8017fe2:	2202      	movs	r2, #2
 8017fe4:	493b      	ldr	r1, [pc, #236]	; (80180d4 <dwt_ioctl+0x7f8>)
 8017fe6:	f7fd f90e 	bl	8015206 <dwt_read16bitoffsetreg>
 8017fea:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8017fee:	e7eb      	b.n	8017fc8 <dwt_ioctl+0x6ec>
 8017ff0:	2202      	movs	r2, #2
 8017ff2:	4939      	ldr	r1, [pc, #228]	; (80180d8 <dwt_ioctl+0x7fc>)
 8017ff4:	f7fd f907 	bl	8015206 <dwt_read16bitoffsetreg>
 8017ff8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8017ffc:	e7e4      	b.n	8017fc8 <dwt_ioctl+0x6ec>
 8017ffe:	9400      	str	r4, [sp, #0]
 8018000:	2306      	movs	r3, #6
 8018002:	2200      	movs	r2, #0
 8018004:	4935      	ldr	r1, [pc, #212]	; (80180dc <dwt_ioctl+0x800>)
 8018006:	f7fd f8de 	bl	80151c6 <dwt_readfromdevice>
 801800a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801800e:	2b00      	cmp	r3, #0
 8018010:	db06      	blt.n	8018020 <dwt_ioctl+0x744>
 8018012:	7963      	ldrb	r3, [r4, #5]
 8018014:	f003 0301 	and.w	r3, r3, #1
 8018018:	7163      	strb	r3, [r4, #5]
 801801a:	2500      	movs	r5, #0
 801801c:	f001 bb66 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018020:	23ff      	movs	r3, #255	; 0xff
 8018022:	70a3      	strb	r3, [r4, #2]
 8018024:	70e3      	strb	r3, [r4, #3]
 8018026:	7123      	strb	r3, [r4, #4]
 8018028:	7163      	strb	r3, [r4, #5]
 801802a:	e7f2      	b.n	8018012 <dwt_ioctl+0x736>
 801802c:	2c00      	cmp	r4, #0
 801802e:	f001 839f 	beq.w	8019770 <dwt_ioctl+0x1e94>
 8018032:	2201      	movs	r2, #1
 8018034:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8018038:	f7fd f924 	bl	8015284 <dwt_read8bitoffsetreg>
 801803c:	7020      	strb	r0, [r4, #0]
 801803e:	2500      	movs	r5, #0
 8018040:	f001 bb54 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018044:	2c00      	cmp	r4, #0
 8018046:	f001 8395 	beq.w	8019774 <dwt_ioctl+0x1e98>
 801804a:	2200      	movs	r2, #0
 801804c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8018050:	f7fd f918 	bl	8015284 <dwt_read8bitoffsetreg>
 8018054:	7020      	strb	r0, [r4, #0]
 8018056:	2500      	movs	r5, #0
 8018058:	f001 bb48 	b.w	80196ec <dwt_ioctl+0x1e10>
 801805c:	2c00      	cmp	r4, #0
 801805e:	f001 838b 	beq.w	8019778 <dwt_ioctl+0x1e9c>
 8018062:	88a2      	ldrh	r2, [r4, #4]
 8018064:	6821      	ldr	r1, [r4, #0]
 8018066:	f7fe fb17 	bl	8016698 <_dwt_otpprogword32>
 801806a:	2500      	movs	r5, #0
 801806c:	f001 bb3e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018070:	2c00      	cmp	r4, #0
 8018072:	f001 8383 	beq.w	801977c <dwt_ioctl+0x1ea0>
 8018076:	6825      	ldr	r5, [r4, #0]
 8018078:	88a4      	ldrh	r4, [r4, #4]
 801807a:	4622      	mov	r2, r4
 801807c:	4629      	mov	r1, r5
 801807e:	f7fe fb0b 	bl	8016698 <_dwt_otpprogword32>
 8018082:	4621      	mov	r1, r4
 8018084:	4630      	mov	r0, r6
 8018086:	f7fd fd65 	bl	8015b54 <_dwt_otpread>
 801808a:	1a2d      	subs	r5, r5, r0
 801808c:	bf18      	it	ne
 801808e:	f04f 35ff 	movne.w	r5, #4294967295
 8018092:	f001 bb2b 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018096:	2a02      	cmp	r2, #2
 8018098:	d00f      	beq.n	80180ba <dwt_ioctl+0x7de>
 801809a:	4c11      	ldr	r4, [pc, #68]	; (80180e0 <dwt_ioctl+0x804>)
 801809c:	2300      	movs	r3, #0
 801809e:	461a      	mov	r2, r3
 80180a0:	4621      	mov	r1, r4
 80180a2:	4630      	mov	r0, r6
 80180a4:	f7fd ff5c 	bl	8015f60 <dwt_write8bitoffsetreg>
 80180a8:	2302      	movs	r3, #2
 80180aa:	2200      	movs	r2, #0
 80180ac:	4621      	mov	r1, r4
 80180ae:	4630      	mov	r0, r6
 80180b0:	f7fd ff56 	bl	8015f60 <dwt_write8bitoffsetreg>
 80180b4:	2500      	movs	r5, #0
 80180b6:	f001 bb19 	b.w	80196ec <dwt_ioctl+0x1e10>
 80180ba:	2300      	movs	r3, #0
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	23fe      	movs	r3, #254	; 0xfe
 80180c0:	2201      	movs	r2, #1
 80180c2:	4902      	ldr	r1, [pc, #8]	; (80180cc <dwt_ioctl+0x7f0>)
 80180c4:	f7fe fbde 	bl	8016884 <dwt_modify8bitoffsetreg>
 80180c8:	e7e7      	b.n	801809a <dwt_ioctl+0x7be>
 80180ca:	bf00      	nop
 80180cc:	00110008 	.word	0x00110008
 80180d0:	0007001c 	.word	0x0007001c
 80180d4:	00180014 	.word	0x00180014
 80180d8:	000c001c 	.word	0x000c001c
 80180dc:	000c0018 	.word	0x000c0018
 80180e0:	000a0004 	.word	0x000a0004
 80180e4:	2c00      	cmp	r4, #0
 80180e6:	f001 834b 	beq.w	8019780 <dwt_ioctl+0x1ea4>
 80180ea:	8824      	ldrh	r4, [r4, #0]
 80180ec:	b2e2      	uxtb	r2, r4
 80180ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 80180f2:	f7fd ffe1 	bl	80160b8 <ull_aon_write>
 80180f6:	0a22      	lsrs	r2, r4, #8
 80180f8:	f240 1103 	movw	r1, #259	; 0x103
 80180fc:	4630      	mov	r0, r6
 80180fe:	f7fd ffdb 	bl	80160b8 <ull_aon_write>
 8018102:	2500      	movs	r5, #0
 8018104:	f001 baf2 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018108:	2c00      	cmp	r4, #0
 801810a:	f001 833b 	beq.w	8019784 <dwt_ioctl+0x1ea8>
 801810e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8018480 <dwt_ioctl+0xba4>
 8018112:	2310      	movs	r3, #16
 8018114:	9300      	str	r3, [sp, #0]
 8018116:	23ff      	movs	r3, #255	; 0xff
 8018118:	2200      	movs	r2, #0
 801811a:	4641      	mov	r1, r8
 801811c:	f7fe fbb2 	bl	8016884 <dwt_modify8bitoffsetreg>
 8018120:	f44f 7182 	mov.w	r1, #260	; 0x104
 8018124:	4630      	mov	r0, r6
 8018126:	f7fd ffa7 	bl	8016078 <ull_aon_read>
 801812a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 801812e:	462a      	mov	r2, r5
 8018130:	f44f 7182 	mov.w	r1, #260	; 0x104
 8018134:	4630      	mov	r0, r6
 8018136:	f7fd ffbf 	bl	80160b8 <ull_aon_write>
 801813a:	f045 0204 	orr.w	r2, r5, #4
 801813e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8018142:	4630      	mov	r0, r6
 8018144:	f7fd ffb8 	bl	80160b8 <ull_aon_write>
 8018148:	2002      	movs	r0, #2
 801814a:	f7f3 fd4d 	bl	800bbe8 <deca_sleep>
 801814e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8018152:	4630      	mov	r0, r6
 8018154:	f7fd ff90 	bl	8016078 <ull_aon_read>
 8018158:	4607      	mov	r7, r0
 801815a:	f240 110f 	movw	r1, #271	; 0x10f
 801815e:	4630      	mov	r0, r6
 8018160:	f7fd ff8a 	bl	8016078 <ull_aon_read>
 8018164:	4681      	mov	r9, r0
 8018166:	462a      	mov	r2, r5
 8018168:	f44f 7182 	mov.w	r1, #260	; 0x104
 801816c:	4630      	mov	r0, r6
 801816e:	f7fd ffa3 	bl	80160b8 <ull_aon_write>
 8018172:	2500      	movs	r5, #0
 8018174:	9500      	str	r5, [sp, #0]
 8018176:	23ef      	movs	r3, #239	; 0xef
 8018178:	462a      	mov	r2, r5
 801817a:	4641      	mov	r1, r8
 801817c:	4630      	mov	r0, r6
 801817e:	f7fe fb81 	bl	8016884 <dwt_modify8bitoffsetreg>
 8018182:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8018186:	8027      	strh	r7, [r4, #0]
 8018188:	f001 bab0 	b.w	80196ec <dwt_ioctl+0x1e10>
 801818c:	2c00      	cmp	r4, #0
 801818e:	f001 82fb 	beq.w	8019788 <dwt_ioctl+0x1eac>
 8018192:	78a2      	ldrb	r2, [r4, #2]
 8018194:	8821      	ldrh	r1, [r4, #0]
 8018196:	f7fd ffb7 	bl	8016108 <ull_configuresleep>
 801819a:	2500      	movs	r5, #0
 801819c:	f001 baa6 	b.w	80196ec <dwt_ioctl+0x1e10>
 80181a0:	2c00      	cmp	r4, #0
 80181a2:	f001 82f3 	beq.w	801978c <dwt_ioctl+0x1eb0>
 80181a6:	6824      	ldr	r4, [r4, #0]
 80181a8:	f7fd ff32 	bl	8016010 <ull_clearaonconfig>
 80181ac:	2001      	movs	r0, #1
 80181ae:	f7f3 fd1b 	bl	800bbe8 <deca_sleep>
 80181b2:	2303      	movs	r3, #3
 80181b4:	9300      	str	r3, [sp, #0]
 80181b6:	23ff      	movs	r3, #255	; 0xff
 80181b8:	2200      	movs	r2, #0
 80181ba:	49af      	ldr	r1, [pc, #700]	; (8018478 <dwt_ioctl+0xb9c>)
 80181bc:	4630      	mov	r0, r6
 80181be:	f7fe fb61 	bl	8016884 <dwt_modify8bitoffsetreg>
 80181c2:	b97c      	cbnz	r4, 80181e4 <dwt_ioctl+0x908>
 80181c4:	4630      	mov	r0, r6
 80181c6:	f7ff fb61 	bl	801788c <ull_softreset_no_sema_fcmd>
 80181ca:	2001      	movs	r0, #1
 80181cc:	f7f3 fd0c 	bl	800bbe8 <deca_sleep>
 80181d0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80181d2:	2500      	movs	r5, #0
 80181d4:	739d      	strb	r5, [r3, #14]
 80181d6:	2202      	movs	r2, #2
 80181d8:	821a      	strh	r2, [r3, #16]
 80181da:	751d      	strb	r5, [r3, #20]
 80181dc:	755d      	strb	r5, [r3, #21]
 80181de:	73dd      	strb	r5, [r3, #15]
 80181e0:	f001 ba84 	b.w	80196ec <dwt_ioctl+0x1e10>
 80181e4:	4630      	mov	r0, r6
 80181e6:	f7ff fb65 	bl	80178b4 <ull_softreset_fcmd>
 80181ea:	e7ee      	b.n	80181ca <dwt_ioctl+0x8ee>
 80181ec:	2c00      	cmp	r4, #0
 80181ee:	f001 82cf 	beq.w	8019790 <dwt_ioctl+0x1eb4>
 80181f2:	7823      	ldrb	r3, [r4, #0]
 80181f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80181f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80181fa:	7353      	strb	r3, [r2, #13]
 80181fc:	2200      	movs	r2, #0
 80181fe:	499f      	ldr	r1, [pc, #636]	; (801847c <dwt_ioctl+0xba0>)
 8018200:	f7fd feae 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018204:	2500      	movs	r5, #0
 8018206:	f001 ba71 	b.w	80196ec <dwt_ioctl+0x1e10>
 801820a:	2c00      	cmp	r4, #0
 801820c:	f001 82c2 	beq.w	8019794 <dwt_ioctl+0x1eb8>
 8018210:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8018212:	7b5b      	ldrb	r3, [r3, #13]
 8018214:	7023      	strb	r3, [r4, #0]
 8018216:	2500      	movs	r5, #0
 8018218:	f001 ba68 	b.w	80196ec <dwt_ioctl+0x1e10>
 801821c:	2101      	movs	r1, #1
 801821e:	f7fe f9f5 	bl	801660c <ull_enable_rf_tx>
 8018222:	4630      	mov	r0, r6
 8018224:	f7fe fa26 	bl	8016674 <ull_enable_rftx_blocks>
 8018228:	2101      	movs	r1, #1
 801822a:	4630      	mov	r0, r6
 801822c:	f7fd fc68 	bl	8015b00 <ull_force_clocks>
 8018230:	220f      	movs	r2, #15
 8018232:	2101      	movs	r1, #1
 8018234:	4630      	mov	r0, r6
 8018236:	f7fd fe39 	bl	8015eac <ull_repeated_cw>
 801823a:	2500      	movs	r5, #0
 801823c:	f001 ba56 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018240:	2c00      	cmp	r4, #0
 8018242:	f001 82a9 	beq.w	8019798 <dwt_ioctl+0x1ebc>
 8018246:	6862      	ldr	r2, [r4, #4]
 8018248:	6821      	ldr	r1, [r4, #0]
 801824a:	f7fd fe2f 	bl	8015eac <ull_repeated_cw>
 801824e:	2500      	movs	r5, #0
 8018250:	f001 ba4c 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018254:	2c00      	cmp	r4, #0
 8018256:	f001 82a1 	beq.w	801979c <dwt_ioctl+0x1ec0>
 801825a:	4d89      	ldr	r5, [pc, #548]	; (8018480 <dwt_ioctl+0xba4>)
 801825c:	2200      	movs	r2, #0
 801825e:	4629      	mov	r1, r5
 8018260:	f7fd f810 	bl	8015284 <dwt_read8bitoffsetreg>
 8018264:	4680      	mov	r8, r0
 8018266:	2302      	movs	r3, #2
 8018268:	9300      	str	r3, [sp, #0]
 801826a:	23ff      	movs	r3, #255	; 0xff
 801826c:	2200      	movs	r2, #0
 801826e:	4629      	mov	r1, r5
 8018270:	4630      	mov	r0, r6
 8018272:	f7fe fb07 	bl	8016884 <dwt_modify8bitoffsetreg>
 8018276:	2304      	movs	r3, #4
 8018278:	2200      	movs	r2, #0
 801827a:	4982      	ldr	r1, [pc, #520]	; (8018484 <dwt_ioctl+0xba8>)
 801827c:	4630      	mov	r0, r6
 801827e:	f7fd fe6f 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018282:	2301      	movs	r3, #1
 8018284:	2200      	movs	r2, #0
 8018286:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801828a:	4630      	mov	r0, r6
 801828c:	f7fd fe68 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018290:	4f7d      	ldr	r7, [pc, #500]	; (8018488 <dwt_ioctl+0xbac>)
 8018292:	2500      	movs	r5, #0
 8018294:	462a      	mov	r2, r5
 8018296:	4639      	mov	r1, r7
 8018298:	4630      	mov	r0, r6
 801829a:	f7fc fff3 	bl	8015284 <dwt_read8bitoffsetreg>
 801829e:	f010 0f01 	tst.w	r0, #1
 80182a2:	d0f7      	beq.n	8018294 <dwt_ioctl+0x9b8>
 80182a4:	2200      	movs	r2, #0
 80182a6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80182aa:	4630      	mov	r0, r6
 80182ac:	f7fc ffab 	bl	8015206 <dwt_read16bitoffsetreg>
 80182b0:	4605      	mov	r5, r0
 80182b2:	2300      	movs	r3, #0
 80182b4:	461a      	mov	r2, r3
 80182b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80182ba:	4630      	mov	r0, r6
 80182bc:	f7fd fe50 	bl	8015f60 <dwt_write8bitoffsetreg>
 80182c0:	2300      	movs	r3, #0
 80182c2:	461a      	mov	r2, r3
 80182c4:	496f      	ldr	r1, [pc, #444]	; (8018484 <dwt_ioctl+0xba8>)
 80182c6:	4630      	mov	r0, r6
 80182c8:	f7fd fe4a 	bl	8015f60 <dwt_write8bitoffsetreg>
 80182cc:	4643      	mov	r3, r8
 80182ce:	2200      	movs	r2, #0
 80182d0:	496b      	ldr	r1, [pc, #428]	; (8018480 <dwt_ioctl+0xba4>)
 80182d2:	4630      	mov	r0, r6
 80182d4:	f7fd fe44 	bl	8015f60 <dwt_write8bitoffsetreg>
 80182d8:	8025      	strh	r5, [r4, #0]
 80182da:	2500      	movs	r5, #0
 80182dc:	f001 ba06 	b.w	80196ec <dwt_ioctl+0x1e10>
 80182e0:	2c00      	cmp	r4, #0
 80182e2:	f001 825d 	beq.w	80197a0 <dwt_ioctl+0x1ec4>
 80182e6:	7923      	ldrb	r3, [r4, #4]
 80182e8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80182ea:	7a92      	ldrb	r2, [r2, #10]
 80182ec:	1a9b      	subs	r3, r3, r2
 80182ee:	ee07 3a90 	vmov	s15, r3
 80182f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801848c <dwt_ioctl+0xbb0>
 80182fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80182fe:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8018302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018306:	edc4 7a00 	vstr	s15, [r4]
 801830a:	2500      	movs	r5, #0
 801830c:	f001 b9ee 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018310:	2c00      	cmp	r4, #0
 8018312:	f001 8247 	beq.w	80197a4 <dwt_ioctl+0x1ec8>
 8018316:	7923      	ldrb	r3, [r4, #4]
 8018318:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801831a:	7a52      	ldrb	r2, [r2, #9]
 801831c:	1a9b      	subs	r3, r3, r2
 801831e:	ee07 3a90 	vmov	s15, r3
 8018322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018326:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8018490 <dwt_ioctl+0xbb4>
 801832a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801832e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8018332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018336:	eddf 6a57 	vldr	s13, [pc, #348]	; 8018494 <dwt_ioctl+0xbb8>
 801833a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801833e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8018342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018346:	edc4 7a00 	vstr	s15, [r4]
 801834a:	2500      	movs	r5, #0
 801834c:	f001 b9ce 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018350:	2c00      	cmp	r4, #0
 8018352:	f001 8229 	beq.w	80197a8 <dwt_ioctl+0x1ecc>
 8018356:	6824      	ldr	r4, [r4, #0]
 8018358:	2101      	movs	r1, #1
 801835a:	f7fe f957 	bl	801660c <ull_enable_rf_tx>
 801835e:	4630      	mov	r0, r6
 8018360:	f7fe f988 	bl	8016674 <ull_enable_rftx_blocks>
 8018364:	2101      	movs	r1, #1
 8018366:	4630      	mov	r0, r6
 8018368:	f7fd fbca 	bl	8015b00 <ull_force_clocks>
 801836c:	4621      	mov	r1, r4
 801836e:	4630      	mov	r0, r6
 8018370:	f7fe fca0 	bl	8016cb4 <ull_repeated_frames>
 8018374:	2500      	movs	r5, #0
 8018376:	f001 b9b9 	b.w	80196ec <dwt_ioctl+0x1e10>
 801837a:	2500      	movs	r5, #0
 801837c:	9500      	str	r5, [sp, #0]
 801837e:	23ef      	movs	r3, #239	; 0xef
 8018380:	462a      	mov	r2, r5
 8018382:	4945      	ldr	r1, [pc, #276]	; (8018498 <dwt_ioctl+0xbbc>)
 8018384:	f7fe fa7e 	bl	8016884 <dwt_modify8bitoffsetreg>
 8018388:	2105      	movs	r1, #5
 801838a:	4630      	mov	r0, r6
 801838c:	f7fd fbb8 	bl	8015b00 <ull_force_clocks>
 8018390:	2101      	movs	r1, #1
 8018392:	4630      	mov	r0, r6
 8018394:	f7fd fd6c 	bl	8015e70 <ull_disable_rf_tx>
 8018398:	4630      	mov	r0, r6
 801839a:	f7fd fd5f 	bl	8015e5c <ull_disable_rftx_blocks>
 801839e:	f001 b9a5 	b.w	80196ec <dwt_ioctl+0x1e10>
 80183a2:	2500      	movs	r5, #0
 80183a4:	9500      	str	r5, [sp, #0]
 80183a6:	23ef      	movs	r3, #239	; 0xef
 80183a8:	462a      	mov	r2, r5
 80183aa:	493b      	ldr	r1, [pc, #236]	; (8018498 <dwt_ioctl+0xbbc>)
 80183ac:	f7fe fa6a 	bl	8016884 <dwt_modify8bitoffsetreg>
 80183b0:	f001 b99c 	b.w	80196ec <dwt_ioctl+0x1e10>
 80183b4:	2c00      	cmp	r4, #0
 80183b6:	f001 81f9 	beq.w	80197ac <dwt_ioctl+0x1ed0>
 80183ba:	6821      	ldr	r1, [r4, #0]
 80183bc:	f7fe fc7a 	bl	8016cb4 <ull_repeated_frames>
 80183c0:	2500      	movs	r5, #0
 80183c2:	f001 b993 	b.w	80196ec <dwt_ioctl+0x1e10>
 80183c6:	2200      	movs	r2, #0
 80183c8:	4934      	ldr	r1, [pc, #208]	; (801849c <dwt_ioctl+0xbc0>)
 80183ca:	f7fc ff1c 	bl	8015206 <dwt_read16bitoffsetreg>
 80183ce:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80183d2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80183d6:	bf18      	it	ne
 80183d8:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80183dc:	b22d      	sxth	r5, r5
 80183de:	8025      	strh	r5, [r4, #0]
 80183e0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80183e2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80183e6:	1aed      	subs	r5, r5, r3
 80183e8:	f001 b980 	b.w	80196ec <dwt_ioctl+0x1e10>
 80183ec:	2c00      	cmp	r4, #0
 80183ee:	f001 81df 	beq.w	80197b0 <dwt_ioctl+0x1ed4>
 80183f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80183f6:	7a23      	ldrb	r3, [r4, #8]
 80183f8:	f899 2013 	ldrb.w	r2, [r9, #19]
 80183fc:	2aff      	cmp	r2, #255	; 0xff
 80183fe:	f000 80fe 	beq.w	80185fe <dwt_ioctl+0xd22>
 8018402:	bb93      	cbnz	r3, 801846a <dwt_ioctl+0xb8e>
 8018404:	f8d9 1000 	ldr.w	r1, [r9]
 8018408:	f7fd feb8 	bl	801617c <ull_update_nonce_GCM>
 801840c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8018410:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8018414:	18d1      	adds	r1, r2, r3
 8018416:	f899 2012 	ldrb.w	r2, [r9, #18]
 801841a:	2a00      	cmp	r2, #0
 801841c:	d140      	bne.n	80184a0 <dwt_ioctl+0xbc4>
 801841e:	f899 0010 	ldrb.w	r0, [r9, #16]
 8018422:	2800      	cmp	r0, #0
 8018424:	bf0b      	itete	eq
 8018426:	227f      	moveq	r2, #127	; 0x7f
 8018428:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801842c:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8018430:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8018434:	f899 0013 	ldrb.w	r0, [r9, #19]
 8018438:	1a12      	subs	r2, r2, r0
 801843a:	3a02      	subs	r2, #2
 801843c:	4291      	cmp	r1, r2
 801843e:	f200 80e7 	bhi.w	8018610 <dwt_ioctl+0xd34>
 8018442:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8018446:	9200      	str	r2, [sp, #0]
 8018448:	2200      	movs	r2, #0
 801844a:	4629      	mov	r1, r5
 801844c:	4630      	mov	r0, r6
 801844e:	f7fd fb2d 	bl	8015aac <dwt_writetodevice>
 8018452:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8018456:	f899 200c 	ldrb.w	r2, [r9, #12]
 801845a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801845e:	9100      	str	r1, [sp, #0]
 8018460:	4629      	mov	r1, r5
 8018462:	4630      	mov	r0, r6
 8018464:	f7fd fb22 	bl	8015aac <dwt_writetodevice>
 8018468:	e02b      	b.n	80184c2 <dwt_ioctl+0xbe6>
 801846a:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801846e:	f8d9 1000 	ldr.w	r1, [r9]
 8018472:	f7fd fe91 	bl	8016198 <ull_update_nonce_CCM>
 8018476:	e7c9      	b.n	801840c <dwt_ioctl+0xb30>
 8018478:	00110004 	.word	0x00110004
 801847c:	00090014 	.word	0x00090014
 8018480:	00070048 	.word	0x00070048
 8018484:	00070034 	.word	0x00070034
 8018488:	00080004 	.word	0x00080004
 801848c:	3f866666 	.word	0x3f866666
 8018490:	3ecccccd 	.word	0x3ecccccd
 8018494:	437f0000 	.word	0x437f0000
 8018498:	000f0028 	.word	0x000f0028
 801849c:	00020008 	.word	0x00020008
 80184a0:	2a01      	cmp	r2, #1
 80184a2:	f040 80af 	bne.w	8018604 <dwt_ioctl+0xd28>
 80184a6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80184b0:	bf08      	it	eq
 80184b2:	237f      	moveq	r3, #127	; 0x7f
 80184b4:	f899 2013 	ldrb.w	r2, [r9, #19]
 80184b8:	1a9b      	subs	r3, r3, r2
 80184ba:	3b02      	subs	r3, #2
 80184bc:	4299      	cmp	r1, r3
 80184be:	f200 80a4 	bhi.w	801860a <dwt_ioctl+0xd2e>
 80184c2:	f899 2010 	ldrb.w	r2, [r9, #16]
 80184c6:	1e53      	subs	r3, r2, #1
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	2b01      	cmp	r3, #1
 80184cc:	d940      	bls.n	8018550 <dwt_ioctl+0xc74>
 80184ce:	f899 3011 	ldrb.w	r3, [r9, #17]
 80184d2:	1e59      	subs	r1, r3, #1
 80184d4:	b2c9      	uxtb	r1, r1
 80184d6:	2901      	cmp	r1, #1
 80184d8:	d947      	bls.n	801856a <dwt_ioctl+0xc8e>
 80184da:	2b04      	cmp	r3, #4
 80184dc:	d04c      	beq.n	8018578 <dwt_ioctl+0xc9c>
 80184de:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 80184e2:	2200      	movs	r2, #0
 80184e4:	49ba      	ldr	r1, [pc, #744]	; (80187d0 <dwt_ioctl+0xef4>)
 80184e6:	4630      	mov	r0, r6
 80184e8:	f7fd fb56 	bl	8015b98 <dwt_write32bitoffsetreg>
 80184ec:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80184f0:	4ab8      	ldr	r2, [pc, #736]	; (80187d4 <dwt_ioctl+0xef8>)
 80184f2:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 80184f6:	f899 300c 	ldrb.w	r3, [r9, #12]
 80184fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80184fe:	4313      	orrs	r3, r2
 8018500:	2200      	movs	r2, #0
 8018502:	49b5      	ldr	r1, [pc, #724]	; (80187d8 <dwt_ioctl+0xefc>)
 8018504:	4630      	mov	r0, r6
 8018506:	f7fd fb47 	bl	8015b98 <dwt_write32bitoffsetreg>
 801850a:	2301      	movs	r3, #1
 801850c:	2200      	movs	r2, #0
 801850e:	49b3      	ldr	r1, [pc, #716]	; (80187dc <dwt_ioctl+0xf00>)
 8018510:	4630      	mov	r0, r6
 8018512:	f7fd fd25 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018516:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 80187e0 <dwt_ioctl+0xf04>
 801851a:	2700      	movs	r7, #0
 801851c:	463a      	mov	r2, r7
 801851e:	4641      	mov	r1, r8
 8018520:	4630      	mov	r0, r6
 8018522:	f7fc feaf 	bl	8015284 <dwt_read8bitoffsetreg>
 8018526:	f010 0f05 	tst.w	r0, #5
 801852a:	d0f7      	beq.n	801851c <dwt_ioctl+0xc40>
 801852c:	4605      	mov	r5, r0
 801852e:	4603      	mov	r3, r0
 8018530:	2200      	movs	r2, #0
 8018532:	49ab      	ldr	r1, [pc, #684]	; (80187e0 <dwt_ioctl+0xf04>)
 8018534:	4630      	mov	r0, r6
 8018536:	f7fd fd13 	bl	8015f60 <dwt_write8bitoffsetreg>
 801853a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801853e:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8018542:	2b01      	cmp	r3, #1
 8018544:	d025      	beq.n	8018592 <dwt_ioctl+0xcb6>
 8018546:	b26b      	sxtb	r3, r5
 8018548:	7023      	strb	r3, [r4, #0]
 801854a:	2500      	movs	r5, #0
 801854c:	f001 b8ce 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018550:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8018552:	7b9b      	ldrb	r3, [r3, #14]
 8018554:	2b03      	cmp	r3, #3
 8018556:	f001 81af 	beq.w	80198b8 <dwt_ioctl+0x1fdc>
 801855a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801855e:	1e5a      	subs	r2, r3, #1
 8018560:	b2d2      	uxtb	r2, r2
 8018562:	2a01      	cmp	r2, #1
 8018564:	d912      	bls.n	801858c <dwt_ioctl+0xcb0>
 8018566:	2201      	movs	r2, #1
 8018568:	e7b7      	b.n	80184da <dwt_ioctl+0xbfe>
 801856a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801856c:	7b9b      	ldrb	r3, [r3, #14]
 801856e:	2b03      	cmp	r3, #3
 8018570:	bf0c      	ite	eq
 8018572:	2302      	moveq	r3, #2
 8018574:	2301      	movne	r3, #1
 8018576:	e7b2      	b.n	80184de <dwt_ioctl+0xc02>
 8018578:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 801857c:	2910      	cmp	r1, #16
 801857e:	d9ae      	bls.n	80184de <dwt_ioctl+0xc02>
 8018580:	f06f 0303 	mvn.w	r3, #3
 8018584:	e7e0      	b.n	8018548 <dwt_ioctl+0xc6c>
 8018586:	2202      	movs	r2, #2
 8018588:	4613      	mov	r3, r2
 801858a:	e7a8      	b.n	80184de <dwt_ioctl+0xc02>
 801858c:	2201      	movs	r2, #1
 801858e:	4613      	mov	r3, r2
 8018590:	e7a5      	b.n	80184de <dwt_ioctl+0xc02>
 8018592:	f899 3012 	ldrb.w	r3, [r9, #18]
 8018596:	2b01      	cmp	r3, #1
 8018598:	d1d5      	bne.n	8018546 <dwt_ioctl+0xc6a>
 801859a:	f899 2011 	ldrb.w	r2, [r9, #17]
 801859e:	1e53      	subs	r3, r2, #1
 80185a0:	b2db      	uxtb	r3, r3
 80185a2:	2b01      	cmp	r3, #1
 80185a4:	d91b      	bls.n	80185de <dwt_ioctl+0xd02>
 80185a6:	2a03      	cmp	r2, #3
 80185a8:	bf0c      	ite	eq
 80185aa:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 80185ae:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 80185b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80185b6:	b112      	cbz	r2, 80185be <dwt_ioctl+0xce2>
 80185b8:	f899 300c 	ldrb.w	r3, [r9, #12]
 80185bc:	b9c3      	cbnz	r3, 80185f0 <dwt_ioctl+0xd14>
 80185be:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80185c2:	2900      	cmp	r1, #0
 80185c4:	d0bf      	beq.n	8018546 <dwt_ioctl+0xc6a>
 80185c6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d0bb      	beq.n	8018546 <dwt_ioctl+0xc6a>
 80185ce:	f899 200c 	ldrb.w	r2, [r9, #12]
 80185d2:	9100      	str	r1, [sp, #0]
 80185d4:	4639      	mov	r1, r7
 80185d6:	4630      	mov	r0, r6
 80185d8:	f7fc fdf5 	bl	80151c6 <dwt_readfromdevice>
 80185dc:	e7b3      	b.n	8018546 <dwt_ioctl+0xc6a>
 80185de:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80185e0:	7b9b      	ldrb	r3, [r3, #14]
 80185e2:	2b03      	cmp	r3, #3
 80185e4:	bf0c      	ite	eq
 80185e6:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 80185ea:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 80185ee:	e7e0      	b.n	80185b2 <dwt_ioctl+0xcd6>
 80185f0:	9200      	str	r2, [sp, #0]
 80185f2:	2200      	movs	r2, #0
 80185f4:	4639      	mov	r1, r7
 80185f6:	4630      	mov	r0, r6
 80185f8:	f7fc fde5 	bl	80151c6 <dwt_readfromdevice>
 80185fc:	e7df      	b.n	80185be <dwt_ioctl+0xce2>
 80185fe:	f06f 0302 	mvn.w	r3, #2
 8018602:	e7a1      	b.n	8018548 <dwt_ioctl+0xc6c>
 8018604:	f06f 0301 	mvn.w	r3, #1
 8018608:	e79e      	b.n	8018548 <dwt_ioctl+0xc6c>
 801860a:	f04f 33ff 	mov.w	r3, #4294967295
 801860e:	e79b      	b.n	8018548 <dwt_ioctl+0xc6c>
 8018610:	f04f 33ff 	mov.w	r3, #4294967295
 8018614:	e798      	b.n	8018548 <dwt_ioctl+0xc6c>
 8018616:	7a23      	ldrb	r3, [r4, #8]
 8018618:	79e1      	ldrb	r1, [r4, #7]
 801861a:	79a2      	ldrb	r2, [r4, #6]
 801861c:	00d2      	lsls	r2, r2, #3
 801861e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018622:	4313      	orrs	r3, r2
 8018624:	7962      	ldrb	r2, [r4, #5]
 8018626:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801862a:	7922      	ldrb	r2, [r4, #4]
 801862c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018630:	78e2      	ldrb	r2, [r4, #3]
 8018632:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018636:	78a2      	ldrb	r2, [r4, #2]
 8018638:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 801863c:	7862      	ldrb	r2, [r4, #1]
 801863e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8018642:	7822      	ldrb	r2, [r4, #0]
 8018644:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8018648:	b29b      	uxth	r3, r3
 801864a:	2200      	movs	r2, #0
 801864c:	4965      	ldr	r1, [pc, #404]	; (80187e4 <dwt_ioctl+0xf08>)
 801864e:	f7fd fa38 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8018652:	2500      	movs	r5, #0
 8018654:	f001 b84a 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018658:	2c00      	cmp	r4, #0
 801865a:	f001 80ab 	beq.w	80197b4 <dwt_ioctl+0x1ed8>
 801865e:	7863      	ldrb	r3, [r4, #1]
 8018660:	b133      	cbz	r3, 8018670 <dwt_ioctl+0xd94>
 8018662:	085b      	lsrs	r3, r3, #1
 8018664:	3b01      	subs	r3, #1
 8018666:	b2db      	uxtb	r3, r3
 8018668:	7023      	strb	r3, [r4, #0]
 801866a:	2500      	movs	r5, #0
 801866c:	f001 b83e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018670:	2300      	movs	r3, #0
 8018672:	e7f9      	b.n	8018668 <dwt_ioctl+0xd8c>
 8018674:	2200      	movs	r2, #0
 8018676:	495c      	ldr	r1, [pc, #368]	; (80187e8 <dwt_ioctl+0xf0c>)
 8018678:	f7fc fdaf 	bl	80151da <dwt_read32bitoffsetreg>
 801867c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8018680:	8023      	strh	r3, [r4, #0]
 8018682:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8018686:	8060      	strh	r0, [r4, #2]
 8018688:	2200      	movs	r2, #0
 801868a:	4958      	ldr	r1, [pc, #352]	; (80187ec <dwt_ioctl+0xf10>)
 801868c:	4630      	mov	r0, r6
 801868e:	f7fc fda4 	bl	80151da <dwt_read32bitoffsetreg>
 8018692:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8018696:	80a3      	strh	r3, [r4, #4]
 8018698:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801869c:	80e0      	strh	r0, [r4, #6]
 801869e:	2200      	movs	r2, #0
 80186a0:	4953      	ldr	r1, [pc, #332]	; (80187f0 <dwt_ioctl+0xf14>)
 80186a2:	4630      	mov	r0, r6
 80186a4:	f7fc fd99 	bl	80151da <dwt_read32bitoffsetreg>
 80186a8:	7220      	strb	r0, [r4, #8]
 80186aa:	0c00      	lsrs	r0, r0, #16
 80186ac:	7260      	strb	r0, [r4, #9]
 80186ae:	2200      	movs	r2, #0
 80186b0:	4950      	ldr	r1, [pc, #320]	; (80187f4 <dwt_ioctl+0xf18>)
 80186b2:	4630      	mov	r0, r6
 80186b4:	f7fc fd91 	bl	80151da <dwt_read32bitoffsetreg>
 80186b8:	f3c0 430b 	ubfx	r3, r0, #16, #12
 80186bc:	81a3      	strh	r3, [r4, #12]
 80186be:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80186c2:	8160      	strh	r0, [r4, #10]
 80186c4:	2200      	movs	r2, #0
 80186c6:	494c      	ldr	r1, [pc, #304]	; (80187f8 <dwt_ioctl+0xf1c>)
 80186c8:	4630      	mov	r0, r6
 80186ca:	f7fc fd86 	bl	80151da <dwt_read32bitoffsetreg>
 80186ce:	f3c0 430b 	ubfx	r3, r0, #16, #12
 80186d2:	f8a4 300f 	strh.w	r3, [r4, #15]
 80186d6:	73a0      	strb	r0, [r4, #14]
 80186d8:	2200      	movs	r2, #0
 80186da:	4948      	ldr	r1, [pc, #288]	; (80187fc <dwt_ioctl+0xf20>)
 80186dc:	4630      	mov	r0, r6
 80186de:	f7fc fd7c 	bl	80151da <dwt_read32bitoffsetreg>
 80186e2:	7460      	strb	r0, [r4, #17]
 80186e4:	0c00      	lsrs	r0, r0, #16
 80186e6:	74a0      	strb	r0, [r4, #18]
 80186e8:	2200      	movs	r2, #0
 80186ea:	4945      	ldr	r1, [pc, #276]	; (8018800 <dwt_ioctl+0xf24>)
 80186ec:	4630      	mov	r0, r6
 80186ee:	f7fc fd74 	bl	80151da <dwt_read32bitoffsetreg>
 80186f2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80186f6:	f8a4 3013 	strh.w	r3, [r4, #19]
 80186fa:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80186fe:	f8a4 0015 	strh.w	r0, [r4, #21]
 8018702:	2200      	movs	r2, #0
 8018704:	493f      	ldr	r1, [pc, #252]	; (8018804 <dwt_ioctl+0xf28>)
 8018706:	4630      	mov	r0, r6
 8018708:	f7fc fdbc 	bl	8015284 <dwt_read8bitoffsetreg>
 801870c:	75e0      	strb	r0, [r4, #23]
 801870e:	2500      	movs	r5, #0
 8018710:	f000 bfec 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018714:	4611      	mov	r1, r2
 8018716:	f7fd fc9b 	bl	8016050 <ull_configeventcounters>
 801871a:	2500      	movs	r5, #0
 801871c:	f000 bfe6 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018720:	2c00      	cmp	r4, #0
 8018722:	f001 8049 	beq.w	80197b8 <dwt_ioctl+0x1edc>
 8018726:	8823      	ldrh	r3, [r4, #0]
 8018728:	2200      	movs	r2, #0
 801872a:	4937      	ldr	r1, [pc, #220]	; (8018808 <dwt_ioctl+0xf2c>)
 801872c:	f7fd f9c9 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8018730:	2500      	movs	r5, #0
 8018732:	f000 bfdb 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018736:	2c00      	cmp	r4, #0
 8018738:	f001 8040 	beq.w	80197bc <dwt_ioctl+0x1ee0>
 801873c:	6825      	ldr	r5, [r4, #0]
 801873e:	b935      	cbnz	r5, 801874e <dwt_ioctl+0xe72>
 8018740:	2300      	movs	r3, #0
 8018742:	461a      	mov	r2, r3
 8018744:	4931      	ldr	r1, [pc, #196]	; (801880c <dwt_ioctl+0xf30>)
 8018746:	f7fd f9bc 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801874a:	f000 bfcf 	b.w	80196ec <dwt_ioctl+0x1e10>
 801874e:	7962      	ldrb	r2, [r4, #5]
 8018750:	7923      	ldrb	r3, [r4, #4]
 8018752:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801875a:	2200      	movs	r2, #0
 801875c:	492b      	ldr	r1, [pc, #172]	; (801880c <dwt_ioctl+0xf30>)
 801875e:	f7fd f9b0 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8018762:	2500      	movs	r5, #0
 8018764:	f000 bfc2 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018768:	2c00      	cmp	r4, #0
 801876a:	f001 8029 	beq.w	80197c0 <dwt_ioctl+0x1ee4>
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	b94b      	cbnz	r3, 8018786 <dwt_ioctl+0xeaa>
 8018772:	2500      	movs	r5, #0
 8018774:	9500      	str	r5, [sp, #0]
 8018776:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801877a:	462a      	mov	r2, r5
 801877c:	2110      	movs	r1, #16
 801877e:	f7fe fc11 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8018782:	f000 bfb3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018786:	2200      	movs	r2, #0
 8018788:	2134      	movs	r1, #52	; 0x34
 801878a:	f7fd fa05 	bl	8015b98 <dwt_write32bitoffsetreg>
 801878e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018792:	9300      	str	r3, [sp, #0]
 8018794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018798:	2200      	movs	r2, #0
 801879a:	2110      	movs	r1, #16
 801879c:	4630      	mov	r0, r6
 801879e:	f7fe fc01 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80187a2:	2500      	movs	r5, #0
 80187a4:	f000 bfa2 	b.w	80196ec <dwt_ioctl+0x1e10>
 80187a8:	2c00      	cmp	r4, #0
 80187aa:	f001 800b 	beq.w	80197c4 <dwt_ioctl+0x1ee8>
 80187ae:	8861      	ldrh	r1, [r4, #2]
 80187b0:	f7fd fc62 	bl	8016078 <ull_aon_read>
 80187b4:	7020      	strb	r0, [r4, #0]
 80187b6:	2500      	movs	r5, #0
 80187b8:	f000 bf98 	b.w	80196ec <dwt_ioctl+0x1e10>
 80187bc:	2c00      	cmp	r4, #0
 80187be:	f001 8003 	beq.w	80197c8 <dwt_ioctl+0x1eec>
 80187c2:	78a2      	ldrb	r2, [r4, #2]
 80187c4:	8821      	ldrh	r1, [r4, #0]
 80187c6:	f7fd fc77 	bl	80160b8 <ull_aon_write>
 80187ca:	2500      	movs	r5, #0
 80187cc:	f000 bf8e 	b.w	80196ec <dwt_ioctl+0x1e10>
 80187d0:	00010044 	.word	0x00010044
 80187d4:	0001ff80 	.word	0x0001ff80
 80187d8:	00010048 	.word	0x00010048
 80187dc:	0001004c 	.word	0x0001004c
 80187e0:	00010050 	.word	0x00010050
 80187e4:	00010030 	.word	0x00010030
 80187e8:	000f0004 	.word	0x000f0004
 80187ec:	000f0008 	.word	0x000f0008
 80187f0:	000f000c 	.word	0x000f000c
 80187f4:	000f0010 	.word	0x000f0010
 80187f8:	000f0014 	.word	0x000f0014
 80187fc:	000f0018 	.word	0x000f0018
 8018800:	000f001c 	.word	0x000f001c
 8018804:	000f0020 	.word	0x000f0020
 8018808:	00060004 	.word	0x00060004
 801880c:	0011001c 	.word	0x0011001c
 8018810:	4bd5      	ldr	r3, [pc, #852]	; (8018b68 <dwt_ioctl+0x128c>)
 8018812:	4ad6      	ldr	r2, [pc, #856]	; (8018b6c <dwt_ioctl+0x1290>)
 8018814:	2d01      	cmp	r5, #1
 8018816:	bf18      	it	ne
 8018818:	4613      	movne	r3, r2
 801881a:	2d01      	cmp	r5, #1
 801881c:	49d4      	ldr	r1, [pc, #848]	; (8018b70 <dwt_ioctl+0x1294>)
 801881e:	bf18      	it	ne
 8018820:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8018824:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8018826:	7b92      	ldrb	r2, [r2, #14]
 8018828:	2a01      	cmp	r2, #1
 801882a:	d012      	beq.n	8018852 <dwt_ioctl+0xf76>
 801882c:	2a03      	cmp	r2, #3
 801882e:	d117      	bne.n	8018860 <dwt_ioctl+0xf84>
 8018830:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8018834:	3a01      	subs	r2, #1
 8018836:	441a      	add	r2, r3
 8018838:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801883c:	f7fc fce3 	bl	8015206 <dwt_read16bitoffsetreg>
 8018840:	09c0      	lsrs	r0, r0, #7
 8018842:	8020      	strh	r0, [r4, #0]
 8018844:	8825      	ldrh	r5, [r4, #0]
 8018846:	3500      	adds	r5, #0
 8018848:	bf18      	it	ne
 801884a:	2501      	movne	r5, #1
 801884c:	426d      	negs	r5, r5
 801884e:	f000 bf4d 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018852:	2202      	movs	r2, #2
 8018854:	4619      	mov	r1, r3
 8018856:	f7fc fcd6 	bl	8015206 <dwt_read16bitoffsetreg>
 801885a:	09c0      	lsrs	r0, r0, #7
 801885c:	8020      	strh	r0, [r4, #0]
 801885e:	e7f1      	b.n	8018844 <dwt_ioctl+0xf68>
 8018860:	2202      	movs	r2, #2
 8018862:	f7fc fcd0 	bl	8015206 <dwt_read16bitoffsetreg>
 8018866:	09c0      	lsrs	r0, r0, #7
 8018868:	8020      	strh	r0, [r4, #0]
 801886a:	e7eb      	b.n	8018844 <dwt_ioctl+0xf68>
 801886c:	2c00      	cmp	r4, #0
 801886e:	f000 87ad 	beq.w	80197cc <dwt_ioctl+0x1ef0>
 8018872:	7821      	ldrb	r1, [r4, #0]
 8018874:	f7fe fbd4 	bl	8017020 <ull_setleds>
 8018878:	2500      	movs	r5, #0
 801887a:	f000 bf37 	b.w	80196ec <dwt_ioctl+0x1e10>
 801887e:	4611      	mov	r1, r2
 8018880:	f7fe fa30 	bl	8016ce4 <ull_setdwstate>
 8018884:	2500      	movs	r5, #0
 8018886:	f000 bf31 	b.w	80196ec <dwt_ioctl+0x1e10>
 801888a:	9400      	str	r4, [sp, #0]
 801888c:	2304      	movs	r3, #4
 801888e:	2200      	movs	r2, #0
 8018890:	211c      	movs	r1, #28
 8018892:	f7fc fc98 	bl	80151c6 <dwt_readfromdevice>
 8018896:	2500      	movs	r5, #0
 8018898:	f000 bf28 	b.w	80196ec <dwt_ioctl+0x1e10>
 801889c:	2c00      	cmp	r4, #0
 801889e:	f000 8797 	beq.w	80197d0 <dwt_ioctl+0x1ef4>
 80188a2:	2202      	movs	r2, #2
 80188a4:	2144      	movs	r1, #68	; 0x44
 80188a6:	f7fc fcae 	bl	8015206 <dwt_read16bitoffsetreg>
 80188aa:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80188ae:	7020      	strb	r0, [r4, #0]
 80188b0:	2500      	movs	r5, #0
 80188b2:	f000 bf1b 	b.w	80196ec <dwt_ioctl+0x1e10>
 80188b6:	2c00      	cmp	r4, #0
 80188b8:	f000 878c 	beq.w	80197d4 <dwt_ioctl+0x1ef8>
 80188bc:	2200      	movs	r2, #0
 80188be:	2144      	movs	r1, #68	; 0x44
 80188c0:	f7fc fce0 	bl	8015284 <dwt_read8bitoffsetreg>
 80188c4:	f000 0001 	and.w	r0, r0, #1
 80188c8:	7020      	strb	r0, [r4, #0]
 80188ca:	2500      	movs	r5, #0
 80188cc:	f000 bf0e 	b.w	80196ec <dwt_ioctl+0x1e10>
 80188d0:	2c00      	cmp	r4, #0
 80188d2:	f000 8781 	beq.w	80197d8 <dwt_ioctl+0x1efc>
 80188d6:	8862      	ldrh	r2, [r4, #2]
 80188d8:	8821      	ldrh	r1, [r4, #0]
 80188da:	f7fe fa61 	bl	8016da0 <ull_configureframefilter>
 80188de:	2500      	movs	r5, #0
 80188e0:	f000 bf04 	b.w	80196ec <dwt_ioctl+0x1e10>
 80188e4:	9400      	str	r4, [sp, #0]
 80188e6:	2308      	movs	r3, #8
 80188e8:	2200      	movs	r2, #0
 80188ea:	2104      	movs	r1, #4
 80188ec:	f7fd f8de 	bl	8015aac <dwt_writetodevice>
 80188f0:	2500      	movs	r5, #0
 80188f2:	f000 befb 	b.w	80196ec <dwt_ioctl+0x1e10>
 80188f6:	9400      	str	r4, [sp, #0]
 80188f8:	2308      	movs	r3, #8
 80188fa:	2200      	movs	r2, #0
 80188fc:	2104      	movs	r1, #4
 80188fe:	f7fc fc62 	bl	80151c6 <dwt_readfromdevice>
 8018902:	2500      	movs	r5, #0
 8018904:	f000 bef2 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018908:	2c00      	cmp	r4, #0
 801890a:	f000 8767 	beq.w	80197dc <dwt_ioctl+0x1f00>
 801890e:	8823      	ldrh	r3, [r4, #0]
 8018910:	2202      	movs	r2, #2
 8018912:	210c      	movs	r1, #12
 8018914:	f7fd f8d5 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8018918:	2500      	movs	r5, #0
 801891a:	f000 bee7 	b.w	80196ec <dwt_ioctl+0x1e10>
 801891e:	2c00      	cmp	r4, #0
 8018920:	f000 875e 	beq.w	80197e0 <dwt_ioctl+0x1f04>
 8018924:	8823      	ldrh	r3, [r4, #0]
 8018926:	2200      	movs	r2, #0
 8018928:	210c      	movs	r1, #12
 801892a:	f7fd f8ca 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801892e:	2500      	movs	r5, #0
 8018930:	f000 bedc 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018934:	4621      	mov	r1, r4
 8018936:	f7fd f897 	bl	8015a68 <ull_readrxtimestamp>
 801893a:	2500      	movs	r5, #0
 801893c:	f000 bed6 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018940:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8018942:	7b9b      	ldrb	r3, [r3, #14]
 8018944:	2b01      	cmp	r3, #1
 8018946:	d00b      	beq.n	8018960 <dwt_ioctl+0x1084>
 8018948:	2b03      	cmp	r3, #3
 801894a:	d112      	bne.n	8018972 <dwt_ioctl+0x1096>
 801894c:	9400      	str	r4, [sp, #0]
 801894e:	2305      	movs	r3, #5
 8018950:	2220      	movs	r2, #32
 8018952:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8018956:	f7fc fc36 	bl	80151c6 <dwt_readfromdevice>
 801895a:	2500      	movs	r5, #0
 801895c:	f000 bec6 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018960:	9400      	str	r4, [sp, #0]
 8018962:	2305      	movs	r3, #5
 8018964:	2200      	movs	r2, #0
 8018966:	4983      	ldr	r1, [pc, #524]	; (8018b74 <dwt_ioctl+0x1298>)
 8018968:	f7fc fc2d 	bl	80151c6 <dwt_readfromdevice>
 801896c:	2500      	movs	r5, #0
 801896e:	f000 bebd 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018972:	9400      	str	r4, [sp, #0]
 8018974:	2305      	movs	r3, #5
 8018976:	2200      	movs	r2, #0
 8018978:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 801897c:	f7fc fc23 	bl	80151c6 <dwt_readfromdevice>
 8018980:	2500      	movs	r5, #0
 8018982:	f000 beb3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018986:	2500      	movs	r5, #0
 8018988:	f804 5b01 	strb.w	r5, [r4], #1
 801898c:	9400      	str	r4, [sp, #0]
 801898e:	2304      	movs	r3, #4
 8018990:	462a      	mov	r2, r5
 8018992:	216c      	movs	r1, #108	; 0x6c
 8018994:	f7fc fc17 	bl	80151c6 <dwt_readfromdevice>
 8018998:	f000 bea8 	b.w	80196ec <dwt_ioctl+0x1e10>
 801899c:	2c00      	cmp	r4, #0
 801899e:	f000 8721 	beq.w	80197e4 <dwt_ioctl+0x1f08>
 80189a2:	2201      	movs	r2, #1
 80189a4:	2160      	movs	r1, #96	; 0x60
 80189a6:	f7fc fc18 	bl	80151da <dwt_read32bitoffsetreg>
 80189aa:	6020      	str	r0, [r4, #0]
 80189ac:	2500      	movs	r5, #0
 80189ae:	f000 be9d 	b.w	80196ec <dwt_ioctl+0x1e10>
 80189b2:	2c00      	cmp	r4, #0
 80189b4:	f000 8718 	beq.w	80197e8 <dwt_ioctl+0x1f0c>
 80189b8:	2200      	movs	r2, #0
 80189ba:	2160      	movs	r1, #96	; 0x60
 80189bc:	f7fc fc0d 	bl	80151da <dwt_read32bitoffsetreg>
 80189c0:	6020      	str	r0, [r4, #0]
 80189c2:	2500      	movs	r5, #0
 80189c4:	f000 be92 	b.w	80196ec <dwt_ioctl+0x1e10>
 80189c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80189ca:	7b9b      	ldrb	r3, [r3, #14]
 80189cc:	2b01      	cmp	r3, #1
 80189ce:	d00b      	beq.n	80189e8 <dwt_ioctl+0x110c>
 80189d0:	2b03      	cmp	r3, #3
 80189d2:	d112      	bne.n	80189fa <dwt_ioctl+0x111e>
 80189d4:	9400      	str	r4, [sp, #0]
 80189d6:	2305      	movs	r3, #5
 80189d8:	2228      	movs	r2, #40	; 0x28
 80189da:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80189de:	f7fc fbf2 	bl	80151c6 <dwt_readfromdevice>
 80189e2:	2500      	movs	r5, #0
 80189e4:	f000 be82 	b.w	80196ec <dwt_ioctl+0x1e10>
 80189e8:	9400      	str	r4, [sp, #0]
 80189ea:	2305      	movs	r3, #5
 80189ec:	2200      	movs	r2, #0
 80189ee:	4962      	ldr	r1, [pc, #392]	; (8018b78 <dwt_ioctl+0x129c>)
 80189f0:	f7fc fbe9 	bl	80151c6 <dwt_readfromdevice>
 80189f4:	2500      	movs	r5, #0
 80189f6:	f000 be79 	b.w	80196ec <dwt_ioctl+0x1e10>
 80189fa:	9400      	str	r4, [sp, #0]
 80189fc:	2305      	movs	r3, #5
 80189fe:	2200      	movs	r2, #0
 8018a00:	495e      	ldr	r1, [pc, #376]	; (8018b7c <dwt_ioctl+0x12a0>)
 8018a02:	f7fc fbe0 	bl	80151c6 <dwt_readfromdevice>
 8018a06:	2500      	movs	r5, #0
 8018a08:	f000 be70 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018a0c:	2c00      	cmp	r4, #0
 8018a0e:	f000 86ed 	beq.w	80197ec <dwt_ioctl+0x1f10>
 8018a12:	2200      	movs	r2, #0
 8018a14:	211c      	movs	r1, #28
 8018a16:	f7fc fbe0 	bl	80151da <dwt_read32bitoffsetreg>
 8018a1a:	6020      	str	r0, [r4, #0]
 8018a1c:	2500      	movs	r5, #0
 8018a1e:	f000 be65 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018a22:	2c00      	cmp	r4, #0
 8018a24:	f000 86e4 	beq.w	80197f0 <dwt_ioctl+0x1f14>
 8018a28:	8825      	ldrh	r5, [r4, #0]
 8018a2a:	6867      	ldr	r7, [r4, #4]
 8018a2c:	7a23      	ldrb	r3, [r4, #8]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	f000 86e0 	beq.w	80197f4 <dwt_ioctl+0x1f18>
 8018a34:	463c      	mov	r4, r7
 8018a36:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8018a3a:	4629      	mov	r1, r5
 8018a3c:	4630      	mov	r0, r6
 8018a3e:	f7fd f889 	bl	8015b54 <_dwt_otpread>
 8018a42:	f844 0b04 	str.w	r0, [r4], #4
 8018a46:	3501      	adds	r5, #1
 8018a48:	b2ad      	uxth	r5, r5
 8018a4a:	42bc      	cmp	r4, r7
 8018a4c:	d1f5      	bne.n	8018a3a <dwt_ioctl+0x115e>
 8018a4e:	2500      	movs	r5, #0
 8018a50:	f000 be4c 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018a54:	2c00      	cmp	r4, #0
 8018a56:	f000 86cf 	beq.w	80197f8 <dwt_ioctl+0x1f1c>
 8018a5a:	7821      	ldrb	r1, [r4, #0]
 8018a5c:	f7fd fb86 	bl	801616c <ull_setplenfine>
 8018a60:	2500      	movs	r5, #0
 8018a62:	f000 be43 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018a66:	f7fe f9bf 	bl	8016de8 <ull_run_pgfcal>
 8018a6a:	4605      	mov	r5, r0
 8018a6c:	f000 be3e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018a70:	4611      	mov	r1, r2
 8018a72:	f7fe fb23 	bl	80170bc <ull_pgf_cal>
 8018a76:	4605      	mov	r5, r0
 8018a78:	f000 be38 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018a7c:	2c00      	cmp	r4, #0
 8018a7e:	f000 86bd 	beq.w	80197fc <dwt_ioctl+0x1f20>
 8018a82:	78a5      	ldrb	r5, [r4, #2]
 8018a84:	2101      	movs	r1, #1
 8018a86:	f7fd f83b 	bl	8015b00 <ull_force_clocks>
 8018a8a:	2100      	movs	r1, #0
 8018a8c:	4630      	mov	r0, r6
 8018a8e:	f7fd fdbd 	bl	801660c <ull_enable_rf_tx>
 8018a92:	4630      	mov	r0, r6
 8018a94:	f7fd fdee 	bl	8016674 <ull_enable_rftx_blocks>
 8018a98:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	4938      	ldr	r1, [pc, #224]	; (8018b80 <dwt_ioctl+0x12a4>)
 8018aa0:	4630      	mov	r0, r6
 8018aa2:	f7fd fa5d 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	9300      	str	r3, [sp, #0]
 8018aaa:	23ff      	movs	r3, #255	; 0xff
 8018aac:	2200      	movs	r2, #0
 8018aae:	4935      	ldr	r1, [pc, #212]	; (8018b84 <dwt_ioctl+0x12a8>)
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	f7fd fee7 	bl	8016884 <dwt_modify8bitoffsetreg>
 8018ab6:	4f33      	ldr	r7, [pc, #204]	; (8018b84 <dwt_ioctl+0x12a8>)
 8018ab8:	2500      	movs	r5, #0
 8018aba:	462a      	mov	r2, r5
 8018abc:	4639      	mov	r1, r7
 8018abe:	4630      	mov	r0, r6
 8018ac0:	f7fc fbe0 	bl	8015284 <dwt_read8bitoffsetreg>
 8018ac4:	f010 0f01 	tst.w	r0, #1
 8018ac8:	d1f7      	bne.n	8018aba <dwt_ioctl+0x11de>
 8018aca:	2200      	movs	r2, #0
 8018acc:	492e      	ldr	r1, [pc, #184]	; (8018b88 <dwt_ioctl+0x12ac>)
 8018ace:	4630      	mov	r0, r6
 8018ad0:	f7fc fb99 	bl	8015206 <dwt_read16bitoffsetreg>
 8018ad4:	4605      	mov	r5, r0
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	f7fd f9c0 	bl	8015e5c <ull_disable_rftx_blocks>
 8018adc:	2100      	movs	r1, #0
 8018ade:	4630      	mov	r0, r6
 8018ae0:	f7fd f9c6 	bl	8015e70 <ull_disable_rf_tx>
 8018ae4:	2105      	movs	r1, #5
 8018ae6:	4630      	mov	r0, r6
 8018ae8:	f7fd f80a 	bl	8015b00 <ull_force_clocks>
 8018aec:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8018af0:	8025      	strh	r5, [r4, #0]
 8018af2:	2500      	movs	r5, #0
 8018af4:	f000 bdfa 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018af8:	2102      	movs	r1, #2
 8018afa:	f7fe f8f3 	bl	8016ce4 <ull_setdwstate>
 8018afe:	2101      	movs	r1, #1
 8018b00:	4630      	mov	r0, r6
 8018b02:	f7fe f8ef 	bl	8016ce4 <ull_setdwstate>
 8018b06:	2432      	movs	r4, #50	; 0x32
 8018b08:	f04f 0814 	mov.w	r8, #20
 8018b0c:	2700      	movs	r7, #0
 8018b0e:	2544      	movs	r5, #68	; 0x44
 8018b10:	4640      	mov	r0, r8
 8018b12:	f7f3 f874 	bl	800bbfe <deca_usleep>
 8018b16:	463a      	mov	r2, r7
 8018b18:	4629      	mov	r1, r5
 8018b1a:	4630      	mov	r0, r6
 8018b1c:	f7fc fbb2 	bl	8015284 <dwt_read8bitoffsetreg>
 8018b20:	f010 0f02 	tst.w	r0, #2
 8018b24:	d105      	bne.n	8018b32 <dwt_ioctl+0x1256>
 8018b26:	1e63      	subs	r3, r4, #1
 8018b28:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8018b2c:	d1f0      	bne.n	8018b10 <dwt_ioctl+0x1234>
 8018b2e:	2501      	movs	r5, #1
 8018b30:	e000      	b.n	8018b34 <dwt_ioctl+0x1258>
 8018b32:	2500      	movs	r5, #0
 8018b34:	426d      	negs	r5, r5
 8018b36:	f000 bdd9 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018b3a:	2c00      	cmp	r4, #0
 8018b3c:	f000 8660 	beq.w	8019800 <dwt_ioctl+0x1f24>
 8018b40:	7823      	ldrb	r3, [r4, #0]
 8018b42:	031b      	lsls	r3, r3, #12
 8018b44:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8018b48:	7862      	ldrb	r2, [r4, #1]
 8018b4a:	2a01      	cmp	r2, #1
 8018b4c:	bf08      	it	eq
 8018b4e:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8018b52:	9300      	str	r3, [sp, #0]
 8018b54:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8018b58:	2200      	movs	r2, #0
 8018b5a:	490c      	ldr	r1, [pc, #48]	; (8018b8c <dwt_ioctl+0x12b0>)
 8018b5c:	f7fd fd22 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8018b60:	2500      	movs	r5, #0
 8018b62:	f000 bdc3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018b66:	bf00      	nop
 8018b68:	00180034 	.word	0x00180034
 8018b6c:	0018002c 	.word	0x0018002c
 8018b70:	000c0014 	.word	0x000c0014
 8018b74:	00180020 	.word	0x00180020
 8018b78:	00180028 	.word	0x00180028
 8018b7c:	000c0008 	.word	0x000c0008
 8018b80:	0007001c 	.word	0x0007001c
 8018b84:	00080010 	.word	0x00080010
 8018b88:	00080014 	.word	0x00080014
 8018b8c:	00070014 	.word	0x00070014
 8018b90:	2c00      	cmp	r4, #0
 8018b92:	f000 8637 	beq.w	8019804 <dwt_ioctl+0x1f28>
 8018b96:	6862      	ldr	r2, [r4, #4]
 8018b98:	6821      	ldr	r1, [r4, #0]
 8018b9a:	f7fd fe35 	bl	8016808 <ull_setgpiomode>
 8018b9e:	2500      	movs	r5, #0
 8018ba0:	f000 bda4 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018ba4:	2c00      	cmp	r4, #0
 8018ba6:	f000 862f 	beq.w	8019808 <dwt_ioctl+0x1f2c>
 8018baa:	8823      	ldrh	r3, [r4, #0]
 8018bac:	2200      	movs	r2, #0
 8018bae:	49c4      	ldr	r1, [pc, #784]	; (8018ec0 <dwt_ioctl+0x15e4>)
 8018bb0:	f7fc ff87 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8018bb4:	2500      	movs	r5, #0
 8018bb6:	f000 bd99 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018bba:	2c00      	cmp	r4, #0
 8018bbc:	f000 8626 	beq.w	801980c <dwt_ioctl+0x1f30>
 8018bc0:	6862      	ldr	r2, [r4, #4]
 8018bc2:	8821      	ldrh	r1, [r4, #0]
 8018bc4:	f7fe faaa 	bl	801711c <ull_setgpiovalue>
 8018bc8:	2500      	movs	r5, #0
 8018bca:	f000 bd8f 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018bce:	2c00      	cmp	r4, #0
 8018bd0:	f000 861e 	beq.w	8019810 <dwt_ioctl+0x1f34>
 8018bd4:	7865      	ldrb	r5, [r4, #1]
 8018bd6:	7823      	ldrb	r3, [r4, #0]
 8018bd8:	b18b      	cbz	r3, 8018bfe <dwt_ioctl+0x1322>
 8018bda:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8018bdc:	2200      	movs	r2, #0
 8018bde:	739a      	strb	r2, [r3, #14]
 8018be0:	f04f 33ff 	mov.w	r3, #4294967295
 8018be4:	2208      	movs	r2, #8
 8018be6:	b37d      	cbz	r5, 8018c48 <dwt_ioctl+0x136c>
 8018be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8018bec:	9200      	str	r2, [sp, #0]
 8018bee:	2200      	movs	r2, #0
 8018bf0:	2110      	movs	r1, #16
 8018bf2:	4630      	mov	r0, r6
 8018bf4:	f7fd fcd6 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8018bf8:	2500      	movs	r5, #0
 8018bfa:	f000 bd77 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018bfe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8018c00:	2201      	movs	r2, #1
 8018c02:	739a      	strb	r2, [r3, #14]
 8018c04:	2318      	movs	r3, #24
 8018c06:	2200      	movs	r2, #0
 8018c08:	49ae      	ldr	r1, [pc, #696]	; (8018ec4 <dwt_ioctl+0x15e8>)
 8018c0a:	f7fc ffc5 	bl	8015b98 <dwt_write32bitoffsetreg>
 8018c0e:	23e8      	movs	r3, #232	; 0xe8
 8018c10:	2200      	movs	r2, #0
 8018c12:	49ad      	ldr	r1, [pc, #692]	; (8018ec8 <dwt_ioctl+0x15ec>)
 8018c14:	4630      	mov	r0, r6
 8018c16:	f7fc ffbf 	bl	8015b98 <dwt_write32bitoffsetreg>
 8018c1a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8018c1c:	7d9b      	ldrb	r3, [r3, #22]
 8018c1e:	085b      	lsrs	r3, r3, #1
 8018c20:	d003      	beq.n	8018c2a <dwt_ioctl+0x134e>
 8018c22:	f06f 0308 	mvn.w	r3, #8
 8018c26:	2200      	movs	r2, #0
 8018c28:	e7dd      	b.n	8018be6 <dwt_ioctl+0x130a>
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	49a7      	ldr	r1, [pc, #668]	; (8018ecc <dwt_ioctl+0x15f0>)
 8018c30:	4630      	mov	r0, r6
 8018c32:	f7fd f995 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018c36:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8018c38:	7d93      	ldrb	r3, [r2, #22]
 8018c3a:	f043 0302 	orr.w	r3, r3, #2
 8018c3e:	7593      	strb	r3, [r2, #22]
 8018c40:	f06f 0308 	mvn.w	r3, #8
 8018c44:	2200      	movs	r2, #0
 8018c46:	e7ce      	b.n	8018be6 <dwt_ioctl+0x130a>
 8018c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018c4c:	e7ce      	b.n	8018bec <dwt_ioctl+0x1310>
 8018c4e:	2c00      	cmp	r4, #0
 8018c50:	f000 85e0 	beq.w	8019814 <dwt_ioctl+0x1f38>
 8018c54:	6823      	ldr	r3, [r4, #0]
 8018c56:	2200      	movs	r2, #0
 8018c58:	2130      	movs	r1, #48	; 0x30
 8018c5a:	f7fc ff9d 	bl	8015b98 <dwt_write32bitoffsetreg>
 8018c5e:	2500      	movs	r5, #0
 8018c60:	f000 bd44 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018c64:	2c00      	cmp	r4, #0
 8018c66:	f000 85d7 	beq.w	8019818 <dwt_ioctl+0x1f3c>
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	4629      	mov	r1, r5
 8018c6e:	f7fc fab4 	bl	80151da <dwt_read32bitoffsetreg>
 8018c72:	6020      	str	r0, [r4, #0]
 8018c74:	2500      	movs	r5, #0
 8018c76:	f000 bd39 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018c7a:	4623      	mov	r3, r4
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	4629      	mov	r1, r5
 8018c80:	f7fc ff8a 	bl	8015b98 <dwt_write32bitoffsetreg>
 8018c84:	2500      	movs	r5, #0
 8018c86:	f000 bd31 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018c8a:	2c00      	cmp	r4, #0
 8018c8c:	f000 85c6 	beq.w	801981c <dwt_ioctl+0x1f40>
 8018c90:	2203      	movs	r2, #3
 8018c92:	498f      	ldr	r1, [pc, #572]	; (8018ed0 <dwt_ioctl+0x15f4>)
 8018c94:	f7fc faf6 	bl	8015284 <dwt_read8bitoffsetreg>
 8018c98:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8018c9c:	7020      	strb	r0, [r4, #0]
 8018c9e:	2500      	movs	r5, #0
 8018ca0:	f000 bd24 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018ca4:	2c00      	cmp	r4, #0
 8018ca6:	f000 85bb 	beq.w	8019820 <dwt_ioctl+0x1f44>
 8018caa:	6823      	ldr	r3, [r4, #0]
 8018cac:	2200      	movs	r2, #0
 8018cae:	2144      	movs	r1, #68	; 0x44
 8018cb0:	f7fc ff72 	bl	8015b98 <dwt_write32bitoffsetreg>
 8018cb4:	2500      	movs	r5, #0
 8018cb6:	f000 bd19 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018cba:	2c00      	cmp	r4, #0
 8018cbc:	f000 85b2 	beq.w	8019824 <dwt_ioctl+0x1f48>
 8018cc0:	8823      	ldrh	r3, [r4, #0]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	2148      	movs	r1, #72	; 0x48
 8018cc6:	f7fc fefc 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8018cca:	2500      	movs	r5, #0
 8018ccc:	f000 bd0e 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018cd0:	2c00      	cmp	r4, #0
 8018cd2:	f000 85a9 	beq.w	8019828 <dwt_ioctl+0x1f4c>
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	2144      	movs	r1, #68	; 0x44
 8018cda:	f7fc fa7e 	bl	80151da <dwt_read32bitoffsetreg>
 8018cde:	6020      	str	r0, [r4, #0]
 8018ce0:	2500      	movs	r5, #0
 8018ce2:	f000 bd03 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018ce6:	2c00      	cmp	r4, #0
 8018ce8:	f000 85a0 	beq.w	801982c <dwt_ioctl+0x1f50>
 8018cec:	2200      	movs	r2, #0
 8018cee:	2148      	movs	r1, #72	; 0x48
 8018cf0:	f7fc fa89 	bl	8015206 <dwt_read16bitoffsetreg>
 8018cf4:	6020      	str	r0, [r4, #0]
 8018cf6:	2500      	movs	r5, #0
 8018cf8:	f000 bcf8 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018cfc:	2c00      	cmp	r4, #0
 8018cfe:	f000 8597 	beq.w	8019830 <dwt_ioctl+0x1f54>
 8018d02:	7823      	ldrb	r3, [r4, #0]
 8018d04:	2200      	movs	r2, #0
 8018d06:	4973      	ldr	r1, [pc, #460]	; (8018ed4 <dwt_ioctl+0x15f8>)
 8018d08:	f7fd f92a 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018d0c:	2500      	movs	r5, #0
 8018d0e:	f000 bced 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018d12:	2c00      	cmp	r4, #0
 8018d14:	f000 858e 	beq.w	8019834 <dwt_ioctl+0x1f58>
 8018d18:	2200      	movs	r2, #0
 8018d1a:	2144      	movs	r1, #68	; 0x44
 8018d1c:	f7fc fab2 	bl	8015284 <dwt_read8bitoffsetreg>
 8018d20:	7020      	strb	r0, [r4, #0]
 8018d22:	2500      	movs	r5, #0
 8018d24:	f000 bce2 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018d28:	2c00      	cmp	r4, #0
 8018d2a:	f000 8585 	beq.w	8019838 <dwt_ioctl+0x1f5c>
 8018d2e:	f7fd f923 	bl	8015f78 <ull_getframelength>
 8018d32:	6020      	str	r0, [r4, #0]
 8018d34:	2500      	movs	r5, #0
 8018d36:	f000 bcd9 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018d3a:	2c00      	cmp	r4, #0
 8018d3c:	f000 857e 	beq.w	801983c <dwt_ioctl+0x1f60>
 8018d40:	2200      	movs	r2, #0
 8018d42:	4965      	ldr	r1, [pc, #404]	; (8018ed8 <dwt_ioctl+0x15fc>)
 8018d44:	f7fc fa5f 	bl	8015206 <dwt_read16bitoffsetreg>
 8018d48:	8020      	strh	r0, [r4, #0]
 8018d4a:	2500      	movs	r5, #0
 8018d4c:	f000 bcce 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018d50:	2c00      	cmp	r4, #0
 8018d52:	f000 8575 	beq.w	8019840 <dwt_ioctl+0x1f64>
 8018d56:	2200      	movs	r2, #0
 8018d58:	4960      	ldr	r1, [pc, #384]	; (8018edc <dwt_ioctl+0x1600>)
 8018d5a:	f7fc fa3e 	bl	80151da <dwt_read32bitoffsetreg>
 8018d5e:	6020      	str	r0, [r4, #0]
 8018d60:	2500      	movs	r5, #0
 8018d62:	f000 bcc3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018d66:	2c00      	cmp	r4, #0
 8018d68:	f000 856c 	beq.w	8019844 <dwt_ioctl+0x1f68>
 8018d6c:	8823      	ldrh	r3, [r4, #0]
 8018d6e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8018d78:	2200      	movs	r2, #0
 8018d7a:	4958      	ldr	r1, [pc, #352]	; (8018edc <dwt_ioctl+0x1600>)
 8018d7c:	f7fe f912 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8018d80:	2500      	movs	r5, #0
 8018d82:	f000 bcb3 	b.w	80196ec <dwt_ioctl+0x1e10>
 8018d86:	2c00      	cmp	r4, #0
 8018d88:	f000 855e 	beq.w	8019848 <dwt_ioctl+0x1f6c>
 8018d8c:	88a7      	ldrh	r7, [r4, #4]
 8018d8e:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8018d92:	7b23      	ldrb	r3, [r4, #12]
 8018d94:	9306      	str	r3, [sp, #24]
 8018d96:	6922      	ldr	r2, [r4, #16]
 8018d98:	9204      	str	r2, [sp, #16]
 8018d9a:	6962      	ldr	r2, [r4, #20]
 8018d9c:	9205      	str	r2, [sp, #20]
 8018d9e:	f00b 0203 	and.w	r2, fp, #3
 8018da2:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8018da6:	2b05      	cmp	r3, #5
 8018da8:	d147      	bne.n	8018e3a <dwt_ioctl+0x155e>
 8018daa:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8018dae:	bf28      	it	cs
 8018db0:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8018db4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8018ee4 <dwt_ioctl+0x1608>
 8018db8:	2f04      	cmp	r7, #4
 8018dba:	d805      	bhi.n	8018dc8 <dwt_ioctl+0x14ec>
 8018dbc:	eb09 0305 	add.w	r3, r9, r5
 8018dc0:	785b      	ldrb	r3, [r3, #1]
 8018dc2:	3b05      	subs	r3, #5
 8018dc4:	429f      	cmp	r7, r3
 8018dc6:	db40      	blt.n	8018e4a <dwt_ioctl+0x156e>
 8018dc8:	2a01      	cmp	r2, #1
 8018dca:	f200 80c8 	bhi.w	8018f5e <dwt_ioctl+0x1682>
 8018dce:	4b44      	ldr	r3, [pc, #272]	; (8018ee0 <dwt_ioctl+0x1604>)
 8018dd0:	5c99      	ldrb	r1, [r3, r2]
 8018dd2:	463e      	mov	r6, r7
 8018dd4:	42b9      	cmp	r1, r7
 8018dd6:	f280 80c4 	bge.w	8018f62 <dwt_ioctl+0x1686>
 8018dda:	1c50      	adds	r0, r2, #1
 8018ddc:	fa53 f080 	uxtab	r0, r3, r0
 8018de0:	2300      	movs	r3, #0
 8018de2:	440b      	add	r3, r1
 8018de4:	b29b      	uxth	r3, r3
 8018de6:	3201      	adds	r2, #1
 8018de8:	b2d2      	uxtb	r2, r2
 8018dea:	2a02      	cmp	r2, #2
 8018dec:	d005      	beq.n	8018dfa <dwt_ioctl+0x151e>
 8018dee:	f810 1b01 	ldrb.w	r1, [r0], #1
 8018df2:	eba6 0c03 	sub.w	ip, r6, r3
 8018df6:	4561      	cmp	r1, ip
 8018df8:	dbf3      	blt.n	8018de2 <dwt_ioctl+0x1506>
 8018dfa:	429f      	cmp	r7, r3
 8018dfc:	bf08      	it	eq
 8018dfe:	9503      	streq	r5, [sp, #12]
 8018e00:	f000 80b4 	beq.w	8018f6c <dwt_ioctl+0x1690>
 8018e04:	f107 0c05 	add.w	ip, r7, #5
 8018e08:	fa1f fc8c 	uxth.w	ip, ip
 8018e0c:	2680      	movs	r6, #128	; 0x80
 8018e0e:	2100      	movs	r1, #0
 8018e10:	9107      	str	r1, [sp, #28]
 8018e12:	9103      	str	r1, [sp, #12]
 8018e14:	9108      	str	r1, [sp, #32]
 8018e16:	2005      	movs	r0, #5
 8018e18:	46b8      	mov	r8, r7
 8018e1a:	4287      	cmp	r7, r0
 8018e1c:	bf38      	it	cc
 8018e1e:	4680      	movcc	r8, r0
 8018e20:	f1a8 0805 	sub.w	r8, r8, #5
 8018e24:	fa1f f888 	uxth.w	r8, r8
 8018e28:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8018ee0 <dwt_ioctl+0x1604>
 8018e2c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018e30:	4683      	mov	fp, r0
 8018e32:	4620      	mov	r0, r4
 8018e34:	460c      	mov	r4, r1
 8018e36:	4686      	mov	lr, r0
 8018e38:	e031      	b.n	8018e9e <dwt_ioctl+0x15c2>
 8018e3a:	f240 1331 	movw	r3, #305	; 0x131
 8018e3e:	429f      	cmp	r7, r3
 8018e40:	bf28      	it	cs
 8018e42:	461f      	movcs	r7, r3
 8018e44:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8018ee8 <dwt_ioctl+0x160c>
 8018e48:	e7b6      	b.n	8018db8 <dwt_ioctl+0x14dc>
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	9a05      	ldr	r2, [sp, #20]
 8018e4e:	8013      	strh	r3, [r2, #0]
 8018e50:	9a04      	ldr	r2, [sp, #16]
 8018e52:	f8c2 b000 	str.w	fp, [r2]
 8018e56:	e098      	b.n	8018f8a <dwt_ioctl+0x16ae>
 8018e58:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8018e5c:	4674      	mov	r4, lr
 8018e5e:	2300      	movs	r3, #0
 8018e60:	9a05      	ldr	r2, [sp, #20]
 8018e62:	8013      	strh	r3, [r2, #0]
 8018e64:	9b04      	ldr	r3, [sp, #16]
 8018e66:	f8c3 b000 	str.w	fp, [r3]
 8018e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e6e:	e08c      	b.n	8018f8a <dwt_ioctl+0x16ae>
 8018e70:	fa1f fb80 	uxth.w	fp, r0
 8018e74:	9207      	str	r2, [sp, #28]
 8018e76:	9503      	str	r5, [sp, #12]
 8018e78:	9308      	str	r3, [sp, #32]
 8018e7a:	2401      	movs	r4, #1
 8018e7c:	2d3f      	cmp	r5, #63	; 0x3f
 8018e7e:	d050      	beq.n	8018f22 <dwt_ioctl+0x1646>
 8018e80:	2900      	cmp	r1, #0
 8018e82:	d139      	bne.n	8018ef8 <dwt_ioctl+0x161c>
 8018e84:	3501      	adds	r5, #1
 8018e86:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8018e8a:	f819 0005 	ldrb.w	r0, [r9, r5]
 8018e8e:	4403      	add	r3, r0
 8018e90:	b29b      	uxth	r3, r3
 8018e92:	429f      	cmp	r7, r3
 8018e94:	d067      	beq.n	8018f66 <dwt_ioctl+0x168a>
 8018e96:	3e01      	subs	r6, #1
 8018e98:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8018e9c:	d0dc      	beq.n	8018e58 <dwt_ioctl+0x157c>
 8018e9e:	4543      	cmp	r3, r8
 8018ea0:	d924      	bls.n	8018eec <dwt_ioctl+0x1610>
 8018ea2:	4563      	cmp	r3, ip
 8018ea4:	d222      	bcs.n	8018eec <dwt_ioctl+0x1610>
 8018ea6:	1af8      	subs	r0, r7, r3
 8018ea8:	b200      	sxth	r0, r0
 8018eaa:	2800      	cmp	r0, #0
 8018eac:	bfb8      	it	lt
 8018eae:	4240      	neglt	r0, r0
 8018eb0:	4558      	cmp	r0, fp
 8018eb2:	dddd      	ble.n	8018e70 <dwt_ioctl+0x1594>
 8018eb4:	2c00      	cmp	r4, #0
 8018eb6:	d0e1      	beq.n	8018e7c <dwt_ioctl+0x15a0>
 8018eb8:	4674      	mov	r4, lr
 8018eba:	9a07      	ldr	r2, [sp, #28]
 8018ebc:	9b08      	ldr	r3, [sp, #32]
 8018ebe:	e055      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018ec0:	00050008 	.word	0x00050008
 8018ec4:	001f000c 	.word	0x001f000c
 8018ec8:	001f0010 	.word	0x001f0010
 8018ecc:	00010020 	.word	0x00010020
 8018ed0:	00030054 	.word	0x00030054
 8018ed4:	00010018 	.word	0x00010018
 8018ed8:	0005002c 	.word	0x0005002c
 8018edc:	000e001c 	.word	0x000e001c
 8018ee0:	08020784 	.word	0x08020784
 8018ee4:	08020704 	.word	0x08020704
 8018ee8:	08020744 	.word	0x08020744
 8018eec:	b984      	cbnz	r4, 8018f10 <dwt_ioctl+0x1634>
 8018eee:	4563      	cmp	r3, ip
 8018ef0:	d3c4      	bcc.n	8018e7c <dwt_ioctl+0x15a0>
 8018ef2:	b199      	cbz	r1, 8018f1c <dwt_ioctl+0x1640>
 8018ef4:	2d3f      	cmp	r5, #63	; 0x3f
 8018ef6:	d014      	beq.n	8018f22 <dwt_ioctl+0x1646>
 8018ef8:	f819 1005 	ldrb.w	r1, [r9, r5]
 8018efc:	1a5b      	subs	r3, r3, r1
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	1e69      	subs	r1, r5, #1
 8018f02:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8018f06:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8018f0a:	bf18      	it	ne
 8018f0c:	2101      	movne	r1, #1
 8018f0e:	e7c0      	b.n	8018e92 <dwt_ioctl+0x15b6>
 8018f10:	4674      	mov	r4, lr
 8018f12:	f819 1005 	ldrb.w	r1, [r9, r5]
 8018f16:	1a5b      	subs	r3, r3, r1
 8018f18:	b29b      	uxth	r3, r3
 8018f1a:	e027      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018f1c:	4674      	mov	r4, lr
 8018f1e:	9503      	str	r5, [sp, #12]
 8018f20:	e024      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018f22:	2c00      	cmp	r4, #0
 8018f24:	d134      	bne.n	8018f90 <dwt_ioctl+0x16b4>
 8018f26:	2a03      	cmp	r2, #3
 8018f28:	d036      	beq.n	8018f98 <dwt_ioctl+0x16bc>
 8018f2a:	2a02      	cmp	r2, #2
 8018f2c:	d009      	beq.n	8018f42 <dwt_ioctl+0x1666>
 8018f2e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8018f32:	1858      	adds	r0, r3, r1
 8018f34:	42b8      	cmp	r0, r7
 8018f36:	dd0b      	ble.n	8018f50 <dwt_ioctl+0x1674>
 8018f38:	440b      	add	r3, r1
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	3201      	adds	r2, #1
 8018f3e:	b2d2      	uxtb	r2, r2
 8018f40:	e7da      	b.n	8018ef8 <dwt_ioctl+0x161c>
 8018f42:	9906      	ldr	r1, [sp, #24]
 8018f44:	2909      	cmp	r1, #9
 8018f46:	d1f2      	bne.n	8018f2e <dwt_ioctl+0x1652>
 8018f48:	4674      	mov	r4, lr
 8018f4a:	213f      	movs	r1, #63	; 0x3f
 8018f4c:	9103      	str	r1, [sp, #12]
 8018f4e:	e00d      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018f50:	4674      	mov	r4, lr
 8018f52:	b283      	uxth	r3, r0
 8018f54:	3201      	adds	r2, #1
 8018f56:	b2d2      	uxtb	r2, r2
 8018f58:	213f      	movs	r1, #63	; 0x3f
 8018f5a:	9103      	str	r1, [sp, #12]
 8018f5c:	e006      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018f5e:	2300      	movs	r3, #0
 8018f60:	e74b      	b.n	8018dfa <dwt_ioctl+0x151e>
 8018f62:	2300      	movs	r3, #0
 8018f64:	e749      	b.n	8018dfa <dwt_ioctl+0x151e>
 8018f66:	4674      	mov	r4, lr
 8018f68:	9503      	str	r5, [sp, #12]
 8018f6a:	463b      	mov	r3, r7
 8018f6c:	9905      	ldr	r1, [sp, #20]
 8018f6e:	800b      	strh	r3, [r1, #0]
 8018f70:	9b03      	ldr	r3, [sp, #12]
 8018f72:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	041a      	lsls	r2, r3, #16
 8018f7a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8018f7e:	431a      	orrs	r2, r3
 8018f80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8018f84:	9a04      	ldr	r2, [sp, #16]
 8018f86:	6013      	str	r3, [r2, #0]
 8018f88:	2300      	movs	r3, #0
 8018f8a:	6023      	str	r3, [r4, #0]
 8018f8c:	2500      	movs	r5, #0
 8018f8e:	e3ad      	b.n	80196ec <dwt_ioctl+0x1e10>
 8018f90:	4674      	mov	r4, lr
 8018f92:	9a07      	ldr	r2, [sp, #28]
 8018f94:	9b08      	ldr	r3, [sp, #32]
 8018f96:	e7e9      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018f98:	4674      	mov	r4, lr
 8018f9a:	213f      	movs	r1, #63	; 0x3f
 8018f9c:	9103      	str	r1, [sp, #12]
 8018f9e:	e7e5      	b.n	8018f6c <dwt_ioctl+0x1690>
 8018fa0:	2c00      	cmp	r4, #0
 8018fa2:	f000 8453 	beq.w	801984c <dwt_ioctl+0x1f70>
 8018fa6:	7827      	ldrb	r7, [r4, #0]
 8018fa8:	7864      	ldrb	r4, [r4, #1]
 8018faa:	f7f2 fdff 	bl	800bbac <decamutexon>
 8018fae:	4605      	mov	r5, r0
 8018fb0:	2c02      	cmp	r4, #2
 8018fb2:	d00e      	beq.n	8018fd2 <dwt_ioctl+0x16f6>
 8018fb4:	2c04      	cmp	r4, #4
 8018fb6:	d00c      	beq.n	8018fd2 <dwt_ioctl+0x16f6>
 8018fb8:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8018fbc:	2c01      	cmp	r4, #1
 8018fbe:	d019      	beq.n	8018ff4 <dwt_ioctl+0x1718>
 8018fc0:	43fb      	mvns	r3, r7
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	9200      	str	r2, [sp, #0]
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	49c1      	ldr	r1, [pc, #772]	; (80192d0 <dwt_ioctl+0x19f4>)
 8018fca:	4630      	mov	r0, r6
 8018fcc:	f7fd fc5a 	bl	8016884 <dwt_modify8bitoffsetreg>
 8018fd0:	e005      	b.n	8018fde <dwt_ioctl+0x1702>
 8018fd2:	463b      	mov	r3, r7
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	49be      	ldr	r1, [pc, #760]	; (80192d0 <dwt_ioctl+0x19f4>)
 8018fd8:	4630      	mov	r0, r6
 8018fda:	f7fc ffc1 	bl	8015f60 <dwt_write8bitoffsetreg>
 8018fde:	463b      	mov	r3, r7
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	49bc      	ldr	r1, [pc, #752]	; (80192d4 <dwt_ioctl+0x19f8>)
 8018fe4:	4630      	mov	r0, r6
 8018fe6:	f7fc fdd7 	bl	8015b98 <dwt_write32bitoffsetreg>
 8018fea:	4628      	mov	r0, r5
 8018fec:	f7f2 fdef 	bl	800bbce <decamutexoff>
 8018ff0:	2500      	movs	r5, #0
 8018ff2:	e37b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8018ff4:	9700      	str	r7, [sp, #0]
 8018ff6:	23ff      	movs	r3, #255	; 0xff
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	49b5      	ldr	r1, [pc, #724]	; (80192d0 <dwt_ioctl+0x19f4>)
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	f7fd fc41 	bl	8016884 <dwt_modify8bitoffsetreg>
 8019002:	e7ec      	b.n	8018fde <dwt_ioctl+0x1702>
 8019004:	2302      	movs	r3, #2
 8019006:	9301      	str	r3, [sp, #4]
 8019008:	2500      	movs	r5, #0
 801900a:	9500      	str	r5, [sp, #0]
 801900c:	462b      	mov	r3, r5
 801900e:	462a      	mov	r2, r5
 8019010:	211a      	movs	r1, #26
 8019012:	f7fc f85a 	bl	80150ca <dwt_xfer3xxx>
 8019016:	e369      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019018:	f7fe fc4c 	bl	80178b4 <ull_softreset_fcmd>
 801901c:	2500      	movs	r5, #0
 801901e:	e365      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019020:	f7fe fc34 	bl	801788c <ull_softreset_no_sema_fcmd>
 8019024:	2500      	movs	r5, #0
 8019026:	e361      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019028:	2302      	movs	r3, #2
 801902a:	9301      	str	r3, [sp, #4]
 801902c:	2500      	movs	r5, #0
 801902e:	9500      	str	r5, [sp, #0]
 8019030:	462b      	mov	r3, r5
 8019032:	462a      	mov	r2, r5
 8019034:	2114      	movs	r1, #20
 8019036:	f7fc f848 	bl	80150ca <dwt_xfer3xxx>
 801903a:	e357      	b.n	80196ec <dwt_ioctl+0x1e10>
 801903c:	2402      	movs	r4, #2
 801903e:	9401      	str	r4, [sp, #4]
 8019040:	2500      	movs	r5, #0
 8019042:	9500      	str	r5, [sp, #0]
 8019044:	462b      	mov	r3, r5
 8019046:	462a      	mov	r2, r5
 8019048:	2115      	movs	r1, #21
 801904a:	f7fc f83e 	bl	80150ca <dwt_xfer3xxx>
 801904e:	9401      	str	r4, [sp, #4]
 8019050:	9500      	str	r5, [sp, #0]
 8019052:	462b      	mov	r3, r5
 8019054:	462a      	mov	r2, r5
 8019056:	2115      	movs	r1, #21
 8019058:	4630      	mov	r0, r6
 801905a:	f7fc f836 	bl	80150ca <dwt_xfer3xxx>
 801905e:	e345      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019060:	2302      	movs	r3, #2
 8019062:	9301      	str	r3, [sp, #4]
 8019064:	2500      	movs	r5, #0
 8019066:	9500      	str	r5, [sp, #0]
 8019068:	462b      	mov	r3, r5
 801906a:	462a      	mov	r2, r5
 801906c:	2116      	movs	r1, #22
 801906e:	f7fc f82c 	bl	80150ca <dwt_xfer3xxx>
 8019072:	e33b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019074:	2c00      	cmp	r4, #0
 8019076:	f000 83eb 	beq.w	8019850 <dwt_ioctl+0x1f74>
 801907a:	b932      	cbnz	r2, 801908a <dwt_ioctl+0x17ae>
 801907c:	2200      	movs	r2, #0
 801907e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8019082:	f7fc f8ff 	bl	8015284 <dwt_read8bitoffsetreg>
 8019086:	7020      	strb	r0, [r4, #0]
 8019088:	e330      	b.n	80196ec <dwt_ioctl+0x1e10>
 801908a:	2201      	movs	r2, #1
 801908c:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8019090:	f7fc f8f8 	bl	8015284 <dwt_read8bitoffsetreg>
 8019094:	7020      	strb	r0, [r4, #0]
 8019096:	2500      	movs	r5, #0
 8019098:	e328      	b.n	80196ec <dwt_ioctl+0x1e10>
 801909a:	2c00      	cmp	r4, #0
 801909c:	f000 83da 	beq.w	8019854 <dwt_ioctl+0x1f78>
 80190a0:	7824      	ldrb	r4, [r4, #0]
 80190a2:	2200      	movs	r2, #0
 80190a4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80190a8:	f7fc f8ec 	bl	8015284 <dwt_read8bitoffsetreg>
 80190ac:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 80190b0:	4323      	orrs	r3, r4
 80190b2:	2200      	movs	r2, #0
 80190b4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80190b8:	4630      	mov	r0, r6
 80190ba:	f7fc ff51 	bl	8015f60 <dwt_write8bitoffsetreg>
 80190be:	2500      	movs	r5, #0
 80190c0:	e314      	b.n	80196ec <dwt_ioctl+0x1e10>
 80190c2:	2c00      	cmp	r4, #0
 80190c4:	f000 83c8 	beq.w	8019858 <dwt_ioctl+0x1f7c>
 80190c8:	7824      	ldrb	r4, [r4, #0]
 80190ca:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 80190ce:	d01d      	beq.n	801910c <dwt_ioctl+0x1830>
 80190d0:	2d01      	cmp	r5, #1
 80190d2:	f040 83c3 	bne.w	801985c <dwt_ioctl+0x1f80>
 80190d6:	2502      	movs	r5, #2
 80190d8:	2201      	movs	r2, #1
 80190da:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80190de:	4630      	mov	r0, r6
 80190e0:	f7fc f8d0 	bl	8015284 <dwt_read8bitoffsetreg>
 80190e4:	b9a4      	cbnz	r4, 8019110 <dwt_ioctl+0x1834>
 80190e6:	ea20 0305 	bic.w	r3, r0, r5
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	2201      	movs	r2, #1
 80190ee:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80190f2:	4630      	mov	r0, r6
 80190f4:	f7fc ff34 	bl	8015f60 <dwt_write8bitoffsetreg>
 80190f8:	2200      	movs	r2, #0
 80190fa:	2110      	movs	r1, #16
 80190fc:	4630      	mov	r0, r6
 80190fe:	f7fc f86c 	bl	80151da <dwt_read32bitoffsetreg>
 8019102:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8019106:	d00a      	beq.n	801911e <dwt_ioctl+0x1842>
 8019108:	2500      	movs	r5, #0
 801910a:	e2ef      	b.n	80196ec <dwt_ioctl+0x1e10>
 801910c:	2504      	movs	r5, #4
 801910e:	e7e3      	b.n	80190d8 <dwt_ioctl+0x17fc>
 8019110:	2c01      	cmp	r4, #1
 8019112:	f040 83a6 	bne.w	8019862 <dwt_ioctl+0x1f86>
 8019116:	ea40 0305 	orr.w	r3, r0, r5
 801911a:	b2db      	uxtb	r3, r3
 801911c:	e7e6      	b.n	80190ec <dwt_ioctl+0x1810>
 801911e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019122:	9300      	str	r3, [sp, #0]
 8019124:	f04f 33ff 	mov.w	r3, #4294967295
 8019128:	2200      	movs	r2, #0
 801912a:	2110      	movs	r1, #16
 801912c:	4630      	mov	r0, r6
 801912e:	f7fd fa39 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8019132:	2500      	movs	r5, #0
 8019134:	e2da      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019136:	2c00      	cmp	r4, #0
 8019138:	f000 8396 	beq.w	8019868 <dwt_ioctl+0x1f8c>
 801913c:	7823      	ldrb	r3, [r4, #0]
 801913e:	035b      	lsls	r3, r3, #13
 8019140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 801914a:	2200      	movs	r2, #0
 801914c:	4962      	ldr	r1, [pc, #392]	; (80192d8 <dwt_ioctl+0x19fc>)
 801914e:	f7fd ff29 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 8019152:	2500      	movs	r5, #0
 8019154:	e2ca      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019156:	2c00      	cmp	r4, #0
 8019158:	f000 8388 	beq.w	801986c <dwt_ioctl+0x1f90>
 801915c:	7825      	ldrb	r5, [r4, #0]
 801915e:	6862      	ldr	r2, [r4, #4]
 8019160:	2a01      	cmp	r2, #1
 8019162:	bf15      	itete	ne
 8019164:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8019168:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 801916c:	27df      	movne	r7, #223	; 0xdf
 801916e:	27ef      	moveq	r7, #239	; 0xef
 8019170:	bf14      	ite	ne
 8019172:	f04f 0820 	movne.w	r8, #32
 8019176:	f04f 0810 	moveq.w	r8, #16
 801917a:	2400      	movs	r4, #0
 801917c:	9400      	str	r4, [sp, #0]
 801917e:	4622      	mov	r2, r4
 8019180:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8019184:	f7fd fa0e 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8019188:	9400      	str	r4, [sp, #0]
 801918a:	463b      	mov	r3, r7
 801918c:	4622      	mov	r2, r4
 801918e:	4953      	ldr	r1, [pc, #332]	; (80192dc <dwt_ioctl+0x1a00>)
 8019190:	4630      	mov	r0, r6
 8019192:	f7fd fb77 	bl	8016884 <dwt_modify8bitoffsetreg>
 8019196:	2d01      	cmp	r5, #1
 8019198:	d002      	beq.n	80191a0 <dwt_ioctl+0x18c4>
 801919a:	b155      	cbz	r5, 80191b2 <dwt_ioctl+0x18d6>
 801919c:	2500      	movs	r5, #0
 801919e:	e2a5      	b.n	80196ec <dwt_ioctl+0x1e10>
 80191a0:	4625      	mov	r5, r4
 80191a2:	9400      	str	r4, [sp, #0]
 80191a4:	463b      	mov	r3, r7
 80191a6:	4622      	mov	r2, r4
 80191a8:	494d      	ldr	r1, [pc, #308]	; (80192e0 <dwt_ioctl+0x1a04>)
 80191aa:	4630      	mov	r0, r6
 80191ac:	f7fd fb6a 	bl	8016884 <dwt_modify8bitoffsetreg>
 80191b0:	e29c      	b.n	80196ec <dwt_ioctl+0x1e10>
 80191b2:	f8cd 8000 	str.w	r8, [sp]
 80191b6:	23ff      	movs	r3, #255	; 0xff
 80191b8:	2200      	movs	r2, #0
 80191ba:	4949      	ldr	r1, [pc, #292]	; (80192e0 <dwt_ioctl+0x1a04>)
 80191bc:	4630      	mov	r0, r6
 80191be:	f7fd fb61 	bl	8016884 <dwt_modify8bitoffsetreg>
 80191c2:	e293      	b.n	80196ec <dwt_ioctl+0x1e10>
 80191c4:	2c00      	cmp	r4, #0
 80191c6:	f000 8353 	beq.w	8019870 <dwt_ioctl+0x1f94>
 80191ca:	7822      	ldrb	r2, [r4, #0]
 80191cc:	f012 0f01 	tst.w	r2, #1
 80191d0:	d02c      	beq.n	801922c <dwt_ioctl+0x1950>
 80191d2:	0157      	lsls	r7, r2, #5
 80191d4:	f007 0740 	and.w	r7, r7, #64	; 0x40
 80191d8:	2440      	movs	r4, #64	; 0x40
 80191da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80191de:	f012 0f04 	tst.w	r2, #4
 80191e2:	d027      	beq.n	8019234 <dwt_ioctl+0x1958>
 80191e4:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80191e8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80191ec:	0112      	lsls	r2, r2, #4
 80191ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80191f2:	4317      	orrs	r7, r2
 80191f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80191f8:	9200      	str	r2, [sp, #0]
 80191fa:	43db      	mvns	r3, r3
 80191fc:	2200      	movs	r2, #0
 80191fe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8019202:	4630      	mov	r0, r6
 8019204:	f7fd f9ce 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8019208:	43e4      	mvns	r4, r4
 801920a:	b2a4      	uxth	r4, r4
 801920c:	2500      	movs	r5, #0
 801920e:	9500      	str	r5, [sp, #0]
 8019210:	4623      	mov	r3, r4
 8019212:	462a      	mov	r2, r5
 8019214:	4931      	ldr	r1, [pc, #196]	; (80192dc <dwt_ioctl+0x1a00>)
 8019216:	4630      	mov	r0, r6
 8019218:	f7fd fec4 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 801921c:	9700      	str	r7, [sp, #0]
 801921e:	4623      	mov	r3, r4
 8019220:	462a      	mov	r2, r5
 8019222:	492f      	ldr	r1, [pc, #188]	; (80192e0 <dwt_ioctl+0x1a04>)
 8019224:	4630      	mov	r0, r6
 8019226:	f7fd febd 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 801922a:	e25f      	b.n	80196ec <dwt_ioctl+0x1e10>
 801922c:	2700      	movs	r7, #0
 801922e:	463c      	mov	r4, r7
 8019230:	463b      	mov	r3, r7
 8019232:	e7d4      	b.n	80191de <dwt_ioctl+0x1902>
 8019234:	2200      	movs	r2, #0
 8019236:	e7df      	b.n	80191f8 <dwt_ioctl+0x191c>
 8019238:	2308      	movs	r3, #8
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	23ff      	movs	r3, #255	; 0xff
 801923e:	2201      	movs	r2, #1
 8019240:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8019244:	f7fd fb1e 	bl	8016884 <dwt_modify8bitoffsetreg>
 8019248:	4c26      	ldr	r4, [pc, #152]	; (80192e4 <dwt_ioctl+0x1a08>)
 801924a:	2302      	movs	r3, #2
 801924c:	9300      	str	r3, [sp, #0]
 801924e:	23ff      	movs	r3, #255	; 0xff
 8019250:	2203      	movs	r2, #3
 8019252:	4621      	mov	r1, r4
 8019254:	4630      	mov	r0, r6
 8019256:	f7fd fb15 	bl	8016884 <dwt_modify8bitoffsetreg>
 801925a:	2500      	movs	r5, #0
 801925c:	9500      	str	r5, [sp, #0]
 801925e:	23f7      	movs	r3, #247	; 0xf7
 8019260:	2201      	movs	r2, #1
 8019262:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8019266:	4630      	mov	r0, r6
 8019268:	f7fd fb0c 	bl	8016884 <dwt_modify8bitoffsetreg>
 801926c:	9500      	str	r5, [sp, #0]
 801926e:	23fd      	movs	r3, #253	; 0xfd
 8019270:	2203      	movs	r2, #3
 8019272:	4621      	mov	r1, r4
 8019274:	4630      	mov	r0, r6
 8019276:	f7fd fb05 	bl	8016884 <dwt_modify8bitoffsetreg>
 801927a:	e237      	b.n	80196ec <dwt_ioctl+0x1e10>
 801927c:	2c00      	cmp	r4, #0
 801927e:	f000 82f9 	beq.w	8019874 <dwt_ioctl+0x1f98>
 8019282:	8863      	ldrh	r3, [r4, #2]
 8019284:	00db      	lsls	r3, r3, #3
 8019286:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801928a:	7822      	ldrb	r2, [r4, #0]
 801928c:	b10a      	cbz	r2, 8019292 <dwt_ioctl+0x19b6>
 801928e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019292:	9300      	str	r3, [sp, #0]
 8019294:	f24f 0307 	movw	r3, #61447	; 0xf007
 8019298:	2200      	movs	r2, #0
 801929a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801929e:	4630      	mov	r0, r6
 80192a0:	f7fd fe80 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80192a4:	2500      	movs	r5, #0
 80192a6:	e221      	b.n	80196ec <dwt_ioctl+0x1e10>
 80192a8:	2500      	movs	r5, #0
 80192aa:	9500      	str	r5, [sp, #0]
 80192ac:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80192b0:	462a      	mov	r2, r5
 80192b2:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80192b6:	f7fd fe75 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80192ba:	e217      	b.n	80196ec <dwt_ioctl+0x1e10>
 80192bc:	2c00      	cmp	r4, #0
 80192be:	f000 82db 	beq.w	8019878 <dwt_ioctl+0x1f9c>
 80192c2:	2200      	movs	r2, #0
 80192c4:	4908      	ldr	r1, [pc, #32]	; (80192e8 <dwt_ioctl+0x1a0c>)
 80192c6:	f7fb ff9e 	bl	8015206 <dwt_read16bitoffsetreg>
 80192ca:	8020      	strh	r0, [r4, #0]
 80192cc:	2500      	movs	r5, #0
 80192ce:	e20d      	b.n	80196ec <dwt_ioctl+0x1e10>
 80192d0:	0001001c 	.word	0x0001001c
 80192d4:	00010018 	.word	0x00010018
 80192d8:	000e000c 	.word	0x000e000c
 80192dc:	00050008 	.word	0x00050008
 80192e0:	0005000c 	.word	0x0005000c
 80192e4:	00110008 	.word	0x00110008
 80192e8:	00110048 	.word	0x00110048
 80192ec:	2c00      	cmp	r4, #0
 80192ee:	f000 82c5 	beq.w	801987c <dwt_ioctl+0x1fa0>
 80192f2:	7823      	ldrb	r3, [r4, #0]
 80192f4:	2b01      	cmp	r3, #1
 80192f6:	7862      	ldrb	r2, [r4, #1]
 80192f8:	78a3      	ldrb	r3, [r4, #2]
 80192fa:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 80192fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019302:	78e2      	ldrb	r2, [r4, #3]
 8019304:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8019308:	7922      	ldrb	r2, [r4, #4]
 801930a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801930e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019312:	bf0c      	ite	eq
 8019314:	2202      	moveq	r2, #2
 8019316:	2200      	movne	r2, #0
 8019318:	49b6      	ldr	r1, [pc, #728]	; (80195f4 <dwt_ioctl+0x1d18>)
 801931a:	f7fc fbd2 	bl	8015ac2 <dwt_write16bitoffsetreg>
 801931e:	2500      	movs	r5, #0
 8019320:	e1e4      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019322:	2c00      	cmp	r4, #0
 8019324:	f000 82ac 	beq.w	8019880 <dwt_ioctl+0x1fa4>
 8019328:	6863      	ldr	r3, [r4, #4]
 801932a:	7822      	ldrb	r2, [r4, #0]
 801932c:	b13a      	cbz	r2, 801933e <dwt_ioctl+0x1a62>
 801932e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019332:	2200      	movs	r2, #0
 8019334:	49b0      	ldr	r1, [pc, #704]	; (80195f8 <dwt_ioctl+0x1d1c>)
 8019336:	f7fc fc2f 	bl	8015b98 <dwt_write32bitoffsetreg>
 801933a:	2500      	movs	r5, #0
 801933c:	e1d6      	b.n	80196ec <dwt_ioctl+0x1e10>
 801933e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019342:	49ae      	ldr	r1, [pc, #696]	; (80195fc <dwt_ioctl+0x1d20>)
 8019344:	f7fc fc28 	bl	8015b98 <dwt_write32bitoffsetreg>
 8019348:	2500      	movs	r5, #0
 801934a:	e1cf      	b.n	80196ec <dwt_ioctl+0x1e10>
 801934c:	2c00      	cmp	r4, #0
 801934e:	f000 8299 	beq.w	8019884 <dwt_ioctl+0x1fa8>
 8019352:	7823      	ldrb	r3, [r4, #0]
 8019354:	2401      	movs	r4, #1
 8019356:	409c      	lsls	r4, r3
 8019358:	b2e4      	uxtb	r4, r4
 801935a:	2310      	movs	r3, #16
 801935c:	9300      	str	r3, [sp, #0]
 801935e:	23ff      	movs	r3, #255	; 0xff
 8019360:	2200      	movs	r2, #0
 8019362:	49a7      	ldr	r1, [pc, #668]	; (8019600 <dwt_ioctl+0x1d24>)
 8019364:	f7fd fa8e 	bl	8016884 <dwt_modify8bitoffsetreg>
 8019368:	43e3      	mvns	r3, r4
 801936a:	4fa2      	ldr	r7, [pc, #648]	; (80195f4 <dwt_ioctl+0x1d18>)
 801936c:	2500      	movs	r5, #0
 801936e:	9500      	str	r5, [sp, #0]
 8019370:	b2db      	uxtb	r3, r3
 8019372:	462a      	mov	r2, r5
 8019374:	4639      	mov	r1, r7
 8019376:	4630      	mov	r0, r6
 8019378:	f7fd fa84 	bl	8016884 <dwt_modify8bitoffsetreg>
 801937c:	9400      	str	r4, [sp, #0]
 801937e:	23ff      	movs	r3, #255	; 0xff
 8019380:	462a      	mov	r2, r5
 8019382:	4639      	mov	r1, r7
 8019384:	4630      	mov	r0, r6
 8019386:	f7fd fa7d 	bl	8016884 <dwt_modify8bitoffsetreg>
 801938a:	e1af      	b.n	80196ec <dwt_ioctl+0x1e10>
 801938c:	2c00      	cmp	r4, #0
 801938e:	f000 827b 	beq.w	8019888 <dwt_ioctl+0x1fac>
 8019392:	7822      	ldrb	r2, [r4, #0]
 8019394:	7863      	ldrb	r3, [r4, #1]
 8019396:	b19b      	cbz	r3, 80193c0 <dwt_ioctl+0x1ae4>
 8019398:	2a00      	cmp	r2, #0
 801939a:	f040 8297 	bne.w	80198cc <dwt_ioctl+0x1ff0>
 801939e:	2400      	movs	r4, #0
 80193a0:	9400      	str	r4, [sp, #0]
 80193a2:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80193a6:	4622      	mov	r2, r4
 80193a8:	2110      	movs	r1, #16
 80193aa:	f7fd f8fb 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80193ae:	9400      	str	r4, [sp, #0]
 80193b0:	4b94      	ldr	r3, [pc, #592]	; (8019604 <dwt_ioctl+0x1d28>)
 80193b2:	4622      	mov	r2, r4
 80193b4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80193b8:	4630      	mov	r0, r6
 80193ba:	f7fd f8f3 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80193be:	e017      	b.n	80193f0 <dwt_ioctl+0x1b14>
 80193c0:	2a00      	cmp	r2, #0
 80193c2:	f000 8285 	beq.w	80198d0 <dwt_ioctl+0x1ff4>
 80193c6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80193ca:	2400      	movs	r4, #0
 80193cc:	9400      	str	r4, [sp, #0]
 80193ce:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80193d2:	4622      	mov	r2, r4
 80193d4:	2110      	movs	r1, #16
 80193d6:	4630      	mov	r0, r6
 80193d8:	f7fd f8e4 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80193dc:	9500      	str	r5, [sp, #0]
 80193de:	4b89      	ldr	r3, [pc, #548]	; (8019604 <dwt_ioctl+0x1d28>)
 80193e0:	4622      	mov	r2, r4
 80193e2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80193e6:	4630      	mov	r0, r6
 80193e8:	f7fd f8dc 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80193ec:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 80193f0:	9400      	str	r4, [sp, #0]
 80193f2:	f04f 33ff 	mov.w	r3, #4294967295
 80193f6:	2200      	movs	r2, #0
 80193f8:	2110      	movs	r1, #16
 80193fa:	4630      	mov	r0, r6
 80193fc:	f7fd f8d2 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8019400:	2500      	movs	r5, #0
 8019402:	e173      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019404:	2c00      	cmp	r4, #0
 8019406:	f000 8241 	beq.w	801988c <dwt_ioctl+0x1fb0>
 801940a:	7823      	ldrb	r3, [r4, #0]
 801940c:	b93b      	cbnz	r3, 801941e <dwt_ioctl+0x1b42>
 801940e:	2500      	movs	r5, #0
 8019410:	9500      	str	r5, [sp, #0]
 8019412:	23df      	movs	r3, #223	; 0xdf
 8019414:	2203      	movs	r2, #3
 8019416:	497c      	ldr	r1, [pc, #496]	; (8019608 <dwt_ioctl+0x1d2c>)
 8019418:	f7fd fa34 	bl	8016884 <dwt_modify8bitoffsetreg>
 801941c:	e166      	b.n	80196ec <dwt_ioctl+0x1e10>
 801941e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8019422:	9300      	str	r3, [sp, #0]
 8019424:	f04f 33ff 	mov.w	r3, #4294967295
 8019428:	2200      	movs	r2, #0
 801942a:	4977      	ldr	r1, [pc, #476]	; (8019608 <dwt_ioctl+0x1d2c>)
 801942c:	f7fd f8ba 	bl	80165a4 <dwt_modify32bitoffsetreg>
 8019430:	2500      	movs	r5, #0
 8019432:	e15b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019434:	2c00      	cmp	r4, #0
 8019436:	f000 822b 	beq.w	8019890 <dwt_ioctl+0x1fb4>
 801943a:	7823      	ldrb	r3, [r4, #0]
 801943c:	b93b      	cbnz	r3, 801944e <dwt_ioctl+0x1b72>
 801943e:	2500      	movs	r5, #0
 8019440:	9500      	str	r5, [sp, #0]
 8019442:	237f      	movs	r3, #127	; 0x7f
 8019444:	2203      	movs	r2, #3
 8019446:	4971      	ldr	r1, [pc, #452]	; (801960c <dwt_ioctl+0x1d30>)
 8019448:	f7fd fa1c 	bl	8016884 <dwt_modify8bitoffsetreg>
 801944c:	e14e      	b.n	80196ec <dwt_ioctl+0x1e10>
 801944e:	2380      	movs	r3, #128	; 0x80
 8019450:	9300      	str	r3, [sp, #0]
 8019452:	23ff      	movs	r3, #255	; 0xff
 8019454:	2203      	movs	r2, #3
 8019456:	496d      	ldr	r1, [pc, #436]	; (801960c <dwt_ioctl+0x1d30>)
 8019458:	f7fd fa14 	bl	8016884 <dwt_modify8bitoffsetreg>
 801945c:	2500      	movs	r5, #0
 801945e:	e145      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019460:	2c00      	cmp	r4, #0
 8019462:	f000 8217 	beq.w	8019894 <dwt_ioctl+0x1fb8>
 8019466:	b2e3      	uxtb	r3, r4
 8019468:	1c9a      	adds	r2, r3, #2
 801946a:	2301      	movs	r3, #1
 801946c:	4093      	lsls	r3, r2
 801946e:	3b01      	subs	r3, #1
 8019470:	b2db      	uxtb	r3, r3
 8019472:	2200      	movs	r2, #0
 8019474:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8019478:	f7fc fd72 	bl	8015f60 <dwt_write8bitoffsetreg>
 801947c:	2500      	movs	r5, #0
 801947e:	e135      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019480:	2c00      	cmp	r4, #0
 8019482:	f000 8209 	beq.w	8019898 <dwt_ioctl+0x1fbc>
 8019486:	7ae3      	ldrb	r3, [r4, #11]
 8019488:	2b00      	cmp	r3, #0
 801948a:	f000 8207 	beq.w	801989c <dwt_ioctl+0x1fc0>
 801948e:	7b63      	ldrb	r3, [r4, #13]
 8019490:	2b01      	cmp	r3, #1
 8019492:	7b20      	ldrb	r0, [r4, #12]
 8019494:	bf94      	ite	ls
 8019496:	2203      	movls	r2, #3
 8019498:	2204      	movhi	r2, #4
 801949a:	2110      	movs	r1, #16
 801949c:	4b5c      	ldr	r3, [pc, #368]	; (8019610 <dwt_ioctl+0x1d34>)
 801949e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80194a2:	f7fb fdf5 	bl	8015090 <get_sts_mnth>
 80194a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80194aa:	9000      	str	r0, [sp, #0]
 80194ac:	f64f 7380 	movw	r3, #65408	; 0xff80
 80194b0:	2202      	movs	r2, #2
 80194b2:	4958      	ldr	r1, [pc, #352]	; (8019614 <dwt_ioctl+0x1d38>)
 80194b4:	4630      	mov	r0, r6
 80194b6:	f7fd fd75 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 80194ba:	2394      	movs	r3, #148	; 0x94
 80194bc:	2200      	movs	r2, #0
 80194be:	4956      	ldr	r1, [pc, #344]	; (8019618 <dwt_ioctl+0x1d3c>)
 80194c0:	4630      	mov	r0, r6
 80194c2:	f7fc fd4d 	bl	8015f60 <dwt_write8bitoffsetreg>
 80194c6:	2500      	movs	r5, #0
 80194c8:	e110      	b.n	80196ec <dwt_ioctl+0x1e10>
 80194ca:	2c00      	cmp	r4, #0
 80194cc:	f000 81e8 	beq.w	80198a0 <dwt_ioctl+0x1fc4>
 80194d0:	2200      	movs	r2, #0
 80194d2:	4952      	ldr	r1, [pc, #328]	; (801961c <dwt_ioctl+0x1d40>)
 80194d4:	f7fb fe81 	bl	80151da <dwt_read32bitoffsetreg>
 80194d8:	6020      	str	r0, [r4, #0]
 80194da:	2500      	movs	r5, #0
 80194dc:	e106      	b.n	80196ec <dwt_ioctl+0x1e10>
 80194de:	2c00      	cmp	r4, #0
 80194e0:	f000 81e0 	beq.w	80198a4 <dwt_ioctl+0x1fc8>
 80194e4:	2200      	movs	r2, #0
 80194e6:	494e      	ldr	r1, [pc, #312]	; (8019620 <dwt_ioctl+0x1d44>)
 80194e8:	f7fb fe77 	bl	80151da <dwt_read32bitoffsetreg>
 80194ec:	6020      	str	r0, [r4, #0]
 80194ee:	2500      	movs	r5, #0
 80194f0:	e0fc      	b.n	80196ec <dwt_ioctl+0x1e10>
 80194f2:	2c00      	cmp	r4, #0
 80194f4:	f000 81d8 	beq.w	80198a8 <dwt_ioctl+0x1fcc>
 80194f8:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80194fc:	6023      	str	r3, [r4, #0]
 80194fe:	2500      	movs	r5, #0
 8019500:	e0f4      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019502:	2c00      	cmp	r4, #0
 8019504:	f000 81d2 	beq.w	80198ac <dwt_ioctl+0x1fd0>
 8019508:	2500      	movs	r5, #0
 801950a:	950a      	str	r5, [sp, #40]	; 0x28
 801950c:	af0c      	add	r7, sp, #48	; 0x30
 801950e:	2319      	movs	r3, #25
 8019510:	f847 3d04 	str.w	r3, [r7, #-4]!
 8019514:	9700      	str	r7, [sp, #0]
 8019516:	2304      	movs	r3, #4
 8019518:	462a      	mov	r2, r5
 801951a:	4942      	ldr	r1, [pc, #264]	; (8019624 <dwt_ioctl+0x1d48>)
 801951c:	f7fc fac6 	bl	8015aac <dwt_writetodevice>
 8019520:	f641 7348 	movw	r3, #8008	; 0x1f48
 8019524:	930b      	str	r3, [sp, #44]	; 0x2c
 8019526:	9700      	str	r7, [sp, #0]
 8019528:	2304      	movs	r3, #4
 801952a:	462a      	mov	r2, r5
 801952c:	493e      	ldr	r1, [pc, #248]	; (8019628 <dwt_ioctl+0x1d4c>)
 801952e:	4630      	mov	r0, r6
 8019530:	f7fc fabc 	bl	8015aac <dwt_writetodevice>
 8019534:	ab0a      	add	r3, sp, #40	; 0x28
 8019536:	9300      	str	r3, [sp, #0]
 8019538:	2304      	movs	r3, #4
 801953a:	462a      	mov	r2, r5
 801953c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8019540:	4630      	mov	r0, r6
 8019542:	f7fb fe40 	bl	80151c6 <dwt_readfromdevice>
 8019546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019548:	6023      	str	r3, [r4, #0]
 801954a:	e0cf      	b.n	80196ec <dwt_ioctl+0x1e10>
 801954c:	2c00      	cmp	r4, #0
 801954e:	f000 81af 	beq.w	80198b0 <dwt_ioctl+0x1fd4>
 8019552:	2200      	movs	r2, #0
 8019554:	4935      	ldr	r1, [pc, #212]	; (801962c <dwt_ioctl+0x1d50>)
 8019556:	f7fb fe40 	bl	80151da <dwt_read32bitoffsetreg>
 801955a:	b280      	uxth	r0, r0
 801955c:	6020      	str	r0, [r4, #0]
 801955e:	2200      	movs	r2, #0
 8019560:	4933      	ldr	r1, [pc, #204]	; (8019630 <dwt_ioctl+0x1d54>)
 8019562:	4630      	mov	r0, r6
 8019564:	f7fb fe39 	bl	80151da <dwt_read32bitoffsetreg>
 8019568:	0d43      	lsrs	r3, r0, #21
 801956a:	019b      	lsls	r3, r3, #6
 801956c:	b29b      	uxth	r3, r3
 801956e:	6063      	str	r3, [r4, #4]
 8019570:	2500      	movs	r5, #0
 8019572:	e0bb      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019574:	2c00      	cmp	r4, #0
 8019576:	f000 819d 	beq.w	80198b4 <dwt_ioctl+0x1fd8>
 801957a:	7d63      	ldrb	r3, [r4, #21]
 801957c:	b133      	cbz	r3, 801958c <dwt_ioctl+0x1cb0>
 801957e:	2b01      	cmp	r3, #1
 8019580:	d062      	beq.n	8019648 <dwt_ioctl+0x1d6c>
 8019582:	2b02      	cmp	r3, #2
 8019584:	f000 8089 	beq.w	801969a <dwt_ioctl+0x1dbe>
 8019588:	23ff      	movs	r3, #255	; 0xff
 801958a:	e02f      	b.n	80195ec <dwt_ioctl+0x1d10>
 801958c:	2200      	movs	r2, #0
 801958e:	4929      	ldr	r1, [pc, #164]	; (8019634 <dwt_ioctl+0x1d58>)
 8019590:	f7fb fe23 	bl	80151da <dwt_read32bitoffsetreg>
 8019594:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8019598:	6020      	str	r0, [r4, #0]
 801959a:	2200      	movs	r2, #0
 801959c:	4926      	ldr	r1, [pc, #152]	; (8019638 <dwt_ioctl+0x1d5c>)
 801959e:	4630      	mov	r0, r6
 80195a0:	f7fb fe1b 	bl	80151da <dwt_read32bitoffsetreg>
 80195a4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80195a8:	6060      	str	r0, [r4, #4]
 80195aa:	2200      	movs	r2, #0
 80195ac:	4923      	ldr	r1, [pc, #140]	; (801963c <dwt_ioctl+0x1d60>)
 80195ae:	4630      	mov	r0, r6
 80195b0:	f7fb fe13 	bl	80151da <dwt_read32bitoffsetreg>
 80195b4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80195b8:	60a0      	str	r0, [r4, #8]
 80195ba:	2200      	movs	r2, #0
 80195bc:	4920      	ldr	r1, [pc, #128]	; (8019640 <dwt_ioctl+0x1d64>)
 80195be:	4630      	mov	r0, r6
 80195c0:	f7fb fe0b 	bl	80151da <dwt_read32bitoffsetreg>
 80195c4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80195c8:	60e0      	str	r0, [r4, #12]
 80195ca:	2200      	movs	r2, #0
 80195cc:	491d      	ldr	r1, [pc, #116]	; (8019644 <dwt_ioctl+0x1d68>)
 80195ce:	4630      	mov	r0, r6
 80195d0:	f7fb fe03 	bl	80151da <dwt_read32bitoffsetreg>
 80195d4:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80195d8:	6120      	str	r0, [r4, #16]
 80195da:	2203      	movs	r2, #3
 80195dc:	490f      	ldr	r1, [pc, #60]	; (801961c <dwt_ioctl+0x1d40>)
 80195de:	4630      	mov	r0, r6
 80195e0:	f7fb fe50 	bl	8015284 <dwt_read8bitoffsetreg>
 80195e4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80195e8:	7520      	strb	r0, [r4, #20]
 80195ea:	2300      	movs	r3, #0
 80195ec:	75a3      	strb	r3, [r4, #22]
 80195ee:	2500      	movs	r5, #0
 80195f0:	e07c      	b.n	80196ec <dwt_ioctl+0x1e10>
 80195f2:	bf00      	nop
 80195f4:	0011003c 	.word	0x0011003c
 80195f8:	00110044 	.word	0x00110044
 80195fc:	00110040 	.word	0x00110040
 8019600:	00070048 	.word	0x00070048
 8019604:	f7fc0fff 	.word	0xf7fc0fff
 8019608:	000f0028 	.word	0x000f0028
 801960c:	0007001c 	.word	0x0007001c
 8019610:	08020790 	.word	0x08020790
 8019614:	000e0014 	.word	0x000e0014
 8019618:	000e0018 	.word	0x000e0018
 801961c:	00030054 	.word	0x00030054
 8019620:	000f004c 	.word	0x000f004c
 8019624:	001f0004 	.word	0x001f0004
 8019628:	001f0008 	.word	0x001f0008
 801962c:	000c0048 	.word	0x000c0048
 8019630:	000c0028 	.word	0x000c0028
 8019634:	000c0058 	.word	0x000c0058
 8019638:	000c0030 	.word	0x000c0030
 801963c:	000c0034 	.word	0x000c0034
 8019640:	000c0038 	.word	0x000c0038
 8019644:	000c002c 	.word	0x000c002c
 8019648:	2200      	movs	r2, #0
 801964a:	49aa      	ldr	r1, [pc, #680]	; (80198f4 <dwt_ioctl+0x2018>)
 801964c:	f7fb fdc5 	bl	80151da <dwt_read32bitoffsetreg>
 8019650:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8019654:	6020      	str	r0, [r4, #0]
 8019656:	2200      	movs	r2, #0
 8019658:	49a7      	ldr	r1, [pc, #668]	; (80198f8 <dwt_ioctl+0x201c>)
 801965a:	4630      	mov	r0, r6
 801965c:	f7fb fdbd 	bl	80151da <dwt_read32bitoffsetreg>
 8019660:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8019664:	6060      	str	r0, [r4, #4]
 8019666:	2200      	movs	r2, #0
 8019668:	49a4      	ldr	r1, [pc, #656]	; (80198fc <dwt_ioctl+0x2020>)
 801966a:	4630      	mov	r0, r6
 801966c:	f7fb fdb5 	bl	80151da <dwt_read32bitoffsetreg>
 8019670:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8019674:	60a0      	str	r0, [r4, #8]
 8019676:	2200      	movs	r2, #0
 8019678:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 801967c:	4630      	mov	r0, r6
 801967e:	f7fb fdac 	bl	80151da <dwt_read32bitoffsetreg>
 8019682:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8019686:	60e0      	str	r0, [r4, #12]
 8019688:	2200      	movs	r2, #0
 801968a:	499d      	ldr	r1, [pc, #628]	; (8019900 <dwt_ioctl+0x2024>)
 801968c:	4630      	mov	r0, r6
 801968e:	f7fb fda4 	bl	80151da <dwt_read32bitoffsetreg>
 8019692:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8019696:	6120      	str	r0, [r4, #16]
 8019698:	e79f      	b.n	80195da <dwt_ioctl+0x1cfe>
 801969a:	2200      	movs	r2, #0
 801969c:	4999      	ldr	r1, [pc, #612]	; (8019904 <dwt_ioctl+0x2028>)
 801969e:	f7fb fd9c 	bl	80151da <dwt_read32bitoffsetreg>
 80196a2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80196a6:	6020      	str	r0, [r4, #0]
 80196a8:	2200      	movs	r2, #0
 80196aa:	4997      	ldr	r1, [pc, #604]	; (8019908 <dwt_ioctl+0x202c>)
 80196ac:	4630      	mov	r0, r6
 80196ae:	f7fb fd94 	bl	80151da <dwt_read32bitoffsetreg>
 80196b2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80196b6:	6060      	str	r0, [r4, #4]
 80196b8:	2200      	movs	r2, #0
 80196ba:	4994      	ldr	r1, [pc, #592]	; (801990c <dwt_ioctl+0x2030>)
 80196bc:	4630      	mov	r0, r6
 80196be:	f7fb fd8c 	bl	80151da <dwt_read32bitoffsetreg>
 80196c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80196c6:	60a0      	str	r0, [r4, #8]
 80196c8:	2200      	movs	r2, #0
 80196ca:	4991      	ldr	r1, [pc, #580]	; (8019910 <dwt_ioctl+0x2034>)
 80196cc:	4630      	mov	r0, r6
 80196ce:	f7fb fd84 	bl	80151da <dwt_read32bitoffsetreg>
 80196d2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80196d6:	60e0      	str	r0, [r4, #12]
 80196d8:	2200      	movs	r2, #0
 80196da:	498e      	ldr	r1, [pc, #568]	; (8019914 <dwt_ioctl+0x2038>)
 80196dc:	4630      	mov	r0, r6
 80196de:	f7fb fd7c 	bl	80151da <dwt_read32bitoffsetreg>
 80196e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80196e6:	6120      	str	r0, [r4, #16]
 80196e8:	e777      	b.n	80195da <dwt_ioctl+0x1cfe>
 80196ea:	2500      	movs	r5, #0
 80196ec:	4628      	mov	r0, r5
 80196ee:	b00d      	add	sp, #52	; 0x34
 80196f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f4:	2500      	movs	r5, #0
 80196f6:	e7f9      	b.n	80196ec <dwt_ioctl+0x1e10>
 80196f8:	2500      	movs	r5, #0
 80196fa:	e7f7      	b.n	80196ec <dwt_ioctl+0x1e10>
 80196fc:	2500      	movs	r5, #0
 80196fe:	e7f5      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019700:	2500      	movs	r5, #0
 8019702:	e7f3      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019704:	2500      	movs	r5, #0
 8019706:	e7f1      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019708:	2500      	movs	r5, #0
 801970a:	e7ef      	b.n	80196ec <dwt_ioctl+0x1e10>
 801970c:	2500      	movs	r5, #0
 801970e:	e7ed      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019710:	2500      	movs	r5, #0
 8019712:	e7eb      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019714:	2500      	movs	r5, #0
 8019716:	e7e9      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019718:	2500      	movs	r5, #0
 801971a:	e7e7      	b.n	80196ec <dwt_ioctl+0x1e10>
 801971c:	2500      	movs	r5, #0
 801971e:	e7e5      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019720:	2500      	movs	r5, #0
 8019722:	e7e3      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019724:	2500      	movs	r5, #0
 8019726:	e7e1      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019728:	2500      	movs	r5, #0
 801972a:	e7df      	b.n	80196ec <dwt_ioctl+0x1e10>
 801972c:	2500      	movs	r5, #0
 801972e:	e7dd      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019730:	2500      	movs	r5, #0
 8019732:	e7db      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019734:	2500      	movs	r5, #0
 8019736:	e7d9      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019738:	2500      	movs	r5, #0
 801973a:	e7d7      	b.n	80196ec <dwt_ioctl+0x1e10>
 801973c:	2500      	movs	r5, #0
 801973e:	e7d5      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019740:	2500      	movs	r5, #0
 8019742:	e7d3      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019744:	2500      	movs	r5, #0
 8019746:	e7d1      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019748:	2500      	movs	r5, #0
 801974a:	e7cf      	b.n	80196ec <dwt_ioctl+0x1e10>
 801974c:	2500      	movs	r5, #0
 801974e:	e7cd      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019750:	2500      	movs	r5, #0
 8019752:	e7cb      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019754:	2500      	movs	r5, #0
 8019756:	e7c9      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019758:	2500      	movs	r5, #0
 801975a:	e7c7      	b.n	80196ec <dwt_ioctl+0x1e10>
 801975c:	2500      	movs	r5, #0
 801975e:	e7c5      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019760:	2500      	movs	r5, #0
 8019762:	e7c3      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019764:	2500      	movs	r5, #0
 8019766:	e7c1      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019768:	2500      	movs	r5, #0
 801976a:	e7bf      	b.n	80196ec <dwt_ioctl+0x1e10>
 801976c:	2500      	movs	r5, #0
 801976e:	e7bd      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019770:	2500      	movs	r5, #0
 8019772:	e7bb      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019774:	2500      	movs	r5, #0
 8019776:	e7b9      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019778:	2500      	movs	r5, #0
 801977a:	e7b7      	b.n	80196ec <dwt_ioctl+0x1e10>
 801977c:	2500      	movs	r5, #0
 801977e:	e7b5      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019780:	2500      	movs	r5, #0
 8019782:	e7b3      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019784:	2500      	movs	r5, #0
 8019786:	e7b1      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019788:	2500      	movs	r5, #0
 801978a:	e7af      	b.n	80196ec <dwt_ioctl+0x1e10>
 801978c:	2500      	movs	r5, #0
 801978e:	e7ad      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019790:	2500      	movs	r5, #0
 8019792:	e7ab      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019794:	2500      	movs	r5, #0
 8019796:	e7a9      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019798:	2500      	movs	r5, #0
 801979a:	e7a7      	b.n	80196ec <dwt_ioctl+0x1e10>
 801979c:	2500      	movs	r5, #0
 801979e:	e7a5      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197a0:	2500      	movs	r5, #0
 80197a2:	e7a3      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197a4:	2500      	movs	r5, #0
 80197a6:	e7a1      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197a8:	2500      	movs	r5, #0
 80197aa:	e79f      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197ac:	2500      	movs	r5, #0
 80197ae:	e79d      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197b0:	2500      	movs	r5, #0
 80197b2:	e79b      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197b4:	2500      	movs	r5, #0
 80197b6:	e799      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197b8:	2500      	movs	r5, #0
 80197ba:	e797      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197bc:	2500      	movs	r5, #0
 80197be:	e795      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197c0:	2500      	movs	r5, #0
 80197c2:	e793      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197c4:	2500      	movs	r5, #0
 80197c6:	e791      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197c8:	2500      	movs	r5, #0
 80197ca:	e78f      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197cc:	2500      	movs	r5, #0
 80197ce:	e78d      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197d0:	2500      	movs	r5, #0
 80197d2:	e78b      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197d4:	2500      	movs	r5, #0
 80197d6:	e789      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197d8:	2500      	movs	r5, #0
 80197da:	e787      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197dc:	2500      	movs	r5, #0
 80197de:	e785      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197e0:	2500      	movs	r5, #0
 80197e2:	e783      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197e4:	2500      	movs	r5, #0
 80197e6:	e781      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197e8:	2500      	movs	r5, #0
 80197ea:	e77f      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197ec:	2500      	movs	r5, #0
 80197ee:	e77d      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197f0:	2500      	movs	r5, #0
 80197f2:	e77b      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197f4:	2500      	movs	r5, #0
 80197f6:	e779      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197f8:	2500      	movs	r5, #0
 80197fa:	e777      	b.n	80196ec <dwt_ioctl+0x1e10>
 80197fc:	2500      	movs	r5, #0
 80197fe:	e775      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019800:	2500      	movs	r5, #0
 8019802:	e773      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019804:	2500      	movs	r5, #0
 8019806:	e771      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019808:	2500      	movs	r5, #0
 801980a:	e76f      	b.n	80196ec <dwt_ioctl+0x1e10>
 801980c:	2500      	movs	r5, #0
 801980e:	e76d      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019810:	2500      	movs	r5, #0
 8019812:	e76b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019814:	2500      	movs	r5, #0
 8019816:	e769      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019818:	2500      	movs	r5, #0
 801981a:	e767      	b.n	80196ec <dwt_ioctl+0x1e10>
 801981c:	2500      	movs	r5, #0
 801981e:	e765      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019820:	2500      	movs	r5, #0
 8019822:	e763      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019824:	2500      	movs	r5, #0
 8019826:	e761      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019828:	2500      	movs	r5, #0
 801982a:	e75f      	b.n	80196ec <dwt_ioctl+0x1e10>
 801982c:	2500      	movs	r5, #0
 801982e:	e75d      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019830:	2500      	movs	r5, #0
 8019832:	e75b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019834:	2500      	movs	r5, #0
 8019836:	e759      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019838:	2500      	movs	r5, #0
 801983a:	e757      	b.n	80196ec <dwt_ioctl+0x1e10>
 801983c:	2500      	movs	r5, #0
 801983e:	e755      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019840:	2500      	movs	r5, #0
 8019842:	e753      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019844:	2500      	movs	r5, #0
 8019846:	e751      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019848:	2500      	movs	r5, #0
 801984a:	e74f      	b.n	80196ec <dwt_ioctl+0x1e10>
 801984c:	2500      	movs	r5, #0
 801984e:	e74d      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019850:	2500      	movs	r5, #0
 8019852:	e74b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019854:	2500      	movs	r5, #0
 8019856:	e749      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019858:	2500      	movs	r5, #0
 801985a:	e747      	b.n	80196ec <dwt_ioctl+0x1e10>
 801985c:	f04f 35ff 	mov.w	r5, #4294967295
 8019860:	e744      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019862:	f04f 35ff 	mov.w	r5, #4294967295
 8019866:	e741      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019868:	2500      	movs	r5, #0
 801986a:	e73f      	b.n	80196ec <dwt_ioctl+0x1e10>
 801986c:	2500      	movs	r5, #0
 801986e:	e73d      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019870:	2500      	movs	r5, #0
 8019872:	e73b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019874:	2500      	movs	r5, #0
 8019876:	e739      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019878:	2500      	movs	r5, #0
 801987a:	e737      	b.n	80196ec <dwt_ioctl+0x1e10>
 801987c:	2500      	movs	r5, #0
 801987e:	e735      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019880:	2500      	movs	r5, #0
 8019882:	e733      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019884:	2500      	movs	r5, #0
 8019886:	e731      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019888:	2500      	movs	r5, #0
 801988a:	e72f      	b.n	80196ec <dwt_ioctl+0x1e10>
 801988c:	2500      	movs	r5, #0
 801988e:	e72d      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019890:	2500      	movs	r5, #0
 8019892:	e72b      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019894:	2500      	movs	r5, #0
 8019896:	e729      	b.n	80196ec <dwt_ioctl+0x1e10>
 8019898:	2500      	movs	r5, #0
 801989a:	e727      	b.n	80196ec <dwt_ioctl+0x1e10>
 801989c:	2500      	movs	r5, #0
 801989e:	e725      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198a0:	2500      	movs	r5, #0
 80198a2:	e723      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198a4:	2500      	movs	r5, #0
 80198a6:	e721      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198a8:	2500      	movs	r5, #0
 80198aa:	e71f      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198ac:	2500      	movs	r5, #0
 80198ae:	e71d      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198b0:	2500      	movs	r5, #0
 80198b2:	e71b      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198b4:	2500      	movs	r5, #0
 80198b6:	e719      	b.n	80196ec <dwt_ioctl+0x1e10>
 80198b8:	f899 3011 	ldrb.w	r3, [r9, #17]
 80198bc:	1e5a      	subs	r2, r3, #1
 80198be:	b2d2      	uxtb	r2, r2
 80198c0:	2a01      	cmp	r2, #1
 80198c2:	f67e ae60 	bls.w	8018586 <dwt_ioctl+0xcaa>
 80198c6:	2202      	movs	r2, #2
 80198c8:	f7fe be07 	b.w	80184da <dwt_ioctl+0xbfe>
 80198cc:	4d12      	ldr	r5, [pc, #72]	; (8019918 <dwt_ioctl+0x203c>)
 80198ce:	e57c      	b.n	80193ca <dwt_ioctl+0x1aee>
 80198d0:	2400      	movs	r4, #0
 80198d2:	9400      	str	r4, [sp, #0]
 80198d4:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80198d8:	4622      	mov	r2, r4
 80198da:	2110      	movs	r1, #16
 80198dc:	f7fc fe62 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80198e0:	9400      	str	r4, [sp, #0]
 80198e2:	4b0e      	ldr	r3, [pc, #56]	; (801991c <dwt_ioctl+0x2040>)
 80198e4:	4622      	mov	r2, r4
 80198e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80198ea:	4630      	mov	r0, r6
 80198ec:	f7fc fe5a 	bl	80165a4 <dwt_modify32bitoffsetreg>
 80198f0:	e57e      	b.n	80193f0 <dwt_ioctl+0x1b14>
 80198f2:	bf00      	nop
 80198f4:	000d0020 	.word	0x000d0020
 80198f8:	000c0064 	.word	0x000c0064
 80198fc:	000c0068 	.word	0x000c0068
 8019900:	000c0060 	.word	0x000c0060
 8019904:	000d0068 	.word	0x000d0068
 8019908:	000d0040 	.word	0x000d0040
 801990c:	000d0044 	.word	0x000d0044
 8019910:	000d0048 	.word	0x000d0048
 8019914:	000d003c 	.word	0x000d003c
 8019918:	08001000 	.word	0x08001000
 801991c:	f7fc0fff 	.word	0xf7fc0fff

08019920 <_init>:
 8019920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019922:	b085      	sub	sp, #20
 8019924:	4604      	mov	r4, r0
 8019926:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8019928:	6819      	ldr	r1, [r3, #0]
 801992a:	f7fd fea1 	bl	8017670 <ull_initialise>
 801992e:	4606      	mov	r6, r0
 8019930:	6823      	ldr	r3, [r4, #0]
 8019932:	691b      	ldr	r3, [r3, #16]
 8019934:	4798      	blx	r3
 8019936:	ab03      	add	r3, sp, #12
 8019938:	2200      	movs	r2, #0
 801993a:	4611      	mov	r1, r2
 801993c:	4620      	mov	r0, r4
 801993e:	f7fd ffcd 	bl	80178dc <dwt_ioctl>
 8019942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019946:	6819      	ldr	r1, [r3, #0]
 8019948:	4620      	mov	r0, r4
 801994a:	f7fd fc43 	bl	80171d4 <ull_configure>
 801994e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019952:	6859      	ldr	r1, [r3, #4]
 8019954:	4620      	mov	r0, r4
 8019956:	f7fd f993 	bl	8016c80 <ull_configuretxrf>
 801995a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801995e:	89d9      	ldrh	r1, [r3, #14]
 8019960:	4620      	mov	r0, r4
 8019962:	f7fc f8be 	bl	8015ae2 <ull_setrxantennadelay>
 8019966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801996a:	8999      	ldrh	r1, [r3, #12]
 801996c:	4620      	mov	r0, r4
 801996e:	f7fc f8c0 	bl	8015af2 <ull_settxantennadelay>
 8019972:	2100      	movs	r1, #0
 8019974:	4620      	mov	r0, r4
 8019976:	f7fc f94a 	bl	8015c0e <ull_setrxaftertxdelay>
 801997a:	2500      	movs	r5, #0
 801997c:	9500      	str	r5, [sp, #0]
 801997e:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8019982:	462a      	mov	r2, r5
 8019984:	2110      	movs	r1, #16
 8019986:	4620      	mov	r0, r4
 8019988:	f7fd fb0c 	bl	8016fa4 <dwt_modify16bitoffsetreg>
 801998c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801998e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019990:	895a      	ldrh	r2, [r3, #10]
 8019992:	8919      	ldrh	r1, [r3, #8]
 8019994:	4620      	mov	r0, r4
 8019996:	f7fd fa03 	bl	8016da0 <ull_configureframefilter>
 801999a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801999e:	8a1b      	ldrh	r3, [r3, #16]
 80199a0:	2202      	movs	r2, #2
 80199a2:	210c      	movs	r1, #12
 80199a4:	4620      	mov	r0, r4
 80199a6:	f7fc f88c 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80199aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199ae:	8a5b      	ldrh	r3, [r3, #18]
 80199b0:	462a      	mov	r2, r5
 80199b2:	210c      	movs	r1, #12
 80199b4:	4620      	mov	r0, r4
 80199b6:	f7fc f884 	bl	8015ac2 <dwt_write16bitoffsetreg>
 80199ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199bc:	7a19      	ldrb	r1, [r3, #8]
 80199be:	4620      	mov	r0, r4
 80199c0:	f7fd fb2e 	bl	8017020 <ull_setleds>
 80199c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199c6:	68d9      	ldr	r1, [r3, #12]
 80199c8:	4620      	mov	r0, r4
 80199ca:	f7fc f949 	bl	8015c60 <ull_setlnapamode>
 80199ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199d0:	7e0b      	ldrb	r3, [r1, #24]
 80199d2:	694a      	ldr	r2, [r1, #20]
 80199d4:	6909      	ldr	r1, [r1, #16]
 80199d6:	4620      	mov	r0, r4
 80199d8:	f7fd fa68 	bl	8016eac <ull_setinterrupt>
 80199dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199de:	7f9a      	ldrb	r2, [r3, #30]
 80199e0:	8b99      	ldrh	r1, [r3, #28]
 80199e2:	4620      	mov	r0, r4
 80199e4:	f7fc fb90 	bl	8016108 <ull_configuresleep>
 80199e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80199ea:	7b53      	ldrb	r3, [r2, #13]
 80199ec:	2b2e      	cmp	r3, #46	; 0x2e
 80199ee:	d005      	beq.n	80199fc <_init+0xdc>
 80199f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80199f6:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 80199fa:	d00a      	beq.n	8019a12 <_init+0xf2>
 80199fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a06:	7353      	strb	r3, [r2, #13]
 8019a08:	2200      	movs	r2, #0
 8019a0a:	4928      	ldr	r1, [pc, #160]	; (8019aac <_init+0x18c>)
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	f7fc faa7 	bl	8015f60 <dwt_write8bitoffsetreg>
 8019a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a14:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f7fc ff63 	bl	80168e4 <ull_configciadiag>
 8019a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a20:	6a19      	ldr	r1, [r3, #32]
 8019a22:	4620      	mov	r0, r4
 8019a24:	f7fc f93c 	bl	8015ca0 <ull_configurestskey>
 8019a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	f7fc f95b 	bl	8015ce8 <ull_configurestsiv>
 8019a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8019a38:	bb9b      	cbnz	r3, 8019aa2 <_init+0x182>
 8019a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a3c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8019a40:	4620      	mov	r0, r4
 8019a42:	f7fc fb05 	bl	8016050 <ull_configeventcounters>
 8019a46:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8019a4a:	2d00      	cmp	r5, #0
 8019a4c:	db26      	blt.n	8019a9c <_init+0x17c>
 8019a4e:	2301      	movs	r3, #1
 8019a50:	fa03 f505 	lsl.w	r5, r3, r5
 8019a54:	b2af      	uxth	r7, r5
 8019a56:	4a16      	ldr	r2, [pc, #88]	; (8019ab0 <_init+0x190>)
 8019a58:	4639      	mov	r1, r7
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f7fc fed4 	bl	8016808 <ull_setgpiomode>
 8019a60:	f10d 030a 	add.w	r3, sp, #10
 8019a64:	9300      	str	r3, [sp, #0]
 8019a66:	2302      	movs	r3, #2
 8019a68:	2200      	movs	r2, #0
 8019a6a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8019a6e:	4620      	mov	r0, r4
 8019a70:	f7fb fba9 	bl	80151c6 <dwt_readfromdevice>
 8019a74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019a78:	ea23 0305 	bic.w	r3, r3, r5
 8019a7c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019a80:	2200      	movs	r2, #0
 8019a82:	490c      	ldr	r1, [pc, #48]	; (8019ab4 <_init+0x194>)
 8019a84:	4620      	mov	r0, r4
 8019a86:	f7fc f81c 	bl	8015ac2 <dwt_write16bitoffsetreg>
 8019a8a:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8019a8e:	fab2 f282 	clz	r2, r2
 8019a92:	0952      	lsrs	r2, r2, #5
 8019a94:	4639      	mov	r1, r7
 8019a96:	4620      	mov	r0, r4
 8019a98:	f7fd fb40 	bl	801711c <ull_setgpiovalue>
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	b005      	add	sp, #20
 8019aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aa2:	4620      	mov	r0, r4
 8019aa4:	f7fc ff54 	bl	8016950 <ull_configurestsloadiv>
 8019aa8:	e7c7      	b.n	8019a3a <_init+0x11a>
 8019aaa:	bf00      	nop
 8019aac:	00090014 	.word	0x00090014
 8019ab0:	01200492 	.word	0x01200492
 8019ab4:	00050008 	.word	0x00050008

08019ab8 <__assert_func>:
 8019ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019aba:	4614      	mov	r4, r2
 8019abc:	461a      	mov	r2, r3
 8019abe:	4b09      	ldr	r3, [pc, #36]	; (8019ae4 <__assert_func+0x2c>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	4605      	mov	r5, r0
 8019ac4:	68d8      	ldr	r0, [r3, #12]
 8019ac6:	b14c      	cbz	r4, 8019adc <__assert_func+0x24>
 8019ac8:	4b07      	ldr	r3, [pc, #28]	; (8019ae8 <__assert_func+0x30>)
 8019aca:	9100      	str	r1, [sp, #0]
 8019acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ad0:	4906      	ldr	r1, [pc, #24]	; (8019aec <__assert_func+0x34>)
 8019ad2:	462b      	mov	r3, r5
 8019ad4:	f001 f964 	bl	801ada0 <fiprintf>
 8019ad8:	f001 fad8 	bl	801b08c <abort>
 8019adc:	4b04      	ldr	r3, [pc, #16]	; (8019af0 <__assert_func+0x38>)
 8019ade:	461c      	mov	r4, r3
 8019ae0:	e7f3      	b.n	8019aca <__assert_func+0x12>
 8019ae2:	bf00      	nop
 8019ae4:	2000020c 	.word	0x2000020c
 8019ae8:	0802079e 	.word	0x0802079e
 8019aec:	080207ab 	.word	0x080207ab
 8019af0:	080207d9 	.word	0x080207d9

08019af4 <malloc>:
 8019af4:	4b02      	ldr	r3, [pc, #8]	; (8019b00 <malloc+0xc>)
 8019af6:	4601      	mov	r1, r0
 8019af8:	6818      	ldr	r0, [r3, #0]
 8019afa:	f000 b823 	b.w	8019b44 <_malloc_r>
 8019afe:	bf00      	nop
 8019b00:	2000020c 	.word	0x2000020c

08019b04 <sbrk_aligned>:
 8019b04:	b570      	push	{r4, r5, r6, lr}
 8019b06:	4e0e      	ldr	r6, [pc, #56]	; (8019b40 <sbrk_aligned+0x3c>)
 8019b08:	460c      	mov	r4, r1
 8019b0a:	6831      	ldr	r1, [r6, #0]
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	b911      	cbnz	r1, 8019b16 <sbrk_aligned+0x12>
 8019b10:	f001 fa58 	bl	801afc4 <_sbrk_r>
 8019b14:	6030      	str	r0, [r6, #0]
 8019b16:	4621      	mov	r1, r4
 8019b18:	4628      	mov	r0, r5
 8019b1a:	f001 fa53 	bl	801afc4 <_sbrk_r>
 8019b1e:	1c43      	adds	r3, r0, #1
 8019b20:	d00a      	beq.n	8019b38 <sbrk_aligned+0x34>
 8019b22:	1cc4      	adds	r4, r0, #3
 8019b24:	f024 0403 	bic.w	r4, r4, #3
 8019b28:	42a0      	cmp	r0, r4
 8019b2a:	d007      	beq.n	8019b3c <sbrk_aligned+0x38>
 8019b2c:	1a21      	subs	r1, r4, r0
 8019b2e:	4628      	mov	r0, r5
 8019b30:	f001 fa48 	bl	801afc4 <_sbrk_r>
 8019b34:	3001      	adds	r0, #1
 8019b36:	d101      	bne.n	8019b3c <sbrk_aligned+0x38>
 8019b38:	f04f 34ff 	mov.w	r4, #4294967295
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	bd70      	pop	{r4, r5, r6, pc}
 8019b40:	20005d64 	.word	0x20005d64

08019b44 <_malloc_r>:
 8019b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b48:	1ccd      	adds	r5, r1, #3
 8019b4a:	f025 0503 	bic.w	r5, r5, #3
 8019b4e:	3508      	adds	r5, #8
 8019b50:	2d0c      	cmp	r5, #12
 8019b52:	bf38      	it	cc
 8019b54:	250c      	movcc	r5, #12
 8019b56:	2d00      	cmp	r5, #0
 8019b58:	4607      	mov	r7, r0
 8019b5a:	db01      	blt.n	8019b60 <_malloc_r+0x1c>
 8019b5c:	42a9      	cmp	r1, r5
 8019b5e:	d905      	bls.n	8019b6c <_malloc_r+0x28>
 8019b60:	230c      	movs	r3, #12
 8019b62:	603b      	str	r3, [r7, #0]
 8019b64:	2600      	movs	r6, #0
 8019b66:	4630      	mov	r0, r6
 8019b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019c40 <_malloc_r+0xfc>
 8019b70:	f000 f868 	bl	8019c44 <__malloc_lock>
 8019b74:	f8d8 3000 	ldr.w	r3, [r8]
 8019b78:	461c      	mov	r4, r3
 8019b7a:	bb5c      	cbnz	r4, 8019bd4 <_malloc_r+0x90>
 8019b7c:	4629      	mov	r1, r5
 8019b7e:	4638      	mov	r0, r7
 8019b80:	f7ff ffc0 	bl	8019b04 <sbrk_aligned>
 8019b84:	1c43      	adds	r3, r0, #1
 8019b86:	4604      	mov	r4, r0
 8019b88:	d155      	bne.n	8019c36 <_malloc_r+0xf2>
 8019b8a:	f8d8 4000 	ldr.w	r4, [r8]
 8019b8e:	4626      	mov	r6, r4
 8019b90:	2e00      	cmp	r6, #0
 8019b92:	d145      	bne.n	8019c20 <_malloc_r+0xdc>
 8019b94:	2c00      	cmp	r4, #0
 8019b96:	d048      	beq.n	8019c2a <_malloc_r+0xe6>
 8019b98:	6823      	ldr	r3, [r4, #0]
 8019b9a:	4631      	mov	r1, r6
 8019b9c:	4638      	mov	r0, r7
 8019b9e:	eb04 0903 	add.w	r9, r4, r3
 8019ba2:	f001 fa0f 	bl	801afc4 <_sbrk_r>
 8019ba6:	4581      	cmp	r9, r0
 8019ba8:	d13f      	bne.n	8019c2a <_malloc_r+0xe6>
 8019baa:	6821      	ldr	r1, [r4, #0]
 8019bac:	1a6d      	subs	r5, r5, r1
 8019bae:	4629      	mov	r1, r5
 8019bb0:	4638      	mov	r0, r7
 8019bb2:	f7ff ffa7 	bl	8019b04 <sbrk_aligned>
 8019bb6:	3001      	adds	r0, #1
 8019bb8:	d037      	beq.n	8019c2a <_malloc_r+0xe6>
 8019bba:	6823      	ldr	r3, [r4, #0]
 8019bbc:	442b      	add	r3, r5
 8019bbe:	6023      	str	r3, [r4, #0]
 8019bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d038      	beq.n	8019c3a <_malloc_r+0xf6>
 8019bc8:	685a      	ldr	r2, [r3, #4]
 8019bca:	42a2      	cmp	r2, r4
 8019bcc:	d12b      	bne.n	8019c26 <_malloc_r+0xe2>
 8019bce:	2200      	movs	r2, #0
 8019bd0:	605a      	str	r2, [r3, #4]
 8019bd2:	e00f      	b.n	8019bf4 <_malloc_r+0xb0>
 8019bd4:	6822      	ldr	r2, [r4, #0]
 8019bd6:	1b52      	subs	r2, r2, r5
 8019bd8:	d41f      	bmi.n	8019c1a <_malloc_r+0xd6>
 8019bda:	2a0b      	cmp	r2, #11
 8019bdc:	d917      	bls.n	8019c0e <_malloc_r+0xca>
 8019bde:	1961      	adds	r1, r4, r5
 8019be0:	42a3      	cmp	r3, r4
 8019be2:	6025      	str	r5, [r4, #0]
 8019be4:	bf18      	it	ne
 8019be6:	6059      	strne	r1, [r3, #4]
 8019be8:	6863      	ldr	r3, [r4, #4]
 8019bea:	bf08      	it	eq
 8019bec:	f8c8 1000 	streq.w	r1, [r8]
 8019bf0:	5162      	str	r2, [r4, r5]
 8019bf2:	604b      	str	r3, [r1, #4]
 8019bf4:	4638      	mov	r0, r7
 8019bf6:	f104 060b 	add.w	r6, r4, #11
 8019bfa:	f000 f829 	bl	8019c50 <__malloc_unlock>
 8019bfe:	f026 0607 	bic.w	r6, r6, #7
 8019c02:	1d23      	adds	r3, r4, #4
 8019c04:	1af2      	subs	r2, r6, r3
 8019c06:	d0ae      	beq.n	8019b66 <_malloc_r+0x22>
 8019c08:	1b9b      	subs	r3, r3, r6
 8019c0a:	50a3      	str	r3, [r4, r2]
 8019c0c:	e7ab      	b.n	8019b66 <_malloc_r+0x22>
 8019c0e:	42a3      	cmp	r3, r4
 8019c10:	6862      	ldr	r2, [r4, #4]
 8019c12:	d1dd      	bne.n	8019bd0 <_malloc_r+0x8c>
 8019c14:	f8c8 2000 	str.w	r2, [r8]
 8019c18:	e7ec      	b.n	8019bf4 <_malloc_r+0xb0>
 8019c1a:	4623      	mov	r3, r4
 8019c1c:	6864      	ldr	r4, [r4, #4]
 8019c1e:	e7ac      	b.n	8019b7a <_malloc_r+0x36>
 8019c20:	4634      	mov	r4, r6
 8019c22:	6876      	ldr	r6, [r6, #4]
 8019c24:	e7b4      	b.n	8019b90 <_malloc_r+0x4c>
 8019c26:	4613      	mov	r3, r2
 8019c28:	e7cc      	b.n	8019bc4 <_malloc_r+0x80>
 8019c2a:	230c      	movs	r3, #12
 8019c2c:	603b      	str	r3, [r7, #0]
 8019c2e:	4638      	mov	r0, r7
 8019c30:	f000 f80e 	bl	8019c50 <__malloc_unlock>
 8019c34:	e797      	b.n	8019b66 <_malloc_r+0x22>
 8019c36:	6025      	str	r5, [r4, #0]
 8019c38:	e7dc      	b.n	8019bf4 <_malloc_r+0xb0>
 8019c3a:	605b      	str	r3, [r3, #4]
 8019c3c:	deff      	udf	#255	; 0xff
 8019c3e:	bf00      	nop
 8019c40:	20005d60 	.word	0x20005d60

08019c44 <__malloc_lock>:
 8019c44:	4801      	ldr	r0, [pc, #4]	; (8019c4c <__malloc_lock+0x8>)
 8019c46:	f001 ba0a 	b.w	801b05e <__retarget_lock_acquire_recursive>
 8019c4a:	bf00      	nop
 8019c4c:	20005ea8 	.word	0x20005ea8

08019c50 <__malloc_unlock>:
 8019c50:	4801      	ldr	r0, [pc, #4]	; (8019c58 <__malloc_unlock+0x8>)
 8019c52:	f001 ba05 	b.w	801b060 <__retarget_lock_release_recursive>
 8019c56:	bf00      	nop
 8019c58:	20005ea8 	.word	0x20005ea8

08019c5c <swapfunc>:
 8019c5c:	2b02      	cmp	r3, #2
 8019c5e:	b510      	push	{r4, lr}
 8019c60:	d00a      	beq.n	8019c78 <swapfunc+0x1c>
 8019c62:	0892      	lsrs	r2, r2, #2
 8019c64:	3a01      	subs	r2, #1
 8019c66:	6803      	ldr	r3, [r0, #0]
 8019c68:	680c      	ldr	r4, [r1, #0]
 8019c6a:	f840 4b04 	str.w	r4, [r0], #4
 8019c6e:	2a00      	cmp	r2, #0
 8019c70:	f841 3b04 	str.w	r3, [r1], #4
 8019c74:	dcf6      	bgt.n	8019c64 <swapfunc+0x8>
 8019c76:	bd10      	pop	{r4, pc}
 8019c78:	4402      	add	r2, r0
 8019c7a:	780c      	ldrb	r4, [r1, #0]
 8019c7c:	7803      	ldrb	r3, [r0, #0]
 8019c7e:	f800 4b01 	strb.w	r4, [r0], #1
 8019c82:	f801 3b01 	strb.w	r3, [r1], #1
 8019c86:	1a13      	subs	r3, r2, r0
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	dcf6      	bgt.n	8019c7a <swapfunc+0x1e>
 8019c8c:	e7f3      	b.n	8019c76 <swapfunc+0x1a>

08019c8e <med3.constprop.0>:
 8019c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c90:	460c      	mov	r4, r1
 8019c92:	4615      	mov	r5, r2
 8019c94:	4607      	mov	r7, r0
 8019c96:	461e      	mov	r6, r3
 8019c98:	4798      	blx	r3
 8019c9a:	2800      	cmp	r0, #0
 8019c9c:	4629      	mov	r1, r5
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	da0a      	bge.n	8019cb8 <med3.constprop.0+0x2a>
 8019ca2:	47b0      	blx	r6
 8019ca4:	2800      	cmp	r0, #0
 8019ca6:	db05      	blt.n	8019cb4 <med3.constprop.0+0x26>
 8019ca8:	4629      	mov	r1, r5
 8019caa:	4638      	mov	r0, r7
 8019cac:	47b0      	blx	r6
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	db0a      	blt.n	8019cc8 <med3.constprop.0+0x3a>
 8019cb2:	463c      	mov	r4, r7
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cb8:	47b0      	blx	r6
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	dcfa      	bgt.n	8019cb4 <med3.constprop.0+0x26>
 8019cbe:	4629      	mov	r1, r5
 8019cc0:	4638      	mov	r0, r7
 8019cc2:	47b0      	blx	r6
 8019cc4:	2800      	cmp	r0, #0
 8019cc6:	dbf4      	blt.n	8019cb2 <med3.constprop.0+0x24>
 8019cc8:	462c      	mov	r4, r5
 8019cca:	e7f3      	b.n	8019cb4 <med3.constprop.0+0x26>

08019ccc <qsort>:
 8019ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd0:	469a      	mov	sl, r3
 8019cd2:	ea40 0302 	orr.w	r3, r0, r2
 8019cd6:	079b      	lsls	r3, r3, #30
 8019cd8:	b097      	sub	sp, #92	; 0x5c
 8019cda:	4606      	mov	r6, r0
 8019cdc:	4614      	mov	r4, r2
 8019cde:	d11a      	bne.n	8019d16 <qsort+0x4a>
 8019ce0:	f1b2 0804 	subs.w	r8, r2, #4
 8019ce4:	bf18      	it	ne
 8019ce6:	f04f 0801 	movne.w	r8, #1
 8019cea:	2300      	movs	r3, #0
 8019cec:	9302      	str	r3, [sp, #8]
 8019cee:	1933      	adds	r3, r6, r4
 8019cf0:	fb04 f701 	mul.w	r7, r4, r1
 8019cf4:	9301      	str	r3, [sp, #4]
 8019cf6:	2906      	cmp	r1, #6
 8019cf8:	eb06 0307 	add.w	r3, r6, r7
 8019cfc:	9303      	str	r3, [sp, #12]
 8019cfe:	d82a      	bhi.n	8019d56 <qsort+0x8a>
 8019d00:	9b01      	ldr	r3, [sp, #4]
 8019d02:	9a03      	ldr	r2, [sp, #12]
 8019d04:	4293      	cmp	r3, r2
 8019d06:	d310      	bcc.n	8019d2a <qsort+0x5e>
 8019d08:	9b02      	ldr	r3, [sp, #8]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	f040 811e 	bne.w	8019f4c <qsort+0x280>
 8019d10:	b017      	add	sp, #92	; 0x5c
 8019d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d16:	f04f 0802 	mov.w	r8, #2
 8019d1a:	e7e6      	b.n	8019cea <qsort+0x1e>
 8019d1c:	4643      	mov	r3, r8
 8019d1e:	4622      	mov	r2, r4
 8019d20:	4639      	mov	r1, r7
 8019d22:	4628      	mov	r0, r5
 8019d24:	f7ff ff9a 	bl	8019c5c <swapfunc>
 8019d28:	e00e      	b.n	8019d48 <qsort+0x7c>
 8019d2a:	9d01      	ldr	r5, [sp, #4]
 8019d2c:	e00d      	b.n	8019d4a <qsort+0x7e>
 8019d2e:	1b2f      	subs	r7, r5, r4
 8019d30:	4629      	mov	r1, r5
 8019d32:	4638      	mov	r0, r7
 8019d34:	47d0      	blx	sl
 8019d36:	2800      	cmp	r0, #0
 8019d38:	dd09      	ble.n	8019d4e <qsort+0x82>
 8019d3a:	f1b8 0f00 	cmp.w	r8, #0
 8019d3e:	d1ed      	bne.n	8019d1c <qsort+0x50>
 8019d40:	682b      	ldr	r3, [r5, #0]
 8019d42:	683a      	ldr	r2, [r7, #0]
 8019d44:	602a      	str	r2, [r5, #0]
 8019d46:	603b      	str	r3, [r7, #0]
 8019d48:	463d      	mov	r5, r7
 8019d4a:	42ae      	cmp	r6, r5
 8019d4c:	d3ef      	bcc.n	8019d2e <qsort+0x62>
 8019d4e:	9b01      	ldr	r3, [sp, #4]
 8019d50:	4423      	add	r3, r4
 8019d52:	9301      	str	r3, [sp, #4]
 8019d54:	e7d4      	b.n	8019d00 <qsort+0x34>
 8019d56:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8019d5a:	1b3f      	subs	r7, r7, r4
 8019d5c:	2907      	cmp	r1, #7
 8019d5e:	fb04 6909 	mla	r9, r4, r9, r6
 8019d62:	4437      	add	r7, r6
 8019d64:	d021      	beq.n	8019daa <qsort+0xde>
 8019d66:	2928      	cmp	r1, #40	; 0x28
 8019d68:	d944      	bls.n	8019df4 <qsort+0x128>
 8019d6a:	08cd      	lsrs	r5, r1, #3
 8019d6c:	4365      	muls	r5, r4
 8019d6e:	4653      	mov	r3, sl
 8019d70:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8019d74:	1971      	adds	r1, r6, r5
 8019d76:	4630      	mov	r0, r6
 8019d78:	f7ff ff89 	bl	8019c8e <med3.constprop.0>
 8019d7c:	4649      	mov	r1, r9
 8019d7e:	eb09 0205 	add.w	r2, r9, r5
 8019d82:	4653      	mov	r3, sl
 8019d84:	4683      	mov	fp, r0
 8019d86:	1b48      	subs	r0, r1, r5
 8019d88:	f7ff ff81 	bl	8019c8e <med3.constprop.0>
 8019d8c:	463a      	mov	r2, r7
 8019d8e:	4681      	mov	r9, r0
 8019d90:	4653      	mov	r3, sl
 8019d92:	1b79      	subs	r1, r7, r5
 8019d94:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8019d98:	f7ff ff79 	bl	8019c8e <med3.constprop.0>
 8019d9c:	4602      	mov	r2, r0
 8019d9e:	4649      	mov	r1, r9
 8019da0:	4653      	mov	r3, sl
 8019da2:	4658      	mov	r0, fp
 8019da4:	f7ff ff73 	bl	8019c8e <med3.constprop.0>
 8019da8:	4681      	mov	r9, r0
 8019daa:	f1b8 0f00 	cmp.w	r8, #0
 8019dae:	d124      	bne.n	8019dfa <qsort+0x12e>
 8019db0:	6833      	ldr	r3, [r6, #0]
 8019db2:	f8d9 2000 	ldr.w	r2, [r9]
 8019db6:	6032      	str	r2, [r6, #0]
 8019db8:	f8c9 3000 	str.w	r3, [r9]
 8019dbc:	eb06 0b04 	add.w	fp, r6, r4
 8019dc0:	46b9      	mov	r9, r7
 8019dc2:	465d      	mov	r5, fp
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	45bb      	cmp	fp, r7
 8019dc8:	d835      	bhi.n	8019e36 <qsort+0x16a>
 8019dca:	4631      	mov	r1, r6
 8019dcc:	4658      	mov	r0, fp
 8019dce:	9304      	str	r3, [sp, #16]
 8019dd0:	47d0      	blx	sl
 8019dd2:	2800      	cmp	r0, #0
 8019dd4:	9b04      	ldr	r3, [sp, #16]
 8019dd6:	dc3e      	bgt.n	8019e56 <qsort+0x18a>
 8019dd8:	d10a      	bne.n	8019df0 <qsort+0x124>
 8019dda:	f1b8 0f00 	cmp.w	r8, #0
 8019dde:	d113      	bne.n	8019e08 <qsort+0x13c>
 8019de0:	682b      	ldr	r3, [r5, #0]
 8019de2:	f8db 2000 	ldr.w	r2, [fp]
 8019de6:	602a      	str	r2, [r5, #0]
 8019de8:	f8cb 3000 	str.w	r3, [fp]
 8019dec:	4425      	add	r5, r4
 8019dee:	2301      	movs	r3, #1
 8019df0:	44a3      	add	fp, r4
 8019df2:	e7e8      	b.n	8019dc6 <qsort+0xfa>
 8019df4:	463a      	mov	r2, r7
 8019df6:	46b3      	mov	fp, r6
 8019df8:	e7d1      	b.n	8019d9e <qsort+0xd2>
 8019dfa:	4643      	mov	r3, r8
 8019dfc:	4622      	mov	r2, r4
 8019dfe:	4649      	mov	r1, r9
 8019e00:	4630      	mov	r0, r6
 8019e02:	f7ff ff2b 	bl	8019c5c <swapfunc>
 8019e06:	e7d9      	b.n	8019dbc <qsort+0xf0>
 8019e08:	4643      	mov	r3, r8
 8019e0a:	4622      	mov	r2, r4
 8019e0c:	4659      	mov	r1, fp
 8019e0e:	4628      	mov	r0, r5
 8019e10:	f7ff ff24 	bl	8019c5c <swapfunc>
 8019e14:	e7ea      	b.n	8019dec <qsort+0x120>
 8019e16:	d10b      	bne.n	8019e30 <qsort+0x164>
 8019e18:	f1b8 0f00 	cmp.w	r8, #0
 8019e1c:	d114      	bne.n	8019e48 <qsort+0x17c>
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	f8d9 2000 	ldr.w	r2, [r9]
 8019e24:	603a      	str	r2, [r7, #0]
 8019e26:	f8c9 3000 	str.w	r3, [r9]
 8019e2a:	eba9 0904 	sub.w	r9, r9, r4
 8019e2e:	2301      	movs	r3, #1
 8019e30:	9f04      	ldr	r7, [sp, #16]
 8019e32:	45bb      	cmp	fp, r7
 8019e34:	d90f      	bls.n	8019e56 <qsort+0x18a>
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d143      	bne.n	8019ec2 <qsort+0x1f6>
 8019e3a:	9b01      	ldr	r3, [sp, #4]
 8019e3c:	9a03      	ldr	r2, [sp, #12]
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	f4bf af62 	bcs.w	8019d08 <qsort+0x3c>
 8019e44:	9d01      	ldr	r5, [sp, #4]
 8019e46:	e036      	b.n	8019eb6 <qsort+0x1ea>
 8019e48:	4643      	mov	r3, r8
 8019e4a:	4622      	mov	r2, r4
 8019e4c:	4649      	mov	r1, r9
 8019e4e:	4638      	mov	r0, r7
 8019e50:	f7ff ff04 	bl	8019c5c <swapfunc>
 8019e54:	e7e9      	b.n	8019e2a <qsort+0x15e>
 8019e56:	4631      	mov	r1, r6
 8019e58:	4638      	mov	r0, r7
 8019e5a:	9305      	str	r3, [sp, #20]
 8019e5c:	47d0      	blx	sl
 8019e5e:	1b3b      	subs	r3, r7, r4
 8019e60:	2800      	cmp	r0, #0
 8019e62:	9304      	str	r3, [sp, #16]
 8019e64:	9b05      	ldr	r3, [sp, #20]
 8019e66:	dad6      	bge.n	8019e16 <qsort+0x14a>
 8019e68:	f1b8 0f00 	cmp.w	r8, #0
 8019e6c:	d006      	beq.n	8019e7c <qsort+0x1b0>
 8019e6e:	4643      	mov	r3, r8
 8019e70:	4622      	mov	r2, r4
 8019e72:	4639      	mov	r1, r7
 8019e74:	4658      	mov	r0, fp
 8019e76:	f7ff fef1 	bl	8019c5c <swapfunc>
 8019e7a:	e005      	b.n	8019e88 <qsort+0x1bc>
 8019e7c:	f8db 3000 	ldr.w	r3, [fp]
 8019e80:	683a      	ldr	r2, [r7, #0]
 8019e82:	f8cb 2000 	str.w	r2, [fp]
 8019e86:	603b      	str	r3, [r7, #0]
 8019e88:	9f04      	ldr	r7, [sp, #16]
 8019e8a:	e7b0      	b.n	8019dee <qsort+0x122>
 8019e8c:	4643      	mov	r3, r8
 8019e8e:	4622      	mov	r2, r4
 8019e90:	4639      	mov	r1, r7
 8019e92:	4628      	mov	r0, r5
 8019e94:	f7ff fee2 	bl	8019c5c <swapfunc>
 8019e98:	e00c      	b.n	8019eb4 <qsort+0x1e8>
 8019e9a:	1b2f      	subs	r7, r5, r4
 8019e9c:	4629      	mov	r1, r5
 8019e9e:	4638      	mov	r0, r7
 8019ea0:	47d0      	blx	sl
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	dd09      	ble.n	8019eba <qsort+0x1ee>
 8019ea6:	f1b8 0f00 	cmp.w	r8, #0
 8019eaa:	d1ef      	bne.n	8019e8c <qsort+0x1c0>
 8019eac:	682b      	ldr	r3, [r5, #0]
 8019eae:	683a      	ldr	r2, [r7, #0]
 8019eb0:	602a      	str	r2, [r5, #0]
 8019eb2:	603b      	str	r3, [r7, #0]
 8019eb4:	463d      	mov	r5, r7
 8019eb6:	42ae      	cmp	r6, r5
 8019eb8:	d3ef      	bcc.n	8019e9a <qsort+0x1ce>
 8019eba:	9b01      	ldr	r3, [sp, #4]
 8019ebc:	4423      	add	r3, r4
 8019ebe:	9301      	str	r3, [sp, #4]
 8019ec0:	e7bb      	b.n	8019e3a <qsort+0x16e>
 8019ec2:	ebab 0305 	sub.w	r3, fp, r5
 8019ec6:	1baa      	subs	r2, r5, r6
 8019ec8:	429a      	cmp	r2, r3
 8019eca:	bfa8      	it	ge
 8019ecc:	461a      	movge	r2, r3
 8019ece:	9301      	str	r3, [sp, #4]
 8019ed0:	b12a      	cbz	r2, 8019ede <qsort+0x212>
 8019ed2:	4643      	mov	r3, r8
 8019ed4:	ebab 0102 	sub.w	r1, fp, r2
 8019ed8:	4630      	mov	r0, r6
 8019eda:	f7ff febf 	bl	8019c5c <swapfunc>
 8019ede:	9b03      	ldr	r3, [sp, #12]
 8019ee0:	eba3 0209 	sub.w	r2, r3, r9
 8019ee4:	eba9 0707 	sub.w	r7, r9, r7
 8019ee8:	1b12      	subs	r2, r2, r4
 8019eea:	42ba      	cmp	r2, r7
 8019eec:	bf28      	it	cs
 8019eee:	463a      	movcs	r2, r7
 8019ef0:	b12a      	cbz	r2, 8019efe <qsort+0x232>
 8019ef2:	9903      	ldr	r1, [sp, #12]
 8019ef4:	4643      	mov	r3, r8
 8019ef6:	1a89      	subs	r1, r1, r2
 8019ef8:	4658      	mov	r0, fp
 8019efa:	f7ff feaf 	bl	8019c5c <swapfunc>
 8019efe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019f02:	9b03      	ldr	r3, [sp, #12]
 8019f04:	454f      	cmp	r7, r9
 8019f06:	eba3 0007 	sub.w	r0, r3, r7
 8019f0a:	d904      	bls.n	8019f16 <qsort+0x24a>
 8019f0c:	4633      	mov	r3, r6
 8019f0e:	46b9      	mov	r9, r7
 8019f10:	9f01      	ldr	r7, [sp, #4]
 8019f12:	4606      	mov	r6, r0
 8019f14:	4618      	mov	r0, r3
 8019f16:	42a7      	cmp	r7, r4
 8019f18:	d921      	bls.n	8019f5e <qsort+0x292>
 8019f1a:	fbb7 f1f4 	udiv	r1, r7, r4
 8019f1e:	9b02      	ldr	r3, [sp, #8]
 8019f20:	2b07      	cmp	r3, #7
 8019f22:	d80d      	bhi.n	8019f40 <qsort+0x274>
 8019f24:	aa16      	add	r2, sp, #88	; 0x58
 8019f26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019f2a:	fbb9 f2f4 	udiv	r2, r9, r4
 8019f2e:	f843 6c40 	str.w	r6, [r3, #-64]
 8019f32:	f843 2c3c 	str.w	r2, [r3, #-60]
 8019f36:	9b02      	ldr	r3, [sp, #8]
 8019f38:	3301      	adds	r3, #1
 8019f3a:	9302      	str	r3, [sp, #8]
 8019f3c:	4606      	mov	r6, r0
 8019f3e:	e6d6      	b.n	8019cee <qsort+0x22>
 8019f40:	4653      	mov	r3, sl
 8019f42:	4622      	mov	r2, r4
 8019f44:	f7ff fec2 	bl	8019ccc <qsort>
 8019f48:	45a1      	cmp	r9, r4
 8019f4a:	d80b      	bhi.n	8019f64 <qsort+0x298>
 8019f4c:	9b02      	ldr	r3, [sp, #8]
 8019f4e:	aa16      	add	r2, sp, #88	; 0x58
 8019f50:	3b01      	subs	r3, #1
 8019f52:	9302      	str	r3, [sp, #8]
 8019f54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019f58:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8019f5c:	e7ee      	b.n	8019f3c <qsort+0x270>
 8019f5e:	45a1      	cmp	r9, r4
 8019f60:	f67f aed2 	bls.w	8019d08 <qsort+0x3c>
 8019f64:	fbb9 f1f4 	udiv	r1, r9, r4
 8019f68:	4630      	mov	r0, r6
 8019f6a:	e7e7      	b.n	8019f3c <qsort+0x270>

08019f6c <__cvt>:
 8019f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f70:	ec55 4b10 	vmov	r4, r5, d0
 8019f74:	2d00      	cmp	r5, #0
 8019f76:	460e      	mov	r6, r1
 8019f78:	4619      	mov	r1, r3
 8019f7a:	462b      	mov	r3, r5
 8019f7c:	bfbb      	ittet	lt
 8019f7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019f82:	461d      	movlt	r5, r3
 8019f84:	2300      	movge	r3, #0
 8019f86:	232d      	movlt	r3, #45	; 0x2d
 8019f88:	700b      	strb	r3, [r1, #0]
 8019f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019f90:	4691      	mov	r9, r2
 8019f92:	f023 0820 	bic.w	r8, r3, #32
 8019f96:	bfbc      	itt	lt
 8019f98:	4622      	movlt	r2, r4
 8019f9a:	4614      	movlt	r4, r2
 8019f9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019fa0:	d005      	beq.n	8019fae <__cvt+0x42>
 8019fa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019fa6:	d100      	bne.n	8019faa <__cvt+0x3e>
 8019fa8:	3601      	adds	r6, #1
 8019faa:	2102      	movs	r1, #2
 8019fac:	e000      	b.n	8019fb0 <__cvt+0x44>
 8019fae:	2103      	movs	r1, #3
 8019fb0:	ab03      	add	r3, sp, #12
 8019fb2:	9301      	str	r3, [sp, #4]
 8019fb4:	ab02      	add	r3, sp, #8
 8019fb6:	9300      	str	r3, [sp, #0]
 8019fb8:	ec45 4b10 	vmov	d0, r4, r5
 8019fbc:	4653      	mov	r3, sl
 8019fbe:	4632      	mov	r2, r6
 8019fc0:	f001 f8f6 	bl	801b1b0 <_dtoa_r>
 8019fc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019fc8:	4607      	mov	r7, r0
 8019fca:	d102      	bne.n	8019fd2 <__cvt+0x66>
 8019fcc:	f019 0f01 	tst.w	r9, #1
 8019fd0:	d022      	beq.n	801a018 <__cvt+0xac>
 8019fd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019fd6:	eb07 0906 	add.w	r9, r7, r6
 8019fda:	d110      	bne.n	8019ffe <__cvt+0x92>
 8019fdc:	783b      	ldrb	r3, [r7, #0]
 8019fde:	2b30      	cmp	r3, #48	; 0x30
 8019fe0:	d10a      	bne.n	8019ff8 <__cvt+0x8c>
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	4629      	mov	r1, r5
 8019fea:	f7e6 fdc5 	bl	8000b78 <__aeabi_dcmpeq>
 8019fee:	b918      	cbnz	r0, 8019ff8 <__cvt+0x8c>
 8019ff0:	f1c6 0601 	rsb	r6, r6, #1
 8019ff4:	f8ca 6000 	str.w	r6, [sl]
 8019ff8:	f8da 3000 	ldr.w	r3, [sl]
 8019ffc:	4499      	add	r9, r3
 8019ffe:	2200      	movs	r2, #0
 801a000:	2300      	movs	r3, #0
 801a002:	4620      	mov	r0, r4
 801a004:	4629      	mov	r1, r5
 801a006:	f7e6 fdb7 	bl	8000b78 <__aeabi_dcmpeq>
 801a00a:	b108      	cbz	r0, 801a010 <__cvt+0xa4>
 801a00c:	f8cd 900c 	str.w	r9, [sp, #12]
 801a010:	2230      	movs	r2, #48	; 0x30
 801a012:	9b03      	ldr	r3, [sp, #12]
 801a014:	454b      	cmp	r3, r9
 801a016:	d307      	bcc.n	801a028 <__cvt+0xbc>
 801a018:	9b03      	ldr	r3, [sp, #12]
 801a01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a01c:	1bdb      	subs	r3, r3, r7
 801a01e:	4638      	mov	r0, r7
 801a020:	6013      	str	r3, [r2, #0]
 801a022:	b004      	add	sp, #16
 801a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a028:	1c59      	adds	r1, r3, #1
 801a02a:	9103      	str	r1, [sp, #12]
 801a02c:	701a      	strb	r2, [r3, #0]
 801a02e:	e7f0      	b.n	801a012 <__cvt+0xa6>

0801a030 <__exponent>:
 801a030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a032:	4603      	mov	r3, r0
 801a034:	2900      	cmp	r1, #0
 801a036:	bfb8      	it	lt
 801a038:	4249      	neglt	r1, r1
 801a03a:	f803 2b02 	strb.w	r2, [r3], #2
 801a03e:	bfb4      	ite	lt
 801a040:	222d      	movlt	r2, #45	; 0x2d
 801a042:	222b      	movge	r2, #43	; 0x2b
 801a044:	2909      	cmp	r1, #9
 801a046:	7042      	strb	r2, [r0, #1]
 801a048:	dd2a      	ble.n	801a0a0 <__exponent+0x70>
 801a04a:	f10d 0207 	add.w	r2, sp, #7
 801a04e:	4617      	mov	r7, r2
 801a050:	260a      	movs	r6, #10
 801a052:	4694      	mov	ip, r2
 801a054:	fb91 f5f6 	sdiv	r5, r1, r6
 801a058:	fb06 1415 	mls	r4, r6, r5, r1
 801a05c:	3430      	adds	r4, #48	; 0x30
 801a05e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a062:	460c      	mov	r4, r1
 801a064:	2c63      	cmp	r4, #99	; 0x63
 801a066:	f102 32ff 	add.w	r2, r2, #4294967295
 801a06a:	4629      	mov	r1, r5
 801a06c:	dcf1      	bgt.n	801a052 <__exponent+0x22>
 801a06e:	3130      	adds	r1, #48	; 0x30
 801a070:	f1ac 0402 	sub.w	r4, ip, #2
 801a074:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a078:	1c41      	adds	r1, r0, #1
 801a07a:	4622      	mov	r2, r4
 801a07c:	42ba      	cmp	r2, r7
 801a07e:	d30a      	bcc.n	801a096 <__exponent+0x66>
 801a080:	f10d 0209 	add.w	r2, sp, #9
 801a084:	eba2 020c 	sub.w	r2, r2, ip
 801a088:	42bc      	cmp	r4, r7
 801a08a:	bf88      	it	hi
 801a08c:	2200      	movhi	r2, #0
 801a08e:	4413      	add	r3, r2
 801a090:	1a18      	subs	r0, r3, r0
 801a092:	b003      	add	sp, #12
 801a094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a096:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a09a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a09e:	e7ed      	b.n	801a07c <__exponent+0x4c>
 801a0a0:	2330      	movs	r3, #48	; 0x30
 801a0a2:	3130      	adds	r1, #48	; 0x30
 801a0a4:	7083      	strb	r3, [r0, #2]
 801a0a6:	70c1      	strb	r1, [r0, #3]
 801a0a8:	1d03      	adds	r3, r0, #4
 801a0aa:	e7f1      	b.n	801a090 <__exponent+0x60>

0801a0ac <_printf_float>:
 801a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0b0:	ed2d 8b02 	vpush	{d8}
 801a0b4:	b08d      	sub	sp, #52	; 0x34
 801a0b6:	460c      	mov	r4, r1
 801a0b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a0bc:	4616      	mov	r6, r2
 801a0be:	461f      	mov	r7, r3
 801a0c0:	4605      	mov	r5, r0
 801a0c2:	f000 ff47 	bl	801af54 <_localeconv_r>
 801a0c6:	f8d0 a000 	ldr.w	sl, [r0]
 801a0ca:	4650      	mov	r0, sl
 801a0cc:	f7e6 f928 	bl	8000320 <strlen>
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	930a      	str	r3, [sp, #40]	; 0x28
 801a0d4:	6823      	ldr	r3, [r4, #0]
 801a0d6:	9305      	str	r3, [sp, #20]
 801a0d8:	f8d8 3000 	ldr.w	r3, [r8]
 801a0dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a0e0:	3307      	adds	r3, #7
 801a0e2:	f023 0307 	bic.w	r3, r3, #7
 801a0e6:	f103 0208 	add.w	r2, r3, #8
 801a0ea:	f8c8 2000 	str.w	r2, [r8]
 801a0ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a0f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a0f6:	9307      	str	r3, [sp, #28]
 801a0f8:	f8cd 8018 	str.w	r8, [sp, #24]
 801a0fc:	ee08 0a10 	vmov	s16, r0
 801a100:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801a104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a108:	4b9e      	ldr	r3, [pc, #632]	; (801a384 <_printf_float+0x2d8>)
 801a10a:	f04f 32ff 	mov.w	r2, #4294967295
 801a10e:	f7e6 fd65 	bl	8000bdc <__aeabi_dcmpun>
 801a112:	bb88      	cbnz	r0, 801a178 <_printf_float+0xcc>
 801a114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a118:	4b9a      	ldr	r3, [pc, #616]	; (801a384 <_printf_float+0x2d8>)
 801a11a:	f04f 32ff 	mov.w	r2, #4294967295
 801a11e:	f7e6 fd3f 	bl	8000ba0 <__aeabi_dcmple>
 801a122:	bb48      	cbnz	r0, 801a178 <_printf_float+0xcc>
 801a124:	2200      	movs	r2, #0
 801a126:	2300      	movs	r3, #0
 801a128:	4640      	mov	r0, r8
 801a12a:	4649      	mov	r1, r9
 801a12c:	f7e6 fd2e 	bl	8000b8c <__aeabi_dcmplt>
 801a130:	b110      	cbz	r0, 801a138 <_printf_float+0x8c>
 801a132:	232d      	movs	r3, #45	; 0x2d
 801a134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a138:	4a93      	ldr	r2, [pc, #588]	; (801a388 <_printf_float+0x2dc>)
 801a13a:	4b94      	ldr	r3, [pc, #592]	; (801a38c <_printf_float+0x2e0>)
 801a13c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a140:	bf94      	ite	ls
 801a142:	4690      	movls	r8, r2
 801a144:	4698      	movhi	r8, r3
 801a146:	2303      	movs	r3, #3
 801a148:	6123      	str	r3, [r4, #16]
 801a14a:	9b05      	ldr	r3, [sp, #20]
 801a14c:	f023 0304 	bic.w	r3, r3, #4
 801a150:	6023      	str	r3, [r4, #0]
 801a152:	f04f 0900 	mov.w	r9, #0
 801a156:	9700      	str	r7, [sp, #0]
 801a158:	4633      	mov	r3, r6
 801a15a:	aa0b      	add	r2, sp, #44	; 0x2c
 801a15c:	4621      	mov	r1, r4
 801a15e:	4628      	mov	r0, r5
 801a160:	f000 f9da 	bl	801a518 <_printf_common>
 801a164:	3001      	adds	r0, #1
 801a166:	f040 8090 	bne.w	801a28a <_printf_float+0x1de>
 801a16a:	f04f 30ff 	mov.w	r0, #4294967295
 801a16e:	b00d      	add	sp, #52	; 0x34
 801a170:	ecbd 8b02 	vpop	{d8}
 801a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a178:	4642      	mov	r2, r8
 801a17a:	464b      	mov	r3, r9
 801a17c:	4640      	mov	r0, r8
 801a17e:	4649      	mov	r1, r9
 801a180:	f7e6 fd2c 	bl	8000bdc <__aeabi_dcmpun>
 801a184:	b140      	cbz	r0, 801a198 <_printf_float+0xec>
 801a186:	464b      	mov	r3, r9
 801a188:	2b00      	cmp	r3, #0
 801a18a:	bfbc      	itt	lt
 801a18c:	232d      	movlt	r3, #45	; 0x2d
 801a18e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a192:	4a7f      	ldr	r2, [pc, #508]	; (801a390 <_printf_float+0x2e4>)
 801a194:	4b7f      	ldr	r3, [pc, #508]	; (801a394 <_printf_float+0x2e8>)
 801a196:	e7d1      	b.n	801a13c <_printf_float+0x90>
 801a198:	6863      	ldr	r3, [r4, #4]
 801a19a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a19e:	9206      	str	r2, [sp, #24]
 801a1a0:	1c5a      	adds	r2, r3, #1
 801a1a2:	d13f      	bne.n	801a224 <_printf_float+0x178>
 801a1a4:	2306      	movs	r3, #6
 801a1a6:	6063      	str	r3, [r4, #4]
 801a1a8:	9b05      	ldr	r3, [sp, #20]
 801a1aa:	6861      	ldr	r1, [r4, #4]
 801a1ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	9303      	str	r3, [sp, #12]
 801a1b4:	ab0a      	add	r3, sp, #40	; 0x28
 801a1b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a1ba:	ab09      	add	r3, sp, #36	; 0x24
 801a1bc:	ec49 8b10 	vmov	d0, r8, r9
 801a1c0:	9300      	str	r3, [sp, #0]
 801a1c2:	6022      	str	r2, [r4, #0]
 801a1c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	f7ff fecf 	bl	8019f6c <__cvt>
 801a1ce:	9b06      	ldr	r3, [sp, #24]
 801a1d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1d2:	2b47      	cmp	r3, #71	; 0x47
 801a1d4:	4680      	mov	r8, r0
 801a1d6:	d108      	bne.n	801a1ea <_printf_float+0x13e>
 801a1d8:	1cc8      	adds	r0, r1, #3
 801a1da:	db02      	blt.n	801a1e2 <_printf_float+0x136>
 801a1dc:	6863      	ldr	r3, [r4, #4]
 801a1de:	4299      	cmp	r1, r3
 801a1e0:	dd41      	ble.n	801a266 <_printf_float+0x1ba>
 801a1e2:	f1ab 0302 	sub.w	r3, fp, #2
 801a1e6:	fa5f fb83 	uxtb.w	fp, r3
 801a1ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a1ee:	d820      	bhi.n	801a232 <_printf_float+0x186>
 801a1f0:	3901      	subs	r1, #1
 801a1f2:	465a      	mov	r2, fp
 801a1f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a1f8:	9109      	str	r1, [sp, #36]	; 0x24
 801a1fa:	f7ff ff19 	bl	801a030 <__exponent>
 801a1fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a200:	1813      	adds	r3, r2, r0
 801a202:	2a01      	cmp	r2, #1
 801a204:	4681      	mov	r9, r0
 801a206:	6123      	str	r3, [r4, #16]
 801a208:	dc02      	bgt.n	801a210 <_printf_float+0x164>
 801a20a:	6822      	ldr	r2, [r4, #0]
 801a20c:	07d2      	lsls	r2, r2, #31
 801a20e:	d501      	bpl.n	801a214 <_printf_float+0x168>
 801a210:	3301      	adds	r3, #1
 801a212:	6123      	str	r3, [r4, #16]
 801a214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d09c      	beq.n	801a156 <_printf_float+0xaa>
 801a21c:	232d      	movs	r3, #45	; 0x2d
 801a21e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a222:	e798      	b.n	801a156 <_printf_float+0xaa>
 801a224:	9a06      	ldr	r2, [sp, #24]
 801a226:	2a47      	cmp	r2, #71	; 0x47
 801a228:	d1be      	bne.n	801a1a8 <_printf_float+0xfc>
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d1bc      	bne.n	801a1a8 <_printf_float+0xfc>
 801a22e:	2301      	movs	r3, #1
 801a230:	e7b9      	b.n	801a1a6 <_printf_float+0xfa>
 801a232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a236:	d118      	bne.n	801a26a <_printf_float+0x1be>
 801a238:	2900      	cmp	r1, #0
 801a23a:	6863      	ldr	r3, [r4, #4]
 801a23c:	dd0b      	ble.n	801a256 <_printf_float+0x1aa>
 801a23e:	6121      	str	r1, [r4, #16]
 801a240:	b913      	cbnz	r3, 801a248 <_printf_float+0x19c>
 801a242:	6822      	ldr	r2, [r4, #0]
 801a244:	07d0      	lsls	r0, r2, #31
 801a246:	d502      	bpl.n	801a24e <_printf_float+0x1a2>
 801a248:	3301      	adds	r3, #1
 801a24a:	440b      	add	r3, r1
 801a24c:	6123      	str	r3, [r4, #16]
 801a24e:	65a1      	str	r1, [r4, #88]	; 0x58
 801a250:	f04f 0900 	mov.w	r9, #0
 801a254:	e7de      	b.n	801a214 <_printf_float+0x168>
 801a256:	b913      	cbnz	r3, 801a25e <_printf_float+0x1b2>
 801a258:	6822      	ldr	r2, [r4, #0]
 801a25a:	07d2      	lsls	r2, r2, #31
 801a25c:	d501      	bpl.n	801a262 <_printf_float+0x1b6>
 801a25e:	3302      	adds	r3, #2
 801a260:	e7f4      	b.n	801a24c <_printf_float+0x1a0>
 801a262:	2301      	movs	r3, #1
 801a264:	e7f2      	b.n	801a24c <_printf_float+0x1a0>
 801a266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a26c:	4299      	cmp	r1, r3
 801a26e:	db05      	blt.n	801a27c <_printf_float+0x1d0>
 801a270:	6823      	ldr	r3, [r4, #0]
 801a272:	6121      	str	r1, [r4, #16]
 801a274:	07d8      	lsls	r0, r3, #31
 801a276:	d5ea      	bpl.n	801a24e <_printf_float+0x1a2>
 801a278:	1c4b      	adds	r3, r1, #1
 801a27a:	e7e7      	b.n	801a24c <_printf_float+0x1a0>
 801a27c:	2900      	cmp	r1, #0
 801a27e:	bfd4      	ite	le
 801a280:	f1c1 0202 	rsble	r2, r1, #2
 801a284:	2201      	movgt	r2, #1
 801a286:	4413      	add	r3, r2
 801a288:	e7e0      	b.n	801a24c <_printf_float+0x1a0>
 801a28a:	6823      	ldr	r3, [r4, #0]
 801a28c:	055a      	lsls	r2, r3, #21
 801a28e:	d407      	bmi.n	801a2a0 <_printf_float+0x1f4>
 801a290:	6923      	ldr	r3, [r4, #16]
 801a292:	4642      	mov	r2, r8
 801a294:	4631      	mov	r1, r6
 801a296:	4628      	mov	r0, r5
 801a298:	47b8      	blx	r7
 801a29a:	3001      	adds	r0, #1
 801a29c:	d12c      	bne.n	801a2f8 <_printf_float+0x24c>
 801a29e:	e764      	b.n	801a16a <_printf_float+0xbe>
 801a2a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a2a4:	f240 80e0 	bls.w	801a468 <_printf_float+0x3bc>
 801a2a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	f7e6 fc62 	bl	8000b78 <__aeabi_dcmpeq>
 801a2b4:	2800      	cmp	r0, #0
 801a2b6:	d034      	beq.n	801a322 <_printf_float+0x276>
 801a2b8:	4a37      	ldr	r2, [pc, #220]	; (801a398 <_printf_float+0x2ec>)
 801a2ba:	2301      	movs	r3, #1
 801a2bc:	4631      	mov	r1, r6
 801a2be:	4628      	mov	r0, r5
 801a2c0:	47b8      	blx	r7
 801a2c2:	3001      	adds	r0, #1
 801a2c4:	f43f af51 	beq.w	801a16a <_printf_float+0xbe>
 801a2c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	db02      	blt.n	801a2d6 <_printf_float+0x22a>
 801a2d0:	6823      	ldr	r3, [r4, #0]
 801a2d2:	07d8      	lsls	r0, r3, #31
 801a2d4:	d510      	bpl.n	801a2f8 <_printf_float+0x24c>
 801a2d6:	ee18 3a10 	vmov	r3, s16
 801a2da:	4652      	mov	r2, sl
 801a2dc:	4631      	mov	r1, r6
 801a2de:	4628      	mov	r0, r5
 801a2e0:	47b8      	blx	r7
 801a2e2:	3001      	adds	r0, #1
 801a2e4:	f43f af41 	beq.w	801a16a <_printf_float+0xbe>
 801a2e8:	f04f 0800 	mov.w	r8, #0
 801a2ec:	f104 091a 	add.w	r9, r4, #26
 801a2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2f2:	3b01      	subs	r3, #1
 801a2f4:	4543      	cmp	r3, r8
 801a2f6:	dc09      	bgt.n	801a30c <_printf_float+0x260>
 801a2f8:	6823      	ldr	r3, [r4, #0]
 801a2fa:	079b      	lsls	r3, r3, #30
 801a2fc:	f100 8107 	bmi.w	801a50e <_printf_float+0x462>
 801a300:	68e0      	ldr	r0, [r4, #12]
 801a302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a304:	4298      	cmp	r0, r3
 801a306:	bfb8      	it	lt
 801a308:	4618      	movlt	r0, r3
 801a30a:	e730      	b.n	801a16e <_printf_float+0xc2>
 801a30c:	2301      	movs	r3, #1
 801a30e:	464a      	mov	r2, r9
 801a310:	4631      	mov	r1, r6
 801a312:	4628      	mov	r0, r5
 801a314:	47b8      	blx	r7
 801a316:	3001      	adds	r0, #1
 801a318:	f43f af27 	beq.w	801a16a <_printf_float+0xbe>
 801a31c:	f108 0801 	add.w	r8, r8, #1
 801a320:	e7e6      	b.n	801a2f0 <_printf_float+0x244>
 801a322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a324:	2b00      	cmp	r3, #0
 801a326:	dc39      	bgt.n	801a39c <_printf_float+0x2f0>
 801a328:	4a1b      	ldr	r2, [pc, #108]	; (801a398 <_printf_float+0x2ec>)
 801a32a:	2301      	movs	r3, #1
 801a32c:	4631      	mov	r1, r6
 801a32e:	4628      	mov	r0, r5
 801a330:	47b8      	blx	r7
 801a332:	3001      	adds	r0, #1
 801a334:	f43f af19 	beq.w	801a16a <_printf_float+0xbe>
 801a338:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a33c:	4313      	orrs	r3, r2
 801a33e:	d102      	bne.n	801a346 <_printf_float+0x29a>
 801a340:	6823      	ldr	r3, [r4, #0]
 801a342:	07d9      	lsls	r1, r3, #31
 801a344:	d5d8      	bpl.n	801a2f8 <_printf_float+0x24c>
 801a346:	ee18 3a10 	vmov	r3, s16
 801a34a:	4652      	mov	r2, sl
 801a34c:	4631      	mov	r1, r6
 801a34e:	4628      	mov	r0, r5
 801a350:	47b8      	blx	r7
 801a352:	3001      	adds	r0, #1
 801a354:	f43f af09 	beq.w	801a16a <_printf_float+0xbe>
 801a358:	f04f 0900 	mov.w	r9, #0
 801a35c:	f104 0a1a 	add.w	sl, r4, #26
 801a360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a362:	425b      	negs	r3, r3
 801a364:	454b      	cmp	r3, r9
 801a366:	dc01      	bgt.n	801a36c <_printf_float+0x2c0>
 801a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a36a:	e792      	b.n	801a292 <_printf_float+0x1e6>
 801a36c:	2301      	movs	r3, #1
 801a36e:	4652      	mov	r2, sl
 801a370:	4631      	mov	r1, r6
 801a372:	4628      	mov	r0, r5
 801a374:	47b8      	blx	r7
 801a376:	3001      	adds	r0, #1
 801a378:	f43f aef7 	beq.w	801a16a <_printf_float+0xbe>
 801a37c:	f109 0901 	add.w	r9, r9, #1
 801a380:	e7ee      	b.n	801a360 <_printf_float+0x2b4>
 801a382:	bf00      	nop
 801a384:	7fefffff 	.word	0x7fefffff
 801a388:	080207da 	.word	0x080207da
 801a38c:	080207de 	.word	0x080207de
 801a390:	080207e2 	.word	0x080207e2
 801a394:	080207e6 	.word	0x080207e6
 801a398:	08020b70 	.word	0x08020b70
 801a39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a39e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a3a0:	429a      	cmp	r2, r3
 801a3a2:	bfa8      	it	ge
 801a3a4:	461a      	movge	r2, r3
 801a3a6:	2a00      	cmp	r2, #0
 801a3a8:	4691      	mov	r9, r2
 801a3aa:	dc37      	bgt.n	801a41c <_printf_float+0x370>
 801a3ac:	f04f 0b00 	mov.w	fp, #0
 801a3b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a3b4:	f104 021a 	add.w	r2, r4, #26
 801a3b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a3ba:	9305      	str	r3, [sp, #20]
 801a3bc:	eba3 0309 	sub.w	r3, r3, r9
 801a3c0:	455b      	cmp	r3, fp
 801a3c2:	dc33      	bgt.n	801a42c <_printf_float+0x380>
 801a3c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	db3b      	blt.n	801a444 <_printf_float+0x398>
 801a3cc:	6823      	ldr	r3, [r4, #0]
 801a3ce:	07da      	lsls	r2, r3, #31
 801a3d0:	d438      	bmi.n	801a444 <_printf_float+0x398>
 801a3d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a3d6:	eba2 0903 	sub.w	r9, r2, r3
 801a3da:	9b05      	ldr	r3, [sp, #20]
 801a3dc:	1ad2      	subs	r2, r2, r3
 801a3de:	4591      	cmp	r9, r2
 801a3e0:	bfa8      	it	ge
 801a3e2:	4691      	movge	r9, r2
 801a3e4:	f1b9 0f00 	cmp.w	r9, #0
 801a3e8:	dc35      	bgt.n	801a456 <_printf_float+0x3aa>
 801a3ea:	f04f 0800 	mov.w	r8, #0
 801a3ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a3f2:	f104 0a1a 	add.w	sl, r4, #26
 801a3f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a3fa:	1a9b      	subs	r3, r3, r2
 801a3fc:	eba3 0309 	sub.w	r3, r3, r9
 801a400:	4543      	cmp	r3, r8
 801a402:	f77f af79 	ble.w	801a2f8 <_printf_float+0x24c>
 801a406:	2301      	movs	r3, #1
 801a408:	4652      	mov	r2, sl
 801a40a:	4631      	mov	r1, r6
 801a40c:	4628      	mov	r0, r5
 801a40e:	47b8      	blx	r7
 801a410:	3001      	adds	r0, #1
 801a412:	f43f aeaa 	beq.w	801a16a <_printf_float+0xbe>
 801a416:	f108 0801 	add.w	r8, r8, #1
 801a41a:	e7ec      	b.n	801a3f6 <_printf_float+0x34a>
 801a41c:	4613      	mov	r3, r2
 801a41e:	4631      	mov	r1, r6
 801a420:	4642      	mov	r2, r8
 801a422:	4628      	mov	r0, r5
 801a424:	47b8      	blx	r7
 801a426:	3001      	adds	r0, #1
 801a428:	d1c0      	bne.n	801a3ac <_printf_float+0x300>
 801a42a:	e69e      	b.n	801a16a <_printf_float+0xbe>
 801a42c:	2301      	movs	r3, #1
 801a42e:	4631      	mov	r1, r6
 801a430:	4628      	mov	r0, r5
 801a432:	9205      	str	r2, [sp, #20]
 801a434:	47b8      	blx	r7
 801a436:	3001      	adds	r0, #1
 801a438:	f43f ae97 	beq.w	801a16a <_printf_float+0xbe>
 801a43c:	9a05      	ldr	r2, [sp, #20]
 801a43e:	f10b 0b01 	add.w	fp, fp, #1
 801a442:	e7b9      	b.n	801a3b8 <_printf_float+0x30c>
 801a444:	ee18 3a10 	vmov	r3, s16
 801a448:	4652      	mov	r2, sl
 801a44a:	4631      	mov	r1, r6
 801a44c:	4628      	mov	r0, r5
 801a44e:	47b8      	blx	r7
 801a450:	3001      	adds	r0, #1
 801a452:	d1be      	bne.n	801a3d2 <_printf_float+0x326>
 801a454:	e689      	b.n	801a16a <_printf_float+0xbe>
 801a456:	9a05      	ldr	r2, [sp, #20]
 801a458:	464b      	mov	r3, r9
 801a45a:	4442      	add	r2, r8
 801a45c:	4631      	mov	r1, r6
 801a45e:	4628      	mov	r0, r5
 801a460:	47b8      	blx	r7
 801a462:	3001      	adds	r0, #1
 801a464:	d1c1      	bne.n	801a3ea <_printf_float+0x33e>
 801a466:	e680      	b.n	801a16a <_printf_float+0xbe>
 801a468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a46a:	2a01      	cmp	r2, #1
 801a46c:	dc01      	bgt.n	801a472 <_printf_float+0x3c6>
 801a46e:	07db      	lsls	r3, r3, #31
 801a470:	d53a      	bpl.n	801a4e8 <_printf_float+0x43c>
 801a472:	2301      	movs	r3, #1
 801a474:	4642      	mov	r2, r8
 801a476:	4631      	mov	r1, r6
 801a478:	4628      	mov	r0, r5
 801a47a:	47b8      	blx	r7
 801a47c:	3001      	adds	r0, #1
 801a47e:	f43f ae74 	beq.w	801a16a <_printf_float+0xbe>
 801a482:	ee18 3a10 	vmov	r3, s16
 801a486:	4652      	mov	r2, sl
 801a488:	4631      	mov	r1, r6
 801a48a:	4628      	mov	r0, r5
 801a48c:	47b8      	blx	r7
 801a48e:	3001      	adds	r0, #1
 801a490:	f43f ae6b 	beq.w	801a16a <_printf_float+0xbe>
 801a494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a498:	2200      	movs	r2, #0
 801a49a:	2300      	movs	r3, #0
 801a49c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801a4a0:	f7e6 fb6a 	bl	8000b78 <__aeabi_dcmpeq>
 801a4a4:	b9d8      	cbnz	r0, 801a4de <_printf_float+0x432>
 801a4a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a4aa:	f108 0201 	add.w	r2, r8, #1
 801a4ae:	4631      	mov	r1, r6
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	47b8      	blx	r7
 801a4b4:	3001      	adds	r0, #1
 801a4b6:	d10e      	bne.n	801a4d6 <_printf_float+0x42a>
 801a4b8:	e657      	b.n	801a16a <_printf_float+0xbe>
 801a4ba:	2301      	movs	r3, #1
 801a4bc:	4652      	mov	r2, sl
 801a4be:	4631      	mov	r1, r6
 801a4c0:	4628      	mov	r0, r5
 801a4c2:	47b8      	blx	r7
 801a4c4:	3001      	adds	r0, #1
 801a4c6:	f43f ae50 	beq.w	801a16a <_printf_float+0xbe>
 801a4ca:	f108 0801 	add.w	r8, r8, #1
 801a4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4d0:	3b01      	subs	r3, #1
 801a4d2:	4543      	cmp	r3, r8
 801a4d4:	dcf1      	bgt.n	801a4ba <_printf_float+0x40e>
 801a4d6:	464b      	mov	r3, r9
 801a4d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a4dc:	e6da      	b.n	801a294 <_printf_float+0x1e8>
 801a4de:	f04f 0800 	mov.w	r8, #0
 801a4e2:	f104 0a1a 	add.w	sl, r4, #26
 801a4e6:	e7f2      	b.n	801a4ce <_printf_float+0x422>
 801a4e8:	2301      	movs	r3, #1
 801a4ea:	4642      	mov	r2, r8
 801a4ec:	e7df      	b.n	801a4ae <_printf_float+0x402>
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	464a      	mov	r2, r9
 801a4f2:	4631      	mov	r1, r6
 801a4f4:	4628      	mov	r0, r5
 801a4f6:	47b8      	blx	r7
 801a4f8:	3001      	adds	r0, #1
 801a4fa:	f43f ae36 	beq.w	801a16a <_printf_float+0xbe>
 801a4fe:	f108 0801 	add.w	r8, r8, #1
 801a502:	68e3      	ldr	r3, [r4, #12]
 801a504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a506:	1a5b      	subs	r3, r3, r1
 801a508:	4543      	cmp	r3, r8
 801a50a:	dcf0      	bgt.n	801a4ee <_printf_float+0x442>
 801a50c:	e6f8      	b.n	801a300 <_printf_float+0x254>
 801a50e:	f04f 0800 	mov.w	r8, #0
 801a512:	f104 0919 	add.w	r9, r4, #25
 801a516:	e7f4      	b.n	801a502 <_printf_float+0x456>

0801a518 <_printf_common>:
 801a518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a51c:	4616      	mov	r6, r2
 801a51e:	4699      	mov	r9, r3
 801a520:	688a      	ldr	r2, [r1, #8]
 801a522:	690b      	ldr	r3, [r1, #16]
 801a524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a528:	4293      	cmp	r3, r2
 801a52a:	bfb8      	it	lt
 801a52c:	4613      	movlt	r3, r2
 801a52e:	6033      	str	r3, [r6, #0]
 801a530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a534:	4607      	mov	r7, r0
 801a536:	460c      	mov	r4, r1
 801a538:	b10a      	cbz	r2, 801a53e <_printf_common+0x26>
 801a53a:	3301      	adds	r3, #1
 801a53c:	6033      	str	r3, [r6, #0]
 801a53e:	6823      	ldr	r3, [r4, #0]
 801a540:	0699      	lsls	r1, r3, #26
 801a542:	bf42      	ittt	mi
 801a544:	6833      	ldrmi	r3, [r6, #0]
 801a546:	3302      	addmi	r3, #2
 801a548:	6033      	strmi	r3, [r6, #0]
 801a54a:	6825      	ldr	r5, [r4, #0]
 801a54c:	f015 0506 	ands.w	r5, r5, #6
 801a550:	d106      	bne.n	801a560 <_printf_common+0x48>
 801a552:	f104 0a19 	add.w	sl, r4, #25
 801a556:	68e3      	ldr	r3, [r4, #12]
 801a558:	6832      	ldr	r2, [r6, #0]
 801a55a:	1a9b      	subs	r3, r3, r2
 801a55c:	42ab      	cmp	r3, r5
 801a55e:	dc26      	bgt.n	801a5ae <_printf_common+0x96>
 801a560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a564:	1e13      	subs	r3, r2, #0
 801a566:	6822      	ldr	r2, [r4, #0]
 801a568:	bf18      	it	ne
 801a56a:	2301      	movne	r3, #1
 801a56c:	0692      	lsls	r2, r2, #26
 801a56e:	d42b      	bmi.n	801a5c8 <_printf_common+0xb0>
 801a570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a574:	4649      	mov	r1, r9
 801a576:	4638      	mov	r0, r7
 801a578:	47c0      	blx	r8
 801a57a:	3001      	adds	r0, #1
 801a57c:	d01e      	beq.n	801a5bc <_printf_common+0xa4>
 801a57e:	6823      	ldr	r3, [r4, #0]
 801a580:	6922      	ldr	r2, [r4, #16]
 801a582:	f003 0306 	and.w	r3, r3, #6
 801a586:	2b04      	cmp	r3, #4
 801a588:	bf02      	ittt	eq
 801a58a:	68e5      	ldreq	r5, [r4, #12]
 801a58c:	6833      	ldreq	r3, [r6, #0]
 801a58e:	1aed      	subeq	r5, r5, r3
 801a590:	68a3      	ldr	r3, [r4, #8]
 801a592:	bf0c      	ite	eq
 801a594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a598:	2500      	movne	r5, #0
 801a59a:	4293      	cmp	r3, r2
 801a59c:	bfc4      	itt	gt
 801a59e:	1a9b      	subgt	r3, r3, r2
 801a5a0:	18ed      	addgt	r5, r5, r3
 801a5a2:	2600      	movs	r6, #0
 801a5a4:	341a      	adds	r4, #26
 801a5a6:	42b5      	cmp	r5, r6
 801a5a8:	d11a      	bne.n	801a5e0 <_printf_common+0xc8>
 801a5aa:	2000      	movs	r0, #0
 801a5ac:	e008      	b.n	801a5c0 <_printf_common+0xa8>
 801a5ae:	2301      	movs	r3, #1
 801a5b0:	4652      	mov	r2, sl
 801a5b2:	4649      	mov	r1, r9
 801a5b4:	4638      	mov	r0, r7
 801a5b6:	47c0      	blx	r8
 801a5b8:	3001      	adds	r0, #1
 801a5ba:	d103      	bne.n	801a5c4 <_printf_common+0xac>
 801a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5c4:	3501      	adds	r5, #1
 801a5c6:	e7c6      	b.n	801a556 <_printf_common+0x3e>
 801a5c8:	18e1      	adds	r1, r4, r3
 801a5ca:	1c5a      	adds	r2, r3, #1
 801a5cc:	2030      	movs	r0, #48	; 0x30
 801a5ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a5d2:	4422      	add	r2, r4
 801a5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a5d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a5dc:	3302      	adds	r3, #2
 801a5de:	e7c7      	b.n	801a570 <_printf_common+0x58>
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	4622      	mov	r2, r4
 801a5e4:	4649      	mov	r1, r9
 801a5e6:	4638      	mov	r0, r7
 801a5e8:	47c0      	blx	r8
 801a5ea:	3001      	adds	r0, #1
 801a5ec:	d0e6      	beq.n	801a5bc <_printf_common+0xa4>
 801a5ee:	3601      	adds	r6, #1
 801a5f0:	e7d9      	b.n	801a5a6 <_printf_common+0x8e>
	...

0801a5f4 <_printf_i>:
 801a5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5f8:	7e0f      	ldrb	r7, [r1, #24]
 801a5fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a5fc:	2f78      	cmp	r7, #120	; 0x78
 801a5fe:	4691      	mov	r9, r2
 801a600:	4680      	mov	r8, r0
 801a602:	460c      	mov	r4, r1
 801a604:	469a      	mov	sl, r3
 801a606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a60a:	d807      	bhi.n	801a61c <_printf_i+0x28>
 801a60c:	2f62      	cmp	r7, #98	; 0x62
 801a60e:	d80a      	bhi.n	801a626 <_printf_i+0x32>
 801a610:	2f00      	cmp	r7, #0
 801a612:	f000 80d4 	beq.w	801a7be <_printf_i+0x1ca>
 801a616:	2f58      	cmp	r7, #88	; 0x58
 801a618:	f000 80c0 	beq.w	801a79c <_printf_i+0x1a8>
 801a61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a624:	e03a      	b.n	801a69c <_printf_i+0xa8>
 801a626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a62a:	2b15      	cmp	r3, #21
 801a62c:	d8f6      	bhi.n	801a61c <_printf_i+0x28>
 801a62e:	a101      	add	r1, pc, #4	; (adr r1, 801a634 <_printf_i+0x40>)
 801a630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a634:	0801a68d 	.word	0x0801a68d
 801a638:	0801a6a1 	.word	0x0801a6a1
 801a63c:	0801a61d 	.word	0x0801a61d
 801a640:	0801a61d 	.word	0x0801a61d
 801a644:	0801a61d 	.word	0x0801a61d
 801a648:	0801a61d 	.word	0x0801a61d
 801a64c:	0801a6a1 	.word	0x0801a6a1
 801a650:	0801a61d 	.word	0x0801a61d
 801a654:	0801a61d 	.word	0x0801a61d
 801a658:	0801a61d 	.word	0x0801a61d
 801a65c:	0801a61d 	.word	0x0801a61d
 801a660:	0801a7a5 	.word	0x0801a7a5
 801a664:	0801a6cd 	.word	0x0801a6cd
 801a668:	0801a75f 	.word	0x0801a75f
 801a66c:	0801a61d 	.word	0x0801a61d
 801a670:	0801a61d 	.word	0x0801a61d
 801a674:	0801a7c7 	.word	0x0801a7c7
 801a678:	0801a61d 	.word	0x0801a61d
 801a67c:	0801a6cd 	.word	0x0801a6cd
 801a680:	0801a61d 	.word	0x0801a61d
 801a684:	0801a61d 	.word	0x0801a61d
 801a688:	0801a767 	.word	0x0801a767
 801a68c:	682b      	ldr	r3, [r5, #0]
 801a68e:	1d1a      	adds	r2, r3, #4
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	602a      	str	r2, [r5, #0]
 801a694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a69c:	2301      	movs	r3, #1
 801a69e:	e09f      	b.n	801a7e0 <_printf_i+0x1ec>
 801a6a0:	6820      	ldr	r0, [r4, #0]
 801a6a2:	682b      	ldr	r3, [r5, #0]
 801a6a4:	0607      	lsls	r7, r0, #24
 801a6a6:	f103 0104 	add.w	r1, r3, #4
 801a6aa:	6029      	str	r1, [r5, #0]
 801a6ac:	d501      	bpl.n	801a6b2 <_printf_i+0xbe>
 801a6ae:	681e      	ldr	r6, [r3, #0]
 801a6b0:	e003      	b.n	801a6ba <_printf_i+0xc6>
 801a6b2:	0646      	lsls	r6, r0, #25
 801a6b4:	d5fb      	bpl.n	801a6ae <_printf_i+0xba>
 801a6b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a6ba:	2e00      	cmp	r6, #0
 801a6bc:	da03      	bge.n	801a6c6 <_printf_i+0xd2>
 801a6be:	232d      	movs	r3, #45	; 0x2d
 801a6c0:	4276      	negs	r6, r6
 801a6c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6c6:	485a      	ldr	r0, [pc, #360]	; (801a830 <_printf_i+0x23c>)
 801a6c8:	230a      	movs	r3, #10
 801a6ca:	e012      	b.n	801a6f2 <_printf_i+0xfe>
 801a6cc:	682b      	ldr	r3, [r5, #0]
 801a6ce:	6820      	ldr	r0, [r4, #0]
 801a6d0:	1d19      	adds	r1, r3, #4
 801a6d2:	6029      	str	r1, [r5, #0]
 801a6d4:	0605      	lsls	r5, r0, #24
 801a6d6:	d501      	bpl.n	801a6dc <_printf_i+0xe8>
 801a6d8:	681e      	ldr	r6, [r3, #0]
 801a6da:	e002      	b.n	801a6e2 <_printf_i+0xee>
 801a6dc:	0641      	lsls	r1, r0, #25
 801a6de:	d5fb      	bpl.n	801a6d8 <_printf_i+0xe4>
 801a6e0:	881e      	ldrh	r6, [r3, #0]
 801a6e2:	4853      	ldr	r0, [pc, #332]	; (801a830 <_printf_i+0x23c>)
 801a6e4:	2f6f      	cmp	r7, #111	; 0x6f
 801a6e6:	bf0c      	ite	eq
 801a6e8:	2308      	moveq	r3, #8
 801a6ea:	230a      	movne	r3, #10
 801a6ec:	2100      	movs	r1, #0
 801a6ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a6f2:	6865      	ldr	r5, [r4, #4]
 801a6f4:	60a5      	str	r5, [r4, #8]
 801a6f6:	2d00      	cmp	r5, #0
 801a6f8:	bfa2      	ittt	ge
 801a6fa:	6821      	ldrge	r1, [r4, #0]
 801a6fc:	f021 0104 	bicge.w	r1, r1, #4
 801a700:	6021      	strge	r1, [r4, #0]
 801a702:	b90e      	cbnz	r6, 801a708 <_printf_i+0x114>
 801a704:	2d00      	cmp	r5, #0
 801a706:	d04b      	beq.n	801a7a0 <_printf_i+0x1ac>
 801a708:	4615      	mov	r5, r2
 801a70a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a70e:	fb03 6711 	mls	r7, r3, r1, r6
 801a712:	5dc7      	ldrb	r7, [r0, r7]
 801a714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a718:	4637      	mov	r7, r6
 801a71a:	42bb      	cmp	r3, r7
 801a71c:	460e      	mov	r6, r1
 801a71e:	d9f4      	bls.n	801a70a <_printf_i+0x116>
 801a720:	2b08      	cmp	r3, #8
 801a722:	d10b      	bne.n	801a73c <_printf_i+0x148>
 801a724:	6823      	ldr	r3, [r4, #0]
 801a726:	07de      	lsls	r6, r3, #31
 801a728:	d508      	bpl.n	801a73c <_printf_i+0x148>
 801a72a:	6923      	ldr	r3, [r4, #16]
 801a72c:	6861      	ldr	r1, [r4, #4]
 801a72e:	4299      	cmp	r1, r3
 801a730:	bfde      	ittt	le
 801a732:	2330      	movle	r3, #48	; 0x30
 801a734:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a738:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a73c:	1b52      	subs	r2, r2, r5
 801a73e:	6122      	str	r2, [r4, #16]
 801a740:	f8cd a000 	str.w	sl, [sp]
 801a744:	464b      	mov	r3, r9
 801a746:	aa03      	add	r2, sp, #12
 801a748:	4621      	mov	r1, r4
 801a74a:	4640      	mov	r0, r8
 801a74c:	f7ff fee4 	bl	801a518 <_printf_common>
 801a750:	3001      	adds	r0, #1
 801a752:	d14a      	bne.n	801a7ea <_printf_i+0x1f6>
 801a754:	f04f 30ff 	mov.w	r0, #4294967295
 801a758:	b004      	add	sp, #16
 801a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a75e:	6823      	ldr	r3, [r4, #0]
 801a760:	f043 0320 	orr.w	r3, r3, #32
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	4833      	ldr	r0, [pc, #204]	; (801a834 <_printf_i+0x240>)
 801a768:	2778      	movs	r7, #120	; 0x78
 801a76a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a76e:	6823      	ldr	r3, [r4, #0]
 801a770:	6829      	ldr	r1, [r5, #0]
 801a772:	061f      	lsls	r7, r3, #24
 801a774:	f851 6b04 	ldr.w	r6, [r1], #4
 801a778:	d402      	bmi.n	801a780 <_printf_i+0x18c>
 801a77a:	065f      	lsls	r7, r3, #25
 801a77c:	bf48      	it	mi
 801a77e:	b2b6      	uxthmi	r6, r6
 801a780:	07df      	lsls	r7, r3, #31
 801a782:	bf48      	it	mi
 801a784:	f043 0320 	orrmi.w	r3, r3, #32
 801a788:	6029      	str	r1, [r5, #0]
 801a78a:	bf48      	it	mi
 801a78c:	6023      	strmi	r3, [r4, #0]
 801a78e:	b91e      	cbnz	r6, 801a798 <_printf_i+0x1a4>
 801a790:	6823      	ldr	r3, [r4, #0]
 801a792:	f023 0320 	bic.w	r3, r3, #32
 801a796:	6023      	str	r3, [r4, #0]
 801a798:	2310      	movs	r3, #16
 801a79a:	e7a7      	b.n	801a6ec <_printf_i+0xf8>
 801a79c:	4824      	ldr	r0, [pc, #144]	; (801a830 <_printf_i+0x23c>)
 801a79e:	e7e4      	b.n	801a76a <_printf_i+0x176>
 801a7a0:	4615      	mov	r5, r2
 801a7a2:	e7bd      	b.n	801a720 <_printf_i+0x12c>
 801a7a4:	682b      	ldr	r3, [r5, #0]
 801a7a6:	6826      	ldr	r6, [r4, #0]
 801a7a8:	6961      	ldr	r1, [r4, #20]
 801a7aa:	1d18      	adds	r0, r3, #4
 801a7ac:	6028      	str	r0, [r5, #0]
 801a7ae:	0635      	lsls	r5, r6, #24
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	d501      	bpl.n	801a7b8 <_printf_i+0x1c4>
 801a7b4:	6019      	str	r1, [r3, #0]
 801a7b6:	e002      	b.n	801a7be <_printf_i+0x1ca>
 801a7b8:	0670      	lsls	r0, r6, #25
 801a7ba:	d5fb      	bpl.n	801a7b4 <_printf_i+0x1c0>
 801a7bc:	8019      	strh	r1, [r3, #0]
 801a7be:	2300      	movs	r3, #0
 801a7c0:	6123      	str	r3, [r4, #16]
 801a7c2:	4615      	mov	r5, r2
 801a7c4:	e7bc      	b.n	801a740 <_printf_i+0x14c>
 801a7c6:	682b      	ldr	r3, [r5, #0]
 801a7c8:	1d1a      	adds	r2, r3, #4
 801a7ca:	602a      	str	r2, [r5, #0]
 801a7cc:	681d      	ldr	r5, [r3, #0]
 801a7ce:	6862      	ldr	r2, [r4, #4]
 801a7d0:	2100      	movs	r1, #0
 801a7d2:	4628      	mov	r0, r5
 801a7d4:	f7e5 fd54 	bl	8000280 <memchr>
 801a7d8:	b108      	cbz	r0, 801a7de <_printf_i+0x1ea>
 801a7da:	1b40      	subs	r0, r0, r5
 801a7dc:	6060      	str	r0, [r4, #4]
 801a7de:	6863      	ldr	r3, [r4, #4]
 801a7e0:	6123      	str	r3, [r4, #16]
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7e8:	e7aa      	b.n	801a740 <_printf_i+0x14c>
 801a7ea:	6923      	ldr	r3, [r4, #16]
 801a7ec:	462a      	mov	r2, r5
 801a7ee:	4649      	mov	r1, r9
 801a7f0:	4640      	mov	r0, r8
 801a7f2:	47d0      	blx	sl
 801a7f4:	3001      	adds	r0, #1
 801a7f6:	d0ad      	beq.n	801a754 <_printf_i+0x160>
 801a7f8:	6823      	ldr	r3, [r4, #0]
 801a7fa:	079b      	lsls	r3, r3, #30
 801a7fc:	d413      	bmi.n	801a826 <_printf_i+0x232>
 801a7fe:	68e0      	ldr	r0, [r4, #12]
 801a800:	9b03      	ldr	r3, [sp, #12]
 801a802:	4298      	cmp	r0, r3
 801a804:	bfb8      	it	lt
 801a806:	4618      	movlt	r0, r3
 801a808:	e7a6      	b.n	801a758 <_printf_i+0x164>
 801a80a:	2301      	movs	r3, #1
 801a80c:	4632      	mov	r2, r6
 801a80e:	4649      	mov	r1, r9
 801a810:	4640      	mov	r0, r8
 801a812:	47d0      	blx	sl
 801a814:	3001      	adds	r0, #1
 801a816:	d09d      	beq.n	801a754 <_printf_i+0x160>
 801a818:	3501      	adds	r5, #1
 801a81a:	68e3      	ldr	r3, [r4, #12]
 801a81c:	9903      	ldr	r1, [sp, #12]
 801a81e:	1a5b      	subs	r3, r3, r1
 801a820:	42ab      	cmp	r3, r5
 801a822:	dcf2      	bgt.n	801a80a <_printf_i+0x216>
 801a824:	e7eb      	b.n	801a7fe <_printf_i+0x20a>
 801a826:	2500      	movs	r5, #0
 801a828:	f104 0619 	add.w	r6, r4, #25
 801a82c:	e7f5      	b.n	801a81a <_printf_i+0x226>
 801a82e:	bf00      	nop
 801a830:	080207ea 	.word	0x080207ea
 801a834:	080207fb 	.word	0x080207fb

0801a838 <_scanf_float>:
 801a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a83c:	b087      	sub	sp, #28
 801a83e:	4617      	mov	r7, r2
 801a840:	9303      	str	r3, [sp, #12]
 801a842:	688b      	ldr	r3, [r1, #8]
 801a844:	1e5a      	subs	r2, r3, #1
 801a846:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a84a:	bf83      	ittte	hi
 801a84c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a850:	195b      	addhi	r3, r3, r5
 801a852:	9302      	strhi	r3, [sp, #8]
 801a854:	2300      	movls	r3, #0
 801a856:	bf86      	itte	hi
 801a858:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a85c:	608b      	strhi	r3, [r1, #8]
 801a85e:	9302      	strls	r3, [sp, #8]
 801a860:	680b      	ldr	r3, [r1, #0]
 801a862:	468b      	mov	fp, r1
 801a864:	2500      	movs	r5, #0
 801a866:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a86a:	f84b 3b1c 	str.w	r3, [fp], #28
 801a86e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a872:	4680      	mov	r8, r0
 801a874:	460c      	mov	r4, r1
 801a876:	465e      	mov	r6, fp
 801a878:	46aa      	mov	sl, r5
 801a87a:	46a9      	mov	r9, r5
 801a87c:	9501      	str	r5, [sp, #4]
 801a87e:	68a2      	ldr	r2, [r4, #8]
 801a880:	b152      	cbz	r2, 801a898 <_scanf_float+0x60>
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	781b      	ldrb	r3, [r3, #0]
 801a886:	2b4e      	cmp	r3, #78	; 0x4e
 801a888:	d864      	bhi.n	801a954 <_scanf_float+0x11c>
 801a88a:	2b40      	cmp	r3, #64	; 0x40
 801a88c:	d83c      	bhi.n	801a908 <_scanf_float+0xd0>
 801a88e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a892:	b2c8      	uxtb	r0, r1
 801a894:	280e      	cmp	r0, #14
 801a896:	d93a      	bls.n	801a90e <_scanf_float+0xd6>
 801a898:	f1b9 0f00 	cmp.w	r9, #0
 801a89c:	d003      	beq.n	801a8a6 <_scanf_float+0x6e>
 801a89e:	6823      	ldr	r3, [r4, #0]
 801a8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8aa:	f1ba 0f01 	cmp.w	sl, #1
 801a8ae:	f200 8113 	bhi.w	801aad8 <_scanf_float+0x2a0>
 801a8b2:	455e      	cmp	r6, fp
 801a8b4:	f200 8105 	bhi.w	801aac2 <_scanf_float+0x28a>
 801a8b8:	2501      	movs	r5, #1
 801a8ba:	4628      	mov	r0, r5
 801a8bc:	b007      	add	sp, #28
 801a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a8c6:	2a0d      	cmp	r2, #13
 801a8c8:	d8e6      	bhi.n	801a898 <_scanf_float+0x60>
 801a8ca:	a101      	add	r1, pc, #4	; (adr r1, 801a8d0 <_scanf_float+0x98>)
 801a8cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a8d0:	0801aa0f 	.word	0x0801aa0f
 801a8d4:	0801a899 	.word	0x0801a899
 801a8d8:	0801a899 	.word	0x0801a899
 801a8dc:	0801a899 	.word	0x0801a899
 801a8e0:	0801aa6f 	.word	0x0801aa6f
 801a8e4:	0801aa47 	.word	0x0801aa47
 801a8e8:	0801a899 	.word	0x0801a899
 801a8ec:	0801a899 	.word	0x0801a899
 801a8f0:	0801aa1d 	.word	0x0801aa1d
 801a8f4:	0801a899 	.word	0x0801a899
 801a8f8:	0801a899 	.word	0x0801a899
 801a8fc:	0801a899 	.word	0x0801a899
 801a900:	0801a899 	.word	0x0801a899
 801a904:	0801a9d5 	.word	0x0801a9d5
 801a908:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a90c:	e7db      	b.n	801a8c6 <_scanf_float+0x8e>
 801a90e:	290e      	cmp	r1, #14
 801a910:	d8c2      	bhi.n	801a898 <_scanf_float+0x60>
 801a912:	a001      	add	r0, pc, #4	; (adr r0, 801a918 <_scanf_float+0xe0>)
 801a914:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a918:	0801a9c7 	.word	0x0801a9c7
 801a91c:	0801a899 	.word	0x0801a899
 801a920:	0801a9c7 	.word	0x0801a9c7
 801a924:	0801aa5b 	.word	0x0801aa5b
 801a928:	0801a899 	.word	0x0801a899
 801a92c:	0801a975 	.word	0x0801a975
 801a930:	0801a9b1 	.word	0x0801a9b1
 801a934:	0801a9b1 	.word	0x0801a9b1
 801a938:	0801a9b1 	.word	0x0801a9b1
 801a93c:	0801a9b1 	.word	0x0801a9b1
 801a940:	0801a9b1 	.word	0x0801a9b1
 801a944:	0801a9b1 	.word	0x0801a9b1
 801a948:	0801a9b1 	.word	0x0801a9b1
 801a94c:	0801a9b1 	.word	0x0801a9b1
 801a950:	0801a9b1 	.word	0x0801a9b1
 801a954:	2b6e      	cmp	r3, #110	; 0x6e
 801a956:	d809      	bhi.n	801a96c <_scanf_float+0x134>
 801a958:	2b60      	cmp	r3, #96	; 0x60
 801a95a:	d8b2      	bhi.n	801a8c2 <_scanf_float+0x8a>
 801a95c:	2b54      	cmp	r3, #84	; 0x54
 801a95e:	d077      	beq.n	801aa50 <_scanf_float+0x218>
 801a960:	2b59      	cmp	r3, #89	; 0x59
 801a962:	d199      	bne.n	801a898 <_scanf_float+0x60>
 801a964:	2d07      	cmp	r5, #7
 801a966:	d197      	bne.n	801a898 <_scanf_float+0x60>
 801a968:	2508      	movs	r5, #8
 801a96a:	e029      	b.n	801a9c0 <_scanf_float+0x188>
 801a96c:	2b74      	cmp	r3, #116	; 0x74
 801a96e:	d06f      	beq.n	801aa50 <_scanf_float+0x218>
 801a970:	2b79      	cmp	r3, #121	; 0x79
 801a972:	e7f6      	b.n	801a962 <_scanf_float+0x12a>
 801a974:	6821      	ldr	r1, [r4, #0]
 801a976:	05c8      	lsls	r0, r1, #23
 801a978:	d51a      	bpl.n	801a9b0 <_scanf_float+0x178>
 801a97a:	9b02      	ldr	r3, [sp, #8]
 801a97c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a980:	6021      	str	r1, [r4, #0]
 801a982:	f109 0901 	add.w	r9, r9, #1
 801a986:	b11b      	cbz	r3, 801a990 <_scanf_float+0x158>
 801a988:	3b01      	subs	r3, #1
 801a98a:	3201      	adds	r2, #1
 801a98c:	9302      	str	r3, [sp, #8]
 801a98e:	60a2      	str	r2, [r4, #8]
 801a990:	68a3      	ldr	r3, [r4, #8]
 801a992:	3b01      	subs	r3, #1
 801a994:	60a3      	str	r3, [r4, #8]
 801a996:	6923      	ldr	r3, [r4, #16]
 801a998:	3301      	adds	r3, #1
 801a99a:	6123      	str	r3, [r4, #16]
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	3b01      	subs	r3, #1
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	607b      	str	r3, [r7, #4]
 801a9a4:	f340 8084 	ble.w	801aab0 <_scanf_float+0x278>
 801a9a8:	683b      	ldr	r3, [r7, #0]
 801a9aa:	3301      	adds	r3, #1
 801a9ac:	603b      	str	r3, [r7, #0]
 801a9ae:	e766      	b.n	801a87e <_scanf_float+0x46>
 801a9b0:	eb1a 0f05 	cmn.w	sl, r5
 801a9b4:	f47f af70 	bne.w	801a898 <_scanf_float+0x60>
 801a9b8:	6822      	ldr	r2, [r4, #0]
 801a9ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a9be:	6022      	str	r2, [r4, #0]
 801a9c0:	f806 3b01 	strb.w	r3, [r6], #1
 801a9c4:	e7e4      	b.n	801a990 <_scanf_float+0x158>
 801a9c6:	6822      	ldr	r2, [r4, #0]
 801a9c8:	0610      	lsls	r0, r2, #24
 801a9ca:	f57f af65 	bpl.w	801a898 <_scanf_float+0x60>
 801a9ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a9d2:	e7f4      	b.n	801a9be <_scanf_float+0x186>
 801a9d4:	f1ba 0f00 	cmp.w	sl, #0
 801a9d8:	d10e      	bne.n	801a9f8 <_scanf_float+0x1c0>
 801a9da:	f1b9 0f00 	cmp.w	r9, #0
 801a9de:	d10e      	bne.n	801a9fe <_scanf_float+0x1c6>
 801a9e0:	6822      	ldr	r2, [r4, #0]
 801a9e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a9e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a9ea:	d108      	bne.n	801a9fe <_scanf_float+0x1c6>
 801a9ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a9f0:	6022      	str	r2, [r4, #0]
 801a9f2:	f04f 0a01 	mov.w	sl, #1
 801a9f6:	e7e3      	b.n	801a9c0 <_scanf_float+0x188>
 801a9f8:	f1ba 0f02 	cmp.w	sl, #2
 801a9fc:	d055      	beq.n	801aaaa <_scanf_float+0x272>
 801a9fe:	2d01      	cmp	r5, #1
 801aa00:	d002      	beq.n	801aa08 <_scanf_float+0x1d0>
 801aa02:	2d04      	cmp	r5, #4
 801aa04:	f47f af48 	bne.w	801a898 <_scanf_float+0x60>
 801aa08:	3501      	adds	r5, #1
 801aa0a:	b2ed      	uxtb	r5, r5
 801aa0c:	e7d8      	b.n	801a9c0 <_scanf_float+0x188>
 801aa0e:	f1ba 0f01 	cmp.w	sl, #1
 801aa12:	f47f af41 	bne.w	801a898 <_scanf_float+0x60>
 801aa16:	f04f 0a02 	mov.w	sl, #2
 801aa1a:	e7d1      	b.n	801a9c0 <_scanf_float+0x188>
 801aa1c:	b97d      	cbnz	r5, 801aa3e <_scanf_float+0x206>
 801aa1e:	f1b9 0f00 	cmp.w	r9, #0
 801aa22:	f47f af3c 	bne.w	801a89e <_scanf_float+0x66>
 801aa26:	6822      	ldr	r2, [r4, #0]
 801aa28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aa2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aa30:	f47f af39 	bne.w	801a8a6 <_scanf_float+0x6e>
 801aa34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa38:	6022      	str	r2, [r4, #0]
 801aa3a:	2501      	movs	r5, #1
 801aa3c:	e7c0      	b.n	801a9c0 <_scanf_float+0x188>
 801aa3e:	2d03      	cmp	r5, #3
 801aa40:	d0e2      	beq.n	801aa08 <_scanf_float+0x1d0>
 801aa42:	2d05      	cmp	r5, #5
 801aa44:	e7de      	b.n	801aa04 <_scanf_float+0x1cc>
 801aa46:	2d02      	cmp	r5, #2
 801aa48:	f47f af26 	bne.w	801a898 <_scanf_float+0x60>
 801aa4c:	2503      	movs	r5, #3
 801aa4e:	e7b7      	b.n	801a9c0 <_scanf_float+0x188>
 801aa50:	2d06      	cmp	r5, #6
 801aa52:	f47f af21 	bne.w	801a898 <_scanf_float+0x60>
 801aa56:	2507      	movs	r5, #7
 801aa58:	e7b2      	b.n	801a9c0 <_scanf_float+0x188>
 801aa5a:	6822      	ldr	r2, [r4, #0]
 801aa5c:	0591      	lsls	r1, r2, #22
 801aa5e:	f57f af1b 	bpl.w	801a898 <_scanf_float+0x60>
 801aa62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801aa66:	6022      	str	r2, [r4, #0]
 801aa68:	f8cd 9004 	str.w	r9, [sp, #4]
 801aa6c:	e7a8      	b.n	801a9c0 <_scanf_float+0x188>
 801aa6e:	6822      	ldr	r2, [r4, #0]
 801aa70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801aa74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801aa78:	d006      	beq.n	801aa88 <_scanf_float+0x250>
 801aa7a:	0550      	lsls	r0, r2, #21
 801aa7c:	f57f af0c 	bpl.w	801a898 <_scanf_float+0x60>
 801aa80:	f1b9 0f00 	cmp.w	r9, #0
 801aa84:	f43f af0f 	beq.w	801a8a6 <_scanf_float+0x6e>
 801aa88:	0591      	lsls	r1, r2, #22
 801aa8a:	bf58      	it	pl
 801aa8c:	9901      	ldrpl	r1, [sp, #4]
 801aa8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa92:	bf58      	it	pl
 801aa94:	eba9 0101 	subpl.w	r1, r9, r1
 801aa98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801aa9c:	bf58      	it	pl
 801aa9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aaa2:	6022      	str	r2, [r4, #0]
 801aaa4:	f04f 0900 	mov.w	r9, #0
 801aaa8:	e78a      	b.n	801a9c0 <_scanf_float+0x188>
 801aaaa:	f04f 0a03 	mov.w	sl, #3
 801aaae:	e787      	b.n	801a9c0 <_scanf_float+0x188>
 801aab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aab4:	4639      	mov	r1, r7
 801aab6:	4640      	mov	r0, r8
 801aab8:	4798      	blx	r3
 801aaba:	2800      	cmp	r0, #0
 801aabc:	f43f aedf 	beq.w	801a87e <_scanf_float+0x46>
 801aac0:	e6ea      	b.n	801a898 <_scanf_float+0x60>
 801aac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aaca:	463a      	mov	r2, r7
 801aacc:	4640      	mov	r0, r8
 801aace:	4798      	blx	r3
 801aad0:	6923      	ldr	r3, [r4, #16]
 801aad2:	3b01      	subs	r3, #1
 801aad4:	6123      	str	r3, [r4, #16]
 801aad6:	e6ec      	b.n	801a8b2 <_scanf_float+0x7a>
 801aad8:	1e6b      	subs	r3, r5, #1
 801aada:	2b06      	cmp	r3, #6
 801aadc:	d825      	bhi.n	801ab2a <_scanf_float+0x2f2>
 801aade:	2d02      	cmp	r5, #2
 801aae0:	d836      	bhi.n	801ab50 <_scanf_float+0x318>
 801aae2:	455e      	cmp	r6, fp
 801aae4:	f67f aee8 	bls.w	801a8b8 <_scanf_float+0x80>
 801aae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aaec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aaf0:	463a      	mov	r2, r7
 801aaf2:	4640      	mov	r0, r8
 801aaf4:	4798      	blx	r3
 801aaf6:	6923      	ldr	r3, [r4, #16]
 801aaf8:	3b01      	subs	r3, #1
 801aafa:	6123      	str	r3, [r4, #16]
 801aafc:	e7f1      	b.n	801aae2 <_scanf_float+0x2aa>
 801aafe:	9802      	ldr	r0, [sp, #8]
 801ab00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801ab08:	9002      	str	r0, [sp, #8]
 801ab0a:	463a      	mov	r2, r7
 801ab0c:	4640      	mov	r0, r8
 801ab0e:	4798      	blx	r3
 801ab10:	6923      	ldr	r3, [r4, #16]
 801ab12:	3b01      	subs	r3, #1
 801ab14:	6123      	str	r3, [r4, #16]
 801ab16:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ab1a:	fa5f fa8a 	uxtb.w	sl, sl
 801ab1e:	f1ba 0f02 	cmp.w	sl, #2
 801ab22:	d1ec      	bne.n	801aafe <_scanf_float+0x2c6>
 801ab24:	3d03      	subs	r5, #3
 801ab26:	b2ed      	uxtb	r5, r5
 801ab28:	1b76      	subs	r6, r6, r5
 801ab2a:	6823      	ldr	r3, [r4, #0]
 801ab2c:	05da      	lsls	r2, r3, #23
 801ab2e:	d52f      	bpl.n	801ab90 <_scanf_float+0x358>
 801ab30:	055b      	lsls	r3, r3, #21
 801ab32:	d510      	bpl.n	801ab56 <_scanf_float+0x31e>
 801ab34:	455e      	cmp	r6, fp
 801ab36:	f67f aebf 	bls.w	801a8b8 <_scanf_float+0x80>
 801ab3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab42:	463a      	mov	r2, r7
 801ab44:	4640      	mov	r0, r8
 801ab46:	4798      	blx	r3
 801ab48:	6923      	ldr	r3, [r4, #16]
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	6123      	str	r3, [r4, #16]
 801ab4e:	e7f1      	b.n	801ab34 <_scanf_float+0x2fc>
 801ab50:	46aa      	mov	sl, r5
 801ab52:	9602      	str	r6, [sp, #8]
 801ab54:	e7df      	b.n	801ab16 <_scanf_float+0x2de>
 801ab56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ab5a:	6923      	ldr	r3, [r4, #16]
 801ab5c:	2965      	cmp	r1, #101	; 0x65
 801ab5e:	f103 33ff 	add.w	r3, r3, #4294967295
 801ab62:	f106 35ff 	add.w	r5, r6, #4294967295
 801ab66:	6123      	str	r3, [r4, #16]
 801ab68:	d00c      	beq.n	801ab84 <_scanf_float+0x34c>
 801ab6a:	2945      	cmp	r1, #69	; 0x45
 801ab6c:	d00a      	beq.n	801ab84 <_scanf_float+0x34c>
 801ab6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab72:	463a      	mov	r2, r7
 801ab74:	4640      	mov	r0, r8
 801ab76:	4798      	blx	r3
 801ab78:	6923      	ldr	r3, [r4, #16]
 801ab7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ab7e:	3b01      	subs	r3, #1
 801ab80:	1eb5      	subs	r5, r6, #2
 801ab82:	6123      	str	r3, [r4, #16]
 801ab84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab88:	463a      	mov	r2, r7
 801ab8a:	4640      	mov	r0, r8
 801ab8c:	4798      	blx	r3
 801ab8e:	462e      	mov	r6, r5
 801ab90:	6825      	ldr	r5, [r4, #0]
 801ab92:	f015 0510 	ands.w	r5, r5, #16
 801ab96:	d158      	bne.n	801ac4a <_scanf_float+0x412>
 801ab98:	7035      	strb	r5, [r6, #0]
 801ab9a:	6823      	ldr	r3, [r4, #0]
 801ab9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801aba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aba4:	d11c      	bne.n	801abe0 <_scanf_float+0x3a8>
 801aba6:	9b01      	ldr	r3, [sp, #4]
 801aba8:	454b      	cmp	r3, r9
 801abaa:	eba3 0209 	sub.w	r2, r3, r9
 801abae:	d124      	bne.n	801abfa <_scanf_float+0x3c2>
 801abb0:	2200      	movs	r2, #0
 801abb2:	4659      	mov	r1, fp
 801abb4:	4640      	mov	r0, r8
 801abb6:	f002 fbf3 	bl	801d3a0 <_strtod_r>
 801abba:	9b03      	ldr	r3, [sp, #12]
 801abbc:	6821      	ldr	r1, [r4, #0]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	f011 0f02 	tst.w	r1, #2
 801abc4:	ec57 6b10 	vmov	r6, r7, d0
 801abc8:	f103 0204 	add.w	r2, r3, #4
 801abcc:	d020      	beq.n	801ac10 <_scanf_float+0x3d8>
 801abce:	9903      	ldr	r1, [sp, #12]
 801abd0:	600a      	str	r2, [r1, #0]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	e9c3 6700 	strd	r6, r7, [r3]
 801abd8:	68e3      	ldr	r3, [r4, #12]
 801abda:	3301      	adds	r3, #1
 801abdc:	60e3      	str	r3, [r4, #12]
 801abde:	e66c      	b.n	801a8ba <_scanf_float+0x82>
 801abe0:	9b04      	ldr	r3, [sp, #16]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d0e4      	beq.n	801abb0 <_scanf_float+0x378>
 801abe6:	9905      	ldr	r1, [sp, #20]
 801abe8:	230a      	movs	r3, #10
 801abea:	462a      	mov	r2, r5
 801abec:	3101      	adds	r1, #1
 801abee:	4640      	mov	r0, r8
 801abf0:	f002 fc5e 	bl	801d4b0 <_strtol_r>
 801abf4:	9b04      	ldr	r3, [sp, #16]
 801abf6:	9e05      	ldr	r6, [sp, #20]
 801abf8:	1ac2      	subs	r2, r0, r3
 801abfa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801abfe:	429e      	cmp	r6, r3
 801ac00:	bf28      	it	cs
 801ac02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ac06:	4912      	ldr	r1, [pc, #72]	; (801ac50 <_scanf_float+0x418>)
 801ac08:	4630      	mov	r0, r6
 801ac0a:	f000 f8f9 	bl	801ae00 <siprintf>
 801ac0e:	e7cf      	b.n	801abb0 <_scanf_float+0x378>
 801ac10:	f011 0f04 	tst.w	r1, #4
 801ac14:	9903      	ldr	r1, [sp, #12]
 801ac16:	600a      	str	r2, [r1, #0]
 801ac18:	d1db      	bne.n	801abd2 <_scanf_float+0x39a>
 801ac1a:	f8d3 8000 	ldr.w	r8, [r3]
 801ac1e:	ee10 2a10 	vmov	r2, s0
 801ac22:	ee10 0a10 	vmov	r0, s0
 801ac26:	463b      	mov	r3, r7
 801ac28:	4639      	mov	r1, r7
 801ac2a:	f7e5 ffd7 	bl	8000bdc <__aeabi_dcmpun>
 801ac2e:	b128      	cbz	r0, 801ac3c <_scanf_float+0x404>
 801ac30:	4808      	ldr	r0, [pc, #32]	; (801ac54 <_scanf_float+0x41c>)
 801ac32:	f000 fa25 	bl	801b080 <nanf>
 801ac36:	ed88 0a00 	vstr	s0, [r8]
 801ac3a:	e7cd      	b.n	801abd8 <_scanf_float+0x3a0>
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	4639      	mov	r1, r7
 801ac40:	f7e6 f82a 	bl	8000c98 <__aeabi_d2f>
 801ac44:	f8c8 0000 	str.w	r0, [r8]
 801ac48:	e7c6      	b.n	801abd8 <_scanf_float+0x3a0>
 801ac4a:	2500      	movs	r5, #0
 801ac4c:	e635      	b.n	801a8ba <_scanf_float+0x82>
 801ac4e:	bf00      	nop
 801ac50:	0802080c 	.word	0x0802080c
 801ac54:	080207d9 	.word	0x080207d9

0801ac58 <std>:
 801ac58:	2300      	movs	r3, #0
 801ac5a:	b510      	push	{r4, lr}
 801ac5c:	4604      	mov	r4, r0
 801ac5e:	e9c0 3300 	strd	r3, r3, [r0]
 801ac62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ac66:	6083      	str	r3, [r0, #8]
 801ac68:	8181      	strh	r1, [r0, #12]
 801ac6a:	6643      	str	r3, [r0, #100]	; 0x64
 801ac6c:	81c2      	strh	r2, [r0, #14]
 801ac6e:	6183      	str	r3, [r0, #24]
 801ac70:	4619      	mov	r1, r3
 801ac72:	2208      	movs	r2, #8
 801ac74:	305c      	adds	r0, #92	; 0x5c
 801ac76:	f000 f964 	bl	801af42 <memset>
 801ac7a:	4b0d      	ldr	r3, [pc, #52]	; (801acb0 <std+0x58>)
 801ac7c:	6263      	str	r3, [r4, #36]	; 0x24
 801ac7e:	4b0d      	ldr	r3, [pc, #52]	; (801acb4 <std+0x5c>)
 801ac80:	62a3      	str	r3, [r4, #40]	; 0x28
 801ac82:	4b0d      	ldr	r3, [pc, #52]	; (801acb8 <std+0x60>)
 801ac84:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ac86:	4b0d      	ldr	r3, [pc, #52]	; (801acbc <std+0x64>)
 801ac88:	6323      	str	r3, [r4, #48]	; 0x30
 801ac8a:	4b0d      	ldr	r3, [pc, #52]	; (801acc0 <std+0x68>)
 801ac8c:	6224      	str	r4, [r4, #32]
 801ac8e:	429c      	cmp	r4, r3
 801ac90:	d006      	beq.n	801aca0 <std+0x48>
 801ac92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801ac96:	4294      	cmp	r4, r2
 801ac98:	d002      	beq.n	801aca0 <std+0x48>
 801ac9a:	33d0      	adds	r3, #208	; 0xd0
 801ac9c:	429c      	cmp	r4, r3
 801ac9e:	d105      	bne.n	801acac <std+0x54>
 801aca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aca8:	f000 b9d8 	b.w	801b05c <__retarget_lock_init_recursive>
 801acac:	bd10      	pop	{r4, pc}
 801acae:	bf00      	nop
 801acb0:	0801ae99 	.word	0x0801ae99
 801acb4:	0801aebf 	.word	0x0801aebf
 801acb8:	0801aef7 	.word	0x0801aef7
 801acbc:	0801af1b 	.word	0x0801af1b
 801acc0:	20005d68 	.word	0x20005d68

0801acc4 <stdio_exit_handler>:
 801acc4:	4a02      	ldr	r2, [pc, #8]	; (801acd0 <stdio_exit_handler+0xc>)
 801acc6:	4903      	ldr	r1, [pc, #12]	; (801acd4 <stdio_exit_handler+0x10>)
 801acc8:	4803      	ldr	r0, [pc, #12]	; (801acd8 <stdio_exit_handler+0x14>)
 801acca:	f000 b87b 	b.w	801adc4 <_fwalk_sglue>
 801acce:	bf00      	nop
 801acd0:	200001b4 	.word	0x200001b4
 801acd4:	0801e139 	.word	0x0801e139
 801acd8:	200001c0 	.word	0x200001c0

0801acdc <cleanup_stdio>:
 801acdc:	6841      	ldr	r1, [r0, #4]
 801acde:	4b0c      	ldr	r3, [pc, #48]	; (801ad10 <cleanup_stdio+0x34>)
 801ace0:	4299      	cmp	r1, r3
 801ace2:	b510      	push	{r4, lr}
 801ace4:	4604      	mov	r4, r0
 801ace6:	d001      	beq.n	801acec <cleanup_stdio+0x10>
 801ace8:	f003 fa26 	bl	801e138 <_fflush_r>
 801acec:	68a1      	ldr	r1, [r4, #8]
 801acee:	4b09      	ldr	r3, [pc, #36]	; (801ad14 <cleanup_stdio+0x38>)
 801acf0:	4299      	cmp	r1, r3
 801acf2:	d002      	beq.n	801acfa <cleanup_stdio+0x1e>
 801acf4:	4620      	mov	r0, r4
 801acf6:	f003 fa1f 	bl	801e138 <_fflush_r>
 801acfa:	68e1      	ldr	r1, [r4, #12]
 801acfc:	4b06      	ldr	r3, [pc, #24]	; (801ad18 <cleanup_stdio+0x3c>)
 801acfe:	4299      	cmp	r1, r3
 801ad00:	d004      	beq.n	801ad0c <cleanup_stdio+0x30>
 801ad02:	4620      	mov	r0, r4
 801ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad08:	f003 ba16 	b.w	801e138 <_fflush_r>
 801ad0c:	bd10      	pop	{r4, pc}
 801ad0e:	bf00      	nop
 801ad10:	20005d68 	.word	0x20005d68
 801ad14:	20005dd0 	.word	0x20005dd0
 801ad18:	20005e38 	.word	0x20005e38

0801ad1c <global_stdio_init.part.0>:
 801ad1c:	b510      	push	{r4, lr}
 801ad1e:	4b0b      	ldr	r3, [pc, #44]	; (801ad4c <global_stdio_init.part.0+0x30>)
 801ad20:	4c0b      	ldr	r4, [pc, #44]	; (801ad50 <global_stdio_init.part.0+0x34>)
 801ad22:	4a0c      	ldr	r2, [pc, #48]	; (801ad54 <global_stdio_init.part.0+0x38>)
 801ad24:	601a      	str	r2, [r3, #0]
 801ad26:	4620      	mov	r0, r4
 801ad28:	2200      	movs	r2, #0
 801ad2a:	2104      	movs	r1, #4
 801ad2c:	f7ff ff94 	bl	801ac58 <std>
 801ad30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ad34:	2201      	movs	r2, #1
 801ad36:	2109      	movs	r1, #9
 801ad38:	f7ff ff8e 	bl	801ac58 <std>
 801ad3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801ad40:	2202      	movs	r2, #2
 801ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad46:	2112      	movs	r1, #18
 801ad48:	f7ff bf86 	b.w	801ac58 <std>
 801ad4c:	20005ea0 	.word	0x20005ea0
 801ad50:	20005d68 	.word	0x20005d68
 801ad54:	0801acc5 	.word	0x0801acc5

0801ad58 <__sfp_lock_acquire>:
 801ad58:	4801      	ldr	r0, [pc, #4]	; (801ad60 <__sfp_lock_acquire+0x8>)
 801ad5a:	f000 b980 	b.w	801b05e <__retarget_lock_acquire_recursive>
 801ad5e:	bf00      	nop
 801ad60:	20005ea9 	.word	0x20005ea9

0801ad64 <__sfp_lock_release>:
 801ad64:	4801      	ldr	r0, [pc, #4]	; (801ad6c <__sfp_lock_release+0x8>)
 801ad66:	f000 b97b 	b.w	801b060 <__retarget_lock_release_recursive>
 801ad6a:	bf00      	nop
 801ad6c:	20005ea9 	.word	0x20005ea9

0801ad70 <__sinit>:
 801ad70:	b510      	push	{r4, lr}
 801ad72:	4604      	mov	r4, r0
 801ad74:	f7ff fff0 	bl	801ad58 <__sfp_lock_acquire>
 801ad78:	6a23      	ldr	r3, [r4, #32]
 801ad7a:	b11b      	cbz	r3, 801ad84 <__sinit+0x14>
 801ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad80:	f7ff bff0 	b.w	801ad64 <__sfp_lock_release>
 801ad84:	4b04      	ldr	r3, [pc, #16]	; (801ad98 <__sinit+0x28>)
 801ad86:	6223      	str	r3, [r4, #32]
 801ad88:	4b04      	ldr	r3, [pc, #16]	; (801ad9c <__sinit+0x2c>)
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d1f5      	bne.n	801ad7c <__sinit+0xc>
 801ad90:	f7ff ffc4 	bl	801ad1c <global_stdio_init.part.0>
 801ad94:	e7f2      	b.n	801ad7c <__sinit+0xc>
 801ad96:	bf00      	nop
 801ad98:	0801acdd 	.word	0x0801acdd
 801ad9c:	20005ea0 	.word	0x20005ea0

0801ada0 <fiprintf>:
 801ada0:	b40e      	push	{r1, r2, r3}
 801ada2:	b503      	push	{r0, r1, lr}
 801ada4:	4601      	mov	r1, r0
 801ada6:	ab03      	add	r3, sp, #12
 801ada8:	4805      	ldr	r0, [pc, #20]	; (801adc0 <fiprintf+0x20>)
 801adaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801adae:	6800      	ldr	r0, [r0, #0]
 801adb0:	9301      	str	r3, [sp, #4]
 801adb2:	f002 fed3 	bl	801db5c <_vfiprintf_r>
 801adb6:	b002      	add	sp, #8
 801adb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801adbc:	b003      	add	sp, #12
 801adbe:	4770      	bx	lr
 801adc0:	2000020c 	.word	0x2000020c

0801adc4 <_fwalk_sglue>:
 801adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801adc8:	4607      	mov	r7, r0
 801adca:	4688      	mov	r8, r1
 801adcc:	4614      	mov	r4, r2
 801adce:	2600      	movs	r6, #0
 801add0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801add4:	f1b9 0901 	subs.w	r9, r9, #1
 801add8:	d505      	bpl.n	801ade6 <_fwalk_sglue+0x22>
 801adda:	6824      	ldr	r4, [r4, #0]
 801addc:	2c00      	cmp	r4, #0
 801adde:	d1f7      	bne.n	801add0 <_fwalk_sglue+0xc>
 801ade0:	4630      	mov	r0, r6
 801ade2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ade6:	89ab      	ldrh	r3, [r5, #12]
 801ade8:	2b01      	cmp	r3, #1
 801adea:	d907      	bls.n	801adfc <_fwalk_sglue+0x38>
 801adec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801adf0:	3301      	adds	r3, #1
 801adf2:	d003      	beq.n	801adfc <_fwalk_sglue+0x38>
 801adf4:	4629      	mov	r1, r5
 801adf6:	4638      	mov	r0, r7
 801adf8:	47c0      	blx	r8
 801adfa:	4306      	orrs	r6, r0
 801adfc:	3568      	adds	r5, #104	; 0x68
 801adfe:	e7e9      	b.n	801add4 <_fwalk_sglue+0x10>

0801ae00 <siprintf>:
 801ae00:	b40e      	push	{r1, r2, r3}
 801ae02:	b500      	push	{lr}
 801ae04:	b09c      	sub	sp, #112	; 0x70
 801ae06:	ab1d      	add	r3, sp, #116	; 0x74
 801ae08:	9002      	str	r0, [sp, #8]
 801ae0a:	9006      	str	r0, [sp, #24]
 801ae0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ae10:	4809      	ldr	r0, [pc, #36]	; (801ae38 <siprintf+0x38>)
 801ae12:	9107      	str	r1, [sp, #28]
 801ae14:	9104      	str	r1, [sp, #16]
 801ae16:	4909      	ldr	r1, [pc, #36]	; (801ae3c <siprintf+0x3c>)
 801ae18:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae1c:	9105      	str	r1, [sp, #20]
 801ae1e:	6800      	ldr	r0, [r0, #0]
 801ae20:	9301      	str	r3, [sp, #4]
 801ae22:	a902      	add	r1, sp, #8
 801ae24:	f002 fba0 	bl	801d568 <_svfiprintf_r>
 801ae28:	9b02      	ldr	r3, [sp, #8]
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	701a      	strb	r2, [r3, #0]
 801ae2e:	b01c      	add	sp, #112	; 0x70
 801ae30:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae34:	b003      	add	sp, #12
 801ae36:	4770      	bx	lr
 801ae38:	2000020c 	.word	0x2000020c
 801ae3c:	ffff0208 	.word	0xffff0208

0801ae40 <siscanf>:
 801ae40:	b40e      	push	{r1, r2, r3}
 801ae42:	b510      	push	{r4, lr}
 801ae44:	b09f      	sub	sp, #124	; 0x7c
 801ae46:	ac21      	add	r4, sp, #132	; 0x84
 801ae48:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ae4c:	f854 2b04 	ldr.w	r2, [r4], #4
 801ae50:	9201      	str	r2, [sp, #4]
 801ae52:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ae56:	9004      	str	r0, [sp, #16]
 801ae58:	9008      	str	r0, [sp, #32]
 801ae5a:	f7e5 fa61 	bl	8000320 <strlen>
 801ae5e:	4b0c      	ldr	r3, [pc, #48]	; (801ae90 <siscanf+0x50>)
 801ae60:	9005      	str	r0, [sp, #20]
 801ae62:	9009      	str	r0, [sp, #36]	; 0x24
 801ae64:	930d      	str	r3, [sp, #52]	; 0x34
 801ae66:	480b      	ldr	r0, [pc, #44]	; (801ae94 <siscanf+0x54>)
 801ae68:	9a01      	ldr	r2, [sp, #4]
 801ae6a:	6800      	ldr	r0, [r0, #0]
 801ae6c:	9403      	str	r4, [sp, #12]
 801ae6e:	2300      	movs	r3, #0
 801ae70:	9311      	str	r3, [sp, #68]	; 0x44
 801ae72:	9316      	str	r3, [sp, #88]	; 0x58
 801ae74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae78:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ae7c:	a904      	add	r1, sp, #16
 801ae7e:	4623      	mov	r3, r4
 801ae80:	f002 fcca 	bl	801d818 <__ssvfiscanf_r>
 801ae84:	b01f      	add	sp, #124	; 0x7c
 801ae86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae8a:	b003      	add	sp, #12
 801ae8c:	4770      	bx	lr
 801ae8e:	bf00      	nop
 801ae90:	0801aebb 	.word	0x0801aebb
 801ae94:	2000020c 	.word	0x2000020c

0801ae98 <__sread>:
 801ae98:	b510      	push	{r4, lr}
 801ae9a:	460c      	mov	r4, r1
 801ae9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aea0:	f000 f87e 	bl	801afa0 <_read_r>
 801aea4:	2800      	cmp	r0, #0
 801aea6:	bfab      	itete	ge
 801aea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aeaa:	89a3      	ldrhlt	r3, [r4, #12]
 801aeac:	181b      	addge	r3, r3, r0
 801aeae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801aeb2:	bfac      	ite	ge
 801aeb4:	6563      	strge	r3, [r4, #84]	; 0x54
 801aeb6:	81a3      	strhlt	r3, [r4, #12]
 801aeb8:	bd10      	pop	{r4, pc}

0801aeba <__seofread>:
 801aeba:	2000      	movs	r0, #0
 801aebc:	4770      	bx	lr

0801aebe <__swrite>:
 801aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aec2:	461f      	mov	r7, r3
 801aec4:	898b      	ldrh	r3, [r1, #12]
 801aec6:	05db      	lsls	r3, r3, #23
 801aec8:	4605      	mov	r5, r0
 801aeca:	460c      	mov	r4, r1
 801aecc:	4616      	mov	r6, r2
 801aece:	d505      	bpl.n	801aedc <__swrite+0x1e>
 801aed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aed4:	2302      	movs	r3, #2
 801aed6:	2200      	movs	r2, #0
 801aed8:	f000 f850 	bl	801af7c <_lseek_r>
 801aedc:	89a3      	ldrh	r3, [r4, #12]
 801aede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aee6:	81a3      	strh	r3, [r4, #12]
 801aee8:	4632      	mov	r2, r6
 801aeea:	463b      	mov	r3, r7
 801aeec:	4628      	mov	r0, r5
 801aeee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aef2:	f000 b877 	b.w	801afe4 <_write_r>

0801aef6 <__sseek>:
 801aef6:	b510      	push	{r4, lr}
 801aef8:	460c      	mov	r4, r1
 801aefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aefe:	f000 f83d 	bl	801af7c <_lseek_r>
 801af02:	1c43      	adds	r3, r0, #1
 801af04:	89a3      	ldrh	r3, [r4, #12]
 801af06:	bf15      	itete	ne
 801af08:	6560      	strne	r0, [r4, #84]	; 0x54
 801af0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af12:	81a3      	strheq	r3, [r4, #12]
 801af14:	bf18      	it	ne
 801af16:	81a3      	strhne	r3, [r4, #12]
 801af18:	bd10      	pop	{r4, pc}

0801af1a <__sclose>:
 801af1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af1e:	f000 b81d 	b.w	801af5c <_close_r>

0801af22 <memcmp>:
 801af22:	b510      	push	{r4, lr}
 801af24:	3901      	subs	r1, #1
 801af26:	4402      	add	r2, r0
 801af28:	4290      	cmp	r0, r2
 801af2a:	d101      	bne.n	801af30 <memcmp+0xe>
 801af2c:	2000      	movs	r0, #0
 801af2e:	e005      	b.n	801af3c <memcmp+0x1a>
 801af30:	7803      	ldrb	r3, [r0, #0]
 801af32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801af36:	42a3      	cmp	r3, r4
 801af38:	d001      	beq.n	801af3e <memcmp+0x1c>
 801af3a:	1b18      	subs	r0, r3, r4
 801af3c:	bd10      	pop	{r4, pc}
 801af3e:	3001      	adds	r0, #1
 801af40:	e7f2      	b.n	801af28 <memcmp+0x6>

0801af42 <memset>:
 801af42:	4402      	add	r2, r0
 801af44:	4603      	mov	r3, r0
 801af46:	4293      	cmp	r3, r2
 801af48:	d100      	bne.n	801af4c <memset+0xa>
 801af4a:	4770      	bx	lr
 801af4c:	f803 1b01 	strb.w	r1, [r3], #1
 801af50:	e7f9      	b.n	801af46 <memset+0x4>
	...

0801af54 <_localeconv_r>:
 801af54:	4800      	ldr	r0, [pc, #0]	; (801af58 <_localeconv_r+0x4>)
 801af56:	4770      	bx	lr
 801af58:	20000300 	.word	0x20000300

0801af5c <_close_r>:
 801af5c:	b538      	push	{r3, r4, r5, lr}
 801af5e:	4d06      	ldr	r5, [pc, #24]	; (801af78 <_close_r+0x1c>)
 801af60:	2300      	movs	r3, #0
 801af62:	4604      	mov	r4, r0
 801af64:	4608      	mov	r0, r1
 801af66:	602b      	str	r3, [r5, #0]
 801af68:	f7e7 fd1f 	bl	80029aa <_close>
 801af6c:	1c43      	adds	r3, r0, #1
 801af6e:	d102      	bne.n	801af76 <_close_r+0x1a>
 801af70:	682b      	ldr	r3, [r5, #0]
 801af72:	b103      	cbz	r3, 801af76 <_close_r+0x1a>
 801af74:	6023      	str	r3, [r4, #0]
 801af76:	bd38      	pop	{r3, r4, r5, pc}
 801af78:	20005ea4 	.word	0x20005ea4

0801af7c <_lseek_r>:
 801af7c:	b538      	push	{r3, r4, r5, lr}
 801af7e:	4d07      	ldr	r5, [pc, #28]	; (801af9c <_lseek_r+0x20>)
 801af80:	4604      	mov	r4, r0
 801af82:	4608      	mov	r0, r1
 801af84:	4611      	mov	r1, r2
 801af86:	2200      	movs	r2, #0
 801af88:	602a      	str	r2, [r5, #0]
 801af8a:	461a      	mov	r2, r3
 801af8c:	f7e7 fd34 	bl	80029f8 <_lseek>
 801af90:	1c43      	adds	r3, r0, #1
 801af92:	d102      	bne.n	801af9a <_lseek_r+0x1e>
 801af94:	682b      	ldr	r3, [r5, #0]
 801af96:	b103      	cbz	r3, 801af9a <_lseek_r+0x1e>
 801af98:	6023      	str	r3, [r4, #0]
 801af9a:	bd38      	pop	{r3, r4, r5, pc}
 801af9c:	20005ea4 	.word	0x20005ea4

0801afa0 <_read_r>:
 801afa0:	b538      	push	{r3, r4, r5, lr}
 801afa2:	4d07      	ldr	r5, [pc, #28]	; (801afc0 <_read_r+0x20>)
 801afa4:	4604      	mov	r4, r0
 801afa6:	4608      	mov	r0, r1
 801afa8:	4611      	mov	r1, r2
 801afaa:	2200      	movs	r2, #0
 801afac:	602a      	str	r2, [r5, #0]
 801afae:	461a      	mov	r2, r3
 801afb0:	f7e7 fcde 	bl	8002970 <_read>
 801afb4:	1c43      	adds	r3, r0, #1
 801afb6:	d102      	bne.n	801afbe <_read_r+0x1e>
 801afb8:	682b      	ldr	r3, [r5, #0]
 801afba:	b103      	cbz	r3, 801afbe <_read_r+0x1e>
 801afbc:	6023      	str	r3, [r4, #0]
 801afbe:	bd38      	pop	{r3, r4, r5, pc}
 801afc0:	20005ea4 	.word	0x20005ea4

0801afc4 <_sbrk_r>:
 801afc4:	b538      	push	{r3, r4, r5, lr}
 801afc6:	4d06      	ldr	r5, [pc, #24]	; (801afe0 <_sbrk_r+0x1c>)
 801afc8:	2300      	movs	r3, #0
 801afca:	4604      	mov	r4, r0
 801afcc:	4608      	mov	r0, r1
 801afce:	602b      	str	r3, [r5, #0]
 801afd0:	f7e7 fd20 	bl	8002a14 <_sbrk>
 801afd4:	1c43      	adds	r3, r0, #1
 801afd6:	d102      	bne.n	801afde <_sbrk_r+0x1a>
 801afd8:	682b      	ldr	r3, [r5, #0]
 801afda:	b103      	cbz	r3, 801afde <_sbrk_r+0x1a>
 801afdc:	6023      	str	r3, [r4, #0]
 801afde:	bd38      	pop	{r3, r4, r5, pc}
 801afe0:	20005ea4 	.word	0x20005ea4

0801afe4 <_write_r>:
 801afe4:	b538      	push	{r3, r4, r5, lr}
 801afe6:	4d07      	ldr	r5, [pc, #28]	; (801b004 <_write_r+0x20>)
 801afe8:	4604      	mov	r4, r0
 801afea:	4608      	mov	r0, r1
 801afec:	4611      	mov	r1, r2
 801afee:	2200      	movs	r2, #0
 801aff0:	602a      	str	r2, [r5, #0]
 801aff2:	461a      	mov	r2, r3
 801aff4:	f7e6 f9fb 	bl	80013ee <_write>
 801aff8:	1c43      	adds	r3, r0, #1
 801affa:	d102      	bne.n	801b002 <_write_r+0x1e>
 801affc:	682b      	ldr	r3, [r5, #0]
 801affe:	b103      	cbz	r3, 801b002 <_write_r+0x1e>
 801b000:	6023      	str	r3, [r4, #0]
 801b002:	bd38      	pop	{r3, r4, r5, pc}
 801b004:	20005ea4 	.word	0x20005ea4

0801b008 <__errno>:
 801b008:	4b01      	ldr	r3, [pc, #4]	; (801b010 <__errno+0x8>)
 801b00a:	6818      	ldr	r0, [r3, #0]
 801b00c:	4770      	bx	lr
 801b00e:	bf00      	nop
 801b010:	2000020c 	.word	0x2000020c

0801b014 <__libc_init_array>:
 801b014:	b570      	push	{r4, r5, r6, lr}
 801b016:	4d0d      	ldr	r5, [pc, #52]	; (801b04c <__libc_init_array+0x38>)
 801b018:	4c0d      	ldr	r4, [pc, #52]	; (801b050 <__libc_init_array+0x3c>)
 801b01a:	1b64      	subs	r4, r4, r5
 801b01c:	10a4      	asrs	r4, r4, #2
 801b01e:	2600      	movs	r6, #0
 801b020:	42a6      	cmp	r6, r4
 801b022:	d109      	bne.n	801b038 <__libc_init_array+0x24>
 801b024:	4d0b      	ldr	r5, [pc, #44]	; (801b054 <__libc_init_array+0x40>)
 801b026:	4c0c      	ldr	r4, [pc, #48]	; (801b058 <__libc_init_array+0x44>)
 801b028:	f005 f8a8 	bl	802017c <_init>
 801b02c:	1b64      	subs	r4, r4, r5
 801b02e:	10a4      	asrs	r4, r4, #2
 801b030:	2600      	movs	r6, #0
 801b032:	42a6      	cmp	r6, r4
 801b034:	d105      	bne.n	801b042 <__libc_init_array+0x2e>
 801b036:	bd70      	pop	{r4, r5, r6, pc}
 801b038:	f855 3b04 	ldr.w	r3, [r5], #4
 801b03c:	4798      	blx	r3
 801b03e:	3601      	adds	r6, #1
 801b040:	e7ee      	b.n	801b020 <__libc_init_array+0xc>
 801b042:	f855 3b04 	ldr.w	r3, [r5], #4
 801b046:	4798      	blx	r3
 801b048:	3601      	adds	r6, #1
 801b04a:	e7f2      	b.n	801b032 <__libc_init_array+0x1e>
 801b04c:	08020c18 	.word	0x08020c18
 801b050:	08020c18 	.word	0x08020c18
 801b054:	08020c18 	.word	0x08020c18
 801b058:	08020c1c 	.word	0x08020c1c

0801b05c <__retarget_lock_init_recursive>:
 801b05c:	4770      	bx	lr

0801b05e <__retarget_lock_acquire_recursive>:
 801b05e:	4770      	bx	lr

0801b060 <__retarget_lock_release_recursive>:
 801b060:	4770      	bx	lr

0801b062 <memcpy>:
 801b062:	440a      	add	r2, r1
 801b064:	4291      	cmp	r1, r2
 801b066:	f100 33ff 	add.w	r3, r0, #4294967295
 801b06a:	d100      	bne.n	801b06e <memcpy+0xc>
 801b06c:	4770      	bx	lr
 801b06e:	b510      	push	{r4, lr}
 801b070:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b074:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b078:	4291      	cmp	r1, r2
 801b07a:	d1f9      	bne.n	801b070 <memcpy+0xe>
 801b07c:	bd10      	pop	{r4, pc}
	...

0801b080 <nanf>:
 801b080:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b088 <nanf+0x8>
 801b084:	4770      	bx	lr
 801b086:	bf00      	nop
 801b088:	7fc00000 	.word	0x7fc00000

0801b08c <abort>:
 801b08c:	b508      	push	{r3, lr}
 801b08e:	2006      	movs	r0, #6
 801b090:	f003 f9d6 	bl	801e440 <raise>
 801b094:	2001      	movs	r0, #1
 801b096:	f7e7 fc61 	bl	800295c <_exit>

0801b09a <quorem>:
 801b09a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b09e:	6903      	ldr	r3, [r0, #16]
 801b0a0:	690c      	ldr	r4, [r1, #16]
 801b0a2:	42a3      	cmp	r3, r4
 801b0a4:	4607      	mov	r7, r0
 801b0a6:	db7e      	blt.n	801b1a6 <quorem+0x10c>
 801b0a8:	3c01      	subs	r4, #1
 801b0aa:	f101 0814 	add.w	r8, r1, #20
 801b0ae:	f100 0514 	add.w	r5, r0, #20
 801b0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b0b6:	9301      	str	r3, [sp, #4]
 801b0b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b0bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	429a      	cmp	r2, r3
 801b0c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b0c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b0cc:	fbb2 f6f3 	udiv	r6, r2, r3
 801b0d0:	d331      	bcc.n	801b136 <quorem+0x9c>
 801b0d2:	f04f 0e00 	mov.w	lr, #0
 801b0d6:	4640      	mov	r0, r8
 801b0d8:	46ac      	mov	ip, r5
 801b0da:	46f2      	mov	sl, lr
 801b0dc:	f850 2b04 	ldr.w	r2, [r0], #4
 801b0e0:	b293      	uxth	r3, r2
 801b0e2:	fb06 e303 	mla	r3, r6, r3, lr
 801b0e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b0ea:	0c1a      	lsrs	r2, r3, #16
 801b0ec:	b29b      	uxth	r3, r3
 801b0ee:	ebaa 0303 	sub.w	r3, sl, r3
 801b0f2:	f8dc a000 	ldr.w	sl, [ip]
 801b0f6:	fa13 f38a 	uxtah	r3, r3, sl
 801b0fa:	fb06 220e 	mla	r2, r6, lr, r2
 801b0fe:	9300      	str	r3, [sp, #0]
 801b100:	9b00      	ldr	r3, [sp, #0]
 801b102:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b106:	b292      	uxth	r2, r2
 801b108:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b10c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b110:	f8bd 3000 	ldrh.w	r3, [sp]
 801b114:	4581      	cmp	r9, r0
 801b116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b11a:	f84c 3b04 	str.w	r3, [ip], #4
 801b11e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b122:	d2db      	bcs.n	801b0dc <quorem+0x42>
 801b124:	f855 300b 	ldr.w	r3, [r5, fp]
 801b128:	b92b      	cbnz	r3, 801b136 <quorem+0x9c>
 801b12a:	9b01      	ldr	r3, [sp, #4]
 801b12c:	3b04      	subs	r3, #4
 801b12e:	429d      	cmp	r5, r3
 801b130:	461a      	mov	r2, r3
 801b132:	d32c      	bcc.n	801b18e <quorem+0xf4>
 801b134:	613c      	str	r4, [r7, #16]
 801b136:	4638      	mov	r0, r7
 801b138:	f001 f93e 	bl	801c3b8 <__mcmp>
 801b13c:	2800      	cmp	r0, #0
 801b13e:	db22      	blt.n	801b186 <quorem+0xec>
 801b140:	3601      	adds	r6, #1
 801b142:	4629      	mov	r1, r5
 801b144:	2000      	movs	r0, #0
 801b146:	f858 2b04 	ldr.w	r2, [r8], #4
 801b14a:	f8d1 c000 	ldr.w	ip, [r1]
 801b14e:	b293      	uxth	r3, r2
 801b150:	1ac3      	subs	r3, r0, r3
 801b152:	0c12      	lsrs	r2, r2, #16
 801b154:	fa13 f38c 	uxtah	r3, r3, ip
 801b158:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b15c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b160:	b29b      	uxth	r3, r3
 801b162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b166:	45c1      	cmp	r9, r8
 801b168:	f841 3b04 	str.w	r3, [r1], #4
 801b16c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b170:	d2e9      	bcs.n	801b146 <quorem+0xac>
 801b172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b17a:	b922      	cbnz	r2, 801b186 <quorem+0xec>
 801b17c:	3b04      	subs	r3, #4
 801b17e:	429d      	cmp	r5, r3
 801b180:	461a      	mov	r2, r3
 801b182:	d30a      	bcc.n	801b19a <quorem+0x100>
 801b184:	613c      	str	r4, [r7, #16]
 801b186:	4630      	mov	r0, r6
 801b188:	b003      	add	sp, #12
 801b18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b18e:	6812      	ldr	r2, [r2, #0]
 801b190:	3b04      	subs	r3, #4
 801b192:	2a00      	cmp	r2, #0
 801b194:	d1ce      	bne.n	801b134 <quorem+0x9a>
 801b196:	3c01      	subs	r4, #1
 801b198:	e7c9      	b.n	801b12e <quorem+0x94>
 801b19a:	6812      	ldr	r2, [r2, #0]
 801b19c:	3b04      	subs	r3, #4
 801b19e:	2a00      	cmp	r2, #0
 801b1a0:	d1f0      	bne.n	801b184 <quorem+0xea>
 801b1a2:	3c01      	subs	r4, #1
 801b1a4:	e7eb      	b.n	801b17e <quorem+0xe4>
 801b1a6:	2000      	movs	r0, #0
 801b1a8:	e7ee      	b.n	801b188 <quorem+0xee>
 801b1aa:	0000      	movs	r0, r0
 801b1ac:	0000      	movs	r0, r0
	...

0801b1b0 <_dtoa_r>:
 801b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b4:	ed2d 8b04 	vpush	{d8-d9}
 801b1b8:	69c5      	ldr	r5, [r0, #28]
 801b1ba:	b093      	sub	sp, #76	; 0x4c
 801b1bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b1c0:	ec57 6b10 	vmov	r6, r7, d0
 801b1c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b1c8:	9107      	str	r1, [sp, #28]
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	920a      	str	r2, [sp, #40]	; 0x28
 801b1ce:	930d      	str	r3, [sp, #52]	; 0x34
 801b1d0:	b975      	cbnz	r5, 801b1f0 <_dtoa_r+0x40>
 801b1d2:	2010      	movs	r0, #16
 801b1d4:	f7fe fc8e 	bl	8019af4 <malloc>
 801b1d8:	4602      	mov	r2, r0
 801b1da:	61e0      	str	r0, [r4, #28]
 801b1dc:	b920      	cbnz	r0, 801b1e8 <_dtoa_r+0x38>
 801b1de:	4bae      	ldr	r3, [pc, #696]	; (801b498 <_dtoa_r+0x2e8>)
 801b1e0:	21ef      	movs	r1, #239	; 0xef
 801b1e2:	48ae      	ldr	r0, [pc, #696]	; (801b49c <_dtoa_r+0x2ec>)
 801b1e4:	f7fe fc68 	bl	8019ab8 <__assert_func>
 801b1e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b1ec:	6005      	str	r5, [r0, #0]
 801b1ee:	60c5      	str	r5, [r0, #12]
 801b1f0:	69e3      	ldr	r3, [r4, #28]
 801b1f2:	6819      	ldr	r1, [r3, #0]
 801b1f4:	b151      	cbz	r1, 801b20c <_dtoa_r+0x5c>
 801b1f6:	685a      	ldr	r2, [r3, #4]
 801b1f8:	604a      	str	r2, [r1, #4]
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	4093      	lsls	r3, r2
 801b1fe:	608b      	str	r3, [r1, #8]
 801b200:	4620      	mov	r0, r4
 801b202:	f000 fe53 	bl	801beac <_Bfree>
 801b206:	69e3      	ldr	r3, [r4, #28]
 801b208:	2200      	movs	r2, #0
 801b20a:	601a      	str	r2, [r3, #0]
 801b20c:	1e3b      	subs	r3, r7, #0
 801b20e:	bfbb      	ittet	lt
 801b210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b214:	9303      	strlt	r3, [sp, #12]
 801b216:	2300      	movge	r3, #0
 801b218:	2201      	movlt	r2, #1
 801b21a:	bfac      	ite	ge
 801b21c:	f8c8 3000 	strge.w	r3, [r8]
 801b220:	f8c8 2000 	strlt.w	r2, [r8]
 801b224:	4b9e      	ldr	r3, [pc, #632]	; (801b4a0 <_dtoa_r+0x2f0>)
 801b226:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801b22a:	ea33 0308 	bics.w	r3, r3, r8
 801b22e:	d11b      	bne.n	801b268 <_dtoa_r+0xb8>
 801b230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b232:	f242 730f 	movw	r3, #9999	; 0x270f
 801b236:	6013      	str	r3, [r2, #0]
 801b238:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801b23c:	4333      	orrs	r3, r6
 801b23e:	f000 8593 	beq.w	801bd68 <_dtoa_r+0xbb8>
 801b242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b244:	b963      	cbnz	r3, 801b260 <_dtoa_r+0xb0>
 801b246:	4b97      	ldr	r3, [pc, #604]	; (801b4a4 <_dtoa_r+0x2f4>)
 801b248:	e027      	b.n	801b29a <_dtoa_r+0xea>
 801b24a:	4b97      	ldr	r3, [pc, #604]	; (801b4a8 <_dtoa_r+0x2f8>)
 801b24c:	9300      	str	r3, [sp, #0]
 801b24e:	3308      	adds	r3, #8
 801b250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b252:	6013      	str	r3, [r2, #0]
 801b254:	9800      	ldr	r0, [sp, #0]
 801b256:	b013      	add	sp, #76	; 0x4c
 801b258:	ecbd 8b04 	vpop	{d8-d9}
 801b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b260:	4b90      	ldr	r3, [pc, #576]	; (801b4a4 <_dtoa_r+0x2f4>)
 801b262:	9300      	str	r3, [sp, #0]
 801b264:	3303      	adds	r3, #3
 801b266:	e7f3      	b.n	801b250 <_dtoa_r+0xa0>
 801b268:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b26c:	2200      	movs	r2, #0
 801b26e:	ec51 0b17 	vmov	r0, r1, d7
 801b272:	eeb0 8a47 	vmov.f32	s16, s14
 801b276:	eef0 8a67 	vmov.f32	s17, s15
 801b27a:	2300      	movs	r3, #0
 801b27c:	f7e5 fc7c 	bl	8000b78 <__aeabi_dcmpeq>
 801b280:	4681      	mov	r9, r0
 801b282:	b160      	cbz	r0, 801b29e <_dtoa_r+0xee>
 801b284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b286:	2301      	movs	r3, #1
 801b288:	6013      	str	r3, [r2, #0]
 801b28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	f000 8568 	beq.w	801bd62 <_dtoa_r+0xbb2>
 801b292:	4b86      	ldr	r3, [pc, #536]	; (801b4ac <_dtoa_r+0x2fc>)
 801b294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b296:	6013      	str	r3, [r2, #0]
 801b298:	3b01      	subs	r3, #1
 801b29a:	9300      	str	r3, [sp, #0]
 801b29c:	e7da      	b.n	801b254 <_dtoa_r+0xa4>
 801b29e:	aa10      	add	r2, sp, #64	; 0x40
 801b2a0:	a911      	add	r1, sp, #68	; 0x44
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	eeb0 0a48 	vmov.f32	s0, s16
 801b2a8:	eef0 0a68 	vmov.f32	s1, s17
 801b2ac:	f001 f99a 	bl	801c5e4 <__d2b>
 801b2b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801b2b4:	4682      	mov	sl, r0
 801b2b6:	2d00      	cmp	r5, #0
 801b2b8:	d07f      	beq.n	801b3ba <_dtoa_r+0x20a>
 801b2ba:	ee18 3a90 	vmov	r3, s17
 801b2be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b2c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801b2c6:	ec51 0b18 	vmov	r0, r1, d8
 801b2ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b2ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b2d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b2d6:	4619      	mov	r1, r3
 801b2d8:	2200      	movs	r2, #0
 801b2da:	4b75      	ldr	r3, [pc, #468]	; (801b4b0 <_dtoa_r+0x300>)
 801b2dc:	f7e5 f82c 	bl	8000338 <__aeabi_dsub>
 801b2e0:	a367      	add	r3, pc, #412	; (adr r3, 801b480 <_dtoa_r+0x2d0>)
 801b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e6:	f7e5 f9df 	bl	80006a8 <__aeabi_dmul>
 801b2ea:	a367      	add	r3, pc, #412	; (adr r3, 801b488 <_dtoa_r+0x2d8>)
 801b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f0:	f7e5 f824 	bl	800033c <__adddf3>
 801b2f4:	4606      	mov	r6, r0
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	460f      	mov	r7, r1
 801b2fa:	f7e5 f96b 	bl	80005d4 <__aeabi_i2d>
 801b2fe:	a364      	add	r3, pc, #400	; (adr r3, 801b490 <_dtoa_r+0x2e0>)
 801b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b304:	f7e5 f9d0 	bl	80006a8 <__aeabi_dmul>
 801b308:	4602      	mov	r2, r0
 801b30a:	460b      	mov	r3, r1
 801b30c:	4630      	mov	r0, r6
 801b30e:	4639      	mov	r1, r7
 801b310:	f7e5 f814 	bl	800033c <__adddf3>
 801b314:	4606      	mov	r6, r0
 801b316:	460f      	mov	r7, r1
 801b318:	f7e5 fc76 	bl	8000c08 <__aeabi_d2iz>
 801b31c:	2200      	movs	r2, #0
 801b31e:	4683      	mov	fp, r0
 801b320:	2300      	movs	r3, #0
 801b322:	4630      	mov	r0, r6
 801b324:	4639      	mov	r1, r7
 801b326:	f7e5 fc31 	bl	8000b8c <__aeabi_dcmplt>
 801b32a:	b148      	cbz	r0, 801b340 <_dtoa_r+0x190>
 801b32c:	4658      	mov	r0, fp
 801b32e:	f7e5 f951 	bl	80005d4 <__aeabi_i2d>
 801b332:	4632      	mov	r2, r6
 801b334:	463b      	mov	r3, r7
 801b336:	f7e5 fc1f 	bl	8000b78 <__aeabi_dcmpeq>
 801b33a:	b908      	cbnz	r0, 801b340 <_dtoa_r+0x190>
 801b33c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b340:	f1bb 0f16 	cmp.w	fp, #22
 801b344:	d857      	bhi.n	801b3f6 <_dtoa_r+0x246>
 801b346:	4b5b      	ldr	r3, [pc, #364]	; (801b4b4 <_dtoa_r+0x304>)
 801b348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b350:	ec51 0b18 	vmov	r0, r1, d8
 801b354:	f7e5 fc1a 	bl	8000b8c <__aeabi_dcmplt>
 801b358:	2800      	cmp	r0, #0
 801b35a:	d04e      	beq.n	801b3fa <_dtoa_r+0x24a>
 801b35c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b360:	2300      	movs	r3, #0
 801b362:	930c      	str	r3, [sp, #48]	; 0x30
 801b364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b366:	1b5b      	subs	r3, r3, r5
 801b368:	1e5a      	subs	r2, r3, #1
 801b36a:	bf45      	ittet	mi
 801b36c:	f1c3 0301 	rsbmi	r3, r3, #1
 801b370:	9305      	strmi	r3, [sp, #20]
 801b372:	2300      	movpl	r3, #0
 801b374:	2300      	movmi	r3, #0
 801b376:	9206      	str	r2, [sp, #24]
 801b378:	bf54      	ite	pl
 801b37a:	9305      	strpl	r3, [sp, #20]
 801b37c:	9306      	strmi	r3, [sp, #24]
 801b37e:	f1bb 0f00 	cmp.w	fp, #0
 801b382:	db3c      	blt.n	801b3fe <_dtoa_r+0x24e>
 801b384:	9b06      	ldr	r3, [sp, #24]
 801b386:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801b38a:	445b      	add	r3, fp
 801b38c:	9306      	str	r3, [sp, #24]
 801b38e:	2300      	movs	r3, #0
 801b390:	9308      	str	r3, [sp, #32]
 801b392:	9b07      	ldr	r3, [sp, #28]
 801b394:	2b09      	cmp	r3, #9
 801b396:	d868      	bhi.n	801b46a <_dtoa_r+0x2ba>
 801b398:	2b05      	cmp	r3, #5
 801b39a:	bfc4      	itt	gt
 801b39c:	3b04      	subgt	r3, #4
 801b39e:	9307      	strgt	r3, [sp, #28]
 801b3a0:	9b07      	ldr	r3, [sp, #28]
 801b3a2:	f1a3 0302 	sub.w	r3, r3, #2
 801b3a6:	bfcc      	ite	gt
 801b3a8:	2500      	movgt	r5, #0
 801b3aa:	2501      	movle	r5, #1
 801b3ac:	2b03      	cmp	r3, #3
 801b3ae:	f200 8085 	bhi.w	801b4bc <_dtoa_r+0x30c>
 801b3b2:	e8df f003 	tbb	[pc, r3]
 801b3b6:	3b2e      	.short	0x3b2e
 801b3b8:	5839      	.short	0x5839
 801b3ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b3be:	441d      	add	r5, r3
 801b3c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b3c4:	2b20      	cmp	r3, #32
 801b3c6:	bfc1      	itttt	gt
 801b3c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b3cc:	fa08 f803 	lslgt.w	r8, r8, r3
 801b3d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801b3d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 801b3d8:	bfd6      	itet	le
 801b3da:	f1c3 0320 	rsble	r3, r3, #32
 801b3de:	ea48 0003 	orrgt.w	r0, r8, r3
 801b3e2:	fa06 f003 	lslle.w	r0, r6, r3
 801b3e6:	f7e5 f8e5 	bl	80005b4 <__aeabi_ui2d>
 801b3ea:	2201      	movs	r2, #1
 801b3ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801b3f0:	3d01      	subs	r5, #1
 801b3f2:	920e      	str	r2, [sp, #56]	; 0x38
 801b3f4:	e76f      	b.n	801b2d6 <_dtoa_r+0x126>
 801b3f6:	2301      	movs	r3, #1
 801b3f8:	e7b3      	b.n	801b362 <_dtoa_r+0x1b2>
 801b3fa:	900c      	str	r0, [sp, #48]	; 0x30
 801b3fc:	e7b2      	b.n	801b364 <_dtoa_r+0x1b4>
 801b3fe:	9b05      	ldr	r3, [sp, #20]
 801b400:	eba3 030b 	sub.w	r3, r3, fp
 801b404:	9305      	str	r3, [sp, #20]
 801b406:	f1cb 0300 	rsb	r3, fp, #0
 801b40a:	9308      	str	r3, [sp, #32]
 801b40c:	2300      	movs	r3, #0
 801b40e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b410:	e7bf      	b.n	801b392 <_dtoa_r+0x1e2>
 801b412:	2300      	movs	r3, #0
 801b414:	9309      	str	r3, [sp, #36]	; 0x24
 801b416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b418:	2b00      	cmp	r3, #0
 801b41a:	dc52      	bgt.n	801b4c2 <_dtoa_r+0x312>
 801b41c:	2301      	movs	r3, #1
 801b41e:	9301      	str	r3, [sp, #4]
 801b420:	9304      	str	r3, [sp, #16]
 801b422:	461a      	mov	r2, r3
 801b424:	920a      	str	r2, [sp, #40]	; 0x28
 801b426:	e00b      	b.n	801b440 <_dtoa_r+0x290>
 801b428:	2301      	movs	r3, #1
 801b42a:	e7f3      	b.n	801b414 <_dtoa_r+0x264>
 801b42c:	2300      	movs	r3, #0
 801b42e:	9309      	str	r3, [sp, #36]	; 0x24
 801b430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b432:	445b      	add	r3, fp
 801b434:	9301      	str	r3, [sp, #4]
 801b436:	3301      	adds	r3, #1
 801b438:	2b01      	cmp	r3, #1
 801b43a:	9304      	str	r3, [sp, #16]
 801b43c:	bfb8      	it	lt
 801b43e:	2301      	movlt	r3, #1
 801b440:	69e0      	ldr	r0, [r4, #28]
 801b442:	2100      	movs	r1, #0
 801b444:	2204      	movs	r2, #4
 801b446:	f102 0614 	add.w	r6, r2, #20
 801b44a:	429e      	cmp	r6, r3
 801b44c:	d93d      	bls.n	801b4ca <_dtoa_r+0x31a>
 801b44e:	6041      	str	r1, [r0, #4]
 801b450:	4620      	mov	r0, r4
 801b452:	f000 fceb 	bl	801be2c <_Balloc>
 801b456:	9000      	str	r0, [sp, #0]
 801b458:	2800      	cmp	r0, #0
 801b45a:	d139      	bne.n	801b4d0 <_dtoa_r+0x320>
 801b45c:	4b16      	ldr	r3, [pc, #88]	; (801b4b8 <_dtoa_r+0x308>)
 801b45e:	4602      	mov	r2, r0
 801b460:	f240 11af 	movw	r1, #431	; 0x1af
 801b464:	e6bd      	b.n	801b1e2 <_dtoa_r+0x32>
 801b466:	2301      	movs	r3, #1
 801b468:	e7e1      	b.n	801b42e <_dtoa_r+0x27e>
 801b46a:	2501      	movs	r5, #1
 801b46c:	2300      	movs	r3, #0
 801b46e:	9307      	str	r3, [sp, #28]
 801b470:	9509      	str	r5, [sp, #36]	; 0x24
 801b472:	f04f 33ff 	mov.w	r3, #4294967295
 801b476:	9301      	str	r3, [sp, #4]
 801b478:	9304      	str	r3, [sp, #16]
 801b47a:	2200      	movs	r2, #0
 801b47c:	2312      	movs	r3, #18
 801b47e:	e7d1      	b.n	801b424 <_dtoa_r+0x274>
 801b480:	636f4361 	.word	0x636f4361
 801b484:	3fd287a7 	.word	0x3fd287a7
 801b488:	8b60c8b3 	.word	0x8b60c8b3
 801b48c:	3fc68a28 	.word	0x3fc68a28
 801b490:	509f79fb 	.word	0x509f79fb
 801b494:	3fd34413 	.word	0x3fd34413
 801b498:	0802081e 	.word	0x0802081e
 801b49c:	08020835 	.word	0x08020835
 801b4a0:	7ff00000 	.word	0x7ff00000
 801b4a4:	0802081a 	.word	0x0802081a
 801b4a8:	08020811 	.word	0x08020811
 801b4ac:	08020b71 	.word	0x08020b71
 801b4b0:	3ff80000 	.word	0x3ff80000
 801b4b4:	08020920 	.word	0x08020920
 801b4b8:	0802088d 	.word	0x0802088d
 801b4bc:	2301      	movs	r3, #1
 801b4be:	9309      	str	r3, [sp, #36]	; 0x24
 801b4c0:	e7d7      	b.n	801b472 <_dtoa_r+0x2c2>
 801b4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4c4:	9301      	str	r3, [sp, #4]
 801b4c6:	9304      	str	r3, [sp, #16]
 801b4c8:	e7ba      	b.n	801b440 <_dtoa_r+0x290>
 801b4ca:	3101      	adds	r1, #1
 801b4cc:	0052      	lsls	r2, r2, #1
 801b4ce:	e7ba      	b.n	801b446 <_dtoa_r+0x296>
 801b4d0:	69e3      	ldr	r3, [r4, #28]
 801b4d2:	9a00      	ldr	r2, [sp, #0]
 801b4d4:	601a      	str	r2, [r3, #0]
 801b4d6:	9b04      	ldr	r3, [sp, #16]
 801b4d8:	2b0e      	cmp	r3, #14
 801b4da:	f200 80a8 	bhi.w	801b62e <_dtoa_r+0x47e>
 801b4de:	2d00      	cmp	r5, #0
 801b4e0:	f000 80a5 	beq.w	801b62e <_dtoa_r+0x47e>
 801b4e4:	f1bb 0f00 	cmp.w	fp, #0
 801b4e8:	dd38      	ble.n	801b55c <_dtoa_r+0x3ac>
 801b4ea:	4bc0      	ldr	r3, [pc, #768]	; (801b7ec <_dtoa_r+0x63c>)
 801b4ec:	f00b 020f 	and.w	r2, fp, #15
 801b4f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b4f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b4f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 801b4fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 801b500:	d019      	beq.n	801b536 <_dtoa_r+0x386>
 801b502:	4bbb      	ldr	r3, [pc, #748]	; (801b7f0 <_dtoa_r+0x640>)
 801b504:	ec51 0b18 	vmov	r0, r1, d8
 801b508:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b50c:	f7e5 f9f6 	bl	80008fc <__aeabi_ddiv>
 801b510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b514:	f008 080f 	and.w	r8, r8, #15
 801b518:	2503      	movs	r5, #3
 801b51a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801b7f0 <_dtoa_r+0x640>
 801b51e:	f1b8 0f00 	cmp.w	r8, #0
 801b522:	d10a      	bne.n	801b53a <_dtoa_r+0x38a>
 801b524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b528:	4632      	mov	r2, r6
 801b52a:	463b      	mov	r3, r7
 801b52c:	f7e5 f9e6 	bl	80008fc <__aeabi_ddiv>
 801b530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b534:	e02b      	b.n	801b58e <_dtoa_r+0x3de>
 801b536:	2502      	movs	r5, #2
 801b538:	e7ef      	b.n	801b51a <_dtoa_r+0x36a>
 801b53a:	f018 0f01 	tst.w	r8, #1
 801b53e:	d008      	beq.n	801b552 <_dtoa_r+0x3a2>
 801b540:	4630      	mov	r0, r6
 801b542:	4639      	mov	r1, r7
 801b544:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b548:	f7e5 f8ae 	bl	80006a8 <__aeabi_dmul>
 801b54c:	3501      	adds	r5, #1
 801b54e:	4606      	mov	r6, r0
 801b550:	460f      	mov	r7, r1
 801b552:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b556:	f109 0908 	add.w	r9, r9, #8
 801b55a:	e7e0      	b.n	801b51e <_dtoa_r+0x36e>
 801b55c:	f000 809f 	beq.w	801b69e <_dtoa_r+0x4ee>
 801b560:	f1cb 0600 	rsb	r6, fp, #0
 801b564:	4ba1      	ldr	r3, [pc, #644]	; (801b7ec <_dtoa_r+0x63c>)
 801b566:	4fa2      	ldr	r7, [pc, #648]	; (801b7f0 <_dtoa_r+0x640>)
 801b568:	f006 020f 	and.w	r2, r6, #15
 801b56c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b574:	ec51 0b18 	vmov	r0, r1, d8
 801b578:	f7e5 f896 	bl	80006a8 <__aeabi_dmul>
 801b57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b580:	1136      	asrs	r6, r6, #4
 801b582:	2300      	movs	r3, #0
 801b584:	2502      	movs	r5, #2
 801b586:	2e00      	cmp	r6, #0
 801b588:	d17e      	bne.n	801b688 <_dtoa_r+0x4d8>
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d1d0      	bne.n	801b530 <_dtoa_r+0x380>
 801b58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b590:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b594:	2b00      	cmp	r3, #0
 801b596:	f000 8084 	beq.w	801b6a2 <_dtoa_r+0x4f2>
 801b59a:	4b96      	ldr	r3, [pc, #600]	; (801b7f4 <_dtoa_r+0x644>)
 801b59c:	2200      	movs	r2, #0
 801b59e:	4640      	mov	r0, r8
 801b5a0:	4649      	mov	r1, r9
 801b5a2:	f7e5 faf3 	bl	8000b8c <__aeabi_dcmplt>
 801b5a6:	2800      	cmp	r0, #0
 801b5a8:	d07b      	beq.n	801b6a2 <_dtoa_r+0x4f2>
 801b5aa:	9b04      	ldr	r3, [sp, #16]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d078      	beq.n	801b6a2 <_dtoa_r+0x4f2>
 801b5b0:	9b01      	ldr	r3, [sp, #4]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	dd39      	ble.n	801b62a <_dtoa_r+0x47a>
 801b5b6:	4b90      	ldr	r3, [pc, #576]	; (801b7f8 <_dtoa_r+0x648>)
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	4640      	mov	r0, r8
 801b5bc:	4649      	mov	r1, r9
 801b5be:	f7e5 f873 	bl	80006a8 <__aeabi_dmul>
 801b5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5c6:	9e01      	ldr	r6, [sp, #4]
 801b5c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 801b5cc:	3501      	adds	r5, #1
 801b5ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b5d2:	4628      	mov	r0, r5
 801b5d4:	f7e4 fffe 	bl	80005d4 <__aeabi_i2d>
 801b5d8:	4642      	mov	r2, r8
 801b5da:	464b      	mov	r3, r9
 801b5dc:	f7e5 f864 	bl	80006a8 <__aeabi_dmul>
 801b5e0:	4b86      	ldr	r3, [pc, #536]	; (801b7fc <_dtoa_r+0x64c>)
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	f7e4 feaa 	bl	800033c <__adddf3>
 801b5e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801b5ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5f0:	9303      	str	r3, [sp, #12]
 801b5f2:	2e00      	cmp	r6, #0
 801b5f4:	d158      	bne.n	801b6a8 <_dtoa_r+0x4f8>
 801b5f6:	4b82      	ldr	r3, [pc, #520]	; (801b800 <_dtoa_r+0x650>)
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	4640      	mov	r0, r8
 801b5fc:	4649      	mov	r1, r9
 801b5fe:	f7e4 fe9b 	bl	8000338 <__aeabi_dsub>
 801b602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b606:	4680      	mov	r8, r0
 801b608:	4689      	mov	r9, r1
 801b60a:	f7e5 fadd 	bl	8000bc8 <__aeabi_dcmpgt>
 801b60e:	2800      	cmp	r0, #0
 801b610:	f040 8296 	bne.w	801bb40 <_dtoa_r+0x990>
 801b614:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b618:	4640      	mov	r0, r8
 801b61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b61e:	4649      	mov	r1, r9
 801b620:	f7e5 fab4 	bl	8000b8c <__aeabi_dcmplt>
 801b624:	2800      	cmp	r0, #0
 801b626:	f040 8289 	bne.w	801bb3c <_dtoa_r+0x98c>
 801b62a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b62e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b630:	2b00      	cmp	r3, #0
 801b632:	f2c0 814e 	blt.w	801b8d2 <_dtoa_r+0x722>
 801b636:	f1bb 0f0e 	cmp.w	fp, #14
 801b63a:	f300 814a 	bgt.w	801b8d2 <_dtoa_r+0x722>
 801b63e:	4b6b      	ldr	r3, [pc, #428]	; (801b7ec <_dtoa_r+0x63c>)
 801b640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b644:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	f280 80dc 	bge.w	801b808 <_dtoa_r+0x658>
 801b650:	9b04      	ldr	r3, [sp, #16]
 801b652:	2b00      	cmp	r3, #0
 801b654:	f300 80d8 	bgt.w	801b808 <_dtoa_r+0x658>
 801b658:	f040 826f 	bne.w	801bb3a <_dtoa_r+0x98a>
 801b65c:	4b68      	ldr	r3, [pc, #416]	; (801b800 <_dtoa_r+0x650>)
 801b65e:	2200      	movs	r2, #0
 801b660:	4640      	mov	r0, r8
 801b662:	4649      	mov	r1, r9
 801b664:	f7e5 f820 	bl	80006a8 <__aeabi_dmul>
 801b668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b66c:	f7e5 faa2 	bl	8000bb4 <__aeabi_dcmpge>
 801b670:	9e04      	ldr	r6, [sp, #16]
 801b672:	4637      	mov	r7, r6
 801b674:	2800      	cmp	r0, #0
 801b676:	f040 8245 	bne.w	801bb04 <_dtoa_r+0x954>
 801b67a:	9d00      	ldr	r5, [sp, #0]
 801b67c:	2331      	movs	r3, #49	; 0x31
 801b67e:	f805 3b01 	strb.w	r3, [r5], #1
 801b682:	f10b 0b01 	add.w	fp, fp, #1
 801b686:	e241      	b.n	801bb0c <_dtoa_r+0x95c>
 801b688:	07f2      	lsls	r2, r6, #31
 801b68a:	d505      	bpl.n	801b698 <_dtoa_r+0x4e8>
 801b68c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b690:	f7e5 f80a 	bl	80006a8 <__aeabi_dmul>
 801b694:	3501      	adds	r5, #1
 801b696:	2301      	movs	r3, #1
 801b698:	1076      	asrs	r6, r6, #1
 801b69a:	3708      	adds	r7, #8
 801b69c:	e773      	b.n	801b586 <_dtoa_r+0x3d6>
 801b69e:	2502      	movs	r5, #2
 801b6a0:	e775      	b.n	801b58e <_dtoa_r+0x3de>
 801b6a2:	9e04      	ldr	r6, [sp, #16]
 801b6a4:	465f      	mov	r7, fp
 801b6a6:	e792      	b.n	801b5ce <_dtoa_r+0x41e>
 801b6a8:	9900      	ldr	r1, [sp, #0]
 801b6aa:	4b50      	ldr	r3, [pc, #320]	; (801b7ec <_dtoa_r+0x63c>)
 801b6ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6b0:	4431      	add	r1, r6
 801b6b2:	9102      	str	r1, [sp, #8]
 801b6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6b6:	eeb0 9a47 	vmov.f32	s18, s14
 801b6ba:	eef0 9a67 	vmov.f32	s19, s15
 801b6be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b6c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b6c6:	2900      	cmp	r1, #0
 801b6c8:	d044      	beq.n	801b754 <_dtoa_r+0x5a4>
 801b6ca:	494e      	ldr	r1, [pc, #312]	; (801b804 <_dtoa_r+0x654>)
 801b6cc:	2000      	movs	r0, #0
 801b6ce:	f7e5 f915 	bl	80008fc <__aeabi_ddiv>
 801b6d2:	ec53 2b19 	vmov	r2, r3, d9
 801b6d6:	f7e4 fe2f 	bl	8000338 <__aeabi_dsub>
 801b6da:	9d00      	ldr	r5, [sp, #0]
 801b6dc:	ec41 0b19 	vmov	d9, r0, r1
 801b6e0:	4649      	mov	r1, r9
 801b6e2:	4640      	mov	r0, r8
 801b6e4:	f7e5 fa90 	bl	8000c08 <__aeabi_d2iz>
 801b6e8:	4606      	mov	r6, r0
 801b6ea:	f7e4 ff73 	bl	80005d4 <__aeabi_i2d>
 801b6ee:	4602      	mov	r2, r0
 801b6f0:	460b      	mov	r3, r1
 801b6f2:	4640      	mov	r0, r8
 801b6f4:	4649      	mov	r1, r9
 801b6f6:	f7e4 fe1f 	bl	8000338 <__aeabi_dsub>
 801b6fa:	3630      	adds	r6, #48	; 0x30
 801b6fc:	f805 6b01 	strb.w	r6, [r5], #1
 801b700:	ec53 2b19 	vmov	r2, r3, d9
 801b704:	4680      	mov	r8, r0
 801b706:	4689      	mov	r9, r1
 801b708:	f7e5 fa40 	bl	8000b8c <__aeabi_dcmplt>
 801b70c:	2800      	cmp	r0, #0
 801b70e:	d164      	bne.n	801b7da <_dtoa_r+0x62a>
 801b710:	4642      	mov	r2, r8
 801b712:	464b      	mov	r3, r9
 801b714:	4937      	ldr	r1, [pc, #220]	; (801b7f4 <_dtoa_r+0x644>)
 801b716:	2000      	movs	r0, #0
 801b718:	f7e4 fe0e 	bl	8000338 <__aeabi_dsub>
 801b71c:	ec53 2b19 	vmov	r2, r3, d9
 801b720:	f7e5 fa34 	bl	8000b8c <__aeabi_dcmplt>
 801b724:	2800      	cmp	r0, #0
 801b726:	f040 80b6 	bne.w	801b896 <_dtoa_r+0x6e6>
 801b72a:	9b02      	ldr	r3, [sp, #8]
 801b72c:	429d      	cmp	r5, r3
 801b72e:	f43f af7c 	beq.w	801b62a <_dtoa_r+0x47a>
 801b732:	4b31      	ldr	r3, [pc, #196]	; (801b7f8 <_dtoa_r+0x648>)
 801b734:	ec51 0b19 	vmov	r0, r1, d9
 801b738:	2200      	movs	r2, #0
 801b73a:	f7e4 ffb5 	bl	80006a8 <__aeabi_dmul>
 801b73e:	4b2e      	ldr	r3, [pc, #184]	; (801b7f8 <_dtoa_r+0x648>)
 801b740:	ec41 0b19 	vmov	d9, r0, r1
 801b744:	2200      	movs	r2, #0
 801b746:	4640      	mov	r0, r8
 801b748:	4649      	mov	r1, r9
 801b74a:	f7e4 ffad 	bl	80006a8 <__aeabi_dmul>
 801b74e:	4680      	mov	r8, r0
 801b750:	4689      	mov	r9, r1
 801b752:	e7c5      	b.n	801b6e0 <_dtoa_r+0x530>
 801b754:	ec51 0b17 	vmov	r0, r1, d7
 801b758:	f7e4 ffa6 	bl	80006a8 <__aeabi_dmul>
 801b75c:	9b02      	ldr	r3, [sp, #8]
 801b75e:	9d00      	ldr	r5, [sp, #0]
 801b760:	930f      	str	r3, [sp, #60]	; 0x3c
 801b762:	ec41 0b19 	vmov	d9, r0, r1
 801b766:	4649      	mov	r1, r9
 801b768:	4640      	mov	r0, r8
 801b76a:	f7e5 fa4d 	bl	8000c08 <__aeabi_d2iz>
 801b76e:	4606      	mov	r6, r0
 801b770:	f7e4 ff30 	bl	80005d4 <__aeabi_i2d>
 801b774:	3630      	adds	r6, #48	; 0x30
 801b776:	4602      	mov	r2, r0
 801b778:	460b      	mov	r3, r1
 801b77a:	4640      	mov	r0, r8
 801b77c:	4649      	mov	r1, r9
 801b77e:	f7e4 fddb 	bl	8000338 <__aeabi_dsub>
 801b782:	f805 6b01 	strb.w	r6, [r5], #1
 801b786:	9b02      	ldr	r3, [sp, #8]
 801b788:	429d      	cmp	r5, r3
 801b78a:	4680      	mov	r8, r0
 801b78c:	4689      	mov	r9, r1
 801b78e:	f04f 0200 	mov.w	r2, #0
 801b792:	d124      	bne.n	801b7de <_dtoa_r+0x62e>
 801b794:	4b1b      	ldr	r3, [pc, #108]	; (801b804 <_dtoa_r+0x654>)
 801b796:	ec51 0b19 	vmov	r0, r1, d9
 801b79a:	f7e4 fdcf 	bl	800033c <__adddf3>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	4640      	mov	r0, r8
 801b7a4:	4649      	mov	r1, r9
 801b7a6:	f7e5 fa0f 	bl	8000bc8 <__aeabi_dcmpgt>
 801b7aa:	2800      	cmp	r0, #0
 801b7ac:	d173      	bne.n	801b896 <_dtoa_r+0x6e6>
 801b7ae:	ec53 2b19 	vmov	r2, r3, d9
 801b7b2:	4914      	ldr	r1, [pc, #80]	; (801b804 <_dtoa_r+0x654>)
 801b7b4:	2000      	movs	r0, #0
 801b7b6:	f7e4 fdbf 	bl	8000338 <__aeabi_dsub>
 801b7ba:	4602      	mov	r2, r0
 801b7bc:	460b      	mov	r3, r1
 801b7be:	4640      	mov	r0, r8
 801b7c0:	4649      	mov	r1, r9
 801b7c2:	f7e5 f9e3 	bl	8000b8c <__aeabi_dcmplt>
 801b7c6:	2800      	cmp	r0, #0
 801b7c8:	f43f af2f 	beq.w	801b62a <_dtoa_r+0x47a>
 801b7cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b7ce:	1e6b      	subs	r3, r5, #1
 801b7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801b7d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b7d6:	2b30      	cmp	r3, #48	; 0x30
 801b7d8:	d0f8      	beq.n	801b7cc <_dtoa_r+0x61c>
 801b7da:	46bb      	mov	fp, r7
 801b7dc:	e04a      	b.n	801b874 <_dtoa_r+0x6c4>
 801b7de:	4b06      	ldr	r3, [pc, #24]	; (801b7f8 <_dtoa_r+0x648>)
 801b7e0:	f7e4 ff62 	bl	80006a8 <__aeabi_dmul>
 801b7e4:	4680      	mov	r8, r0
 801b7e6:	4689      	mov	r9, r1
 801b7e8:	e7bd      	b.n	801b766 <_dtoa_r+0x5b6>
 801b7ea:	bf00      	nop
 801b7ec:	08020920 	.word	0x08020920
 801b7f0:	080208f8 	.word	0x080208f8
 801b7f4:	3ff00000 	.word	0x3ff00000
 801b7f8:	40240000 	.word	0x40240000
 801b7fc:	401c0000 	.word	0x401c0000
 801b800:	40140000 	.word	0x40140000
 801b804:	3fe00000 	.word	0x3fe00000
 801b808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b80c:	9d00      	ldr	r5, [sp, #0]
 801b80e:	4642      	mov	r2, r8
 801b810:	464b      	mov	r3, r9
 801b812:	4630      	mov	r0, r6
 801b814:	4639      	mov	r1, r7
 801b816:	f7e5 f871 	bl	80008fc <__aeabi_ddiv>
 801b81a:	f7e5 f9f5 	bl	8000c08 <__aeabi_d2iz>
 801b81e:	9001      	str	r0, [sp, #4]
 801b820:	f7e4 fed8 	bl	80005d4 <__aeabi_i2d>
 801b824:	4642      	mov	r2, r8
 801b826:	464b      	mov	r3, r9
 801b828:	f7e4 ff3e 	bl	80006a8 <__aeabi_dmul>
 801b82c:	4602      	mov	r2, r0
 801b82e:	460b      	mov	r3, r1
 801b830:	4630      	mov	r0, r6
 801b832:	4639      	mov	r1, r7
 801b834:	f7e4 fd80 	bl	8000338 <__aeabi_dsub>
 801b838:	9e01      	ldr	r6, [sp, #4]
 801b83a:	9f04      	ldr	r7, [sp, #16]
 801b83c:	3630      	adds	r6, #48	; 0x30
 801b83e:	f805 6b01 	strb.w	r6, [r5], #1
 801b842:	9e00      	ldr	r6, [sp, #0]
 801b844:	1bae      	subs	r6, r5, r6
 801b846:	42b7      	cmp	r7, r6
 801b848:	4602      	mov	r2, r0
 801b84a:	460b      	mov	r3, r1
 801b84c:	d134      	bne.n	801b8b8 <_dtoa_r+0x708>
 801b84e:	f7e4 fd75 	bl	800033c <__adddf3>
 801b852:	4642      	mov	r2, r8
 801b854:	464b      	mov	r3, r9
 801b856:	4606      	mov	r6, r0
 801b858:	460f      	mov	r7, r1
 801b85a:	f7e5 f9b5 	bl	8000bc8 <__aeabi_dcmpgt>
 801b85e:	b9c8      	cbnz	r0, 801b894 <_dtoa_r+0x6e4>
 801b860:	4642      	mov	r2, r8
 801b862:	464b      	mov	r3, r9
 801b864:	4630      	mov	r0, r6
 801b866:	4639      	mov	r1, r7
 801b868:	f7e5 f986 	bl	8000b78 <__aeabi_dcmpeq>
 801b86c:	b110      	cbz	r0, 801b874 <_dtoa_r+0x6c4>
 801b86e:	9b01      	ldr	r3, [sp, #4]
 801b870:	07db      	lsls	r3, r3, #31
 801b872:	d40f      	bmi.n	801b894 <_dtoa_r+0x6e4>
 801b874:	4651      	mov	r1, sl
 801b876:	4620      	mov	r0, r4
 801b878:	f000 fb18 	bl	801beac <_Bfree>
 801b87c:	2300      	movs	r3, #0
 801b87e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b880:	702b      	strb	r3, [r5, #0]
 801b882:	f10b 0301 	add.w	r3, fp, #1
 801b886:	6013      	str	r3, [r2, #0]
 801b888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	f43f ace2 	beq.w	801b254 <_dtoa_r+0xa4>
 801b890:	601d      	str	r5, [r3, #0]
 801b892:	e4df      	b.n	801b254 <_dtoa_r+0xa4>
 801b894:	465f      	mov	r7, fp
 801b896:	462b      	mov	r3, r5
 801b898:	461d      	mov	r5, r3
 801b89a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b89e:	2a39      	cmp	r2, #57	; 0x39
 801b8a0:	d106      	bne.n	801b8b0 <_dtoa_r+0x700>
 801b8a2:	9a00      	ldr	r2, [sp, #0]
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d1f7      	bne.n	801b898 <_dtoa_r+0x6e8>
 801b8a8:	9900      	ldr	r1, [sp, #0]
 801b8aa:	2230      	movs	r2, #48	; 0x30
 801b8ac:	3701      	adds	r7, #1
 801b8ae:	700a      	strb	r2, [r1, #0]
 801b8b0:	781a      	ldrb	r2, [r3, #0]
 801b8b2:	3201      	adds	r2, #1
 801b8b4:	701a      	strb	r2, [r3, #0]
 801b8b6:	e790      	b.n	801b7da <_dtoa_r+0x62a>
 801b8b8:	4ba3      	ldr	r3, [pc, #652]	; (801bb48 <_dtoa_r+0x998>)
 801b8ba:	2200      	movs	r2, #0
 801b8bc:	f7e4 fef4 	bl	80006a8 <__aeabi_dmul>
 801b8c0:	2200      	movs	r2, #0
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	4606      	mov	r6, r0
 801b8c6:	460f      	mov	r7, r1
 801b8c8:	f7e5 f956 	bl	8000b78 <__aeabi_dcmpeq>
 801b8cc:	2800      	cmp	r0, #0
 801b8ce:	d09e      	beq.n	801b80e <_dtoa_r+0x65e>
 801b8d0:	e7d0      	b.n	801b874 <_dtoa_r+0x6c4>
 801b8d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8d4:	2a00      	cmp	r2, #0
 801b8d6:	f000 80ca 	beq.w	801ba6e <_dtoa_r+0x8be>
 801b8da:	9a07      	ldr	r2, [sp, #28]
 801b8dc:	2a01      	cmp	r2, #1
 801b8de:	f300 80ad 	bgt.w	801ba3c <_dtoa_r+0x88c>
 801b8e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8e4:	2a00      	cmp	r2, #0
 801b8e6:	f000 80a5 	beq.w	801ba34 <_dtoa_r+0x884>
 801b8ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b8ee:	9e08      	ldr	r6, [sp, #32]
 801b8f0:	9d05      	ldr	r5, [sp, #20]
 801b8f2:	9a05      	ldr	r2, [sp, #20]
 801b8f4:	441a      	add	r2, r3
 801b8f6:	9205      	str	r2, [sp, #20]
 801b8f8:	9a06      	ldr	r2, [sp, #24]
 801b8fa:	2101      	movs	r1, #1
 801b8fc:	441a      	add	r2, r3
 801b8fe:	4620      	mov	r0, r4
 801b900:	9206      	str	r2, [sp, #24]
 801b902:	f000 fbd3 	bl	801c0ac <__i2b>
 801b906:	4607      	mov	r7, r0
 801b908:	b165      	cbz	r5, 801b924 <_dtoa_r+0x774>
 801b90a:	9b06      	ldr	r3, [sp, #24]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	dd09      	ble.n	801b924 <_dtoa_r+0x774>
 801b910:	42ab      	cmp	r3, r5
 801b912:	9a05      	ldr	r2, [sp, #20]
 801b914:	bfa8      	it	ge
 801b916:	462b      	movge	r3, r5
 801b918:	1ad2      	subs	r2, r2, r3
 801b91a:	9205      	str	r2, [sp, #20]
 801b91c:	9a06      	ldr	r2, [sp, #24]
 801b91e:	1aed      	subs	r5, r5, r3
 801b920:	1ad3      	subs	r3, r2, r3
 801b922:	9306      	str	r3, [sp, #24]
 801b924:	9b08      	ldr	r3, [sp, #32]
 801b926:	b1f3      	cbz	r3, 801b966 <_dtoa_r+0x7b6>
 801b928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	f000 80a3 	beq.w	801ba76 <_dtoa_r+0x8c6>
 801b930:	2e00      	cmp	r6, #0
 801b932:	dd10      	ble.n	801b956 <_dtoa_r+0x7a6>
 801b934:	4639      	mov	r1, r7
 801b936:	4632      	mov	r2, r6
 801b938:	4620      	mov	r0, r4
 801b93a:	f000 fc77 	bl	801c22c <__pow5mult>
 801b93e:	4652      	mov	r2, sl
 801b940:	4601      	mov	r1, r0
 801b942:	4607      	mov	r7, r0
 801b944:	4620      	mov	r0, r4
 801b946:	f000 fbc7 	bl	801c0d8 <__multiply>
 801b94a:	4651      	mov	r1, sl
 801b94c:	4680      	mov	r8, r0
 801b94e:	4620      	mov	r0, r4
 801b950:	f000 faac 	bl	801beac <_Bfree>
 801b954:	46c2      	mov	sl, r8
 801b956:	9b08      	ldr	r3, [sp, #32]
 801b958:	1b9a      	subs	r2, r3, r6
 801b95a:	d004      	beq.n	801b966 <_dtoa_r+0x7b6>
 801b95c:	4651      	mov	r1, sl
 801b95e:	4620      	mov	r0, r4
 801b960:	f000 fc64 	bl	801c22c <__pow5mult>
 801b964:	4682      	mov	sl, r0
 801b966:	2101      	movs	r1, #1
 801b968:	4620      	mov	r0, r4
 801b96a:	f000 fb9f 	bl	801c0ac <__i2b>
 801b96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b970:	2b00      	cmp	r3, #0
 801b972:	4606      	mov	r6, r0
 801b974:	f340 8081 	ble.w	801ba7a <_dtoa_r+0x8ca>
 801b978:	461a      	mov	r2, r3
 801b97a:	4601      	mov	r1, r0
 801b97c:	4620      	mov	r0, r4
 801b97e:	f000 fc55 	bl	801c22c <__pow5mult>
 801b982:	9b07      	ldr	r3, [sp, #28]
 801b984:	2b01      	cmp	r3, #1
 801b986:	4606      	mov	r6, r0
 801b988:	dd7a      	ble.n	801ba80 <_dtoa_r+0x8d0>
 801b98a:	f04f 0800 	mov.w	r8, #0
 801b98e:	6933      	ldr	r3, [r6, #16]
 801b990:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b994:	6918      	ldr	r0, [r3, #16]
 801b996:	f000 fb3b 	bl	801c010 <__hi0bits>
 801b99a:	f1c0 0020 	rsb	r0, r0, #32
 801b99e:	9b06      	ldr	r3, [sp, #24]
 801b9a0:	4418      	add	r0, r3
 801b9a2:	f010 001f 	ands.w	r0, r0, #31
 801b9a6:	f000 8094 	beq.w	801bad2 <_dtoa_r+0x922>
 801b9aa:	f1c0 0320 	rsb	r3, r0, #32
 801b9ae:	2b04      	cmp	r3, #4
 801b9b0:	f340 8085 	ble.w	801babe <_dtoa_r+0x90e>
 801b9b4:	9b05      	ldr	r3, [sp, #20]
 801b9b6:	f1c0 001c 	rsb	r0, r0, #28
 801b9ba:	4403      	add	r3, r0
 801b9bc:	9305      	str	r3, [sp, #20]
 801b9be:	9b06      	ldr	r3, [sp, #24]
 801b9c0:	4403      	add	r3, r0
 801b9c2:	4405      	add	r5, r0
 801b9c4:	9306      	str	r3, [sp, #24]
 801b9c6:	9b05      	ldr	r3, [sp, #20]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	dd05      	ble.n	801b9d8 <_dtoa_r+0x828>
 801b9cc:	4651      	mov	r1, sl
 801b9ce:	461a      	mov	r2, r3
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f000 fc85 	bl	801c2e0 <__lshift>
 801b9d6:	4682      	mov	sl, r0
 801b9d8:	9b06      	ldr	r3, [sp, #24]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	dd05      	ble.n	801b9ea <_dtoa_r+0x83a>
 801b9de:	4631      	mov	r1, r6
 801b9e0:	461a      	mov	r2, r3
 801b9e2:	4620      	mov	r0, r4
 801b9e4:	f000 fc7c 	bl	801c2e0 <__lshift>
 801b9e8:	4606      	mov	r6, r0
 801b9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d072      	beq.n	801bad6 <_dtoa_r+0x926>
 801b9f0:	4631      	mov	r1, r6
 801b9f2:	4650      	mov	r0, sl
 801b9f4:	f000 fce0 	bl	801c3b8 <__mcmp>
 801b9f8:	2800      	cmp	r0, #0
 801b9fa:	da6c      	bge.n	801bad6 <_dtoa_r+0x926>
 801b9fc:	2300      	movs	r3, #0
 801b9fe:	4651      	mov	r1, sl
 801ba00:	220a      	movs	r2, #10
 801ba02:	4620      	mov	r0, r4
 801ba04:	f000 fa74 	bl	801bef0 <__multadd>
 801ba08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ba0e:	4682      	mov	sl, r0
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	f000 81b0 	beq.w	801bd76 <_dtoa_r+0xbc6>
 801ba16:	2300      	movs	r3, #0
 801ba18:	4639      	mov	r1, r7
 801ba1a:	220a      	movs	r2, #10
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	f000 fa67 	bl	801bef0 <__multadd>
 801ba22:	9b01      	ldr	r3, [sp, #4]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	4607      	mov	r7, r0
 801ba28:	f300 8096 	bgt.w	801bb58 <_dtoa_r+0x9a8>
 801ba2c:	9b07      	ldr	r3, [sp, #28]
 801ba2e:	2b02      	cmp	r3, #2
 801ba30:	dc59      	bgt.n	801bae6 <_dtoa_r+0x936>
 801ba32:	e091      	b.n	801bb58 <_dtoa_r+0x9a8>
 801ba34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ba3a:	e758      	b.n	801b8ee <_dtoa_r+0x73e>
 801ba3c:	9b04      	ldr	r3, [sp, #16]
 801ba3e:	1e5e      	subs	r6, r3, #1
 801ba40:	9b08      	ldr	r3, [sp, #32]
 801ba42:	42b3      	cmp	r3, r6
 801ba44:	bfbf      	itttt	lt
 801ba46:	9b08      	ldrlt	r3, [sp, #32]
 801ba48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801ba4a:	9608      	strlt	r6, [sp, #32]
 801ba4c:	1af3      	sublt	r3, r6, r3
 801ba4e:	bfb4      	ite	lt
 801ba50:	18d2      	addlt	r2, r2, r3
 801ba52:	1b9e      	subge	r6, r3, r6
 801ba54:	9b04      	ldr	r3, [sp, #16]
 801ba56:	bfbc      	itt	lt
 801ba58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801ba5a:	2600      	movlt	r6, #0
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	bfb7      	itett	lt
 801ba60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801ba64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801ba68:	1a9d      	sublt	r5, r3, r2
 801ba6a:	2300      	movlt	r3, #0
 801ba6c:	e741      	b.n	801b8f2 <_dtoa_r+0x742>
 801ba6e:	9e08      	ldr	r6, [sp, #32]
 801ba70:	9d05      	ldr	r5, [sp, #20]
 801ba72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ba74:	e748      	b.n	801b908 <_dtoa_r+0x758>
 801ba76:	9a08      	ldr	r2, [sp, #32]
 801ba78:	e770      	b.n	801b95c <_dtoa_r+0x7ac>
 801ba7a:	9b07      	ldr	r3, [sp, #28]
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	dc19      	bgt.n	801bab4 <_dtoa_r+0x904>
 801ba80:	9b02      	ldr	r3, [sp, #8]
 801ba82:	b9bb      	cbnz	r3, 801bab4 <_dtoa_r+0x904>
 801ba84:	9b03      	ldr	r3, [sp, #12]
 801ba86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ba8a:	b99b      	cbnz	r3, 801bab4 <_dtoa_r+0x904>
 801ba8c:	9b03      	ldr	r3, [sp, #12]
 801ba8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ba92:	0d1b      	lsrs	r3, r3, #20
 801ba94:	051b      	lsls	r3, r3, #20
 801ba96:	b183      	cbz	r3, 801baba <_dtoa_r+0x90a>
 801ba98:	9b05      	ldr	r3, [sp, #20]
 801ba9a:	3301      	adds	r3, #1
 801ba9c:	9305      	str	r3, [sp, #20]
 801ba9e:	9b06      	ldr	r3, [sp, #24]
 801baa0:	3301      	adds	r3, #1
 801baa2:	9306      	str	r3, [sp, #24]
 801baa4:	f04f 0801 	mov.w	r8, #1
 801baa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baaa:	2b00      	cmp	r3, #0
 801baac:	f47f af6f 	bne.w	801b98e <_dtoa_r+0x7de>
 801bab0:	2001      	movs	r0, #1
 801bab2:	e774      	b.n	801b99e <_dtoa_r+0x7ee>
 801bab4:	f04f 0800 	mov.w	r8, #0
 801bab8:	e7f6      	b.n	801baa8 <_dtoa_r+0x8f8>
 801baba:	4698      	mov	r8, r3
 801babc:	e7f4      	b.n	801baa8 <_dtoa_r+0x8f8>
 801babe:	d082      	beq.n	801b9c6 <_dtoa_r+0x816>
 801bac0:	9a05      	ldr	r2, [sp, #20]
 801bac2:	331c      	adds	r3, #28
 801bac4:	441a      	add	r2, r3
 801bac6:	9205      	str	r2, [sp, #20]
 801bac8:	9a06      	ldr	r2, [sp, #24]
 801baca:	441a      	add	r2, r3
 801bacc:	441d      	add	r5, r3
 801bace:	9206      	str	r2, [sp, #24]
 801bad0:	e779      	b.n	801b9c6 <_dtoa_r+0x816>
 801bad2:	4603      	mov	r3, r0
 801bad4:	e7f4      	b.n	801bac0 <_dtoa_r+0x910>
 801bad6:	9b04      	ldr	r3, [sp, #16]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	dc37      	bgt.n	801bb4c <_dtoa_r+0x99c>
 801badc:	9b07      	ldr	r3, [sp, #28]
 801bade:	2b02      	cmp	r3, #2
 801bae0:	dd34      	ble.n	801bb4c <_dtoa_r+0x99c>
 801bae2:	9b04      	ldr	r3, [sp, #16]
 801bae4:	9301      	str	r3, [sp, #4]
 801bae6:	9b01      	ldr	r3, [sp, #4]
 801bae8:	b963      	cbnz	r3, 801bb04 <_dtoa_r+0x954>
 801baea:	4631      	mov	r1, r6
 801baec:	2205      	movs	r2, #5
 801baee:	4620      	mov	r0, r4
 801baf0:	f000 f9fe 	bl	801bef0 <__multadd>
 801baf4:	4601      	mov	r1, r0
 801baf6:	4606      	mov	r6, r0
 801baf8:	4650      	mov	r0, sl
 801bafa:	f000 fc5d 	bl	801c3b8 <__mcmp>
 801bafe:	2800      	cmp	r0, #0
 801bb00:	f73f adbb 	bgt.w	801b67a <_dtoa_r+0x4ca>
 801bb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb06:	9d00      	ldr	r5, [sp, #0]
 801bb08:	ea6f 0b03 	mvn.w	fp, r3
 801bb0c:	f04f 0800 	mov.w	r8, #0
 801bb10:	4631      	mov	r1, r6
 801bb12:	4620      	mov	r0, r4
 801bb14:	f000 f9ca 	bl	801beac <_Bfree>
 801bb18:	2f00      	cmp	r7, #0
 801bb1a:	f43f aeab 	beq.w	801b874 <_dtoa_r+0x6c4>
 801bb1e:	f1b8 0f00 	cmp.w	r8, #0
 801bb22:	d005      	beq.n	801bb30 <_dtoa_r+0x980>
 801bb24:	45b8      	cmp	r8, r7
 801bb26:	d003      	beq.n	801bb30 <_dtoa_r+0x980>
 801bb28:	4641      	mov	r1, r8
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	f000 f9be 	bl	801beac <_Bfree>
 801bb30:	4639      	mov	r1, r7
 801bb32:	4620      	mov	r0, r4
 801bb34:	f000 f9ba 	bl	801beac <_Bfree>
 801bb38:	e69c      	b.n	801b874 <_dtoa_r+0x6c4>
 801bb3a:	2600      	movs	r6, #0
 801bb3c:	4637      	mov	r7, r6
 801bb3e:	e7e1      	b.n	801bb04 <_dtoa_r+0x954>
 801bb40:	46bb      	mov	fp, r7
 801bb42:	4637      	mov	r7, r6
 801bb44:	e599      	b.n	801b67a <_dtoa_r+0x4ca>
 801bb46:	bf00      	nop
 801bb48:	40240000 	.word	0x40240000
 801bb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	f000 80c8 	beq.w	801bce4 <_dtoa_r+0xb34>
 801bb54:	9b04      	ldr	r3, [sp, #16]
 801bb56:	9301      	str	r3, [sp, #4]
 801bb58:	2d00      	cmp	r5, #0
 801bb5a:	dd05      	ble.n	801bb68 <_dtoa_r+0x9b8>
 801bb5c:	4639      	mov	r1, r7
 801bb5e:	462a      	mov	r2, r5
 801bb60:	4620      	mov	r0, r4
 801bb62:	f000 fbbd 	bl	801c2e0 <__lshift>
 801bb66:	4607      	mov	r7, r0
 801bb68:	f1b8 0f00 	cmp.w	r8, #0
 801bb6c:	d05b      	beq.n	801bc26 <_dtoa_r+0xa76>
 801bb6e:	6879      	ldr	r1, [r7, #4]
 801bb70:	4620      	mov	r0, r4
 801bb72:	f000 f95b 	bl	801be2c <_Balloc>
 801bb76:	4605      	mov	r5, r0
 801bb78:	b928      	cbnz	r0, 801bb86 <_dtoa_r+0x9d6>
 801bb7a:	4b83      	ldr	r3, [pc, #524]	; (801bd88 <_dtoa_r+0xbd8>)
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801bb82:	f7ff bb2e 	b.w	801b1e2 <_dtoa_r+0x32>
 801bb86:	693a      	ldr	r2, [r7, #16]
 801bb88:	3202      	adds	r2, #2
 801bb8a:	0092      	lsls	r2, r2, #2
 801bb8c:	f107 010c 	add.w	r1, r7, #12
 801bb90:	300c      	adds	r0, #12
 801bb92:	f7ff fa66 	bl	801b062 <memcpy>
 801bb96:	2201      	movs	r2, #1
 801bb98:	4629      	mov	r1, r5
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	f000 fba0 	bl	801c2e0 <__lshift>
 801bba0:	9b00      	ldr	r3, [sp, #0]
 801bba2:	3301      	adds	r3, #1
 801bba4:	9304      	str	r3, [sp, #16]
 801bba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbaa:	4413      	add	r3, r2
 801bbac:	9308      	str	r3, [sp, #32]
 801bbae:	9b02      	ldr	r3, [sp, #8]
 801bbb0:	f003 0301 	and.w	r3, r3, #1
 801bbb4:	46b8      	mov	r8, r7
 801bbb6:	9306      	str	r3, [sp, #24]
 801bbb8:	4607      	mov	r7, r0
 801bbba:	9b04      	ldr	r3, [sp, #16]
 801bbbc:	4631      	mov	r1, r6
 801bbbe:	3b01      	subs	r3, #1
 801bbc0:	4650      	mov	r0, sl
 801bbc2:	9301      	str	r3, [sp, #4]
 801bbc4:	f7ff fa69 	bl	801b09a <quorem>
 801bbc8:	4641      	mov	r1, r8
 801bbca:	9002      	str	r0, [sp, #8]
 801bbcc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801bbd0:	4650      	mov	r0, sl
 801bbd2:	f000 fbf1 	bl	801c3b8 <__mcmp>
 801bbd6:	463a      	mov	r2, r7
 801bbd8:	9005      	str	r0, [sp, #20]
 801bbda:	4631      	mov	r1, r6
 801bbdc:	4620      	mov	r0, r4
 801bbde:	f000 fc07 	bl	801c3f0 <__mdiff>
 801bbe2:	68c2      	ldr	r2, [r0, #12]
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	bb02      	cbnz	r2, 801bc2a <_dtoa_r+0xa7a>
 801bbe8:	4601      	mov	r1, r0
 801bbea:	4650      	mov	r0, sl
 801bbec:	f000 fbe4 	bl	801c3b8 <__mcmp>
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	9209      	str	r2, [sp, #36]	; 0x24
 801bbf8:	f000 f958 	bl	801beac <_Bfree>
 801bbfc:	9b07      	ldr	r3, [sp, #28]
 801bbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc00:	9d04      	ldr	r5, [sp, #16]
 801bc02:	ea43 0102 	orr.w	r1, r3, r2
 801bc06:	9b06      	ldr	r3, [sp, #24]
 801bc08:	4319      	orrs	r1, r3
 801bc0a:	d110      	bne.n	801bc2e <_dtoa_r+0xa7e>
 801bc0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801bc10:	d029      	beq.n	801bc66 <_dtoa_r+0xab6>
 801bc12:	9b05      	ldr	r3, [sp, #20]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	dd02      	ble.n	801bc1e <_dtoa_r+0xa6e>
 801bc18:	9b02      	ldr	r3, [sp, #8]
 801bc1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801bc1e:	9b01      	ldr	r3, [sp, #4]
 801bc20:	f883 9000 	strb.w	r9, [r3]
 801bc24:	e774      	b.n	801bb10 <_dtoa_r+0x960>
 801bc26:	4638      	mov	r0, r7
 801bc28:	e7ba      	b.n	801bba0 <_dtoa_r+0x9f0>
 801bc2a:	2201      	movs	r2, #1
 801bc2c:	e7e1      	b.n	801bbf2 <_dtoa_r+0xa42>
 801bc2e:	9b05      	ldr	r3, [sp, #20]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	db04      	blt.n	801bc3e <_dtoa_r+0xa8e>
 801bc34:	9907      	ldr	r1, [sp, #28]
 801bc36:	430b      	orrs	r3, r1
 801bc38:	9906      	ldr	r1, [sp, #24]
 801bc3a:	430b      	orrs	r3, r1
 801bc3c:	d120      	bne.n	801bc80 <_dtoa_r+0xad0>
 801bc3e:	2a00      	cmp	r2, #0
 801bc40:	dded      	ble.n	801bc1e <_dtoa_r+0xa6e>
 801bc42:	4651      	mov	r1, sl
 801bc44:	2201      	movs	r2, #1
 801bc46:	4620      	mov	r0, r4
 801bc48:	f000 fb4a 	bl	801c2e0 <__lshift>
 801bc4c:	4631      	mov	r1, r6
 801bc4e:	4682      	mov	sl, r0
 801bc50:	f000 fbb2 	bl	801c3b8 <__mcmp>
 801bc54:	2800      	cmp	r0, #0
 801bc56:	dc03      	bgt.n	801bc60 <_dtoa_r+0xab0>
 801bc58:	d1e1      	bne.n	801bc1e <_dtoa_r+0xa6e>
 801bc5a:	f019 0f01 	tst.w	r9, #1
 801bc5e:	d0de      	beq.n	801bc1e <_dtoa_r+0xa6e>
 801bc60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801bc64:	d1d8      	bne.n	801bc18 <_dtoa_r+0xa68>
 801bc66:	9a01      	ldr	r2, [sp, #4]
 801bc68:	2339      	movs	r3, #57	; 0x39
 801bc6a:	7013      	strb	r3, [r2, #0]
 801bc6c:	462b      	mov	r3, r5
 801bc6e:	461d      	mov	r5, r3
 801bc70:	3b01      	subs	r3, #1
 801bc72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bc76:	2a39      	cmp	r2, #57	; 0x39
 801bc78:	d06c      	beq.n	801bd54 <_dtoa_r+0xba4>
 801bc7a:	3201      	adds	r2, #1
 801bc7c:	701a      	strb	r2, [r3, #0]
 801bc7e:	e747      	b.n	801bb10 <_dtoa_r+0x960>
 801bc80:	2a00      	cmp	r2, #0
 801bc82:	dd07      	ble.n	801bc94 <_dtoa_r+0xae4>
 801bc84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801bc88:	d0ed      	beq.n	801bc66 <_dtoa_r+0xab6>
 801bc8a:	9a01      	ldr	r2, [sp, #4]
 801bc8c:	f109 0301 	add.w	r3, r9, #1
 801bc90:	7013      	strb	r3, [r2, #0]
 801bc92:	e73d      	b.n	801bb10 <_dtoa_r+0x960>
 801bc94:	9b04      	ldr	r3, [sp, #16]
 801bc96:	9a08      	ldr	r2, [sp, #32]
 801bc98:	f803 9c01 	strb.w	r9, [r3, #-1]
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	d043      	beq.n	801bd28 <_dtoa_r+0xb78>
 801bca0:	4651      	mov	r1, sl
 801bca2:	2300      	movs	r3, #0
 801bca4:	220a      	movs	r2, #10
 801bca6:	4620      	mov	r0, r4
 801bca8:	f000 f922 	bl	801bef0 <__multadd>
 801bcac:	45b8      	cmp	r8, r7
 801bcae:	4682      	mov	sl, r0
 801bcb0:	f04f 0300 	mov.w	r3, #0
 801bcb4:	f04f 020a 	mov.w	r2, #10
 801bcb8:	4641      	mov	r1, r8
 801bcba:	4620      	mov	r0, r4
 801bcbc:	d107      	bne.n	801bcce <_dtoa_r+0xb1e>
 801bcbe:	f000 f917 	bl	801bef0 <__multadd>
 801bcc2:	4680      	mov	r8, r0
 801bcc4:	4607      	mov	r7, r0
 801bcc6:	9b04      	ldr	r3, [sp, #16]
 801bcc8:	3301      	adds	r3, #1
 801bcca:	9304      	str	r3, [sp, #16]
 801bccc:	e775      	b.n	801bbba <_dtoa_r+0xa0a>
 801bcce:	f000 f90f 	bl	801bef0 <__multadd>
 801bcd2:	4639      	mov	r1, r7
 801bcd4:	4680      	mov	r8, r0
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	220a      	movs	r2, #10
 801bcda:	4620      	mov	r0, r4
 801bcdc:	f000 f908 	bl	801bef0 <__multadd>
 801bce0:	4607      	mov	r7, r0
 801bce2:	e7f0      	b.n	801bcc6 <_dtoa_r+0xb16>
 801bce4:	9b04      	ldr	r3, [sp, #16]
 801bce6:	9301      	str	r3, [sp, #4]
 801bce8:	9d00      	ldr	r5, [sp, #0]
 801bcea:	4631      	mov	r1, r6
 801bcec:	4650      	mov	r0, sl
 801bcee:	f7ff f9d4 	bl	801b09a <quorem>
 801bcf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801bcf6:	9b00      	ldr	r3, [sp, #0]
 801bcf8:	f805 9b01 	strb.w	r9, [r5], #1
 801bcfc:	1aea      	subs	r2, r5, r3
 801bcfe:	9b01      	ldr	r3, [sp, #4]
 801bd00:	4293      	cmp	r3, r2
 801bd02:	dd07      	ble.n	801bd14 <_dtoa_r+0xb64>
 801bd04:	4651      	mov	r1, sl
 801bd06:	2300      	movs	r3, #0
 801bd08:	220a      	movs	r2, #10
 801bd0a:	4620      	mov	r0, r4
 801bd0c:	f000 f8f0 	bl	801bef0 <__multadd>
 801bd10:	4682      	mov	sl, r0
 801bd12:	e7ea      	b.n	801bcea <_dtoa_r+0xb3a>
 801bd14:	9b01      	ldr	r3, [sp, #4]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	bfc8      	it	gt
 801bd1a:	461d      	movgt	r5, r3
 801bd1c:	9b00      	ldr	r3, [sp, #0]
 801bd1e:	bfd8      	it	le
 801bd20:	2501      	movle	r5, #1
 801bd22:	441d      	add	r5, r3
 801bd24:	f04f 0800 	mov.w	r8, #0
 801bd28:	4651      	mov	r1, sl
 801bd2a:	2201      	movs	r2, #1
 801bd2c:	4620      	mov	r0, r4
 801bd2e:	f000 fad7 	bl	801c2e0 <__lshift>
 801bd32:	4631      	mov	r1, r6
 801bd34:	4682      	mov	sl, r0
 801bd36:	f000 fb3f 	bl	801c3b8 <__mcmp>
 801bd3a:	2800      	cmp	r0, #0
 801bd3c:	dc96      	bgt.n	801bc6c <_dtoa_r+0xabc>
 801bd3e:	d102      	bne.n	801bd46 <_dtoa_r+0xb96>
 801bd40:	f019 0f01 	tst.w	r9, #1
 801bd44:	d192      	bne.n	801bc6c <_dtoa_r+0xabc>
 801bd46:	462b      	mov	r3, r5
 801bd48:	461d      	mov	r5, r3
 801bd4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd4e:	2a30      	cmp	r2, #48	; 0x30
 801bd50:	d0fa      	beq.n	801bd48 <_dtoa_r+0xb98>
 801bd52:	e6dd      	b.n	801bb10 <_dtoa_r+0x960>
 801bd54:	9a00      	ldr	r2, [sp, #0]
 801bd56:	429a      	cmp	r2, r3
 801bd58:	d189      	bne.n	801bc6e <_dtoa_r+0xabe>
 801bd5a:	f10b 0b01 	add.w	fp, fp, #1
 801bd5e:	2331      	movs	r3, #49	; 0x31
 801bd60:	e796      	b.n	801bc90 <_dtoa_r+0xae0>
 801bd62:	4b0a      	ldr	r3, [pc, #40]	; (801bd8c <_dtoa_r+0xbdc>)
 801bd64:	f7ff ba99 	b.w	801b29a <_dtoa_r+0xea>
 801bd68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	f47f aa6d 	bne.w	801b24a <_dtoa_r+0x9a>
 801bd70:	4b07      	ldr	r3, [pc, #28]	; (801bd90 <_dtoa_r+0xbe0>)
 801bd72:	f7ff ba92 	b.w	801b29a <_dtoa_r+0xea>
 801bd76:	9b01      	ldr	r3, [sp, #4]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	dcb5      	bgt.n	801bce8 <_dtoa_r+0xb38>
 801bd7c:	9b07      	ldr	r3, [sp, #28]
 801bd7e:	2b02      	cmp	r3, #2
 801bd80:	f73f aeb1 	bgt.w	801bae6 <_dtoa_r+0x936>
 801bd84:	e7b0      	b.n	801bce8 <_dtoa_r+0xb38>
 801bd86:	bf00      	nop
 801bd88:	0802088d 	.word	0x0802088d
 801bd8c:	08020b70 	.word	0x08020b70
 801bd90:	08020811 	.word	0x08020811

0801bd94 <_free_r>:
 801bd94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd96:	2900      	cmp	r1, #0
 801bd98:	d044      	beq.n	801be24 <_free_r+0x90>
 801bd9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd9e:	9001      	str	r0, [sp, #4]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	f1a1 0404 	sub.w	r4, r1, #4
 801bda6:	bfb8      	it	lt
 801bda8:	18e4      	addlt	r4, r4, r3
 801bdaa:	f7fd ff4b 	bl	8019c44 <__malloc_lock>
 801bdae:	4a1e      	ldr	r2, [pc, #120]	; (801be28 <_free_r+0x94>)
 801bdb0:	9801      	ldr	r0, [sp, #4]
 801bdb2:	6813      	ldr	r3, [r2, #0]
 801bdb4:	b933      	cbnz	r3, 801bdc4 <_free_r+0x30>
 801bdb6:	6063      	str	r3, [r4, #4]
 801bdb8:	6014      	str	r4, [r2, #0]
 801bdba:	b003      	add	sp, #12
 801bdbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bdc0:	f7fd bf46 	b.w	8019c50 <__malloc_unlock>
 801bdc4:	42a3      	cmp	r3, r4
 801bdc6:	d908      	bls.n	801bdda <_free_r+0x46>
 801bdc8:	6825      	ldr	r5, [r4, #0]
 801bdca:	1961      	adds	r1, r4, r5
 801bdcc:	428b      	cmp	r3, r1
 801bdce:	bf01      	itttt	eq
 801bdd0:	6819      	ldreq	r1, [r3, #0]
 801bdd2:	685b      	ldreq	r3, [r3, #4]
 801bdd4:	1949      	addeq	r1, r1, r5
 801bdd6:	6021      	streq	r1, [r4, #0]
 801bdd8:	e7ed      	b.n	801bdb6 <_free_r+0x22>
 801bdda:	461a      	mov	r2, r3
 801bddc:	685b      	ldr	r3, [r3, #4]
 801bdde:	b10b      	cbz	r3, 801bde4 <_free_r+0x50>
 801bde0:	42a3      	cmp	r3, r4
 801bde2:	d9fa      	bls.n	801bdda <_free_r+0x46>
 801bde4:	6811      	ldr	r1, [r2, #0]
 801bde6:	1855      	adds	r5, r2, r1
 801bde8:	42a5      	cmp	r5, r4
 801bdea:	d10b      	bne.n	801be04 <_free_r+0x70>
 801bdec:	6824      	ldr	r4, [r4, #0]
 801bdee:	4421      	add	r1, r4
 801bdf0:	1854      	adds	r4, r2, r1
 801bdf2:	42a3      	cmp	r3, r4
 801bdf4:	6011      	str	r1, [r2, #0]
 801bdf6:	d1e0      	bne.n	801bdba <_free_r+0x26>
 801bdf8:	681c      	ldr	r4, [r3, #0]
 801bdfa:	685b      	ldr	r3, [r3, #4]
 801bdfc:	6053      	str	r3, [r2, #4]
 801bdfe:	440c      	add	r4, r1
 801be00:	6014      	str	r4, [r2, #0]
 801be02:	e7da      	b.n	801bdba <_free_r+0x26>
 801be04:	d902      	bls.n	801be0c <_free_r+0x78>
 801be06:	230c      	movs	r3, #12
 801be08:	6003      	str	r3, [r0, #0]
 801be0a:	e7d6      	b.n	801bdba <_free_r+0x26>
 801be0c:	6825      	ldr	r5, [r4, #0]
 801be0e:	1961      	adds	r1, r4, r5
 801be10:	428b      	cmp	r3, r1
 801be12:	bf04      	itt	eq
 801be14:	6819      	ldreq	r1, [r3, #0]
 801be16:	685b      	ldreq	r3, [r3, #4]
 801be18:	6063      	str	r3, [r4, #4]
 801be1a:	bf04      	itt	eq
 801be1c:	1949      	addeq	r1, r1, r5
 801be1e:	6021      	streq	r1, [r4, #0]
 801be20:	6054      	str	r4, [r2, #4]
 801be22:	e7ca      	b.n	801bdba <_free_r+0x26>
 801be24:	b003      	add	sp, #12
 801be26:	bd30      	pop	{r4, r5, pc}
 801be28:	20005d60 	.word	0x20005d60

0801be2c <_Balloc>:
 801be2c:	b570      	push	{r4, r5, r6, lr}
 801be2e:	69c6      	ldr	r6, [r0, #28]
 801be30:	4604      	mov	r4, r0
 801be32:	460d      	mov	r5, r1
 801be34:	b976      	cbnz	r6, 801be54 <_Balloc+0x28>
 801be36:	2010      	movs	r0, #16
 801be38:	f7fd fe5c 	bl	8019af4 <malloc>
 801be3c:	4602      	mov	r2, r0
 801be3e:	61e0      	str	r0, [r4, #28]
 801be40:	b920      	cbnz	r0, 801be4c <_Balloc+0x20>
 801be42:	4b18      	ldr	r3, [pc, #96]	; (801bea4 <_Balloc+0x78>)
 801be44:	4818      	ldr	r0, [pc, #96]	; (801bea8 <_Balloc+0x7c>)
 801be46:	216b      	movs	r1, #107	; 0x6b
 801be48:	f7fd fe36 	bl	8019ab8 <__assert_func>
 801be4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be50:	6006      	str	r6, [r0, #0]
 801be52:	60c6      	str	r6, [r0, #12]
 801be54:	69e6      	ldr	r6, [r4, #28]
 801be56:	68f3      	ldr	r3, [r6, #12]
 801be58:	b183      	cbz	r3, 801be7c <_Balloc+0x50>
 801be5a:	69e3      	ldr	r3, [r4, #28]
 801be5c:	68db      	ldr	r3, [r3, #12]
 801be5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801be62:	b9b8      	cbnz	r0, 801be94 <_Balloc+0x68>
 801be64:	2101      	movs	r1, #1
 801be66:	fa01 f605 	lsl.w	r6, r1, r5
 801be6a:	1d72      	adds	r2, r6, #5
 801be6c:	0092      	lsls	r2, r2, #2
 801be6e:	4620      	mov	r0, r4
 801be70:	f002 fb0a 	bl	801e488 <_calloc_r>
 801be74:	b160      	cbz	r0, 801be90 <_Balloc+0x64>
 801be76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801be7a:	e00e      	b.n	801be9a <_Balloc+0x6e>
 801be7c:	2221      	movs	r2, #33	; 0x21
 801be7e:	2104      	movs	r1, #4
 801be80:	4620      	mov	r0, r4
 801be82:	f002 fb01 	bl	801e488 <_calloc_r>
 801be86:	69e3      	ldr	r3, [r4, #28]
 801be88:	60f0      	str	r0, [r6, #12]
 801be8a:	68db      	ldr	r3, [r3, #12]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d1e4      	bne.n	801be5a <_Balloc+0x2e>
 801be90:	2000      	movs	r0, #0
 801be92:	bd70      	pop	{r4, r5, r6, pc}
 801be94:	6802      	ldr	r2, [r0, #0]
 801be96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801be9a:	2300      	movs	r3, #0
 801be9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bea0:	e7f7      	b.n	801be92 <_Balloc+0x66>
 801bea2:	bf00      	nop
 801bea4:	0802081e 	.word	0x0802081e
 801bea8:	0802089e 	.word	0x0802089e

0801beac <_Bfree>:
 801beac:	b570      	push	{r4, r5, r6, lr}
 801beae:	69c6      	ldr	r6, [r0, #28]
 801beb0:	4605      	mov	r5, r0
 801beb2:	460c      	mov	r4, r1
 801beb4:	b976      	cbnz	r6, 801bed4 <_Bfree+0x28>
 801beb6:	2010      	movs	r0, #16
 801beb8:	f7fd fe1c 	bl	8019af4 <malloc>
 801bebc:	4602      	mov	r2, r0
 801bebe:	61e8      	str	r0, [r5, #28]
 801bec0:	b920      	cbnz	r0, 801becc <_Bfree+0x20>
 801bec2:	4b09      	ldr	r3, [pc, #36]	; (801bee8 <_Bfree+0x3c>)
 801bec4:	4809      	ldr	r0, [pc, #36]	; (801beec <_Bfree+0x40>)
 801bec6:	218f      	movs	r1, #143	; 0x8f
 801bec8:	f7fd fdf6 	bl	8019ab8 <__assert_func>
 801becc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bed0:	6006      	str	r6, [r0, #0]
 801bed2:	60c6      	str	r6, [r0, #12]
 801bed4:	b13c      	cbz	r4, 801bee6 <_Bfree+0x3a>
 801bed6:	69eb      	ldr	r3, [r5, #28]
 801bed8:	6862      	ldr	r2, [r4, #4]
 801beda:	68db      	ldr	r3, [r3, #12]
 801bedc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bee0:	6021      	str	r1, [r4, #0]
 801bee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801bee6:	bd70      	pop	{r4, r5, r6, pc}
 801bee8:	0802081e 	.word	0x0802081e
 801beec:	0802089e 	.word	0x0802089e

0801bef0 <__multadd>:
 801bef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bef4:	690d      	ldr	r5, [r1, #16]
 801bef6:	4607      	mov	r7, r0
 801bef8:	460c      	mov	r4, r1
 801befa:	461e      	mov	r6, r3
 801befc:	f101 0c14 	add.w	ip, r1, #20
 801bf00:	2000      	movs	r0, #0
 801bf02:	f8dc 3000 	ldr.w	r3, [ip]
 801bf06:	b299      	uxth	r1, r3
 801bf08:	fb02 6101 	mla	r1, r2, r1, r6
 801bf0c:	0c1e      	lsrs	r6, r3, #16
 801bf0e:	0c0b      	lsrs	r3, r1, #16
 801bf10:	fb02 3306 	mla	r3, r2, r6, r3
 801bf14:	b289      	uxth	r1, r1
 801bf16:	3001      	adds	r0, #1
 801bf18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801bf1c:	4285      	cmp	r5, r0
 801bf1e:	f84c 1b04 	str.w	r1, [ip], #4
 801bf22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bf26:	dcec      	bgt.n	801bf02 <__multadd+0x12>
 801bf28:	b30e      	cbz	r6, 801bf6e <__multadd+0x7e>
 801bf2a:	68a3      	ldr	r3, [r4, #8]
 801bf2c:	42ab      	cmp	r3, r5
 801bf2e:	dc19      	bgt.n	801bf64 <__multadd+0x74>
 801bf30:	6861      	ldr	r1, [r4, #4]
 801bf32:	4638      	mov	r0, r7
 801bf34:	3101      	adds	r1, #1
 801bf36:	f7ff ff79 	bl	801be2c <_Balloc>
 801bf3a:	4680      	mov	r8, r0
 801bf3c:	b928      	cbnz	r0, 801bf4a <__multadd+0x5a>
 801bf3e:	4602      	mov	r2, r0
 801bf40:	4b0c      	ldr	r3, [pc, #48]	; (801bf74 <__multadd+0x84>)
 801bf42:	480d      	ldr	r0, [pc, #52]	; (801bf78 <__multadd+0x88>)
 801bf44:	21ba      	movs	r1, #186	; 0xba
 801bf46:	f7fd fdb7 	bl	8019ab8 <__assert_func>
 801bf4a:	6922      	ldr	r2, [r4, #16]
 801bf4c:	3202      	adds	r2, #2
 801bf4e:	f104 010c 	add.w	r1, r4, #12
 801bf52:	0092      	lsls	r2, r2, #2
 801bf54:	300c      	adds	r0, #12
 801bf56:	f7ff f884 	bl	801b062 <memcpy>
 801bf5a:	4621      	mov	r1, r4
 801bf5c:	4638      	mov	r0, r7
 801bf5e:	f7ff ffa5 	bl	801beac <_Bfree>
 801bf62:	4644      	mov	r4, r8
 801bf64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bf68:	3501      	adds	r5, #1
 801bf6a:	615e      	str	r6, [r3, #20]
 801bf6c:	6125      	str	r5, [r4, #16]
 801bf6e:	4620      	mov	r0, r4
 801bf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf74:	0802088d 	.word	0x0802088d
 801bf78:	0802089e 	.word	0x0802089e

0801bf7c <__s2b>:
 801bf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf80:	460c      	mov	r4, r1
 801bf82:	4615      	mov	r5, r2
 801bf84:	461f      	mov	r7, r3
 801bf86:	2209      	movs	r2, #9
 801bf88:	3308      	adds	r3, #8
 801bf8a:	4606      	mov	r6, r0
 801bf8c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf90:	2100      	movs	r1, #0
 801bf92:	2201      	movs	r2, #1
 801bf94:	429a      	cmp	r2, r3
 801bf96:	db09      	blt.n	801bfac <__s2b+0x30>
 801bf98:	4630      	mov	r0, r6
 801bf9a:	f7ff ff47 	bl	801be2c <_Balloc>
 801bf9e:	b940      	cbnz	r0, 801bfb2 <__s2b+0x36>
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	4b19      	ldr	r3, [pc, #100]	; (801c008 <__s2b+0x8c>)
 801bfa4:	4819      	ldr	r0, [pc, #100]	; (801c00c <__s2b+0x90>)
 801bfa6:	21d3      	movs	r1, #211	; 0xd3
 801bfa8:	f7fd fd86 	bl	8019ab8 <__assert_func>
 801bfac:	0052      	lsls	r2, r2, #1
 801bfae:	3101      	adds	r1, #1
 801bfb0:	e7f0      	b.n	801bf94 <__s2b+0x18>
 801bfb2:	9b08      	ldr	r3, [sp, #32]
 801bfb4:	6143      	str	r3, [r0, #20]
 801bfb6:	2d09      	cmp	r5, #9
 801bfb8:	f04f 0301 	mov.w	r3, #1
 801bfbc:	6103      	str	r3, [r0, #16]
 801bfbe:	dd16      	ble.n	801bfee <__s2b+0x72>
 801bfc0:	f104 0909 	add.w	r9, r4, #9
 801bfc4:	46c8      	mov	r8, r9
 801bfc6:	442c      	add	r4, r5
 801bfc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bfcc:	4601      	mov	r1, r0
 801bfce:	3b30      	subs	r3, #48	; 0x30
 801bfd0:	220a      	movs	r2, #10
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	f7ff ff8c 	bl	801bef0 <__multadd>
 801bfd8:	45a0      	cmp	r8, r4
 801bfda:	d1f5      	bne.n	801bfc8 <__s2b+0x4c>
 801bfdc:	f1a5 0408 	sub.w	r4, r5, #8
 801bfe0:	444c      	add	r4, r9
 801bfe2:	1b2d      	subs	r5, r5, r4
 801bfe4:	1963      	adds	r3, r4, r5
 801bfe6:	42bb      	cmp	r3, r7
 801bfe8:	db04      	blt.n	801bff4 <__s2b+0x78>
 801bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfee:	340a      	adds	r4, #10
 801bff0:	2509      	movs	r5, #9
 801bff2:	e7f6      	b.n	801bfe2 <__s2b+0x66>
 801bff4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bff8:	4601      	mov	r1, r0
 801bffa:	3b30      	subs	r3, #48	; 0x30
 801bffc:	220a      	movs	r2, #10
 801bffe:	4630      	mov	r0, r6
 801c000:	f7ff ff76 	bl	801bef0 <__multadd>
 801c004:	e7ee      	b.n	801bfe4 <__s2b+0x68>
 801c006:	bf00      	nop
 801c008:	0802088d 	.word	0x0802088d
 801c00c:	0802089e 	.word	0x0802089e

0801c010 <__hi0bits>:
 801c010:	0c03      	lsrs	r3, r0, #16
 801c012:	041b      	lsls	r3, r3, #16
 801c014:	b9d3      	cbnz	r3, 801c04c <__hi0bits+0x3c>
 801c016:	0400      	lsls	r0, r0, #16
 801c018:	2310      	movs	r3, #16
 801c01a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c01e:	bf04      	itt	eq
 801c020:	0200      	lsleq	r0, r0, #8
 801c022:	3308      	addeq	r3, #8
 801c024:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c028:	bf04      	itt	eq
 801c02a:	0100      	lsleq	r0, r0, #4
 801c02c:	3304      	addeq	r3, #4
 801c02e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c032:	bf04      	itt	eq
 801c034:	0080      	lsleq	r0, r0, #2
 801c036:	3302      	addeq	r3, #2
 801c038:	2800      	cmp	r0, #0
 801c03a:	db05      	blt.n	801c048 <__hi0bits+0x38>
 801c03c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c040:	f103 0301 	add.w	r3, r3, #1
 801c044:	bf08      	it	eq
 801c046:	2320      	moveq	r3, #32
 801c048:	4618      	mov	r0, r3
 801c04a:	4770      	bx	lr
 801c04c:	2300      	movs	r3, #0
 801c04e:	e7e4      	b.n	801c01a <__hi0bits+0xa>

0801c050 <__lo0bits>:
 801c050:	6803      	ldr	r3, [r0, #0]
 801c052:	f013 0207 	ands.w	r2, r3, #7
 801c056:	d00c      	beq.n	801c072 <__lo0bits+0x22>
 801c058:	07d9      	lsls	r1, r3, #31
 801c05a:	d422      	bmi.n	801c0a2 <__lo0bits+0x52>
 801c05c:	079a      	lsls	r2, r3, #30
 801c05e:	bf49      	itett	mi
 801c060:	085b      	lsrmi	r3, r3, #1
 801c062:	089b      	lsrpl	r3, r3, #2
 801c064:	6003      	strmi	r3, [r0, #0]
 801c066:	2201      	movmi	r2, #1
 801c068:	bf5c      	itt	pl
 801c06a:	6003      	strpl	r3, [r0, #0]
 801c06c:	2202      	movpl	r2, #2
 801c06e:	4610      	mov	r0, r2
 801c070:	4770      	bx	lr
 801c072:	b299      	uxth	r1, r3
 801c074:	b909      	cbnz	r1, 801c07a <__lo0bits+0x2a>
 801c076:	0c1b      	lsrs	r3, r3, #16
 801c078:	2210      	movs	r2, #16
 801c07a:	b2d9      	uxtb	r1, r3
 801c07c:	b909      	cbnz	r1, 801c082 <__lo0bits+0x32>
 801c07e:	3208      	adds	r2, #8
 801c080:	0a1b      	lsrs	r3, r3, #8
 801c082:	0719      	lsls	r1, r3, #28
 801c084:	bf04      	itt	eq
 801c086:	091b      	lsreq	r3, r3, #4
 801c088:	3204      	addeq	r2, #4
 801c08a:	0799      	lsls	r1, r3, #30
 801c08c:	bf04      	itt	eq
 801c08e:	089b      	lsreq	r3, r3, #2
 801c090:	3202      	addeq	r2, #2
 801c092:	07d9      	lsls	r1, r3, #31
 801c094:	d403      	bmi.n	801c09e <__lo0bits+0x4e>
 801c096:	085b      	lsrs	r3, r3, #1
 801c098:	f102 0201 	add.w	r2, r2, #1
 801c09c:	d003      	beq.n	801c0a6 <__lo0bits+0x56>
 801c09e:	6003      	str	r3, [r0, #0]
 801c0a0:	e7e5      	b.n	801c06e <__lo0bits+0x1e>
 801c0a2:	2200      	movs	r2, #0
 801c0a4:	e7e3      	b.n	801c06e <__lo0bits+0x1e>
 801c0a6:	2220      	movs	r2, #32
 801c0a8:	e7e1      	b.n	801c06e <__lo0bits+0x1e>
	...

0801c0ac <__i2b>:
 801c0ac:	b510      	push	{r4, lr}
 801c0ae:	460c      	mov	r4, r1
 801c0b0:	2101      	movs	r1, #1
 801c0b2:	f7ff febb 	bl	801be2c <_Balloc>
 801c0b6:	4602      	mov	r2, r0
 801c0b8:	b928      	cbnz	r0, 801c0c6 <__i2b+0x1a>
 801c0ba:	4b05      	ldr	r3, [pc, #20]	; (801c0d0 <__i2b+0x24>)
 801c0bc:	4805      	ldr	r0, [pc, #20]	; (801c0d4 <__i2b+0x28>)
 801c0be:	f240 1145 	movw	r1, #325	; 0x145
 801c0c2:	f7fd fcf9 	bl	8019ab8 <__assert_func>
 801c0c6:	2301      	movs	r3, #1
 801c0c8:	6144      	str	r4, [r0, #20]
 801c0ca:	6103      	str	r3, [r0, #16]
 801c0cc:	bd10      	pop	{r4, pc}
 801c0ce:	bf00      	nop
 801c0d0:	0802088d 	.word	0x0802088d
 801c0d4:	0802089e 	.word	0x0802089e

0801c0d8 <__multiply>:
 801c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0dc:	4691      	mov	r9, r2
 801c0de:	690a      	ldr	r2, [r1, #16]
 801c0e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c0e4:	429a      	cmp	r2, r3
 801c0e6:	bfb8      	it	lt
 801c0e8:	460b      	movlt	r3, r1
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	bfbc      	itt	lt
 801c0ee:	464c      	movlt	r4, r9
 801c0f0:	4699      	movlt	r9, r3
 801c0f2:	6927      	ldr	r7, [r4, #16]
 801c0f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c0f8:	68a3      	ldr	r3, [r4, #8]
 801c0fa:	6861      	ldr	r1, [r4, #4]
 801c0fc:	eb07 060a 	add.w	r6, r7, sl
 801c100:	42b3      	cmp	r3, r6
 801c102:	b085      	sub	sp, #20
 801c104:	bfb8      	it	lt
 801c106:	3101      	addlt	r1, #1
 801c108:	f7ff fe90 	bl	801be2c <_Balloc>
 801c10c:	b930      	cbnz	r0, 801c11c <__multiply+0x44>
 801c10e:	4602      	mov	r2, r0
 801c110:	4b44      	ldr	r3, [pc, #272]	; (801c224 <__multiply+0x14c>)
 801c112:	4845      	ldr	r0, [pc, #276]	; (801c228 <__multiply+0x150>)
 801c114:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c118:	f7fd fcce 	bl	8019ab8 <__assert_func>
 801c11c:	f100 0514 	add.w	r5, r0, #20
 801c120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c124:	462b      	mov	r3, r5
 801c126:	2200      	movs	r2, #0
 801c128:	4543      	cmp	r3, r8
 801c12a:	d321      	bcc.n	801c170 <__multiply+0x98>
 801c12c:	f104 0314 	add.w	r3, r4, #20
 801c130:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c134:	f109 0314 	add.w	r3, r9, #20
 801c138:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c13c:	9202      	str	r2, [sp, #8]
 801c13e:	1b3a      	subs	r2, r7, r4
 801c140:	3a15      	subs	r2, #21
 801c142:	f022 0203 	bic.w	r2, r2, #3
 801c146:	3204      	adds	r2, #4
 801c148:	f104 0115 	add.w	r1, r4, #21
 801c14c:	428f      	cmp	r7, r1
 801c14e:	bf38      	it	cc
 801c150:	2204      	movcc	r2, #4
 801c152:	9201      	str	r2, [sp, #4]
 801c154:	9a02      	ldr	r2, [sp, #8]
 801c156:	9303      	str	r3, [sp, #12]
 801c158:	429a      	cmp	r2, r3
 801c15a:	d80c      	bhi.n	801c176 <__multiply+0x9e>
 801c15c:	2e00      	cmp	r6, #0
 801c15e:	dd03      	ble.n	801c168 <__multiply+0x90>
 801c160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c164:	2b00      	cmp	r3, #0
 801c166:	d05b      	beq.n	801c220 <__multiply+0x148>
 801c168:	6106      	str	r6, [r0, #16]
 801c16a:	b005      	add	sp, #20
 801c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c170:	f843 2b04 	str.w	r2, [r3], #4
 801c174:	e7d8      	b.n	801c128 <__multiply+0x50>
 801c176:	f8b3 a000 	ldrh.w	sl, [r3]
 801c17a:	f1ba 0f00 	cmp.w	sl, #0
 801c17e:	d024      	beq.n	801c1ca <__multiply+0xf2>
 801c180:	f104 0e14 	add.w	lr, r4, #20
 801c184:	46a9      	mov	r9, r5
 801c186:	f04f 0c00 	mov.w	ip, #0
 801c18a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c18e:	f8d9 1000 	ldr.w	r1, [r9]
 801c192:	fa1f fb82 	uxth.w	fp, r2
 801c196:	b289      	uxth	r1, r1
 801c198:	fb0a 110b 	mla	r1, sl, fp, r1
 801c19c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c1a0:	f8d9 2000 	ldr.w	r2, [r9]
 801c1a4:	4461      	add	r1, ip
 801c1a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c1aa:	fb0a c20b 	mla	r2, sl, fp, ip
 801c1ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c1b2:	b289      	uxth	r1, r1
 801c1b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c1b8:	4577      	cmp	r7, lr
 801c1ba:	f849 1b04 	str.w	r1, [r9], #4
 801c1be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c1c2:	d8e2      	bhi.n	801c18a <__multiply+0xb2>
 801c1c4:	9a01      	ldr	r2, [sp, #4]
 801c1c6:	f845 c002 	str.w	ip, [r5, r2]
 801c1ca:	9a03      	ldr	r2, [sp, #12]
 801c1cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c1d0:	3304      	adds	r3, #4
 801c1d2:	f1b9 0f00 	cmp.w	r9, #0
 801c1d6:	d021      	beq.n	801c21c <__multiply+0x144>
 801c1d8:	6829      	ldr	r1, [r5, #0]
 801c1da:	f104 0c14 	add.w	ip, r4, #20
 801c1de:	46ae      	mov	lr, r5
 801c1e0:	f04f 0a00 	mov.w	sl, #0
 801c1e4:	f8bc b000 	ldrh.w	fp, [ip]
 801c1e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c1ec:	fb09 220b 	mla	r2, r9, fp, r2
 801c1f0:	4452      	add	r2, sl
 801c1f2:	b289      	uxth	r1, r1
 801c1f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c1f8:	f84e 1b04 	str.w	r1, [lr], #4
 801c1fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c200:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c204:	f8be 1000 	ldrh.w	r1, [lr]
 801c208:	fb09 110a 	mla	r1, r9, sl, r1
 801c20c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c210:	4567      	cmp	r7, ip
 801c212:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c216:	d8e5      	bhi.n	801c1e4 <__multiply+0x10c>
 801c218:	9a01      	ldr	r2, [sp, #4]
 801c21a:	50a9      	str	r1, [r5, r2]
 801c21c:	3504      	adds	r5, #4
 801c21e:	e799      	b.n	801c154 <__multiply+0x7c>
 801c220:	3e01      	subs	r6, #1
 801c222:	e79b      	b.n	801c15c <__multiply+0x84>
 801c224:	0802088d 	.word	0x0802088d
 801c228:	0802089e 	.word	0x0802089e

0801c22c <__pow5mult>:
 801c22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c230:	4615      	mov	r5, r2
 801c232:	f012 0203 	ands.w	r2, r2, #3
 801c236:	4606      	mov	r6, r0
 801c238:	460f      	mov	r7, r1
 801c23a:	d007      	beq.n	801c24c <__pow5mult+0x20>
 801c23c:	4c25      	ldr	r4, [pc, #148]	; (801c2d4 <__pow5mult+0xa8>)
 801c23e:	3a01      	subs	r2, #1
 801c240:	2300      	movs	r3, #0
 801c242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c246:	f7ff fe53 	bl	801bef0 <__multadd>
 801c24a:	4607      	mov	r7, r0
 801c24c:	10ad      	asrs	r5, r5, #2
 801c24e:	d03d      	beq.n	801c2cc <__pow5mult+0xa0>
 801c250:	69f4      	ldr	r4, [r6, #28]
 801c252:	b97c      	cbnz	r4, 801c274 <__pow5mult+0x48>
 801c254:	2010      	movs	r0, #16
 801c256:	f7fd fc4d 	bl	8019af4 <malloc>
 801c25a:	4602      	mov	r2, r0
 801c25c:	61f0      	str	r0, [r6, #28]
 801c25e:	b928      	cbnz	r0, 801c26c <__pow5mult+0x40>
 801c260:	4b1d      	ldr	r3, [pc, #116]	; (801c2d8 <__pow5mult+0xac>)
 801c262:	481e      	ldr	r0, [pc, #120]	; (801c2dc <__pow5mult+0xb0>)
 801c264:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c268:	f7fd fc26 	bl	8019ab8 <__assert_func>
 801c26c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c270:	6004      	str	r4, [r0, #0]
 801c272:	60c4      	str	r4, [r0, #12]
 801c274:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c27c:	b94c      	cbnz	r4, 801c292 <__pow5mult+0x66>
 801c27e:	f240 2171 	movw	r1, #625	; 0x271
 801c282:	4630      	mov	r0, r6
 801c284:	f7ff ff12 	bl	801c0ac <__i2b>
 801c288:	2300      	movs	r3, #0
 801c28a:	f8c8 0008 	str.w	r0, [r8, #8]
 801c28e:	4604      	mov	r4, r0
 801c290:	6003      	str	r3, [r0, #0]
 801c292:	f04f 0900 	mov.w	r9, #0
 801c296:	07eb      	lsls	r3, r5, #31
 801c298:	d50a      	bpl.n	801c2b0 <__pow5mult+0x84>
 801c29a:	4639      	mov	r1, r7
 801c29c:	4622      	mov	r2, r4
 801c29e:	4630      	mov	r0, r6
 801c2a0:	f7ff ff1a 	bl	801c0d8 <__multiply>
 801c2a4:	4639      	mov	r1, r7
 801c2a6:	4680      	mov	r8, r0
 801c2a8:	4630      	mov	r0, r6
 801c2aa:	f7ff fdff 	bl	801beac <_Bfree>
 801c2ae:	4647      	mov	r7, r8
 801c2b0:	106d      	asrs	r5, r5, #1
 801c2b2:	d00b      	beq.n	801c2cc <__pow5mult+0xa0>
 801c2b4:	6820      	ldr	r0, [r4, #0]
 801c2b6:	b938      	cbnz	r0, 801c2c8 <__pow5mult+0x9c>
 801c2b8:	4622      	mov	r2, r4
 801c2ba:	4621      	mov	r1, r4
 801c2bc:	4630      	mov	r0, r6
 801c2be:	f7ff ff0b 	bl	801c0d8 <__multiply>
 801c2c2:	6020      	str	r0, [r4, #0]
 801c2c4:	f8c0 9000 	str.w	r9, [r0]
 801c2c8:	4604      	mov	r4, r0
 801c2ca:	e7e4      	b.n	801c296 <__pow5mult+0x6a>
 801c2cc:	4638      	mov	r0, r7
 801c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2d2:	bf00      	nop
 801c2d4:	080209e8 	.word	0x080209e8
 801c2d8:	0802081e 	.word	0x0802081e
 801c2dc:	0802089e 	.word	0x0802089e

0801c2e0 <__lshift>:
 801c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2e4:	460c      	mov	r4, r1
 801c2e6:	6849      	ldr	r1, [r1, #4]
 801c2e8:	6923      	ldr	r3, [r4, #16]
 801c2ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c2ee:	68a3      	ldr	r3, [r4, #8]
 801c2f0:	4607      	mov	r7, r0
 801c2f2:	4691      	mov	r9, r2
 801c2f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c2f8:	f108 0601 	add.w	r6, r8, #1
 801c2fc:	42b3      	cmp	r3, r6
 801c2fe:	db0b      	blt.n	801c318 <__lshift+0x38>
 801c300:	4638      	mov	r0, r7
 801c302:	f7ff fd93 	bl	801be2c <_Balloc>
 801c306:	4605      	mov	r5, r0
 801c308:	b948      	cbnz	r0, 801c31e <__lshift+0x3e>
 801c30a:	4602      	mov	r2, r0
 801c30c:	4b28      	ldr	r3, [pc, #160]	; (801c3b0 <__lshift+0xd0>)
 801c30e:	4829      	ldr	r0, [pc, #164]	; (801c3b4 <__lshift+0xd4>)
 801c310:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c314:	f7fd fbd0 	bl	8019ab8 <__assert_func>
 801c318:	3101      	adds	r1, #1
 801c31a:	005b      	lsls	r3, r3, #1
 801c31c:	e7ee      	b.n	801c2fc <__lshift+0x1c>
 801c31e:	2300      	movs	r3, #0
 801c320:	f100 0114 	add.w	r1, r0, #20
 801c324:	f100 0210 	add.w	r2, r0, #16
 801c328:	4618      	mov	r0, r3
 801c32a:	4553      	cmp	r3, sl
 801c32c:	db33      	blt.n	801c396 <__lshift+0xb6>
 801c32e:	6920      	ldr	r0, [r4, #16]
 801c330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c334:	f104 0314 	add.w	r3, r4, #20
 801c338:	f019 091f 	ands.w	r9, r9, #31
 801c33c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c344:	d02b      	beq.n	801c39e <__lshift+0xbe>
 801c346:	f1c9 0e20 	rsb	lr, r9, #32
 801c34a:	468a      	mov	sl, r1
 801c34c:	2200      	movs	r2, #0
 801c34e:	6818      	ldr	r0, [r3, #0]
 801c350:	fa00 f009 	lsl.w	r0, r0, r9
 801c354:	4310      	orrs	r0, r2
 801c356:	f84a 0b04 	str.w	r0, [sl], #4
 801c35a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c35e:	459c      	cmp	ip, r3
 801c360:	fa22 f20e 	lsr.w	r2, r2, lr
 801c364:	d8f3      	bhi.n	801c34e <__lshift+0x6e>
 801c366:	ebac 0304 	sub.w	r3, ip, r4
 801c36a:	3b15      	subs	r3, #21
 801c36c:	f023 0303 	bic.w	r3, r3, #3
 801c370:	3304      	adds	r3, #4
 801c372:	f104 0015 	add.w	r0, r4, #21
 801c376:	4584      	cmp	ip, r0
 801c378:	bf38      	it	cc
 801c37a:	2304      	movcc	r3, #4
 801c37c:	50ca      	str	r2, [r1, r3]
 801c37e:	b10a      	cbz	r2, 801c384 <__lshift+0xa4>
 801c380:	f108 0602 	add.w	r6, r8, #2
 801c384:	3e01      	subs	r6, #1
 801c386:	4638      	mov	r0, r7
 801c388:	612e      	str	r6, [r5, #16]
 801c38a:	4621      	mov	r1, r4
 801c38c:	f7ff fd8e 	bl	801beac <_Bfree>
 801c390:	4628      	mov	r0, r5
 801c392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c396:	f842 0f04 	str.w	r0, [r2, #4]!
 801c39a:	3301      	adds	r3, #1
 801c39c:	e7c5      	b.n	801c32a <__lshift+0x4a>
 801c39e:	3904      	subs	r1, #4
 801c3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3a4:	f841 2f04 	str.w	r2, [r1, #4]!
 801c3a8:	459c      	cmp	ip, r3
 801c3aa:	d8f9      	bhi.n	801c3a0 <__lshift+0xc0>
 801c3ac:	e7ea      	b.n	801c384 <__lshift+0xa4>
 801c3ae:	bf00      	nop
 801c3b0:	0802088d 	.word	0x0802088d
 801c3b4:	0802089e 	.word	0x0802089e

0801c3b8 <__mcmp>:
 801c3b8:	b530      	push	{r4, r5, lr}
 801c3ba:	6902      	ldr	r2, [r0, #16]
 801c3bc:	690c      	ldr	r4, [r1, #16]
 801c3be:	1b12      	subs	r2, r2, r4
 801c3c0:	d10e      	bne.n	801c3e0 <__mcmp+0x28>
 801c3c2:	f100 0314 	add.w	r3, r0, #20
 801c3c6:	3114      	adds	r1, #20
 801c3c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c3cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c3d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c3d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c3d8:	42a5      	cmp	r5, r4
 801c3da:	d003      	beq.n	801c3e4 <__mcmp+0x2c>
 801c3dc:	d305      	bcc.n	801c3ea <__mcmp+0x32>
 801c3de:	2201      	movs	r2, #1
 801c3e0:	4610      	mov	r0, r2
 801c3e2:	bd30      	pop	{r4, r5, pc}
 801c3e4:	4283      	cmp	r3, r0
 801c3e6:	d3f3      	bcc.n	801c3d0 <__mcmp+0x18>
 801c3e8:	e7fa      	b.n	801c3e0 <__mcmp+0x28>
 801c3ea:	f04f 32ff 	mov.w	r2, #4294967295
 801c3ee:	e7f7      	b.n	801c3e0 <__mcmp+0x28>

0801c3f0 <__mdiff>:
 801c3f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f4:	460c      	mov	r4, r1
 801c3f6:	4606      	mov	r6, r0
 801c3f8:	4611      	mov	r1, r2
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	4690      	mov	r8, r2
 801c3fe:	f7ff ffdb 	bl	801c3b8 <__mcmp>
 801c402:	1e05      	subs	r5, r0, #0
 801c404:	d110      	bne.n	801c428 <__mdiff+0x38>
 801c406:	4629      	mov	r1, r5
 801c408:	4630      	mov	r0, r6
 801c40a:	f7ff fd0f 	bl	801be2c <_Balloc>
 801c40e:	b930      	cbnz	r0, 801c41e <__mdiff+0x2e>
 801c410:	4b3a      	ldr	r3, [pc, #232]	; (801c4fc <__mdiff+0x10c>)
 801c412:	4602      	mov	r2, r0
 801c414:	f240 2137 	movw	r1, #567	; 0x237
 801c418:	4839      	ldr	r0, [pc, #228]	; (801c500 <__mdiff+0x110>)
 801c41a:	f7fd fb4d 	bl	8019ab8 <__assert_func>
 801c41e:	2301      	movs	r3, #1
 801c420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c428:	bfa4      	itt	ge
 801c42a:	4643      	movge	r3, r8
 801c42c:	46a0      	movge	r8, r4
 801c42e:	4630      	mov	r0, r6
 801c430:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c434:	bfa6      	itte	ge
 801c436:	461c      	movge	r4, r3
 801c438:	2500      	movge	r5, #0
 801c43a:	2501      	movlt	r5, #1
 801c43c:	f7ff fcf6 	bl	801be2c <_Balloc>
 801c440:	b920      	cbnz	r0, 801c44c <__mdiff+0x5c>
 801c442:	4b2e      	ldr	r3, [pc, #184]	; (801c4fc <__mdiff+0x10c>)
 801c444:	4602      	mov	r2, r0
 801c446:	f240 2145 	movw	r1, #581	; 0x245
 801c44a:	e7e5      	b.n	801c418 <__mdiff+0x28>
 801c44c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c450:	6926      	ldr	r6, [r4, #16]
 801c452:	60c5      	str	r5, [r0, #12]
 801c454:	f104 0914 	add.w	r9, r4, #20
 801c458:	f108 0514 	add.w	r5, r8, #20
 801c45c:	f100 0e14 	add.w	lr, r0, #20
 801c460:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c464:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c468:	f108 0210 	add.w	r2, r8, #16
 801c46c:	46f2      	mov	sl, lr
 801c46e:	2100      	movs	r1, #0
 801c470:	f859 3b04 	ldr.w	r3, [r9], #4
 801c474:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c478:	fa11 f88b 	uxtah	r8, r1, fp
 801c47c:	b299      	uxth	r1, r3
 801c47e:	0c1b      	lsrs	r3, r3, #16
 801c480:	eba8 0801 	sub.w	r8, r8, r1
 801c484:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c488:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c48c:	fa1f f888 	uxth.w	r8, r8
 801c490:	1419      	asrs	r1, r3, #16
 801c492:	454e      	cmp	r6, r9
 801c494:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c498:	f84a 3b04 	str.w	r3, [sl], #4
 801c49c:	d8e8      	bhi.n	801c470 <__mdiff+0x80>
 801c49e:	1b33      	subs	r3, r6, r4
 801c4a0:	3b15      	subs	r3, #21
 801c4a2:	f023 0303 	bic.w	r3, r3, #3
 801c4a6:	3304      	adds	r3, #4
 801c4a8:	3415      	adds	r4, #21
 801c4aa:	42a6      	cmp	r6, r4
 801c4ac:	bf38      	it	cc
 801c4ae:	2304      	movcc	r3, #4
 801c4b0:	441d      	add	r5, r3
 801c4b2:	4473      	add	r3, lr
 801c4b4:	469e      	mov	lr, r3
 801c4b6:	462e      	mov	r6, r5
 801c4b8:	4566      	cmp	r6, ip
 801c4ba:	d30e      	bcc.n	801c4da <__mdiff+0xea>
 801c4bc:	f10c 0203 	add.w	r2, ip, #3
 801c4c0:	1b52      	subs	r2, r2, r5
 801c4c2:	f022 0203 	bic.w	r2, r2, #3
 801c4c6:	3d03      	subs	r5, #3
 801c4c8:	45ac      	cmp	ip, r5
 801c4ca:	bf38      	it	cc
 801c4cc:	2200      	movcc	r2, #0
 801c4ce:	4413      	add	r3, r2
 801c4d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c4d4:	b17a      	cbz	r2, 801c4f6 <__mdiff+0x106>
 801c4d6:	6107      	str	r7, [r0, #16]
 801c4d8:	e7a4      	b.n	801c424 <__mdiff+0x34>
 801c4da:	f856 8b04 	ldr.w	r8, [r6], #4
 801c4de:	fa11 f288 	uxtah	r2, r1, r8
 801c4e2:	1414      	asrs	r4, r2, #16
 801c4e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c4e8:	b292      	uxth	r2, r2
 801c4ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c4ee:	f84e 2b04 	str.w	r2, [lr], #4
 801c4f2:	1421      	asrs	r1, r4, #16
 801c4f4:	e7e0      	b.n	801c4b8 <__mdiff+0xc8>
 801c4f6:	3f01      	subs	r7, #1
 801c4f8:	e7ea      	b.n	801c4d0 <__mdiff+0xe0>
 801c4fa:	bf00      	nop
 801c4fc:	0802088d 	.word	0x0802088d
 801c500:	0802089e 	.word	0x0802089e

0801c504 <__ulp>:
 801c504:	b082      	sub	sp, #8
 801c506:	ed8d 0b00 	vstr	d0, [sp]
 801c50a:	9a01      	ldr	r2, [sp, #4]
 801c50c:	4b0f      	ldr	r3, [pc, #60]	; (801c54c <__ulp+0x48>)
 801c50e:	4013      	ands	r3, r2
 801c510:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801c514:	2b00      	cmp	r3, #0
 801c516:	dc08      	bgt.n	801c52a <__ulp+0x26>
 801c518:	425b      	negs	r3, r3
 801c51a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801c51e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c522:	da04      	bge.n	801c52e <__ulp+0x2a>
 801c524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801c528:	4113      	asrs	r3, r2
 801c52a:	2200      	movs	r2, #0
 801c52c:	e008      	b.n	801c540 <__ulp+0x3c>
 801c52e:	f1a2 0314 	sub.w	r3, r2, #20
 801c532:	2b1e      	cmp	r3, #30
 801c534:	bfda      	itte	le
 801c536:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801c53a:	40da      	lsrle	r2, r3
 801c53c:	2201      	movgt	r2, #1
 801c53e:	2300      	movs	r3, #0
 801c540:	4619      	mov	r1, r3
 801c542:	4610      	mov	r0, r2
 801c544:	ec41 0b10 	vmov	d0, r0, r1
 801c548:	b002      	add	sp, #8
 801c54a:	4770      	bx	lr
 801c54c:	7ff00000 	.word	0x7ff00000

0801c550 <__b2d>:
 801c550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c554:	6906      	ldr	r6, [r0, #16]
 801c556:	f100 0814 	add.w	r8, r0, #20
 801c55a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c55e:	1f37      	subs	r7, r6, #4
 801c560:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c564:	4610      	mov	r0, r2
 801c566:	f7ff fd53 	bl	801c010 <__hi0bits>
 801c56a:	f1c0 0320 	rsb	r3, r0, #32
 801c56e:	280a      	cmp	r0, #10
 801c570:	600b      	str	r3, [r1, #0]
 801c572:	491b      	ldr	r1, [pc, #108]	; (801c5e0 <__b2d+0x90>)
 801c574:	dc15      	bgt.n	801c5a2 <__b2d+0x52>
 801c576:	f1c0 0c0b 	rsb	ip, r0, #11
 801c57a:	fa22 f30c 	lsr.w	r3, r2, ip
 801c57e:	45b8      	cmp	r8, r7
 801c580:	ea43 0501 	orr.w	r5, r3, r1
 801c584:	bf34      	ite	cc
 801c586:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c58a:	2300      	movcs	r3, #0
 801c58c:	3015      	adds	r0, #21
 801c58e:	fa02 f000 	lsl.w	r0, r2, r0
 801c592:	fa23 f30c 	lsr.w	r3, r3, ip
 801c596:	4303      	orrs	r3, r0
 801c598:	461c      	mov	r4, r3
 801c59a:	ec45 4b10 	vmov	d0, r4, r5
 801c59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5a2:	45b8      	cmp	r8, r7
 801c5a4:	bf3a      	itte	cc
 801c5a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c5aa:	f1a6 0708 	subcc.w	r7, r6, #8
 801c5ae:	2300      	movcs	r3, #0
 801c5b0:	380b      	subs	r0, #11
 801c5b2:	d012      	beq.n	801c5da <__b2d+0x8a>
 801c5b4:	f1c0 0120 	rsb	r1, r0, #32
 801c5b8:	fa23 f401 	lsr.w	r4, r3, r1
 801c5bc:	4082      	lsls	r2, r0
 801c5be:	4322      	orrs	r2, r4
 801c5c0:	4547      	cmp	r7, r8
 801c5c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801c5c6:	bf8c      	ite	hi
 801c5c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c5cc:	2200      	movls	r2, #0
 801c5ce:	4083      	lsls	r3, r0
 801c5d0:	40ca      	lsrs	r2, r1
 801c5d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c5d6:	4313      	orrs	r3, r2
 801c5d8:	e7de      	b.n	801c598 <__b2d+0x48>
 801c5da:	ea42 0501 	orr.w	r5, r2, r1
 801c5de:	e7db      	b.n	801c598 <__b2d+0x48>
 801c5e0:	3ff00000 	.word	0x3ff00000

0801c5e4 <__d2b>:
 801c5e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c5e8:	460f      	mov	r7, r1
 801c5ea:	2101      	movs	r1, #1
 801c5ec:	ec59 8b10 	vmov	r8, r9, d0
 801c5f0:	4616      	mov	r6, r2
 801c5f2:	f7ff fc1b 	bl	801be2c <_Balloc>
 801c5f6:	4604      	mov	r4, r0
 801c5f8:	b930      	cbnz	r0, 801c608 <__d2b+0x24>
 801c5fa:	4602      	mov	r2, r0
 801c5fc:	4b24      	ldr	r3, [pc, #144]	; (801c690 <__d2b+0xac>)
 801c5fe:	4825      	ldr	r0, [pc, #148]	; (801c694 <__d2b+0xb0>)
 801c600:	f240 310f 	movw	r1, #783	; 0x30f
 801c604:	f7fd fa58 	bl	8019ab8 <__assert_func>
 801c608:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c60c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c610:	bb2d      	cbnz	r5, 801c65e <__d2b+0x7a>
 801c612:	9301      	str	r3, [sp, #4]
 801c614:	f1b8 0300 	subs.w	r3, r8, #0
 801c618:	d026      	beq.n	801c668 <__d2b+0x84>
 801c61a:	4668      	mov	r0, sp
 801c61c:	9300      	str	r3, [sp, #0]
 801c61e:	f7ff fd17 	bl	801c050 <__lo0bits>
 801c622:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c626:	b1e8      	cbz	r0, 801c664 <__d2b+0x80>
 801c628:	f1c0 0320 	rsb	r3, r0, #32
 801c62c:	fa02 f303 	lsl.w	r3, r2, r3
 801c630:	430b      	orrs	r3, r1
 801c632:	40c2      	lsrs	r2, r0
 801c634:	6163      	str	r3, [r4, #20]
 801c636:	9201      	str	r2, [sp, #4]
 801c638:	9b01      	ldr	r3, [sp, #4]
 801c63a:	61a3      	str	r3, [r4, #24]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	bf14      	ite	ne
 801c640:	2202      	movne	r2, #2
 801c642:	2201      	moveq	r2, #1
 801c644:	6122      	str	r2, [r4, #16]
 801c646:	b1bd      	cbz	r5, 801c678 <__d2b+0x94>
 801c648:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c64c:	4405      	add	r5, r0
 801c64e:	603d      	str	r5, [r7, #0]
 801c650:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c654:	6030      	str	r0, [r6, #0]
 801c656:	4620      	mov	r0, r4
 801c658:	b003      	add	sp, #12
 801c65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c65e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c662:	e7d6      	b.n	801c612 <__d2b+0x2e>
 801c664:	6161      	str	r1, [r4, #20]
 801c666:	e7e7      	b.n	801c638 <__d2b+0x54>
 801c668:	a801      	add	r0, sp, #4
 801c66a:	f7ff fcf1 	bl	801c050 <__lo0bits>
 801c66e:	9b01      	ldr	r3, [sp, #4]
 801c670:	6163      	str	r3, [r4, #20]
 801c672:	3020      	adds	r0, #32
 801c674:	2201      	movs	r2, #1
 801c676:	e7e5      	b.n	801c644 <__d2b+0x60>
 801c678:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c67c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c680:	6038      	str	r0, [r7, #0]
 801c682:	6918      	ldr	r0, [r3, #16]
 801c684:	f7ff fcc4 	bl	801c010 <__hi0bits>
 801c688:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c68c:	e7e2      	b.n	801c654 <__d2b+0x70>
 801c68e:	bf00      	nop
 801c690:	0802088d 	.word	0x0802088d
 801c694:	0802089e 	.word	0x0802089e

0801c698 <__ratio>:
 801c698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c69c:	4688      	mov	r8, r1
 801c69e:	4669      	mov	r1, sp
 801c6a0:	4681      	mov	r9, r0
 801c6a2:	f7ff ff55 	bl	801c550 <__b2d>
 801c6a6:	a901      	add	r1, sp, #4
 801c6a8:	4640      	mov	r0, r8
 801c6aa:	ec55 4b10 	vmov	r4, r5, d0
 801c6ae:	f7ff ff4f 	bl	801c550 <__b2d>
 801c6b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c6b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c6ba:	eba3 0c02 	sub.w	ip, r3, r2
 801c6be:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c6c2:	1a9b      	subs	r3, r3, r2
 801c6c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c6c8:	ec51 0b10 	vmov	r0, r1, d0
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	bfd6      	itet	le
 801c6d0:	460a      	movle	r2, r1
 801c6d2:	462a      	movgt	r2, r5
 801c6d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c6d8:	468b      	mov	fp, r1
 801c6da:	462f      	mov	r7, r5
 801c6dc:	bfd4      	ite	le
 801c6de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c6e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	ee10 2a10 	vmov	r2, s0
 801c6ec:	465b      	mov	r3, fp
 801c6ee:	4639      	mov	r1, r7
 801c6f0:	f7e4 f904 	bl	80008fc <__aeabi_ddiv>
 801c6f4:	ec41 0b10 	vmov	d0, r0, r1
 801c6f8:	b003      	add	sp, #12
 801c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6fe <__copybits>:
 801c6fe:	3901      	subs	r1, #1
 801c700:	b570      	push	{r4, r5, r6, lr}
 801c702:	1149      	asrs	r1, r1, #5
 801c704:	6914      	ldr	r4, [r2, #16]
 801c706:	3101      	adds	r1, #1
 801c708:	f102 0314 	add.w	r3, r2, #20
 801c70c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c710:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c714:	1f05      	subs	r5, r0, #4
 801c716:	42a3      	cmp	r3, r4
 801c718:	d30c      	bcc.n	801c734 <__copybits+0x36>
 801c71a:	1aa3      	subs	r3, r4, r2
 801c71c:	3b11      	subs	r3, #17
 801c71e:	f023 0303 	bic.w	r3, r3, #3
 801c722:	3211      	adds	r2, #17
 801c724:	42a2      	cmp	r2, r4
 801c726:	bf88      	it	hi
 801c728:	2300      	movhi	r3, #0
 801c72a:	4418      	add	r0, r3
 801c72c:	2300      	movs	r3, #0
 801c72e:	4288      	cmp	r0, r1
 801c730:	d305      	bcc.n	801c73e <__copybits+0x40>
 801c732:	bd70      	pop	{r4, r5, r6, pc}
 801c734:	f853 6b04 	ldr.w	r6, [r3], #4
 801c738:	f845 6f04 	str.w	r6, [r5, #4]!
 801c73c:	e7eb      	b.n	801c716 <__copybits+0x18>
 801c73e:	f840 3b04 	str.w	r3, [r0], #4
 801c742:	e7f4      	b.n	801c72e <__copybits+0x30>

0801c744 <__any_on>:
 801c744:	f100 0214 	add.w	r2, r0, #20
 801c748:	6900      	ldr	r0, [r0, #16]
 801c74a:	114b      	asrs	r3, r1, #5
 801c74c:	4298      	cmp	r0, r3
 801c74e:	b510      	push	{r4, lr}
 801c750:	db11      	blt.n	801c776 <__any_on+0x32>
 801c752:	dd0a      	ble.n	801c76a <__any_on+0x26>
 801c754:	f011 011f 	ands.w	r1, r1, #31
 801c758:	d007      	beq.n	801c76a <__any_on+0x26>
 801c75a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c75e:	fa24 f001 	lsr.w	r0, r4, r1
 801c762:	fa00 f101 	lsl.w	r1, r0, r1
 801c766:	428c      	cmp	r4, r1
 801c768:	d10b      	bne.n	801c782 <__any_on+0x3e>
 801c76a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c76e:	4293      	cmp	r3, r2
 801c770:	d803      	bhi.n	801c77a <__any_on+0x36>
 801c772:	2000      	movs	r0, #0
 801c774:	bd10      	pop	{r4, pc}
 801c776:	4603      	mov	r3, r0
 801c778:	e7f7      	b.n	801c76a <__any_on+0x26>
 801c77a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c77e:	2900      	cmp	r1, #0
 801c780:	d0f5      	beq.n	801c76e <__any_on+0x2a>
 801c782:	2001      	movs	r0, #1
 801c784:	e7f6      	b.n	801c774 <__any_on+0x30>

0801c786 <sulp>:
 801c786:	b570      	push	{r4, r5, r6, lr}
 801c788:	4604      	mov	r4, r0
 801c78a:	460d      	mov	r5, r1
 801c78c:	ec45 4b10 	vmov	d0, r4, r5
 801c790:	4616      	mov	r6, r2
 801c792:	f7ff feb7 	bl	801c504 <__ulp>
 801c796:	ec51 0b10 	vmov	r0, r1, d0
 801c79a:	b17e      	cbz	r6, 801c7bc <sulp+0x36>
 801c79c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c7a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	dd09      	ble.n	801c7bc <sulp+0x36>
 801c7a8:	051b      	lsls	r3, r3, #20
 801c7aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c7ae:	2400      	movs	r4, #0
 801c7b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c7b4:	4622      	mov	r2, r4
 801c7b6:	462b      	mov	r3, r5
 801c7b8:	f7e3 ff76 	bl	80006a8 <__aeabi_dmul>
 801c7bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c7c0 <_strtod_l>:
 801c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c4:	ed2d 8b02 	vpush	{d8}
 801c7c8:	b09b      	sub	sp, #108	; 0x6c
 801c7ca:	4604      	mov	r4, r0
 801c7cc:	9213      	str	r2, [sp, #76]	; 0x4c
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	9216      	str	r2, [sp, #88]	; 0x58
 801c7d2:	460d      	mov	r5, r1
 801c7d4:	f04f 0800 	mov.w	r8, #0
 801c7d8:	f04f 0900 	mov.w	r9, #0
 801c7dc:	460a      	mov	r2, r1
 801c7de:	9215      	str	r2, [sp, #84]	; 0x54
 801c7e0:	7811      	ldrb	r1, [r2, #0]
 801c7e2:	292b      	cmp	r1, #43	; 0x2b
 801c7e4:	d04c      	beq.n	801c880 <_strtod_l+0xc0>
 801c7e6:	d83a      	bhi.n	801c85e <_strtod_l+0x9e>
 801c7e8:	290d      	cmp	r1, #13
 801c7ea:	d834      	bhi.n	801c856 <_strtod_l+0x96>
 801c7ec:	2908      	cmp	r1, #8
 801c7ee:	d834      	bhi.n	801c85a <_strtod_l+0x9a>
 801c7f0:	2900      	cmp	r1, #0
 801c7f2:	d03d      	beq.n	801c870 <_strtod_l+0xb0>
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	920a      	str	r2, [sp, #40]	; 0x28
 801c7f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c7fa:	7832      	ldrb	r2, [r6, #0]
 801c7fc:	2a30      	cmp	r2, #48	; 0x30
 801c7fe:	f040 80b4 	bne.w	801c96a <_strtod_l+0x1aa>
 801c802:	7872      	ldrb	r2, [r6, #1]
 801c804:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801c808:	2a58      	cmp	r2, #88	; 0x58
 801c80a:	d170      	bne.n	801c8ee <_strtod_l+0x12e>
 801c80c:	9302      	str	r3, [sp, #8]
 801c80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c810:	9301      	str	r3, [sp, #4]
 801c812:	ab16      	add	r3, sp, #88	; 0x58
 801c814:	9300      	str	r3, [sp, #0]
 801c816:	4a8e      	ldr	r2, [pc, #568]	; (801ca50 <_strtod_l+0x290>)
 801c818:	ab17      	add	r3, sp, #92	; 0x5c
 801c81a:	a915      	add	r1, sp, #84	; 0x54
 801c81c:	4620      	mov	r0, r4
 801c81e:	f001 feb1 	bl	801e584 <__gethex>
 801c822:	f010 070f 	ands.w	r7, r0, #15
 801c826:	4605      	mov	r5, r0
 801c828:	d005      	beq.n	801c836 <_strtod_l+0x76>
 801c82a:	2f06      	cmp	r7, #6
 801c82c:	d12a      	bne.n	801c884 <_strtod_l+0xc4>
 801c82e:	3601      	adds	r6, #1
 801c830:	2300      	movs	r3, #0
 801c832:	9615      	str	r6, [sp, #84]	; 0x54
 801c834:	930a      	str	r3, [sp, #40]	; 0x28
 801c836:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c838:	2b00      	cmp	r3, #0
 801c83a:	f040 857f 	bne.w	801d33c <_strtod_l+0xb7c>
 801c83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c840:	b1db      	cbz	r3, 801c87a <_strtod_l+0xba>
 801c842:	4642      	mov	r2, r8
 801c844:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c848:	ec43 2b10 	vmov	d0, r2, r3
 801c84c:	b01b      	add	sp, #108	; 0x6c
 801c84e:	ecbd 8b02 	vpop	{d8}
 801c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c856:	2920      	cmp	r1, #32
 801c858:	d1cc      	bne.n	801c7f4 <_strtod_l+0x34>
 801c85a:	3201      	adds	r2, #1
 801c85c:	e7bf      	b.n	801c7de <_strtod_l+0x1e>
 801c85e:	292d      	cmp	r1, #45	; 0x2d
 801c860:	d1c8      	bne.n	801c7f4 <_strtod_l+0x34>
 801c862:	2101      	movs	r1, #1
 801c864:	910a      	str	r1, [sp, #40]	; 0x28
 801c866:	1c51      	adds	r1, r2, #1
 801c868:	9115      	str	r1, [sp, #84]	; 0x54
 801c86a:	7852      	ldrb	r2, [r2, #1]
 801c86c:	2a00      	cmp	r2, #0
 801c86e:	d1c3      	bne.n	801c7f8 <_strtod_l+0x38>
 801c870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c872:	9515      	str	r5, [sp, #84]	; 0x54
 801c874:	2b00      	cmp	r3, #0
 801c876:	f040 855f 	bne.w	801d338 <_strtod_l+0xb78>
 801c87a:	4642      	mov	r2, r8
 801c87c:	464b      	mov	r3, r9
 801c87e:	e7e3      	b.n	801c848 <_strtod_l+0x88>
 801c880:	2100      	movs	r1, #0
 801c882:	e7ef      	b.n	801c864 <_strtod_l+0xa4>
 801c884:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c886:	b13a      	cbz	r2, 801c898 <_strtod_l+0xd8>
 801c888:	2135      	movs	r1, #53	; 0x35
 801c88a:	a818      	add	r0, sp, #96	; 0x60
 801c88c:	f7ff ff37 	bl	801c6fe <__copybits>
 801c890:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c892:	4620      	mov	r0, r4
 801c894:	f7ff fb0a 	bl	801beac <_Bfree>
 801c898:	3f01      	subs	r7, #1
 801c89a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c89c:	2f04      	cmp	r7, #4
 801c89e:	d806      	bhi.n	801c8ae <_strtod_l+0xee>
 801c8a0:	e8df f007 	tbb	[pc, r7]
 801c8a4:	201d0314 	.word	0x201d0314
 801c8a8:	14          	.byte	0x14
 801c8a9:	00          	.byte	0x00
 801c8aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801c8ae:	05e9      	lsls	r1, r5, #23
 801c8b0:	bf48      	it	mi
 801c8b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801c8b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c8ba:	0d1b      	lsrs	r3, r3, #20
 801c8bc:	051b      	lsls	r3, r3, #20
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d1b9      	bne.n	801c836 <_strtod_l+0x76>
 801c8c2:	f7fe fba1 	bl	801b008 <__errno>
 801c8c6:	2322      	movs	r3, #34	; 0x22
 801c8c8:	6003      	str	r3, [r0, #0]
 801c8ca:	e7b4      	b.n	801c836 <_strtod_l+0x76>
 801c8cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801c8d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c8d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c8d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c8dc:	e7e7      	b.n	801c8ae <_strtod_l+0xee>
 801c8de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ca58 <_strtod_l+0x298>
 801c8e2:	e7e4      	b.n	801c8ae <_strtod_l+0xee>
 801c8e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c8e8:	f04f 38ff 	mov.w	r8, #4294967295
 801c8ec:	e7df      	b.n	801c8ae <_strtod_l+0xee>
 801c8ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c8f0:	1c5a      	adds	r2, r3, #1
 801c8f2:	9215      	str	r2, [sp, #84]	; 0x54
 801c8f4:	785b      	ldrb	r3, [r3, #1]
 801c8f6:	2b30      	cmp	r3, #48	; 0x30
 801c8f8:	d0f9      	beq.n	801c8ee <_strtod_l+0x12e>
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d09b      	beq.n	801c836 <_strtod_l+0x76>
 801c8fe:	2301      	movs	r3, #1
 801c900:	f04f 0a00 	mov.w	sl, #0
 801c904:	9304      	str	r3, [sp, #16]
 801c906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c908:	930b      	str	r3, [sp, #44]	; 0x2c
 801c90a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c90e:	46d3      	mov	fp, sl
 801c910:	220a      	movs	r2, #10
 801c912:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c914:	7806      	ldrb	r6, [r0, #0]
 801c916:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c91a:	b2d9      	uxtb	r1, r3
 801c91c:	2909      	cmp	r1, #9
 801c91e:	d926      	bls.n	801c96e <_strtod_l+0x1ae>
 801c920:	494c      	ldr	r1, [pc, #304]	; (801ca54 <_strtod_l+0x294>)
 801c922:	2201      	movs	r2, #1
 801c924:	f001 fd52 	bl	801e3cc <strncmp>
 801c928:	2800      	cmp	r0, #0
 801c92a:	d030      	beq.n	801c98e <_strtod_l+0x1ce>
 801c92c:	2000      	movs	r0, #0
 801c92e:	4632      	mov	r2, r6
 801c930:	9005      	str	r0, [sp, #20]
 801c932:	465e      	mov	r6, fp
 801c934:	4603      	mov	r3, r0
 801c936:	2a65      	cmp	r2, #101	; 0x65
 801c938:	d001      	beq.n	801c93e <_strtod_l+0x17e>
 801c93a:	2a45      	cmp	r2, #69	; 0x45
 801c93c:	d113      	bne.n	801c966 <_strtod_l+0x1a6>
 801c93e:	b91e      	cbnz	r6, 801c948 <_strtod_l+0x188>
 801c940:	9a04      	ldr	r2, [sp, #16]
 801c942:	4302      	orrs	r2, r0
 801c944:	d094      	beq.n	801c870 <_strtod_l+0xb0>
 801c946:	2600      	movs	r6, #0
 801c948:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c94a:	1c6a      	adds	r2, r5, #1
 801c94c:	9215      	str	r2, [sp, #84]	; 0x54
 801c94e:	786a      	ldrb	r2, [r5, #1]
 801c950:	2a2b      	cmp	r2, #43	; 0x2b
 801c952:	d074      	beq.n	801ca3e <_strtod_l+0x27e>
 801c954:	2a2d      	cmp	r2, #45	; 0x2d
 801c956:	d078      	beq.n	801ca4a <_strtod_l+0x28a>
 801c958:	f04f 0c00 	mov.w	ip, #0
 801c95c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c960:	2909      	cmp	r1, #9
 801c962:	d97f      	bls.n	801ca64 <_strtod_l+0x2a4>
 801c964:	9515      	str	r5, [sp, #84]	; 0x54
 801c966:	2700      	movs	r7, #0
 801c968:	e09e      	b.n	801caa8 <_strtod_l+0x2e8>
 801c96a:	2300      	movs	r3, #0
 801c96c:	e7c8      	b.n	801c900 <_strtod_l+0x140>
 801c96e:	f1bb 0f08 	cmp.w	fp, #8
 801c972:	bfd8      	it	le
 801c974:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801c976:	f100 0001 	add.w	r0, r0, #1
 801c97a:	bfda      	itte	le
 801c97c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c980:	9309      	strle	r3, [sp, #36]	; 0x24
 801c982:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801c986:	f10b 0b01 	add.w	fp, fp, #1
 801c98a:	9015      	str	r0, [sp, #84]	; 0x54
 801c98c:	e7c1      	b.n	801c912 <_strtod_l+0x152>
 801c98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c990:	1c5a      	adds	r2, r3, #1
 801c992:	9215      	str	r2, [sp, #84]	; 0x54
 801c994:	785a      	ldrb	r2, [r3, #1]
 801c996:	f1bb 0f00 	cmp.w	fp, #0
 801c99a:	d037      	beq.n	801ca0c <_strtod_l+0x24c>
 801c99c:	9005      	str	r0, [sp, #20]
 801c99e:	465e      	mov	r6, fp
 801c9a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c9a4:	2b09      	cmp	r3, #9
 801c9a6:	d912      	bls.n	801c9ce <_strtod_l+0x20e>
 801c9a8:	2301      	movs	r3, #1
 801c9aa:	e7c4      	b.n	801c936 <_strtod_l+0x176>
 801c9ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c9ae:	1c5a      	adds	r2, r3, #1
 801c9b0:	9215      	str	r2, [sp, #84]	; 0x54
 801c9b2:	785a      	ldrb	r2, [r3, #1]
 801c9b4:	3001      	adds	r0, #1
 801c9b6:	2a30      	cmp	r2, #48	; 0x30
 801c9b8:	d0f8      	beq.n	801c9ac <_strtod_l+0x1ec>
 801c9ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c9be:	2b08      	cmp	r3, #8
 801c9c0:	f200 84c1 	bhi.w	801d346 <_strtod_l+0xb86>
 801c9c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c9c6:	9005      	str	r0, [sp, #20]
 801c9c8:	2000      	movs	r0, #0
 801c9ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801c9cc:	4606      	mov	r6, r0
 801c9ce:	3a30      	subs	r2, #48	; 0x30
 801c9d0:	f100 0301 	add.w	r3, r0, #1
 801c9d4:	d014      	beq.n	801ca00 <_strtod_l+0x240>
 801c9d6:	9905      	ldr	r1, [sp, #20]
 801c9d8:	4419      	add	r1, r3
 801c9da:	9105      	str	r1, [sp, #20]
 801c9dc:	4633      	mov	r3, r6
 801c9de:	eb00 0c06 	add.w	ip, r0, r6
 801c9e2:	210a      	movs	r1, #10
 801c9e4:	4563      	cmp	r3, ip
 801c9e6:	d113      	bne.n	801ca10 <_strtod_l+0x250>
 801c9e8:	1833      	adds	r3, r6, r0
 801c9ea:	2b08      	cmp	r3, #8
 801c9ec:	f106 0601 	add.w	r6, r6, #1
 801c9f0:	4406      	add	r6, r0
 801c9f2:	dc1a      	bgt.n	801ca2a <_strtod_l+0x26a>
 801c9f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c9f6:	230a      	movs	r3, #10
 801c9f8:	fb03 2301 	mla	r3, r3, r1, r2
 801c9fc:	9309      	str	r3, [sp, #36]	; 0x24
 801c9fe:	2300      	movs	r3, #0
 801ca00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ca02:	1c51      	adds	r1, r2, #1
 801ca04:	9115      	str	r1, [sp, #84]	; 0x54
 801ca06:	7852      	ldrb	r2, [r2, #1]
 801ca08:	4618      	mov	r0, r3
 801ca0a:	e7c9      	b.n	801c9a0 <_strtod_l+0x1e0>
 801ca0c:	4658      	mov	r0, fp
 801ca0e:	e7d2      	b.n	801c9b6 <_strtod_l+0x1f6>
 801ca10:	2b08      	cmp	r3, #8
 801ca12:	f103 0301 	add.w	r3, r3, #1
 801ca16:	dc03      	bgt.n	801ca20 <_strtod_l+0x260>
 801ca18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ca1a:	434f      	muls	r7, r1
 801ca1c:	9709      	str	r7, [sp, #36]	; 0x24
 801ca1e:	e7e1      	b.n	801c9e4 <_strtod_l+0x224>
 801ca20:	2b10      	cmp	r3, #16
 801ca22:	bfd8      	it	le
 801ca24:	fb01 fa0a 	mulle.w	sl, r1, sl
 801ca28:	e7dc      	b.n	801c9e4 <_strtod_l+0x224>
 801ca2a:	2e10      	cmp	r6, #16
 801ca2c:	bfdc      	itt	le
 801ca2e:	230a      	movle	r3, #10
 801ca30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801ca34:	e7e3      	b.n	801c9fe <_strtod_l+0x23e>
 801ca36:	2300      	movs	r3, #0
 801ca38:	9305      	str	r3, [sp, #20]
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	e780      	b.n	801c940 <_strtod_l+0x180>
 801ca3e:	f04f 0c00 	mov.w	ip, #0
 801ca42:	1caa      	adds	r2, r5, #2
 801ca44:	9215      	str	r2, [sp, #84]	; 0x54
 801ca46:	78aa      	ldrb	r2, [r5, #2]
 801ca48:	e788      	b.n	801c95c <_strtod_l+0x19c>
 801ca4a:	f04f 0c01 	mov.w	ip, #1
 801ca4e:	e7f8      	b.n	801ca42 <_strtod_l+0x282>
 801ca50:	080209f8 	.word	0x080209f8
 801ca54:	080209f4 	.word	0x080209f4
 801ca58:	7ff00000 	.word	0x7ff00000
 801ca5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ca5e:	1c51      	adds	r1, r2, #1
 801ca60:	9115      	str	r1, [sp, #84]	; 0x54
 801ca62:	7852      	ldrb	r2, [r2, #1]
 801ca64:	2a30      	cmp	r2, #48	; 0x30
 801ca66:	d0f9      	beq.n	801ca5c <_strtod_l+0x29c>
 801ca68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801ca6c:	2908      	cmp	r1, #8
 801ca6e:	f63f af7a 	bhi.w	801c966 <_strtod_l+0x1a6>
 801ca72:	3a30      	subs	r2, #48	; 0x30
 801ca74:	9208      	str	r2, [sp, #32]
 801ca76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ca78:	920c      	str	r2, [sp, #48]	; 0x30
 801ca7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ca7c:	1c57      	adds	r7, r2, #1
 801ca7e:	9715      	str	r7, [sp, #84]	; 0x54
 801ca80:	7852      	ldrb	r2, [r2, #1]
 801ca82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801ca86:	f1be 0f09 	cmp.w	lr, #9
 801ca8a:	d938      	bls.n	801cafe <_strtod_l+0x33e>
 801ca8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ca8e:	1a7f      	subs	r7, r7, r1
 801ca90:	2f08      	cmp	r7, #8
 801ca92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801ca96:	dc03      	bgt.n	801caa0 <_strtod_l+0x2e0>
 801ca98:	9908      	ldr	r1, [sp, #32]
 801ca9a:	428f      	cmp	r7, r1
 801ca9c:	bfa8      	it	ge
 801ca9e:	460f      	movge	r7, r1
 801caa0:	f1bc 0f00 	cmp.w	ip, #0
 801caa4:	d000      	beq.n	801caa8 <_strtod_l+0x2e8>
 801caa6:	427f      	negs	r7, r7
 801caa8:	2e00      	cmp	r6, #0
 801caaa:	d14f      	bne.n	801cb4c <_strtod_l+0x38c>
 801caac:	9904      	ldr	r1, [sp, #16]
 801caae:	4301      	orrs	r1, r0
 801cab0:	f47f aec1 	bne.w	801c836 <_strtod_l+0x76>
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	f47f aedb 	bne.w	801c870 <_strtod_l+0xb0>
 801caba:	2a69      	cmp	r2, #105	; 0x69
 801cabc:	d029      	beq.n	801cb12 <_strtod_l+0x352>
 801cabe:	dc26      	bgt.n	801cb0e <_strtod_l+0x34e>
 801cac0:	2a49      	cmp	r2, #73	; 0x49
 801cac2:	d026      	beq.n	801cb12 <_strtod_l+0x352>
 801cac4:	2a4e      	cmp	r2, #78	; 0x4e
 801cac6:	f47f aed3 	bne.w	801c870 <_strtod_l+0xb0>
 801caca:	499b      	ldr	r1, [pc, #620]	; (801cd38 <_strtod_l+0x578>)
 801cacc:	a815      	add	r0, sp, #84	; 0x54
 801cace:	f001 ff99 	bl	801ea04 <__match>
 801cad2:	2800      	cmp	r0, #0
 801cad4:	f43f aecc 	beq.w	801c870 <_strtod_l+0xb0>
 801cad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cada:	781b      	ldrb	r3, [r3, #0]
 801cadc:	2b28      	cmp	r3, #40	; 0x28
 801cade:	d12f      	bne.n	801cb40 <_strtod_l+0x380>
 801cae0:	4996      	ldr	r1, [pc, #600]	; (801cd3c <_strtod_l+0x57c>)
 801cae2:	aa18      	add	r2, sp, #96	; 0x60
 801cae4:	a815      	add	r0, sp, #84	; 0x54
 801cae6:	f001 ffa1 	bl	801ea2c <__hexnan>
 801caea:	2805      	cmp	r0, #5
 801caec:	d128      	bne.n	801cb40 <_strtod_l+0x380>
 801caee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801caf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801caf4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801caf8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801cafc:	e69b      	b.n	801c836 <_strtod_l+0x76>
 801cafe:	9f08      	ldr	r7, [sp, #32]
 801cb00:	210a      	movs	r1, #10
 801cb02:	fb01 2107 	mla	r1, r1, r7, r2
 801cb06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801cb0a:	9208      	str	r2, [sp, #32]
 801cb0c:	e7b5      	b.n	801ca7a <_strtod_l+0x2ba>
 801cb0e:	2a6e      	cmp	r2, #110	; 0x6e
 801cb10:	e7d9      	b.n	801cac6 <_strtod_l+0x306>
 801cb12:	498b      	ldr	r1, [pc, #556]	; (801cd40 <_strtod_l+0x580>)
 801cb14:	a815      	add	r0, sp, #84	; 0x54
 801cb16:	f001 ff75 	bl	801ea04 <__match>
 801cb1a:	2800      	cmp	r0, #0
 801cb1c:	f43f aea8 	beq.w	801c870 <_strtod_l+0xb0>
 801cb20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb22:	4988      	ldr	r1, [pc, #544]	; (801cd44 <_strtod_l+0x584>)
 801cb24:	3b01      	subs	r3, #1
 801cb26:	a815      	add	r0, sp, #84	; 0x54
 801cb28:	9315      	str	r3, [sp, #84]	; 0x54
 801cb2a:	f001 ff6b 	bl	801ea04 <__match>
 801cb2e:	b910      	cbnz	r0, 801cb36 <_strtod_l+0x376>
 801cb30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb32:	3301      	adds	r3, #1
 801cb34:	9315      	str	r3, [sp, #84]	; 0x54
 801cb36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801cd54 <_strtod_l+0x594>
 801cb3a:	f04f 0800 	mov.w	r8, #0
 801cb3e:	e67a      	b.n	801c836 <_strtod_l+0x76>
 801cb40:	4881      	ldr	r0, [pc, #516]	; (801cd48 <_strtod_l+0x588>)
 801cb42:	f001 fc99 	bl	801e478 <nan>
 801cb46:	ec59 8b10 	vmov	r8, r9, d0
 801cb4a:	e674      	b.n	801c836 <_strtod_l+0x76>
 801cb4c:	9b05      	ldr	r3, [sp, #20]
 801cb4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb50:	1afb      	subs	r3, r7, r3
 801cb52:	f1bb 0f00 	cmp.w	fp, #0
 801cb56:	bf08      	it	eq
 801cb58:	46b3      	moveq	fp, r6
 801cb5a:	2e10      	cmp	r6, #16
 801cb5c:	9308      	str	r3, [sp, #32]
 801cb5e:	4635      	mov	r5, r6
 801cb60:	bfa8      	it	ge
 801cb62:	2510      	movge	r5, #16
 801cb64:	f7e3 fd26 	bl	80005b4 <__aeabi_ui2d>
 801cb68:	2e09      	cmp	r6, #9
 801cb6a:	4680      	mov	r8, r0
 801cb6c:	4689      	mov	r9, r1
 801cb6e:	dd13      	ble.n	801cb98 <_strtod_l+0x3d8>
 801cb70:	4b76      	ldr	r3, [pc, #472]	; (801cd4c <_strtod_l+0x58c>)
 801cb72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cb76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801cb7a:	f7e3 fd95 	bl	80006a8 <__aeabi_dmul>
 801cb7e:	4680      	mov	r8, r0
 801cb80:	4650      	mov	r0, sl
 801cb82:	4689      	mov	r9, r1
 801cb84:	f7e3 fd16 	bl	80005b4 <__aeabi_ui2d>
 801cb88:	4602      	mov	r2, r0
 801cb8a:	460b      	mov	r3, r1
 801cb8c:	4640      	mov	r0, r8
 801cb8e:	4649      	mov	r1, r9
 801cb90:	f7e3 fbd4 	bl	800033c <__adddf3>
 801cb94:	4680      	mov	r8, r0
 801cb96:	4689      	mov	r9, r1
 801cb98:	2e0f      	cmp	r6, #15
 801cb9a:	dc38      	bgt.n	801cc0e <_strtod_l+0x44e>
 801cb9c:	9b08      	ldr	r3, [sp, #32]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	f43f ae49 	beq.w	801c836 <_strtod_l+0x76>
 801cba4:	dd24      	ble.n	801cbf0 <_strtod_l+0x430>
 801cba6:	2b16      	cmp	r3, #22
 801cba8:	dc0b      	bgt.n	801cbc2 <_strtod_l+0x402>
 801cbaa:	4968      	ldr	r1, [pc, #416]	; (801cd4c <_strtod_l+0x58c>)
 801cbac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbb4:	4642      	mov	r2, r8
 801cbb6:	464b      	mov	r3, r9
 801cbb8:	f7e3 fd76 	bl	80006a8 <__aeabi_dmul>
 801cbbc:	4680      	mov	r8, r0
 801cbbe:	4689      	mov	r9, r1
 801cbc0:	e639      	b.n	801c836 <_strtod_l+0x76>
 801cbc2:	9a08      	ldr	r2, [sp, #32]
 801cbc4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801cbc8:	4293      	cmp	r3, r2
 801cbca:	db20      	blt.n	801cc0e <_strtod_l+0x44e>
 801cbcc:	4c5f      	ldr	r4, [pc, #380]	; (801cd4c <_strtod_l+0x58c>)
 801cbce:	f1c6 060f 	rsb	r6, r6, #15
 801cbd2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801cbd6:	4642      	mov	r2, r8
 801cbd8:	464b      	mov	r3, r9
 801cbda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbde:	f7e3 fd63 	bl	80006a8 <__aeabi_dmul>
 801cbe2:	9b08      	ldr	r3, [sp, #32]
 801cbe4:	1b9e      	subs	r6, r3, r6
 801cbe6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801cbea:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cbee:	e7e3      	b.n	801cbb8 <_strtod_l+0x3f8>
 801cbf0:	9b08      	ldr	r3, [sp, #32]
 801cbf2:	3316      	adds	r3, #22
 801cbf4:	db0b      	blt.n	801cc0e <_strtod_l+0x44e>
 801cbf6:	9b05      	ldr	r3, [sp, #20]
 801cbf8:	1bdf      	subs	r7, r3, r7
 801cbfa:	4b54      	ldr	r3, [pc, #336]	; (801cd4c <_strtod_l+0x58c>)
 801cbfc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801cc00:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cc04:	4640      	mov	r0, r8
 801cc06:	4649      	mov	r1, r9
 801cc08:	f7e3 fe78 	bl	80008fc <__aeabi_ddiv>
 801cc0c:	e7d6      	b.n	801cbbc <_strtod_l+0x3fc>
 801cc0e:	9b08      	ldr	r3, [sp, #32]
 801cc10:	1b75      	subs	r5, r6, r5
 801cc12:	441d      	add	r5, r3
 801cc14:	2d00      	cmp	r5, #0
 801cc16:	dd70      	ble.n	801ccfa <_strtod_l+0x53a>
 801cc18:	f015 030f 	ands.w	r3, r5, #15
 801cc1c:	d00a      	beq.n	801cc34 <_strtod_l+0x474>
 801cc1e:	494b      	ldr	r1, [pc, #300]	; (801cd4c <_strtod_l+0x58c>)
 801cc20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cc24:	4642      	mov	r2, r8
 801cc26:	464b      	mov	r3, r9
 801cc28:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc2c:	f7e3 fd3c 	bl	80006a8 <__aeabi_dmul>
 801cc30:	4680      	mov	r8, r0
 801cc32:	4689      	mov	r9, r1
 801cc34:	f035 050f 	bics.w	r5, r5, #15
 801cc38:	d04d      	beq.n	801ccd6 <_strtod_l+0x516>
 801cc3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801cc3e:	dd22      	ble.n	801cc86 <_strtod_l+0x4c6>
 801cc40:	2500      	movs	r5, #0
 801cc42:	46ab      	mov	fp, r5
 801cc44:	9509      	str	r5, [sp, #36]	; 0x24
 801cc46:	9505      	str	r5, [sp, #20]
 801cc48:	2322      	movs	r3, #34	; 0x22
 801cc4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801cd54 <_strtod_l+0x594>
 801cc4e:	6023      	str	r3, [r4, #0]
 801cc50:	f04f 0800 	mov.w	r8, #0
 801cc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	f43f aded 	beq.w	801c836 <_strtod_l+0x76>
 801cc5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cc5e:	4620      	mov	r0, r4
 801cc60:	f7ff f924 	bl	801beac <_Bfree>
 801cc64:	9905      	ldr	r1, [sp, #20]
 801cc66:	4620      	mov	r0, r4
 801cc68:	f7ff f920 	bl	801beac <_Bfree>
 801cc6c:	4659      	mov	r1, fp
 801cc6e:	4620      	mov	r0, r4
 801cc70:	f7ff f91c 	bl	801beac <_Bfree>
 801cc74:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cc76:	4620      	mov	r0, r4
 801cc78:	f7ff f918 	bl	801beac <_Bfree>
 801cc7c:	4629      	mov	r1, r5
 801cc7e:	4620      	mov	r0, r4
 801cc80:	f7ff f914 	bl	801beac <_Bfree>
 801cc84:	e5d7      	b.n	801c836 <_strtod_l+0x76>
 801cc86:	4b32      	ldr	r3, [pc, #200]	; (801cd50 <_strtod_l+0x590>)
 801cc88:	9304      	str	r3, [sp, #16]
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	112d      	asrs	r5, r5, #4
 801cc8e:	4640      	mov	r0, r8
 801cc90:	4649      	mov	r1, r9
 801cc92:	469a      	mov	sl, r3
 801cc94:	2d01      	cmp	r5, #1
 801cc96:	dc21      	bgt.n	801ccdc <_strtod_l+0x51c>
 801cc98:	b10b      	cbz	r3, 801cc9e <_strtod_l+0x4de>
 801cc9a:	4680      	mov	r8, r0
 801cc9c:	4689      	mov	r9, r1
 801cc9e:	492c      	ldr	r1, [pc, #176]	; (801cd50 <_strtod_l+0x590>)
 801cca0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801cca4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801cca8:	4642      	mov	r2, r8
 801ccaa:	464b      	mov	r3, r9
 801ccac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ccb0:	f7e3 fcfa 	bl	80006a8 <__aeabi_dmul>
 801ccb4:	4b27      	ldr	r3, [pc, #156]	; (801cd54 <_strtod_l+0x594>)
 801ccb6:	460a      	mov	r2, r1
 801ccb8:	400b      	ands	r3, r1
 801ccba:	4927      	ldr	r1, [pc, #156]	; (801cd58 <_strtod_l+0x598>)
 801ccbc:	428b      	cmp	r3, r1
 801ccbe:	4680      	mov	r8, r0
 801ccc0:	d8be      	bhi.n	801cc40 <_strtod_l+0x480>
 801ccc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ccc6:	428b      	cmp	r3, r1
 801ccc8:	bf86      	itte	hi
 801ccca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801cd5c <_strtod_l+0x59c>
 801ccce:	f04f 38ff 	movhi.w	r8, #4294967295
 801ccd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	9304      	str	r3, [sp, #16]
 801ccda:	e07b      	b.n	801cdd4 <_strtod_l+0x614>
 801ccdc:	07ea      	lsls	r2, r5, #31
 801ccde:	d505      	bpl.n	801ccec <_strtod_l+0x52c>
 801cce0:	9b04      	ldr	r3, [sp, #16]
 801cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce6:	f7e3 fcdf 	bl	80006a8 <__aeabi_dmul>
 801ccea:	2301      	movs	r3, #1
 801ccec:	9a04      	ldr	r2, [sp, #16]
 801ccee:	3208      	adds	r2, #8
 801ccf0:	f10a 0a01 	add.w	sl, sl, #1
 801ccf4:	106d      	asrs	r5, r5, #1
 801ccf6:	9204      	str	r2, [sp, #16]
 801ccf8:	e7cc      	b.n	801cc94 <_strtod_l+0x4d4>
 801ccfa:	d0ec      	beq.n	801ccd6 <_strtod_l+0x516>
 801ccfc:	426d      	negs	r5, r5
 801ccfe:	f015 020f 	ands.w	r2, r5, #15
 801cd02:	d00a      	beq.n	801cd1a <_strtod_l+0x55a>
 801cd04:	4b11      	ldr	r3, [pc, #68]	; (801cd4c <_strtod_l+0x58c>)
 801cd06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cd0a:	4640      	mov	r0, r8
 801cd0c:	4649      	mov	r1, r9
 801cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd12:	f7e3 fdf3 	bl	80008fc <__aeabi_ddiv>
 801cd16:	4680      	mov	r8, r0
 801cd18:	4689      	mov	r9, r1
 801cd1a:	112d      	asrs	r5, r5, #4
 801cd1c:	d0db      	beq.n	801ccd6 <_strtod_l+0x516>
 801cd1e:	2d1f      	cmp	r5, #31
 801cd20:	dd1e      	ble.n	801cd60 <_strtod_l+0x5a0>
 801cd22:	2500      	movs	r5, #0
 801cd24:	46ab      	mov	fp, r5
 801cd26:	9509      	str	r5, [sp, #36]	; 0x24
 801cd28:	9505      	str	r5, [sp, #20]
 801cd2a:	2322      	movs	r3, #34	; 0x22
 801cd2c:	f04f 0800 	mov.w	r8, #0
 801cd30:	f04f 0900 	mov.w	r9, #0
 801cd34:	6023      	str	r3, [r4, #0]
 801cd36:	e78d      	b.n	801cc54 <_strtod_l+0x494>
 801cd38:	080207e7 	.word	0x080207e7
 801cd3c:	08020a0c 	.word	0x08020a0c
 801cd40:	080207df 	.word	0x080207df
 801cd44:	08020814 	.word	0x08020814
 801cd48:	080207d9 	.word	0x080207d9
 801cd4c:	08020920 	.word	0x08020920
 801cd50:	080208f8 	.word	0x080208f8
 801cd54:	7ff00000 	.word	0x7ff00000
 801cd58:	7ca00000 	.word	0x7ca00000
 801cd5c:	7fefffff 	.word	0x7fefffff
 801cd60:	f015 0310 	ands.w	r3, r5, #16
 801cd64:	bf18      	it	ne
 801cd66:	236a      	movne	r3, #106	; 0x6a
 801cd68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801d10c <_strtod_l+0x94c>
 801cd6c:	9304      	str	r3, [sp, #16]
 801cd6e:	4640      	mov	r0, r8
 801cd70:	4649      	mov	r1, r9
 801cd72:	2300      	movs	r3, #0
 801cd74:	07ea      	lsls	r2, r5, #31
 801cd76:	d504      	bpl.n	801cd82 <_strtod_l+0x5c2>
 801cd78:	e9da 2300 	ldrd	r2, r3, [sl]
 801cd7c:	f7e3 fc94 	bl	80006a8 <__aeabi_dmul>
 801cd80:	2301      	movs	r3, #1
 801cd82:	106d      	asrs	r5, r5, #1
 801cd84:	f10a 0a08 	add.w	sl, sl, #8
 801cd88:	d1f4      	bne.n	801cd74 <_strtod_l+0x5b4>
 801cd8a:	b10b      	cbz	r3, 801cd90 <_strtod_l+0x5d0>
 801cd8c:	4680      	mov	r8, r0
 801cd8e:	4689      	mov	r9, r1
 801cd90:	9b04      	ldr	r3, [sp, #16]
 801cd92:	b1bb      	cbz	r3, 801cdc4 <_strtod_l+0x604>
 801cd94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801cd98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	4649      	mov	r1, r9
 801cda0:	dd10      	ble.n	801cdc4 <_strtod_l+0x604>
 801cda2:	2b1f      	cmp	r3, #31
 801cda4:	f340 811e 	ble.w	801cfe4 <_strtod_l+0x824>
 801cda8:	2b34      	cmp	r3, #52	; 0x34
 801cdaa:	bfde      	ittt	le
 801cdac:	f04f 33ff 	movle.w	r3, #4294967295
 801cdb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801cdb4:	4093      	lslle	r3, r2
 801cdb6:	f04f 0800 	mov.w	r8, #0
 801cdba:	bfcc      	ite	gt
 801cdbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801cdc0:	ea03 0901 	andle.w	r9, r3, r1
 801cdc4:	2200      	movs	r2, #0
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	4640      	mov	r0, r8
 801cdca:	4649      	mov	r1, r9
 801cdcc:	f7e3 fed4 	bl	8000b78 <__aeabi_dcmpeq>
 801cdd0:	2800      	cmp	r0, #0
 801cdd2:	d1a6      	bne.n	801cd22 <_strtod_l+0x562>
 801cdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdd6:	9300      	str	r3, [sp, #0]
 801cdd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cdda:	4633      	mov	r3, r6
 801cddc:	465a      	mov	r2, fp
 801cdde:	4620      	mov	r0, r4
 801cde0:	f7ff f8cc 	bl	801bf7c <__s2b>
 801cde4:	9009      	str	r0, [sp, #36]	; 0x24
 801cde6:	2800      	cmp	r0, #0
 801cde8:	f43f af2a 	beq.w	801cc40 <_strtod_l+0x480>
 801cdec:	9a08      	ldr	r2, [sp, #32]
 801cdee:	9b05      	ldr	r3, [sp, #20]
 801cdf0:	2a00      	cmp	r2, #0
 801cdf2:	eba3 0307 	sub.w	r3, r3, r7
 801cdf6:	bfa8      	it	ge
 801cdf8:	2300      	movge	r3, #0
 801cdfa:	930c      	str	r3, [sp, #48]	; 0x30
 801cdfc:	2500      	movs	r5, #0
 801cdfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ce02:	9312      	str	r3, [sp, #72]	; 0x48
 801ce04:	46ab      	mov	fp, r5
 801ce06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce08:	4620      	mov	r0, r4
 801ce0a:	6859      	ldr	r1, [r3, #4]
 801ce0c:	f7ff f80e 	bl	801be2c <_Balloc>
 801ce10:	9005      	str	r0, [sp, #20]
 801ce12:	2800      	cmp	r0, #0
 801ce14:	f43f af18 	beq.w	801cc48 <_strtod_l+0x488>
 801ce18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce1a:	691a      	ldr	r2, [r3, #16]
 801ce1c:	3202      	adds	r2, #2
 801ce1e:	f103 010c 	add.w	r1, r3, #12
 801ce22:	0092      	lsls	r2, r2, #2
 801ce24:	300c      	adds	r0, #12
 801ce26:	f7fe f91c 	bl	801b062 <memcpy>
 801ce2a:	ec49 8b10 	vmov	d0, r8, r9
 801ce2e:	aa18      	add	r2, sp, #96	; 0x60
 801ce30:	a917      	add	r1, sp, #92	; 0x5c
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7ff fbd6 	bl	801c5e4 <__d2b>
 801ce38:	ec49 8b18 	vmov	d8, r8, r9
 801ce3c:	9016      	str	r0, [sp, #88]	; 0x58
 801ce3e:	2800      	cmp	r0, #0
 801ce40:	f43f af02 	beq.w	801cc48 <_strtod_l+0x488>
 801ce44:	2101      	movs	r1, #1
 801ce46:	4620      	mov	r0, r4
 801ce48:	f7ff f930 	bl	801c0ac <__i2b>
 801ce4c:	4683      	mov	fp, r0
 801ce4e:	2800      	cmp	r0, #0
 801ce50:	f43f aefa 	beq.w	801cc48 <_strtod_l+0x488>
 801ce54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ce56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ce58:	2e00      	cmp	r6, #0
 801ce5a:	bfab      	itete	ge
 801ce5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801ce5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801ce60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ce62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801ce66:	bfac      	ite	ge
 801ce68:	eb06 0a03 	addge.w	sl, r6, r3
 801ce6c:	1b9f      	sublt	r7, r3, r6
 801ce6e:	9b04      	ldr	r3, [sp, #16]
 801ce70:	1af6      	subs	r6, r6, r3
 801ce72:	4416      	add	r6, r2
 801ce74:	4ba0      	ldr	r3, [pc, #640]	; (801d0f8 <_strtod_l+0x938>)
 801ce76:	3e01      	subs	r6, #1
 801ce78:	429e      	cmp	r6, r3
 801ce7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ce7e:	f280 80c4 	bge.w	801d00a <_strtod_l+0x84a>
 801ce82:	1b9b      	subs	r3, r3, r6
 801ce84:	2b1f      	cmp	r3, #31
 801ce86:	eba2 0203 	sub.w	r2, r2, r3
 801ce8a:	f04f 0101 	mov.w	r1, #1
 801ce8e:	f300 80b0 	bgt.w	801cff2 <_strtod_l+0x832>
 801ce92:	fa01 f303 	lsl.w	r3, r1, r3
 801ce96:	930e      	str	r3, [sp, #56]	; 0x38
 801ce98:	2300      	movs	r3, #0
 801ce9a:	930d      	str	r3, [sp, #52]	; 0x34
 801ce9c:	eb0a 0602 	add.w	r6, sl, r2
 801cea0:	9b04      	ldr	r3, [sp, #16]
 801cea2:	45b2      	cmp	sl, r6
 801cea4:	4417      	add	r7, r2
 801cea6:	441f      	add	r7, r3
 801cea8:	4653      	mov	r3, sl
 801ceaa:	bfa8      	it	ge
 801ceac:	4633      	movge	r3, r6
 801ceae:	42bb      	cmp	r3, r7
 801ceb0:	bfa8      	it	ge
 801ceb2:	463b      	movge	r3, r7
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	bfc2      	ittt	gt
 801ceb8:	1af6      	subgt	r6, r6, r3
 801ceba:	1aff      	subgt	r7, r7, r3
 801cebc:	ebaa 0a03 	subgt.w	sl, sl, r3
 801cec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	dd17      	ble.n	801cef6 <_strtod_l+0x736>
 801cec6:	4659      	mov	r1, fp
 801cec8:	461a      	mov	r2, r3
 801ceca:	4620      	mov	r0, r4
 801cecc:	f7ff f9ae 	bl	801c22c <__pow5mult>
 801ced0:	4683      	mov	fp, r0
 801ced2:	2800      	cmp	r0, #0
 801ced4:	f43f aeb8 	beq.w	801cc48 <_strtod_l+0x488>
 801ced8:	4601      	mov	r1, r0
 801ceda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cedc:	4620      	mov	r0, r4
 801cede:	f7ff f8fb 	bl	801c0d8 <__multiply>
 801cee2:	900b      	str	r0, [sp, #44]	; 0x2c
 801cee4:	2800      	cmp	r0, #0
 801cee6:	f43f aeaf 	beq.w	801cc48 <_strtod_l+0x488>
 801ceea:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ceec:	4620      	mov	r0, r4
 801ceee:	f7fe ffdd 	bl	801beac <_Bfree>
 801cef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cef4:	9316      	str	r3, [sp, #88]	; 0x58
 801cef6:	2e00      	cmp	r6, #0
 801cef8:	f300 808c 	bgt.w	801d014 <_strtod_l+0x854>
 801cefc:	9b08      	ldr	r3, [sp, #32]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	dd08      	ble.n	801cf14 <_strtod_l+0x754>
 801cf02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf04:	9905      	ldr	r1, [sp, #20]
 801cf06:	4620      	mov	r0, r4
 801cf08:	f7ff f990 	bl	801c22c <__pow5mult>
 801cf0c:	9005      	str	r0, [sp, #20]
 801cf0e:	2800      	cmp	r0, #0
 801cf10:	f43f ae9a 	beq.w	801cc48 <_strtod_l+0x488>
 801cf14:	2f00      	cmp	r7, #0
 801cf16:	dd08      	ble.n	801cf2a <_strtod_l+0x76a>
 801cf18:	9905      	ldr	r1, [sp, #20]
 801cf1a:	463a      	mov	r2, r7
 801cf1c:	4620      	mov	r0, r4
 801cf1e:	f7ff f9df 	bl	801c2e0 <__lshift>
 801cf22:	9005      	str	r0, [sp, #20]
 801cf24:	2800      	cmp	r0, #0
 801cf26:	f43f ae8f 	beq.w	801cc48 <_strtod_l+0x488>
 801cf2a:	f1ba 0f00 	cmp.w	sl, #0
 801cf2e:	dd08      	ble.n	801cf42 <_strtod_l+0x782>
 801cf30:	4659      	mov	r1, fp
 801cf32:	4652      	mov	r2, sl
 801cf34:	4620      	mov	r0, r4
 801cf36:	f7ff f9d3 	bl	801c2e0 <__lshift>
 801cf3a:	4683      	mov	fp, r0
 801cf3c:	2800      	cmp	r0, #0
 801cf3e:	f43f ae83 	beq.w	801cc48 <_strtod_l+0x488>
 801cf42:	9a05      	ldr	r2, [sp, #20]
 801cf44:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cf46:	4620      	mov	r0, r4
 801cf48:	f7ff fa52 	bl	801c3f0 <__mdiff>
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	2800      	cmp	r0, #0
 801cf50:	f43f ae7a 	beq.w	801cc48 <_strtod_l+0x488>
 801cf54:	68c3      	ldr	r3, [r0, #12]
 801cf56:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf58:	2300      	movs	r3, #0
 801cf5a:	60c3      	str	r3, [r0, #12]
 801cf5c:	4659      	mov	r1, fp
 801cf5e:	f7ff fa2b 	bl	801c3b8 <__mcmp>
 801cf62:	2800      	cmp	r0, #0
 801cf64:	da60      	bge.n	801d028 <_strtod_l+0x868>
 801cf66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf68:	ea53 0308 	orrs.w	r3, r3, r8
 801cf6c:	f040 8084 	bne.w	801d078 <_strtod_l+0x8b8>
 801cf70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d17f      	bne.n	801d078 <_strtod_l+0x8b8>
 801cf78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cf7c:	0d1b      	lsrs	r3, r3, #20
 801cf7e:	051b      	lsls	r3, r3, #20
 801cf80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801cf84:	d978      	bls.n	801d078 <_strtod_l+0x8b8>
 801cf86:	696b      	ldr	r3, [r5, #20]
 801cf88:	b913      	cbnz	r3, 801cf90 <_strtod_l+0x7d0>
 801cf8a:	692b      	ldr	r3, [r5, #16]
 801cf8c:	2b01      	cmp	r3, #1
 801cf8e:	dd73      	ble.n	801d078 <_strtod_l+0x8b8>
 801cf90:	4629      	mov	r1, r5
 801cf92:	2201      	movs	r2, #1
 801cf94:	4620      	mov	r0, r4
 801cf96:	f7ff f9a3 	bl	801c2e0 <__lshift>
 801cf9a:	4659      	mov	r1, fp
 801cf9c:	4605      	mov	r5, r0
 801cf9e:	f7ff fa0b 	bl	801c3b8 <__mcmp>
 801cfa2:	2800      	cmp	r0, #0
 801cfa4:	dd68      	ble.n	801d078 <_strtod_l+0x8b8>
 801cfa6:	9904      	ldr	r1, [sp, #16]
 801cfa8:	4a54      	ldr	r2, [pc, #336]	; (801d0fc <_strtod_l+0x93c>)
 801cfaa:	464b      	mov	r3, r9
 801cfac:	2900      	cmp	r1, #0
 801cfae:	f000 8084 	beq.w	801d0ba <_strtod_l+0x8fa>
 801cfb2:	ea02 0109 	and.w	r1, r2, r9
 801cfb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801cfba:	dc7e      	bgt.n	801d0ba <_strtod_l+0x8fa>
 801cfbc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801cfc0:	f77f aeb3 	ble.w	801cd2a <_strtod_l+0x56a>
 801cfc4:	4b4e      	ldr	r3, [pc, #312]	; (801d100 <_strtod_l+0x940>)
 801cfc6:	4640      	mov	r0, r8
 801cfc8:	4649      	mov	r1, r9
 801cfca:	2200      	movs	r2, #0
 801cfcc:	f7e3 fb6c 	bl	80006a8 <__aeabi_dmul>
 801cfd0:	4b4a      	ldr	r3, [pc, #296]	; (801d0fc <_strtod_l+0x93c>)
 801cfd2:	400b      	ands	r3, r1
 801cfd4:	4680      	mov	r8, r0
 801cfd6:	4689      	mov	r9, r1
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	f47f ae3f 	bne.w	801cc5c <_strtod_l+0x49c>
 801cfde:	2322      	movs	r3, #34	; 0x22
 801cfe0:	6023      	str	r3, [r4, #0]
 801cfe2:	e63b      	b.n	801cc5c <_strtod_l+0x49c>
 801cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 801cfe8:	fa02 f303 	lsl.w	r3, r2, r3
 801cfec:	ea03 0808 	and.w	r8, r3, r8
 801cff0:	e6e8      	b.n	801cdc4 <_strtod_l+0x604>
 801cff2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801cff6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801cffa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801cffe:	36e2      	adds	r6, #226	; 0xe2
 801d000:	fa01 f306 	lsl.w	r3, r1, r6
 801d004:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801d008:	e748      	b.n	801ce9c <_strtod_l+0x6dc>
 801d00a:	2100      	movs	r1, #0
 801d00c:	2301      	movs	r3, #1
 801d00e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801d012:	e743      	b.n	801ce9c <_strtod_l+0x6dc>
 801d014:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d016:	4632      	mov	r2, r6
 801d018:	4620      	mov	r0, r4
 801d01a:	f7ff f961 	bl	801c2e0 <__lshift>
 801d01e:	9016      	str	r0, [sp, #88]	; 0x58
 801d020:	2800      	cmp	r0, #0
 801d022:	f47f af6b 	bne.w	801cefc <_strtod_l+0x73c>
 801d026:	e60f      	b.n	801cc48 <_strtod_l+0x488>
 801d028:	46ca      	mov	sl, r9
 801d02a:	d171      	bne.n	801d110 <_strtod_l+0x950>
 801d02c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d02e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d032:	b352      	cbz	r2, 801d08a <_strtod_l+0x8ca>
 801d034:	4a33      	ldr	r2, [pc, #204]	; (801d104 <_strtod_l+0x944>)
 801d036:	4293      	cmp	r3, r2
 801d038:	d12a      	bne.n	801d090 <_strtod_l+0x8d0>
 801d03a:	9b04      	ldr	r3, [sp, #16]
 801d03c:	4641      	mov	r1, r8
 801d03e:	b1fb      	cbz	r3, 801d080 <_strtod_l+0x8c0>
 801d040:	4b2e      	ldr	r3, [pc, #184]	; (801d0fc <_strtod_l+0x93c>)
 801d042:	ea09 0303 	and.w	r3, r9, r3
 801d046:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d04a:	f04f 32ff 	mov.w	r2, #4294967295
 801d04e:	d81a      	bhi.n	801d086 <_strtod_l+0x8c6>
 801d050:	0d1b      	lsrs	r3, r3, #20
 801d052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d056:	fa02 f303 	lsl.w	r3, r2, r3
 801d05a:	4299      	cmp	r1, r3
 801d05c:	d118      	bne.n	801d090 <_strtod_l+0x8d0>
 801d05e:	4b2a      	ldr	r3, [pc, #168]	; (801d108 <_strtod_l+0x948>)
 801d060:	459a      	cmp	sl, r3
 801d062:	d102      	bne.n	801d06a <_strtod_l+0x8aa>
 801d064:	3101      	adds	r1, #1
 801d066:	f43f adef 	beq.w	801cc48 <_strtod_l+0x488>
 801d06a:	4b24      	ldr	r3, [pc, #144]	; (801d0fc <_strtod_l+0x93c>)
 801d06c:	ea0a 0303 	and.w	r3, sl, r3
 801d070:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d074:	f04f 0800 	mov.w	r8, #0
 801d078:	9b04      	ldr	r3, [sp, #16]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d1a2      	bne.n	801cfc4 <_strtod_l+0x804>
 801d07e:	e5ed      	b.n	801cc5c <_strtod_l+0x49c>
 801d080:	f04f 33ff 	mov.w	r3, #4294967295
 801d084:	e7e9      	b.n	801d05a <_strtod_l+0x89a>
 801d086:	4613      	mov	r3, r2
 801d088:	e7e7      	b.n	801d05a <_strtod_l+0x89a>
 801d08a:	ea53 0308 	orrs.w	r3, r3, r8
 801d08e:	d08a      	beq.n	801cfa6 <_strtod_l+0x7e6>
 801d090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d092:	b1e3      	cbz	r3, 801d0ce <_strtod_l+0x90e>
 801d094:	ea13 0f0a 	tst.w	r3, sl
 801d098:	d0ee      	beq.n	801d078 <_strtod_l+0x8b8>
 801d09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d09c:	9a04      	ldr	r2, [sp, #16]
 801d09e:	4640      	mov	r0, r8
 801d0a0:	4649      	mov	r1, r9
 801d0a2:	b1c3      	cbz	r3, 801d0d6 <_strtod_l+0x916>
 801d0a4:	f7ff fb6f 	bl	801c786 <sulp>
 801d0a8:	4602      	mov	r2, r0
 801d0aa:	460b      	mov	r3, r1
 801d0ac:	ec51 0b18 	vmov	r0, r1, d8
 801d0b0:	f7e3 f944 	bl	800033c <__adddf3>
 801d0b4:	4680      	mov	r8, r0
 801d0b6:	4689      	mov	r9, r1
 801d0b8:	e7de      	b.n	801d078 <_strtod_l+0x8b8>
 801d0ba:	4013      	ands	r3, r2
 801d0bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d0c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d0c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d0c8:	f04f 38ff 	mov.w	r8, #4294967295
 801d0cc:	e7d4      	b.n	801d078 <_strtod_l+0x8b8>
 801d0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0d0:	ea13 0f08 	tst.w	r3, r8
 801d0d4:	e7e0      	b.n	801d098 <_strtod_l+0x8d8>
 801d0d6:	f7ff fb56 	bl	801c786 <sulp>
 801d0da:	4602      	mov	r2, r0
 801d0dc:	460b      	mov	r3, r1
 801d0de:	ec51 0b18 	vmov	r0, r1, d8
 801d0e2:	f7e3 f929 	bl	8000338 <__aeabi_dsub>
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	4680      	mov	r8, r0
 801d0ec:	4689      	mov	r9, r1
 801d0ee:	f7e3 fd43 	bl	8000b78 <__aeabi_dcmpeq>
 801d0f2:	2800      	cmp	r0, #0
 801d0f4:	d0c0      	beq.n	801d078 <_strtod_l+0x8b8>
 801d0f6:	e618      	b.n	801cd2a <_strtod_l+0x56a>
 801d0f8:	fffffc02 	.word	0xfffffc02
 801d0fc:	7ff00000 	.word	0x7ff00000
 801d100:	39500000 	.word	0x39500000
 801d104:	000fffff 	.word	0x000fffff
 801d108:	7fefffff 	.word	0x7fefffff
 801d10c:	08020a20 	.word	0x08020a20
 801d110:	4659      	mov	r1, fp
 801d112:	4628      	mov	r0, r5
 801d114:	f7ff fac0 	bl	801c698 <__ratio>
 801d118:	ec57 6b10 	vmov	r6, r7, d0
 801d11c:	ee10 0a10 	vmov	r0, s0
 801d120:	2200      	movs	r2, #0
 801d122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d126:	4639      	mov	r1, r7
 801d128:	f7e3 fd3a 	bl	8000ba0 <__aeabi_dcmple>
 801d12c:	2800      	cmp	r0, #0
 801d12e:	d071      	beq.n	801d214 <_strtod_l+0xa54>
 801d130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d132:	2b00      	cmp	r3, #0
 801d134:	d17c      	bne.n	801d230 <_strtod_l+0xa70>
 801d136:	f1b8 0f00 	cmp.w	r8, #0
 801d13a:	d15a      	bne.n	801d1f2 <_strtod_l+0xa32>
 801d13c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d140:	2b00      	cmp	r3, #0
 801d142:	d15d      	bne.n	801d200 <_strtod_l+0xa40>
 801d144:	4b90      	ldr	r3, [pc, #576]	; (801d388 <_strtod_l+0xbc8>)
 801d146:	2200      	movs	r2, #0
 801d148:	4630      	mov	r0, r6
 801d14a:	4639      	mov	r1, r7
 801d14c:	f7e3 fd1e 	bl	8000b8c <__aeabi_dcmplt>
 801d150:	2800      	cmp	r0, #0
 801d152:	d15c      	bne.n	801d20e <_strtod_l+0xa4e>
 801d154:	4630      	mov	r0, r6
 801d156:	4639      	mov	r1, r7
 801d158:	4b8c      	ldr	r3, [pc, #560]	; (801d38c <_strtod_l+0xbcc>)
 801d15a:	2200      	movs	r2, #0
 801d15c:	f7e3 faa4 	bl	80006a8 <__aeabi_dmul>
 801d160:	4606      	mov	r6, r0
 801d162:	460f      	mov	r7, r1
 801d164:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801d168:	9606      	str	r6, [sp, #24]
 801d16a:	9307      	str	r3, [sp, #28]
 801d16c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d170:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d174:	4b86      	ldr	r3, [pc, #536]	; (801d390 <_strtod_l+0xbd0>)
 801d176:	ea0a 0303 	and.w	r3, sl, r3
 801d17a:	930d      	str	r3, [sp, #52]	; 0x34
 801d17c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d17e:	4b85      	ldr	r3, [pc, #532]	; (801d394 <_strtod_l+0xbd4>)
 801d180:	429a      	cmp	r2, r3
 801d182:	f040 8090 	bne.w	801d2a6 <_strtod_l+0xae6>
 801d186:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801d18a:	ec49 8b10 	vmov	d0, r8, r9
 801d18e:	f7ff f9b9 	bl	801c504 <__ulp>
 801d192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d196:	ec51 0b10 	vmov	r0, r1, d0
 801d19a:	f7e3 fa85 	bl	80006a8 <__aeabi_dmul>
 801d19e:	4642      	mov	r2, r8
 801d1a0:	464b      	mov	r3, r9
 801d1a2:	f7e3 f8cb 	bl	800033c <__adddf3>
 801d1a6:	460b      	mov	r3, r1
 801d1a8:	4979      	ldr	r1, [pc, #484]	; (801d390 <_strtod_l+0xbd0>)
 801d1aa:	4a7b      	ldr	r2, [pc, #492]	; (801d398 <_strtod_l+0xbd8>)
 801d1ac:	4019      	ands	r1, r3
 801d1ae:	4291      	cmp	r1, r2
 801d1b0:	4680      	mov	r8, r0
 801d1b2:	d944      	bls.n	801d23e <_strtod_l+0xa7e>
 801d1b4:	ee18 2a90 	vmov	r2, s17
 801d1b8:	4b78      	ldr	r3, [pc, #480]	; (801d39c <_strtod_l+0xbdc>)
 801d1ba:	429a      	cmp	r2, r3
 801d1bc:	d104      	bne.n	801d1c8 <_strtod_l+0xa08>
 801d1be:	ee18 3a10 	vmov	r3, s16
 801d1c2:	3301      	adds	r3, #1
 801d1c4:	f43f ad40 	beq.w	801cc48 <_strtod_l+0x488>
 801d1c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801d39c <_strtod_l+0xbdc>
 801d1cc:	f04f 38ff 	mov.w	r8, #4294967295
 801d1d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d1d2:	4620      	mov	r0, r4
 801d1d4:	f7fe fe6a 	bl	801beac <_Bfree>
 801d1d8:	9905      	ldr	r1, [sp, #20]
 801d1da:	4620      	mov	r0, r4
 801d1dc:	f7fe fe66 	bl	801beac <_Bfree>
 801d1e0:	4659      	mov	r1, fp
 801d1e2:	4620      	mov	r0, r4
 801d1e4:	f7fe fe62 	bl	801beac <_Bfree>
 801d1e8:	4629      	mov	r1, r5
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	f7fe fe5e 	bl	801beac <_Bfree>
 801d1f0:	e609      	b.n	801ce06 <_strtod_l+0x646>
 801d1f2:	f1b8 0f01 	cmp.w	r8, #1
 801d1f6:	d103      	bne.n	801d200 <_strtod_l+0xa40>
 801d1f8:	f1b9 0f00 	cmp.w	r9, #0
 801d1fc:	f43f ad95 	beq.w	801cd2a <_strtod_l+0x56a>
 801d200:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801d358 <_strtod_l+0xb98>
 801d204:	4f60      	ldr	r7, [pc, #384]	; (801d388 <_strtod_l+0xbc8>)
 801d206:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d20a:	2600      	movs	r6, #0
 801d20c:	e7ae      	b.n	801d16c <_strtod_l+0x9ac>
 801d20e:	4f5f      	ldr	r7, [pc, #380]	; (801d38c <_strtod_l+0xbcc>)
 801d210:	2600      	movs	r6, #0
 801d212:	e7a7      	b.n	801d164 <_strtod_l+0x9a4>
 801d214:	4b5d      	ldr	r3, [pc, #372]	; (801d38c <_strtod_l+0xbcc>)
 801d216:	4630      	mov	r0, r6
 801d218:	4639      	mov	r1, r7
 801d21a:	2200      	movs	r2, #0
 801d21c:	f7e3 fa44 	bl	80006a8 <__aeabi_dmul>
 801d220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d222:	4606      	mov	r6, r0
 801d224:	460f      	mov	r7, r1
 801d226:	2b00      	cmp	r3, #0
 801d228:	d09c      	beq.n	801d164 <_strtod_l+0x9a4>
 801d22a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d22e:	e79d      	b.n	801d16c <_strtod_l+0x9ac>
 801d230:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801d360 <_strtod_l+0xba0>
 801d234:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d238:	ec57 6b17 	vmov	r6, r7, d7
 801d23c:	e796      	b.n	801d16c <_strtod_l+0x9ac>
 801d23e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801d242:	9b04      	ldr	r3, [sp, #16]
 801d244:	46ca      	mov	sl, r9
 801d246:	2b00      	cmp	r3, #0
 801d248:	d1c2      	bne.n	801d1d0 <_strtod_l+0xa10>
 801d24a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d24e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d250:	0d1b      	lsrs	r3, r3, #20
 801d252:	051b      	lsls	r3, r3, #20
 801d254:	429a      	cmp	r2, r3
 801d256:	d1bb      	bne.n	801d1d0 <_strtod_l+0xa10>
 801d258:	4630      	mov	r0, r6
 801d25a:	4639      	mov	r1, r7
 801d25c:	f7e3 fd84 	bl	8000d68 <__aeabi_d2lz>
 801d260:	f7e3 f9f4 	bl	800064c <__aeabi_l2d>
 801d264:	4602      	mov	r2, r0
 801d266:	460b      	mov	r3, r1
 801d268:	4630      	mov	r0, r6
 801d26a:	4639      	mov	r1, r7
 801d26c:	f7e3 f864 	bl	8000338 <__aeabi_dsub>
 801d270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d272:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d276:	ea43 0308 	orr.w	r3, r3, r8
 801d27a:	4313      	orrs	r3, r2
 801d27c:	4606      	mov	r6, r0
 801d27e:	460f      	mov	r7, r1
 801d280:	d054      	beq.n	801d32c <_strtod_l+0xb6c>
 801d282:	a339      	add	r3, pc, #228	; (adr r3, 801d368 <_strtod_l+0xba8>)
 801d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d288:	f7e3 fc80 	bl	8000b8c <__aeabi_dcmplt>
 801d28c:	2800      	cmp	r0, #0
 801d28e:	f47f ace5 	bne.w	801cc5c <_strtod_l+0x49c>
 801d292:	a337      	add	r3, pc, #220	; (adr r3, 801d370 <_strtod_l+0xbb0>)
 801d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d298:	4630      	mov	r0, r6
 801d29a:	4639      	mov	r1, r7
 801d29c:	f7e3 fc94 	bl	8000bc8 <__aeabi_dcmpgt>
 801d2a0:	2800      	cmp	r0, #0
 801d2a2:	d095      	beq.n	801d1d0 <_strtod_l+0xa10>
 801d2a4:	e4da      	b.n	801cc5c <_strtod_l+0x49c>
 801d2a6:	9b04      	ldr	r3, [sp, #16]
 801d2a8:	b333      	cbz	r3, 801d2f8 <_strtod_l+0xb38>
 801d2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d2b0:	d822      	bhi.n	801d2f8 <_strtod_l+0xb38>
 801d2b2:	a331      	add	r3, pc, #196	; (adr r3, 801d378 <_strtod_l+0xbb8>)
 801d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b8:	4630      	mov	r0, r6
 801d2ba:	4639      	mov	r1, r7
 801d2bc:	f7e3 fc70 	bl	8000ba0 <__aeabi_dcmple>
 801d2c0:	b1a0      	cbz	r0, 801d2ec <_strtod_l+0xb2c>
 801d2c2:	4639      	mov	r1, r7
 801d2c4:	4630      	mov	r0, r6
 801d2c6:	f7e3 fcc7 	bl	8000c58 <__aeabi_d2uiz>
 801d2ca:	2801      	cmp	r0, #1
 801d2cc:	bf38      	it	cc
 801d2ce:	2001      	movcc	r0, #1
 801d2d0:	f7e3 f970 	bl	80005b4 <__aeabi_ui2d>
 801d2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2d6:	4606      	mov	r6, r0
 801d2d8:	460f      	mov	r7, r1
 801d2da:	bb23      	cbnz	r3, 801d326 <_strtod_l+0xb66>
 801d2dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d2e0:	9010      	str	r0, [sp, #64]	; 0x40
 801d2e2:	9311      	str	r3, [sp, #68]	; 0x44
 801d2e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d2e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d2ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d2f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d2f4:	1a9b      	subs	r3, r3, r2
 801d2f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d2f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d2fc:	eeb0 0a48 	vmov.f32	s0, s16
 801d300:	eef0 0a68 	vmov.f32	s1, s17
 801d304:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d308:	f7ff f8fc 	bl	801c504 <__ulp>
 801d30c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d310:	ec53 2b10 	vmov	r2, r3, d0
 801d314:	f7e3 f9c8 	bl	80006a8 <__aeabi_dmul>
 801d318:	ec53 2b18 	vmov	r2, r3, d8
 801d31c:	f7e3 f80e 	bl	800033c <__adddf3>
 801d320:	4680      	mov	r8, r0
 801d322:	4689      	mov	r9, r1
 801d324:	e78d      	b.n	801d242 <_strtod_l+0xa82>
 801d326:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801d32a:	e7db      	b.n	801d2e4 <_strtod_l+0xb24>
 801d32c:	a314      	add	r3, pc, #80	; (adr r3, 801d380 <_strtod_l+0xbc0>)
 801d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d332:	f7e3 fc2b 	bl	8000b8c <__aeabi_dcmplt>
 801d336:	e7b3      	b.n	801d2a0 <_strtod_l+0xae0>
 801d338:	2300      	movs	r3, #0
 801d33a:	930a      	str	r3, [sp, #40]	; 0x28
 801d33c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d33e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d340:	6013      	str	r3, [r2, #0]
 801d342:	f7ff ba7c 	b.w	801c83e <_strtod_l+0x7e>
 801d346:	2a65      	cmp	r2, #101	; 0x65
 801d348:	f43f ab75 	beq.w	801ca36 <_strtod_l+0x276>
 801d34c:	2a45      	cmp	r2, #69	; 0x45
 801d34e:	f43f ab72 	beq.w	801ca36 <_strtod_l+0x276>
 801d352:	2301      	movs	r3, #1
 801d354:	f7ff bbaa 	b.w	801caac <_strtod_l+0x2ec>
 801d358:	00000000 	.word	0x00000000
 801d35c:	bff00000 	.word	0xbff00000
 801d360:	00000000 	.word	0x00000000
 801d364:	3ff00000 	.word	0x3ff00000
 801d368:	94a03595 	.word	0x94a03595
 801d36c:	3fdfffff 	.word	0x3fdfffff
 801d370:	35afe535 	.word	0x35afe535
 801d374:	3fe00000 	.word	0x3fe00000
 801d378:	ffc00000 	.word	0xffc00000
 801d37c:	41dfffff 	.word	0x41dfffff
 801d380:	94a03595 	.word	0x94a03595
 801d384:	3fcfffff 	.word	0x3fcfffff
 801d388:	3ff00000 	.word	0x3ff00000
 801d38c:	3fe00000 	.word	0x3fe00000
 801d390:	7ff00000 	.word	0x7ff00000
 801d394:	7fe00000 	.word	0x7fe00000
 801d398:	7c9fffff 	.word	0x7c9fffff
 801d39c:	7fefffff 	.word	0x7fefffff

0801d3a0 <_strtod_r>:
 801d3a0:	4b01      	ldr	r3, [pc, #4]	; (801d3a8 <_strtod_r+0x8>)
 801d3a2:	f7ff ba0d 	b.w	801c7c0 <_strtod_l>
 801d3a6:	bf00      	nop
 801d3a8:	20000210 	.word	0x20000210

0801d3ac <_strtol_l.constprop.0>:
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3b2:	d001      	beq.n	801d3b8 <_strtol_l.constprop.0+0xc>
 801d3b4:	2b24      	cmp	r3, #36	; 0x24
 801d3b6:	d906      	bls.n	801d3c6 <_strtol_l.constprop.0+0x1a>
 801d3b8:	f7fd fe26 	bl	801b008 <__errno>
 801d3bc:	2316      	movs	r3, #22
 801d3be:	6003      	str	r3, [r0, #0]
 801d3c0:	2000      	movs	r0, #0
 801d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d4ac <_strtol_l.constprop.0+0x100>
 801d3ca:	460d      	mov	r5, r1
 801d3cc:	462e      	mov	r6, r5
 801d3ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d3d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801d3d6:	f017 0708 	ands.w	r7, r7, #8
 801d3da:	d1f7      	bne.n	801d3cc <_strtol_l.constprop.0+0x20>
 801d3dc:	2c2d      	cmp	r4, #45	; 0x2d
 801d3de:	d132      	bne.n	801d446 <_strtol_l.constprop.0+0x9a>
 801d3e0:	782c      	ldrb	r4, [r5, #0]
 801d3e2:	2701      	movs	r7, #1
 801d3e4:	1cb5      	adds	r5, r6, #2
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d05b      	beq.n	801d4a2 <_strtol_l.constprop.0+0xf6>
 801d3ea:	2b10      	cmp	r3, #16
 801d3ec:	d109      	bne.n	801d402 <_strtol_l.constprop.0+0x56>
 801d3ee:	2c30      	cmp	r4, #48	; 0x30
 801d3f0:	d107      	bne.n	801d402 <_strtol_l.constprop.0+0x56>
 801d3f2:	782c      	ldrb	r4, [r5, #0]
 801d3f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d3f8:	2c58      	cmp	r4, #88	; 0x58
 801d3fa:	d14d      	bne.n	801d498 <_strtol_l.constprop.0+0xec>
 801d3fc:	786c      	ldrb	r4, [r5, #1]
 801d3fe:	2310      	movs	r3, #16
 801d400:	3502      	adds	r5, #2
 801d402:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d406:	f108 38ff 	add.w	r8, r8, #4294967295
 801d40a:	f04f 0e00 	mov.w	lr, #0
 801d40e:	fbb8 f9f3 	udiv	r9, r8, r3
 801d412:	4676      	mov	r6, lr
 801d414:	fb03 8a19 	mls	sl, r3, r9, r8
 801d418:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d41c:	f1bc 0f09 	cmp.w	ip, #9
 801d420:	d816      	bhi.n	801d450 <_strtol_l.constprop.0+0xa4>
 801d422:	4664      	mov	r4, ip
 801d424:	42a3      	cmp	r3, r4
 801d426:	dd24      	ble.n	801d472 <_strtol_l.constprop.0+0xc6>
 801d428:	f1be 3fff 	cmp.w	lr, #4294967295
 801d42c:	d008      	beq.n	801d440 <_strtol_l.constprop.0+0x94>
 801d42e:	45b1      	cmp	r9, r6
 801d430:	d31c      	bcc.n	801d46c <_strtol_l.constprop.0+0xc0>
 801d432:	d101      	bne.n	801d438 <_strtol_l.constprop.0+0x8c>
 801d434:	45a2      	cmp	sl, r4
 801d436:	db19      	blt.n	801d46c <_strtol_l.constprop.0+0xc0>
 801d438:	fb06 4603 	mla	r6, r6, r3, r4
 801d43c:	f04f 0e01 	mov.w	lr, #1
 801d440:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d444:	e7e8      	b.n	801d418 <_strtol_l.constprop.0+0x6c>
 801d446:	2c2b      	cmp	r4, #43	; 0x2b
 801d448:	bf04      	itt	eq
 801d44a:	782c      	ldrbeq	r4, [r5, #0]
 801d44c:	1cb5      	addeq	r5, r6, #2
 801d44e:	e7ca      	b.n	801d3e6 <_strtol_l.constprop.0+0x3a>
 801d450:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d454:	f1bc 0f19 	cmp.w	ip, #25
 801d458:	d801      	bhi.n	801d45e <_strtol_l.constprop.0+0xb2>
 801d45a:	3c37      	subs	r4, #55	; 0x37
 801d45c:	e7e2      	b.n	801d424 <_strtol_l.constprop.0+0x78>
 801d45e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d462:	f1bc 0f19 	cmp.w	ip, #25
 801d466:	d804      	bhi.n	801d472 <_strtol_l.constprop.0+0xc6>
 801d468:	3c57      	subs	r4, #87	; 0x57
 801d46a:	e7db      	b.n	801d424 <_strtol_l.constprop.0+0x78>
 801d46c:	f04f 3eff 	mov.w	lr, #4294967295
 801d470:	e7e6      	b.n	801d440 <_strtol_l.constprop.0+0x94>
 801d472:	f1be 3fff 	cmp.w	lr, #4294967295
 801d476:	d105      	bne.n	801d484 <_strtol_l.constprop.0+0xd8>
 801d478:	2322      	movs	r3, #34	; 0x22
 801d47a:	6003      	str	r3, [r0, #0]
 801d47c:	4646      	mov	r6, r8
 801d47e:	b942      	cbnz	r2, 801d492 <_strtol_l.constprop.0+0xe6>
 801d480:	4630      	mov	r0, r6
 801d482:	e79e      	b.n	801d3c2 <_strtol_l.constprop.0+0x16>
 801d484:	b107      	cbz	r7, 801d488 <_strtol_l.constprop.0+0xdc>
 801d486:	4276      	negs	r6, r6
 801d488:	2a00      	cmp	r2, #0
 801d48a:	d0f9      	beq.n	801d480 <_strtol_l.constprop.0+0xd4>
 801d48c:	f1be 0f00 	cmp.w	lr, #0
 801d490:	d000      	beq.n	801d494 <_strtol_l.constprop.0+0xe8>
 801d492:	1e69      	subs	r1, r5, #1
 801d494:	6011      	str	r1, [r2, #0]
 801d496:	e7f3      	b.n	801d480 <_strtol_l.constprop.0+0xd4>
 801d498:	2430      	movs	r4, #48	; 0x30
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d1b1      	bne.n	801d402 <_strtol_l.constprop.0+0x56>
 801d49e:	2308      	movs	r3, #8
 801d4a0:	e7af      	b.n	801d402 <_strtol_l.constprop.0+0x56>
 801d4a2:	2c30      	cmp	r4, #48	; 0x30
 801d4a4:	d0a5      	beq.n	801d3f2 <_strtol_l.constprop.0+0x46>
 801d4a6:	230a      	movs	r3, #10
 801d4a8:	e7ab      	b.n	801d402 <_strtol_l.constprop.0+0x56>
 801d4aa:	bf00      	nop
 801d4ac:	08020a49 	.word	0x08020a49

0801d4b0 <_strtol_r>:
 801d4b0:	f7ff bf7c 	b.w	801d3ac <_strtol_l.constprop.0>

0801d4b4 <__ssputs_r>:
 801d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4b8:	688e      	ldr	r6, [r1, #8]
 801d4ba:	461f      	mov	r7, r3
 801d4bc:	42be      	cmp	r6, r7
 801d4be:	680b      	ldr	r3, [r1, #0]
 801d4c0:	4682      	mov	sl, r0
 801d4c2:	460c      	mov	r4, r1
 801d4c4:	4690      	mov	r8, r2
 801d4c6:	d82c      	bhi.n	801d522 <__ssputs_r+0x6e>
 801d4c8:	898a      	ldrh	r2, [r1, #12]
 801d4ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d4ce:	d026      	beq.n	801d51e <__ssputs_r+0x6a>
 801d4d0:	6965      	ldr	r5, [r4, #20]
 801d4d2:	6909      	ldr	r1, [r1, #16]
 801d4d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d4d8:	eba3 0901 	sub.w	r9, r3, r1
 801d4dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d4e0:	1c7b      	adds	r3, r7, #1
 801d4e2:	444b      	add	r3, r9
 801d4e4:	106d      	asrs	r5, r5, #1
 801d4e6:	429d      	cmp	r5, r3
 801d4e8:	bf38      	it	cc
 801d4ea:	461d      	movcc	r5, r3
 801d4ec:	0553      	lsls	r3, r2, #21
 801d4ee:	d527      	bpl.n	801d540 <__ssputs_r+0x8c>
 801d4f0:	4629      	mov	r1, r5
 801d4f2:	f7fc fb27 	bl	8019b44 <_malloc_r>
 801d4f6:	4606      	mov	r6, r0
 801d4f8:	b360      	cbz	r0, 801d554 <__ssputs_r+0xa0>
 801d4fa:	6921      	ldr	r1, [r4, #16]
 801d4fc:	464a      	mov	r2, r9
 801d4fe:	f7fd fdb0 	bl	801b062 <memcpy>
 801d502:	89a3      	ldrh	r3, [r4, #12]
 801d504:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d50c:	81a3      	strh	r3, [r4, #12]
 801d50e:	6126      	str	r6, [r4, #16]
 801d510:	6165      	str	r5, [r4, #20]
 801d512:	444e      	add	r6, r9
 801d514:	eba5 0509 	sub.w	r5, r5, r9
 801d518:	6026      	str	r6, [r4, #0]
 801d51a:	60a5      	str	r5, [r4, #8]
 801d51c:	463e      	mov	r6, r7
 801d51e:	42be      	cmp	r6, r7
 801d520:	d900      	bls.n	801d524 <__ssputs_r+0x70>
 801d522:	463e      	mov	r6, r7
 801d524:	6820      	ldr	r0, [r4, #0]
 801d526:	4632      	mov	r2, r6
 801d528:	4641      	mov	r1, r8
 801d52a:	f000 ff35 	bl	801e398 <memmove>
 801d52e:	68a3      	ldr	r3, [r4, #8]
 801d530:	1b9b      	subs	r3, r3, r6
 801d532:	60a3      	str	r3, [r4, #8]
 801d534:	6823      	ldr	r3, [r4, #0]
 801d536:	4433      	add	r3, r6
 801d538:	6023      	str	r3, [r4, #0]
 801d53a:	2000      	movs	r0, #0
 801d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d540:	462a      	mov	r2, r5
 801d542:	f001 fb20 	bl	801eb86 <_realloc_r>
 801d546:	4606      	mov	r6, r0
 801d548:	2800      	cmp	r0, #0
 801d54a:	d1e0      	bne.n	801d50e <__ssputs_r+0x5a>
 801d54c:	6921      	ldr	r1, [r4, #16]
 801d54e:	4650      	mov	r0, sl
 801d550:	f7fe fc20 	bl	801bd94 <_free_r>
 801d554:	230c      	movs	r3, #12
 801d556:	f8ca 3000 	str.w	r3, [sl]
 801d55a:	89a3      	ldrh	r3, [r4, #12]
 801d55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d560:	81a3      	strh	r3, [r4, #12]
 801d562:	f04f 30ff 	mov.w	r0, #4294967295
 801d566:	e7e9      	b.n	801d53c <__ssputs_r+0x88>

0801d568 <_svfiprintf_r>:
 801d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d56c:	4698      	mov	r8, r3
 801d56e:	898b      	ldrh	r3, [r1, #12]
 801d570:	061b      	lsls	r3, r3, #24
 801d572:	b09d      	sub	sp, #116	; 0x74
 801d574:	4607      	mov	r7, r0
 801d576:	460d      	mov	r5, r1
 801d578:	4614      	mov	r4, r2
 801d57a:	d50e      	bpl.n	801d59a <_svfiprintf_r+0x32>
 801d57c:	690b      	ldr	r3, [r1, #16]
 801d57e:	b963      	cbnz	r3, 801d59a <_svfiprintf_r+0x32>
 801d580:	2140      	movs	r1, #64	; 0x40
 801d582:	f7fc fadf 	bl	8019b44 <_malloc_r>
 801d586:	6028      	str	r0, [r5, #0]
 801d588:	6128      	str	r0, [r5, #16]
 801d58a:	b920      	cbnz	r0, 801d596 <_svfiprintf_r+0x2e>
 801d58c:	230c      	movs	r3, #12
 801d58e:	603b      	str	r3, [r7, #0]
 801d590:	f04f 30ff 	mov.w	r0, #4294967295
 801d594:	e0d0      	b.n	801d738 <_svfiprintf_r+0x1d0>
 801d596:	2340      	movs	r3, #64	; 0x40
 801d598:	616b      	str	r3, [r5, #20]
 801d59a:	2300      	movs	r3, #0
 801d59c:	9309      	str	r3, [sp, #36]	; 0x24
 801d59e:	2320      	movs	r3, #32
 801d5a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d5a4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d5a8:	2330      	movs	r3, #48	; 0x30
 801d5aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801d750 <_svfiprintf_r+0x1e8>
 801d5ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d5b2:	f04f 0901 	mov.w	r9, #1
 801d5b6:	4623      	mov	r3, r4
 801d5b8:	469a      	mov	sl, r3
 801d5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d5be:	b10a      	cbz	r2, 801d5c4 <_svfiprintf_r+0x5c>
 801d5c0:	2a25      	cmp	r2, #37	; 0x25
 801d5c2:	d1f9      	bne.n	801d5b8 <_svfiprintf_r+0x50>
 801d5c4:	ebba 0b04 	subs.w	fp, sl, r4
 801d5c8:	d00b      	beq.n	801d5e2 <_svfiprintf_r+0x7a>
 801d5ca:	465b      	mov	r3, fp
 801d5cc:	4622      	mov	r2, r4
 801d5ce:	4629      	mov	r1, r5
 801d5d0:	4638      	mov	r0, r7
 801d5d2:	f7ff ff6f 	bl	801d4b4 <__ssputs_r>
 801d5d6:	3001      	adds	r0, #1
 801d5d8:	f000 80a9 	beq.w	801d72e <_svfiprintf_r+0x1c6>
 801d5dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d5de:	445a      	add	r2, fp
 801d5e0:	9209      	str	r2, [sp, #36]	; 0x24
 801d5e2:	f89a 3000 	ldrb.w	r3, [sl]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	f000 80a1 	beq.w	801d72e <_svfiprintf_r+0x1c6>
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	f04f 32ff 	mov.w	r2, #4294967295
 801d5f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d5f6:	f10a 0a01 	add.w	sl, sl, #1
 801d5fa:	9304      	str	r3, [sp, #16]
 801d5fc:	9307      	str	r3, [sp, #28]
 801d5fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d602:	931a      	str	r3, [sp, #104]	; 0x68
 801d604:	4654      	mov	r4, sl
 801d606:	2205      	movs	r2, #5
 801d608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d60c:	4850      	ldr	r0, [pc, #320]	; (801d750 <_svfiprintf_r+0x1e8>)
 801d60e:	f7e2 fe37 	bl	8000280 <memchr>
 801d612:	9a04      	ldr	r2, [sp, #16]
 801d614:	b9d8      	cbnz	r0, 801d64e <_svfiprintf_r+0xe6>
 801d616:	06d0      	lsls	r0, r2, #27
 801d618:	bf44      	itt	mi
 801d61a:	2320      	movmi	r3, #32
 801d61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d620:	0711      	lsls	r1, r2, #28
 801d622:	bf44      	itt	mi
 801d624:	232b      	movmi	r3, #43	; 0x2b
 801d626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d62a:	f89a 3000 	ldrb.w	r3, [sl]
 801d62e:	2b2a      	cmp	r3, #42	; 0x2a
 801d630:	d015      	beq.n	801d65e <_svfiprintf_r+0xf6>
 801d632:	9a07      	ldr	r2, [sp, #28]
 801d634:	4654      	mov	r4, sl
 801d636:	2000      	movs	r0, #0
 801d638:	f04f 0c0a 	mov.w	ip, #10
 801d63c:	4621      	mov	r1, r4
 801d63e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d642:	3b30      	subs	r3, #48	; 0x30
 801d644:	2b09      	cmp	r3, #9
 801d646:	d94d      	bls.n	801d6e4 <_svfiprintf_r+0x17c>
 801d648:	b1b0      	cbz	r0, 801d678 <_svfiprintf_r+0x110>
 801d64a:	9207      	str	r2, [sp, #28]
 801d64c:	e014      	b.n	801d678 <_svfiprintf_r+0x110>
 801d64e:	eba0 0308 	sub.w	r3, r0, r8
 801d652:	fa09 f303 	lsl.w	r3, r9, r3
 801d656:	4313      	orrs	r3, r2
 801d658:	9304      	str	r3, [sp, #16]
 801d65a:	46a2      	mov	sl, r4
 801d65c:	e7d2      	b.n	801d604 <_svfiprintf_r+0x9c>
 801d65e:	9b03      	ldr	r3, [sp, #12]
 801d660:	1d19      	adds	r1, r3, #4
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	9103      	str	r1, [sp, #12]
 801d666:	2b00      	cmp	r3, #0
 801d668:	bfbb      	ittet	lt
 801d66a:	425b      	neglt	r3, r3
 801d66c:	f042 0202 	orrlt.w	r2, r2, #2
 801d670:	9307      	strge	r3, [sp, #28]
 801d672:	9307      	strlt	r3, [sp, #28]
 801d674:	bfb8      	it	lt
 801d676:	9204      	strlt	r2, [sp, #16]
 801d678:	7823      	ldrb	r3, [r4, #0]
 801d67a:	2b2e      	cmp	r3, #46	; 0x2e
 801d67c:	d10c      	bne.n	801d698 <_svfiprintf_r+0x130>
 801d67e:	7863      	ldrb	r3, [r4, #1]
 801d680:	2b2a      	cmp	r3, #42	; 0x2a
 801d682:	d134      	bne.n	801d6ee <_svfiprintf_r+0x186>
 801d684:	9b03      	ldr	r3, [sp, #12]
 801d686:	1d1a      	adds	r2, r3, #4
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	9203      	str	r2, [sp, #12]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	bfb8      	it	lt
 801d690:	f04f 33ff 	movlt.w	r3, #4294967295
 801d694:	3402      	adds	r4, #2
 801d696:	9305      	str	r3, [sp, #20]
 801d698:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801d760 <_svfiprintf_r+0x1f8>
 801d69c:	7821      	ldrb	r1, [r4, #0]
 801d69e:	2203      	movs	r2, #3
 801d6a0:	4650      	mov	r0, sl
 801d6a2:	f7e2 fded 	bl	8000280 <memchr>
 801d6a6:	b138      	cbz	r0, 801d6b8 <_svfiprintf_r+0x150>
 801d6a8:	9b04      	ldr	r3, [sp, #16]
 801d6aa:	eba0 000a 	sub.w	r0, r0, sl
 801d6ae:	2240      	movs	r2, #64	; 0x40
 801d6b0:	4082      	lsls	r2, r0
 801d6b2:	4313      	orrs	r3, r2
 801d6b4:	3401      	adds	r4, #1
 801d6b6:	9304      	str	r3, [sp, #16]
 801d6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6bc:	4825      	ldr	r0, [pc, #148]	; (801d754 <_svfiprintf_r+0x1ec>)
 801d6be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d6c2:	2206      	movs	r2, #6
 801d6c4:	f7e2 fddc 	bl	8000280 <memchr>
 801d6c8:	2800      	cmp	r0, #0
 801d6ca:	d038      	beq.n	801d73e <_svfiprintf_r+0x1d6>
 801d6cc:	4b22      	ldr	r3, [pc, #136]	; (801d758 <_svfiprintf_r+0x1f0>)
 801d6ce:	bb1b      	cbnz	r3, 801d718 <_svfiprintf_r+0x1b0>
 801d6d0:	9b03      	ldr	r3, [sp, #12]
 801d6d2:	3307      	adds	r3, #7
 801d6d4:	f023 0307 	bic.w	r3, r3, #7
 801d6d8:	3308      	adds	r3, #8
 801d6da:	9303      	str	r3, [sp, #12]
 801d6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6de:	4433      	add	r3, r6
 801d6e0:	9309      	str	r3, [sp, #36]	; 0x24
 801d6e2:	e768      	b.n	801d5b6 <_svfiprintf_r+0x4e>
 801d6e4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d6e8:	460c      	mov	r4, r1
 801d6ea:	2001      	movs	r0, #1
 801d6ec:	e7a6      	b.n	801d63c <_svfiprintf_r+0xd4>
 801d6ee:	2300      	movs	r3, #0
 801d6f0:	3401      	adds	r4, #1
 801d6f2:	9305      	str	r3, [sp, #20]
 801d6f4:	4619      	mov	r1, r3
 801d6f6:	f04f 0c0a 	mov.w	ip, #10
 801d6fa:	4620      	mov	r0, r4
 801d6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d700:	3a30      	subs	r2, #48	; 0x30
 801d702:	2a09      	cmp	r2, #9
 801d704:	d903      	bls.n	801d70e <_svfiprintf_r+0x1a6>
 801d706:	2b00      	cmp	r3, #0
 801d708:	d0c6      	beq.n	801d698 <_svfiprintf_r+0x130>
 801d70a:	9105      	str	r1, [sp, #20]
 801d70c:	e7c4      	b.n	801d698 <_svfiprintf_r+0x130>
 801d70e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d712:	4604      	mov	r4, r0
 801d714:	2301      	movs	r3, #1
 801d716:	e7f0      	b.n	801d6fa <_svfiprintf_r+0x192>
 801d718:	ab03      	add	r3, sp, #12
 801d71a:	9300      	str	r3, [sp, #0]
 801d71c:	462a      	mov	r2, r5
 801d71e:	4b0f      	ldr	r3, [pc, #60]	; (801d75c <_svfiprintf_r+0x1f4>)
 801d720:	a904      	add	r1, sp, #16
 801d722:	4638      	mov	r0, r7
 801d724:	f7fc fcc2 	bl	801a0ac <_printf_float>
 801d728:	1c42      	adds	r2, r0, #1
 801d72a:	4606      	mov	r6, r0
 801d72c:	d1d6      	bne.n	801d6dc <_svfiprintf_r+0x174>
 801d72e:	89ab      	ldrh	r3, [r5, #12]
 801d730:	065b      	lsls	r3, r3, #25
 801d732:	f53f af2d 	bmi.w	801d590 <_svfiprintf_r+0x28>
 801d736:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d738:	b01d      	add	sp, #116	; 0x74
 801d73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d73e:	ab03      	add	r3, sp, #12
 801d740:	9300      	str	r3, [sp, #0]
 801d742:	462a      	mov	r2, r5
 801d744:	4b05      	ldr	r3, [pc, #20]	; (801d75c <_svfiprintf_r+0x1f4>)
 801d746:	a904      	add	r1, sp, #16
 801d748:	4638      	mov	r0, r7
 801d74a:	f7fc ff53 	bl	801a5f4 <_printf_i>
 801d74e:	e7eb      	b.n	801d728 <_svfiprintf_r+0x1c0>
 801d750:	08020b49 	.word	0x08020b49
 801d754:	08020b53 	.word	0x08020b53
 801d758:	0801a0ad 	.word	0x0801a0ad
 801d75c:	0801d4b5 	.word	0x0801d4b5
 801d760:	08020b4f 	.word	0x08020b4f

0801d764 <_sungetc_r>:
 801d764:	b538      	push	{r3, r4, r5, lr}
 801d766:	1c4b      	adds	r3, r1, #1
 801d768:	4614      	mov	r4, r2
 801d76a:	d103      	bne.n	801d774 <_sungetc_r+0x10>
 801d76c:	f04f 35ff 	mov.w	r5, #4294967295
 801d770:	4628      	mov	r0, r5
 801d772:	bd38      	pop	{r3, r4, r5, pc}
 801d774:	8993      	ldrh	r3, [r2, #12]
 801d776:	f023 0320 	bic.w	r3, r3, #32
 801d77a:	8193      	strh	r3, [r2, #12]
 801d77c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d77e:	6852      	ldr	r2, [r2, #4]
 801d780:	b2cd      	uxtb	r5, r1
 801d782:	b18b      	cbz	r3, 801d7a8 <_sungetc_r+0x44>
 801d784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d786:	4293      	cmp	r3, r2
 801d788:	dd08      	ble.n	801d79c <_sungetc_r+0x38>
 801d78a:	6823      	ldr	r3, [r4, #0]
 801d78c:	1e5a      	subs	r2, r3, #1
 801d78e:	6022      	str	r2, [r4, #0]
 801d790:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d794:	6863      	ldr	r3, [r4, #4]
 801d796:	3301      	adds	r3, #1
 801d798:	6063      	str	r3, [r4, #4]
 801d79a:	e7e9      	b.n	801d770 <_sungetc_r+0xc>
 801d79c:	4621      	mov	r1, r4
 801d79e:	f000 fd2c 	bl	801e1fa <__submore>
 801d7a2:	2800      	cmp	r0, #0
 801d7a4:	d0f1      	beq.n	801d78a <_sungetc_r+0x26>
 801d7a6:	e7e1      	b.n	801d76c <_sungetc_r+0x8>
 801d7a8:	6921      	ldr	r1, [r4, #16]
 801d7aa:	6823      	ldr	r3, [r4, #0]
 801d7ac:	b151      	cbz	r1, 801d7c4 <_sungetc_r+0x60>
 801d7ae:	4299      	cmp	r1, r3
 801d7b0:	d208      	bcs.n	801d7c4 <_sungetc_r+0x60>
 801d7b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d7b6:	42a9      	cmp	r1, r5
 801d7b8:	d104      	bne.n	801d7c4 <_sungetc_r+0x60>
 801d7ba:	3b01      	subs	r3, #1
 801d7bc:	3201      	adds	r2, #1
 801d7be:	6023      	str	r3, [r4, #0]
 801d7c0:	6062      	str	r2, [r4, #4]
 801d7c2:	e7d5      	b.n	801d770 <_sungetc_r+0xc>
 801d7c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801d7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7cc:	6363      	str	r3, [r4, #52]	; 0x34
 801d7ce:	2303      	movs	r3, #3
 801d7d0:	63a3      	str	r3, [r4, #56]	; 0x38
 801d7d2:	4623      	mov	r3, r4
 801d7d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d7d8:	6023      	str	r3, [r4, #0]
 801d7da:	2301      	movs	r3, #1
 801d7dc:	e7dc      	b.n	801d798 <_sungetc_r+0x34>

0801d7de <__ssrefill_r>:
 801d7de:	b510      	push	{r4, lr}
 801d7e0:	460c      	mov	r4, r1
 801d7e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801d7e4:	b169      	cbz	r1, 801d802 <__ssrefill_r+0x24>
 801d7e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7ea:	4299      	cmp	r1, r3
 801d7ec:	d001      	beq.n	801d7f2 <__ssrefill_r+0x14>
 801d7ee:	f7fe fad1 	bl	801bd94 <_free_r>
 801d7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d7f4:	6063      	str	r3, [r4, #4]
 801d7f6:	2000      	movs	r0, #0
 801d7f8:	6360      	str	r0, [r4, #52]	; 0x34
 801d7fa:	b113      	cbz	r3, 801d802 <__ssrefill_r+0x24>
 801d7fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d7fe:	6023      	str	r3, [r4, #0]
 801d800:	bd10      	pop	{r4, pc}
 801d802:	6923      	ldr	r3, [r4, #16]
 801d804:	6023      	str	r3, [r4, #0]
 801d806:	2300      	movs	r3, #0
 801d808:	6063      	str	r3, [r4, #4]
 801d80a:	89a3      	ldrh	r3, [r4, #12]
 801d80c:	f043 0320 	orr.w	r3, r3, #32
 801d810:	81a3      	strh	r3, [r4, #12]
 801d812:	f04f 30ff 	mov.w	r0, #4294967295
 801d816:	e7f3      	b.n	801d800 <__ssrefill_r+0x22>

0801d818 <__ssvfiscanf_r>:
 801d818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d81c:	460c      	mov	r4, r1
 801d81e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801d822:	2100      	movs	r1, #0
 801d824:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801d828:	49a6      	ldr	r1, [pc, #664]	; (801dac4 <__ssvfiscanf_r+0x2ac>)
 801d82a:	91a0      	str	r1, [sp, #640]	; 0x280
 801d82c:	f10d 0804 	add.w	r8, sp, #4
 801d830:	49a5      	ldr	r1, [pc, #660]	; (801dac8 <__ssvfiscanf_r+0x2b0>)
 801d832:	4fa6      	ldr	r7, [pc, #664]	; (801dacc <__ssvfiscanf_r+0x2b4>)
 801d834:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801dad0 <__ssvfiscanf_r+0x2b8>
 801d838:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801d83c:	4606      	mov	r6, r0
 801d83e:	91a1      	str	r1, [sp, #644]	; 0x284
 801d840:	9300      	str	r3, [sp, #0]
 801d842:	7813      	ldrb	r3, [r2, #0]
 801d844:	2b00      	cmp	r3, #0
 801d846:	f000 815a 	beq.w	801dafe <__ssvfiscanf_r+0x2e6>
 801d84a:	5cf9      	ldrb	r1, [r7, r3]
 801d84c:	f011 0108 	ands.w	r1, r1, #8
 801d850:	f102 0501 	add.w	r5, r2, #1
 801d854:	d019      	beq.n	801d88a <__ssvfiscanf_r+0x72>
 801d856:	6863      	ldr	r3, [r4, #4]
 801d858:	2b00      	cmp	r3, #0
 801d85a:	dd0f      	ble.n	801d87c <__ssvfiscanf_r+0x64>
 801d85c:	6823      	ldr	r3, [r4, #0]
 801d85e:	781a      	ldrb	r2, [r3, #0]
 801d860:	5cba      	ldrb	r2, [r7, r2]
 801d862:	0712      	lsls	r2, r2, #28
 801d864:	d401      	bmi.n	801d86a <__ssvfiscanf_r+0x52>
 801d866:	462a      	mov	r2, r5
 801d868:	e7eb      	b.n	801d842 <__ssvfiscanf_r+0x2a>
 801d86a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d86c:	3201      	adds	r2, #1
 801d86e:	9245      	str	r2, [sp, #276]	; 0x114
 801d870:	6862      	ldr	r2, [r4, #4]
 801d872:	3301      	adds	r3, #1
 801d874:	3a01      	subs	r2, #1
 801d876:	6062      	str	r2, [r4, #4]
 801d878:	6023      	str	r3, [r4, #0]
 801d87a:	e7ec      	b.n	801d856 <__ssvfiscanf_r+0x3e>
 801d87c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d87e:	4621      	mov	r1, r4
 801d880:	4630      	mov	r0, r6
 801d882:	4798      	blx	r3
 801d884:	2800      	cmp	r0, #0
 801d886:	d0e9      	beq.n	801d85c <__ssvfiscanf_r+0x44>
 801d888:	e7ed      	b.n	801d866 <__ssvfiscanf_r+0x4e>
 801d88a:	2b25      	cmp	r3, #37	; 0x25
 801d88c:	d012      	beq.n	801d8b4 <__ssvfiscanf_r+0x9c>
 801d88e:	469a      	mov	sl, r3
 801d890:	6863      	ldr	r3, [r4, #4]
 801d892:	2b00      	cmp	r3, #0
 801d894:	f340 8091 	ble.w	801d9ba <__ssvfiscanf_r+0x1a2>
 801d898:	6822      	ldr	r2, [r4, #0]
 801d89a:	7813      	ldrb	r3, [r2, #0]
 801d89c:	4553      	cmp	r3, sl
 801d89e:	f040 812e 	bne.w	801dafe <__ssvfiscanf_r+0x2e6>
 801d8a2:	6863      	ldr	r3, [r4, #4]
 801d8a4:	3b01      	subs	r3, #1
 801d8a6:	6063      	str	r3, [r4, #4]
 801d8a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801d8aa:	3201      	adds	r2, #1
 801d8ac:	3301      	adds	r3, #1
 801d8ae:	6022      	str	r2, [r4, #0]
 801d8b0:	9345      	str	r3, [sp, #276]	; 0x114
 801d8b2:	e7d8      	b.n	801d866 <__ssvfiscanf_r+0x4e>
 801d8b4:	9141      	str	r1, [sp, #260]	; 0x104
 801d8b6:	9143      	str	r1, [sp, #268]	; 0x10c
 801d8b8:	7853      	ldrb	r3, [r2, #1]
 801d8ba:	2b2a      	cmp	r3, #42	; 0x2a
 801d8bc:	bf02      	ittt	eq
 801d8be:	2310      	moveq	r3, #16
 801d8c0:	1c95      	addeq	r5, r2, #2
 801d8c2:	9341      	streq	r3, [sp, #260]	; 0x104
 801d8c4:	220a      	movs	r2, #10
 801d8c6:	46aa      	mov	sl, r5
 801d8c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d8cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801d8d0:	2b09      	cmp	r3, #9
 801d8d2:	d91c      	bls.n	801d90e <__ssvfiscanf_r+0xf6>
 801d8d4:	487e      	ldr	r0, [pc, #504]	; (801dad0 <__ssvfiscanf_r+0x2b8>)
 801d8d6:	2203      	movs	r2, #3
 801d8d8:	f7e2 fcd2 	bl	8000280 <memchr>
 801d8dc:	b138      	cbz	r0, 801d8ee <__ssvfiscanf_r+0xd6>
 801d8de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d8e0:	eba0 0009 	sub.w	r0, r0, r9
 801d8e4:	2301      	movs	r3, #1
 801d8e6:	4083      	lsls	r3, r0
 801d8e8:	4313      	orrs	r3, r2
 801d8ea:	9341      	str	r3, [sp, #260]	; 0x104
 801d8ec:	4655      	mov	r5, sl
 801d8ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d8f2:	2b78      	cmp	r3, #120	; 0x78
 801d8f4:	d806      	bhi.n	801d904 <__ssvfiscanf_r+0xec>
 801d8f6:	2b57      	cmp	r3, #87	; 0x57
 801d8f8:	d810      	bhi.n	801d91c <__ssvfiscanf_r+0x104>
 801d8fa:	2b25      	cmp	r3, #37	; 0x25
 801d8fc:	d0c7      	beq.n	801d88e <__ssvfiscanf_r+0x76>
 801d8fe:	d857      	bhi.n	801d9b0 <__ssvfiscanf_r+0x198>
 801d900:	2b00      	cmp	r3, #0
 801d902:	d065      	beq.n	801d9d0 <__ssvfiscanf_r+0x1b8>
 801d904:	2303      	movs	r3, #3
 801d906:	9347      	str	r3, [sp, #284]	; 0x11c
 801d908:	230a      	movs	r3, #10
 801d90a:	9342      	str	r3, [sp, #264]	; 0x108
 801d90c:	e076      	b.n	801d9fc <__ssvfiscanf_r+0x1e4>
 801d90e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801d910:	fb02 1103 	mla	r1, r2, r3, r1
 801d914:	3930      	subs	r1, #48	; 0x30
 801d916:	9143      	str	r1, [sp, #268]	; 0x10c
 801d918:	4655      	mov	r5, sl
 801d91a:	e7d4      	b.n	801d8c6 <__ssvfiscanf_r+0xae>
 801d91c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801d920:	2a20      	cmp	r2, #32
 801d922:	d8ef      	bhi.n	801d904 <__ssvfiscanf_r+0xec>
 801d924:	a101      	add	r1, pc, #4	; (adr r1, 801d92c <__ssvfiscanf_r+0x114>)
 801d926:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d92a:	bf00      	nop
 801d92c:	0801d9df 	.word	0x0801d9df
 801d930:	0801d905 	.word	0x0801d905
 801d934:	0801d905 	.word	0x0801d905
 801d938:	0801da3d 	.word	0x0801da3d
 801d93c:	0801d905 	.word	0x0801d905
 801d940:	0801d905 	.word	0x0801d905
 801d944:	0801d905 	.word	0x0801d905
 801d948:	0801d905 	.word	0x0801d905
 801d94c:	0801d905 	.word	0x0801d905
 801d950:	0801d905 	.word	0x0801d905
 801d954:	0801d905 	.word	0x0801d905
 801d958:	0801da53 	.word	0x0801da53
 801d95c:	0801da39 	.word	0x0801da39
 801d960:	0801d9b7 	.word	0x0801d9b7
 801d964:	0801d9b7 	.word	0x0801d9b7
 801d968:	0801d9b7 	.word	0x0801d9b7
 801d96c:	0801d905 	.word	0x0801d905
 801d970:	0801d9f5 	.word	0x0801d9f5
 801d974:	0801d905 	.word	0x0801d905
 801d978:	0801d905 	.word	0x0801d905
 801d97c:	0801d905 	.word	0x0801d905
 801d980:	0801d905 	.word	0x0801d905
 801d984:	0801da63 	.word	0x0801da63
 801d988:	0801da31 	.word	0x0801da31
 801d98c:	0801d9d7 	.word	0x0801d9d7
 801d990:	0801d905 	.word	0x0801d905
 801d994:	0801d905 	.word	0x0801d905
 801d998:	0801da5f 	.word	0x0801da5f
 801d99c:	0801d905 	.word	0x0801d905
 801d9a0:	0801da39 	.word	0x0801da39
 801d9a4:	0801d905 	.word	0x0801d905
 801d9a8:	0801d905 	.word	0x0801d905
 801d9ac:	0801d9df 	.word	0x0801d9df
 801d9b0:	3b45      	subs	r3, #69	; 0x45
 801d9b2:	2b02      	cmp	r3, #2
 801d9b4:	d8a6      	bhi.n	801d904 <__ssvfiscanf_r+0xec>
 801d9b6:	2305      	movs	r3, #5
 801d9b8:	e01f      	b.n	801d9fa <__ssvfiscanf_r+0x1e2>
 801d9ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d9bc:	4621      	mov	r1, r4
 801d9be:	4630      	mov	r0, r6
 801d9c0:	4798      	blx	r3
 801d9c2:	2800      	cmp	r0, #0
 801d9c4:	f43f af68 	beq.w	801d898 <__ssvfiscanf_r+0x80>
 801d9c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d9ca:	2800      	cmp	r0, #0
 801d9cc:	f040 808d 	bne.w	801daea <__ssvfiscanf_r+0x2d2>
 801d9d0:	f04f 30ff 	mov.w	r0, #4294967295
 801d9d4:	e08f      	b.n	801daf6 <__ssvfiscanf_r+0x2de>
 801d9d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d9d8:	f042 0220 	orr.w	r2, r2, #32
 801d9dc:	9241      	str	r2, [sp, #260]	; 0x104
 801d9de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d9e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d9e4:	9241      	str	r2, [sp, #260]	; 0x104
 801d9e6:	2210      	movs	r2, #16
 801d9e8:	2b6f      	cmp	r3, #111	; 0x6f
 801d9ea:	9242      	str	r2, [sp, #264]	; 0x108
 801d9ec:	bf34      	ite	cc
 801d9ee:	2303      	movcc	r3, #3
 801d9f0:	2304      	movcs	r3, #4
 801d9f2:	e002      	b.n	801d9fa <__ssvfiscanf_r+0x1e2>
 801d9f4:	2300      	movs	r3, #0
 801d9f6:	9342      	str	r3, [sp, #264]	; 0x108
 801d9f8:	2303      	movs	r3, #3
 801d9fa:	9347      	str	r3, [sp, #284]	; 0x11c
 801d9fc:	6863      	ldr	r3, [r4, #4]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	dd3d      	ble.n	801da7e <__ssvfiscanf_r+0x266>
 801da02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801da04:	0659      	lsls	r1, r3, #25
 801da06:	d404      	bmi.n	801da12 <__ssvfiscanf_r+0x1fa>
 801da08:	6823      	ldr	r3, [r4, #0]
 801da0a:	781a      	ldrb	r2, [r3, #0]
 801da0c:	5cba      	ldrb	r2, [r7, r2]
 801da0e:	0712      	lsls	r2, r2, #28
 801da10:	d43c      	bmi.n	801da8c <__ssvfiscanf_r+0x274>
 801da12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801da14:	2b02      	cmp	r3, #2
 801da16:	dc4b      	bgt.n	801dab0 <__ssvfiscanf_r+0x298>
 801da18:	466b      	mov	r3, sp
 801da1a:	4622      	mov	r2, r4
 801da1c:	a941      	add	r1, sp, #260	; 0x104
 801da1e:	4630      	mov	r0, r6
 801da20:	f000 f9b6 	bl	801dd90 <_scanf_chars>
 801da24:	2801      	cmp	r0, #1
 801da26:	d06a      	beq.n	801dafe <__ssvfiscanf_r+0x2e6>
 801da28:	2802      	cmp	r0, #2
 801da2a:	f47f af1c 	bne.w	801d866 <__ssvfiscanf_r+0x4e>
 801da2e:	e7cb      	b.n	801d9c8 <__ssvfiscanf_r+0x1b0>
 801da30:	2308      	movs	r3, #8
 801da32:	9342      	str	r3, [sp, #264]	; 0x108
 801da34:	2304      	movs	r3, #4
 801da36:	e7e0      	b.n	801d9fa <__ssvfiscanf_r+0x1e2>
 801da38:	220a      	movs	r2, #10
 801da3a:	e7d5      	b.n	801d9e8 <__ssvfiscanf_r+0x1d0>
 801da3c:	4629      	mov	r1, r5
 801da3e:	4640      	mov	r0, r8
 801da40:	f000 fba2 	bl	801e188 <__sccl>
 801da44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801da46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da4a:	9341      	str	r3, [sp, #260]	; 0x104
 801da4c:	4605      	mov	r5, r0
 801da4e:	2301      	movs	r3, #1
 801da50:	e7d3      	b.n	801d9fa <__ssvfiscanf_r+0x1e2>
 801da52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801da54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da58:	9341      	str	r3, [sp, #260]	; 0x104
 801da5a:	2300      	movs	r3, #0
 801da5c:	e7cd      	b.n	801d9fa <__ssvfiscanf_r+0x1e2>
 801da5e:	2302      	movs	r3, #2
 801da60:	e7cb      	b.n	801d9fa <__ssvfiscanf_r+0x1e2>
 801da62:	9841      	ldr	r0, [sp, #260]	; 0x104
 801da64:	06c3      	lsls	r3, r0, #27
 801da66:	f53f aefe 	bmi.w	801d866 <__ssvfiscanf_r+0x4e>
 801da6a:	9b00      	ldr	r3, [sp, #0]
 801da6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801da6e:	1d19      	adds	r1, r3, #4
 801da70:	9100      	str	r1, [sp, #0]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	07c0      	lsls	r0, r0, #31
 801da76:	bf4c      	ite	mi
 801da78:	801a      	strhmi	r2, [r3, #0]
 801da7a:	601a      	strpl	r2, [r3, #0]
 801da7c:	e6f3      	b.n	801d866 <__ssvfiscanf_r+0x4e>
 801da7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801da80:	4621      	mov	r1, r4
 801da82:	4630      	mov	r0, r6
 801da84:	4798      	blx	r3
 801da86:	2800      	cmp	r0, #0
 801da88:	d0bb      	beq.n	801da02 <__ssvfiscanf_r+0x1ea>
 801da8a:	e79d      	b.n	801d9c8 <__ssvfiscanf_r+0x1b0>
 801da8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801da8e:	3201      	adds	r2, #1
 801da90:	9245      	str	r2, [sp, #276]	; 0x114
 801da92:	6862      	ldr	r2, [r4, #4]
 801da94:	3a01      	subs	r2, #1
 801da96:	2a00      	cmp	r2, #0
 801da98:	6062      	str	r2, [r4, #4]
 801da9a:	dd02      	ble.n	801daa2 <__ssvfiscanf_r+0x28a>
 801da9c:	3301      	adds	r3, #1
 801da9e:	6023      	str	r3, [r4, #0]
 801daa0:	e7b2      	b.n	801da08 <__ssvfiscanf_r+0x1f0>
 801daa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801daa4:	4621      	mov	r1, r4
 801daa6:	4630      	mov	r0, r6
 801daa8:	4798      	blx	r3
 801daaa:	2800      	cmp	r0, #0
 801daac:	d0ac      	beq.n	801da08 <__ssvfiscanf_r+0x1f0>
 801daae:	e78b      	b.n	801d9c8 <__ssvfiscanf_r+0x1b0>
 801dab0:	2b04      	cmp	r3, #4
 801dab2:	dc0f      	bgt.n	801dad4 <__ssvfiscanf_r+0x2bc>
 801dab4:	466b      	mov	r3, sp
 801dab6:	4622      	mov	r2, r4
 801dab8:	a941      	add	r1, sp, #260	; 0x104
 801daba:	4630      	mov	r0, r6
 801dabc:	f000 f9c2 	bl	801de44 <_scanf_i>
 801dac0:	e7b0      	b.n	801da24 <__ssvfiscanf_r+0x20c>
 801dac2:	bf00      	nop
 801dac4:	0801d765 	.word	0x0801d765
 801dac8:	0801d7df 	.word	0x0801d7df
 801dacc:	08020a49 	.word	0x08020a49
 801dad0:	08020b4f 	.word	0x08020b4f
 801dad4:	4b0b      	ldr	r3, [pc, #44]	; (801db04 <__ssvfiscanf_r+0x2ec>)
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	f43f aec5 	beq.w	801d866 <__ssvfiscanf_r+0x4e>
 801dadc:	466b      	mov	r3, sp
 801dade:	4622      	mov	r2, r4
 801dae0:	a941      	add	r1, sp, #260	; 0x104
 801dae2:	4630      	mov	r0, r6
 801dae4:	f7fc fea8 	bl	801a838 <_scanf_float>
 801dae8:	e79c      	b.n	801da24 <__ssvfiscanf_r+0x20c>
 801daea:	89a3      	ldrh	r3, [r4, #12]
 801daec:	f013 0f40 	tst.w	r3, #64	; 0x40
 801daf0:	bf18      	it	ne
 801daf2:	f04f 30ff 	movne.w	r0, #4294967295
 801daf6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801dafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dafe:	9844      	ldr	r0, [sp, #272]	; 0x110
 801db00:	e7f9      	b.n	801daf6 <__ssvfiscanf_r+0x2de>
 801db02:	bf00      	nop
 801db04:	0801a839 	.word	0x0801a839

0801db08 <__sfputc_r>:
 801db08:	6893      	ldr	r3, [r2, #8]
 801db0a:	3b01      	subs	r3, #1
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	b410      	push	{r4}
 801db10:	6093      	str	r3, [r2, #8]
 801db12:	da08      	bge.n	801db26 <__sfputc_r+0x1e>
 801db14:	6994      	ldr	r4, [r2, #24]
 801db16:	42a3      	cmp	r3, r4
 801db18:	db01      	blt.n	801db1e <__sfputc_r+0x16>
 801db1a:	290a      	cmp	r1, #10
 801db1c:	d103      	bne.n	801db26 <__sfputc_r+0x1e>
 801db1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db22:	f000 bba4 	b.w	801e26e <__swbuf_r>
 801db26:	6813      	ldr	r3, [r2, #0]
 801db28:	1c58      	adds	r0, r3, #1
 801db2a:	6010      	str	r0, [r2, #0]
 801db2c:	7019      	strb	r1, [r3, #0]
 801db2e:	4608      	mov	r0, r1
 801db30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db34:	4770      	bx	lr

0801db36 <__sfputs_r>:
 801db36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db38:	4606      	mov	r6, r0
 801db3a:	460f      	mov	r7, r1
 801db3c:	4614      	mov	r4, r2
 801db3e:	18d5      	adds	r5, r2, r3
 801db40:	42ac      	cmp	r4, r5
 801db42:	d101      	bne.n	801db48 <__sfputs_r+0x12>
 801db44:	2000      	movs	r0, #0
 801db46:	e007      	b.n	801db58 <__sfputs_r+0x22>
 801db48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db4c:	463a      	mov	r2, r7
 801db4e:	4630      	mov	r0, r6
 801db50:	f7ff ffda 	bl	801db08 <__sfputc_r>
 801db54:	1c43      	adds	r3, r0, #1
 801db56:	d1f3      	bne.n	801db40 <__sfputs_r+0xa>
 801db58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db5c <_vfiprintf_r>:
 801db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db60:	460d      	mov	r5, r1
 801db62:	b09d      	sub	sp, #116	; 0x74
 801db64:	4614      	mov	r4, r2
 801db66:	4698      	mov	r8, r3
 801db68:	4606      	mov	r6, r0
 801db6a:	b118      	cbz	r0, 801db74 <_vfiprintf_r+0x18>
 801db6c:	6a03      	ldr	r3, [r0, #32]
 801db6e:	b90b      	cbnz	r3, 801db74 <_vfiprintf_r+0x18>
 801db70:	f7fd f8fe 	bl	801ad70 <__sinit>
 801db74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db76:	07d9      	lsls	r1, r3, #31
 801db78:	d405      	bmi.n	801db86 <_vfiprintf_r+0x2a>
 801db7a:	89ab      	ldrh	r3, [r5, #12]
 801db7c:	059a      	lsls	r2, r3, #22
 801db7e:	d402      	bmi.n	801db86 <_vfiprintf_r+0x2a>
 801db80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db82:	f7fd fa6c 	bl	801b05e <__retarget_lock_acquire_recursive>
 801db86:	89ab      	ldrh	r3, [r5, #12]
 801db88:	071b      	lsls	r3, r3, #28
 801db8a:	d501      	bpl.n	801db90 <_vfiprintf_r+0x34>
 801db8c:	692b      	ldr	r3, [r5, #16]
 801db8e:	b99b      	cbnz	r3, 801dbb8 <_vfiprintf_r+0x5c>
 801db90:	4629      	mov	r1, r5
 801db92:	4630      	mov	r0, r6
 801db94:	f000 fba8 	bl	801e2e8 <__swsetup_r>
 801db98:	b170      	cbz	r0, 801dbb8 <_vfiprintf_r+0x5c>
 801db9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db9c:	07dc      	lsls	r4, r3, #31
 801db9e:	d504      	bpl.n	801dbaa <_vfiprintf_r+0x4e>
 801dba0:	f04f 30ff 	mov.w	r0, #4294967295
 801dba4:	b01d      	add	sp, #116	; 0x74
 801dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbaa:	89ab      	ldrh	r3, [r5, #12]
 801dbac:	0598      	lsls	r0, r3, #22
 801dbae:	d4f7      	bmi.n	801dba0 <_vfiprintf_r+0x44>
 801dbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dbb2:	f7fd fa55 	bl	801b060 <__retarget_lock_release_recursive>
 801dbb6:	e7f3      	b.n	801dba0 <_vfiprintf_r+0x44>
 801dbb8:	2300      	movs	r3, #0
 801dbba:	9309      	str	r3, [sp, #36]	; 0x24
 801dbbc:	2320      	movs	r3, #32
 801dbbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dbc2:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbc6:	2330      	movs	r3, #48	; 0x30
 801dbc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801dd7c <_vfiprintf_r+0x220>
 801dbcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dbd0:	f04f 0901 	mov.w	r9, #1
 801dbd4:	4623      	mov	r3, r4
 801dbd6:	469a      	mov	sl, r3
 801dbd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dbdc:	b10a      	cbz	r2, 801dbe2 <_vfiprintf_r+0x86>
 801dbde:	2a25      	cmp	r2, #37	; 0x25
 801dbe0:	d1f9      	bne.n	801dbd6 <_vfiprintf_r+0x7a>
 801dbe2:	ebba 0b04 	subs.w	fp, sl, r4
 801dbe6:	d00b      	beq.n	801dc00 <_vfiprintf_r+0xa4>
 801dbe8:	465b      	mov	r3, fp
 801dbea:	4622      	mov	r2, r4
 801dbec:	4629      	mov	r1, r5
 801dbee:	4630      	mov	r0, r6
 801dbf0:	f7ff ffa1 	bl	801db36 <__sfputs_r>
 801dbf4:	3001      	adds	r0, #1
 801dbf6:	f000 80a9 	beq.w	801dd4c <_vfiprintf_r+0x1f0>
 801dbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dbfc:	445a      	add	r2, fp
 801dbfe:	9209      	str	r2, [sp, #36]	; 0x24
 801dc00:	f89a 3000 	ldrb.w	r3, [sl]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	f000 80a1 	beq.w	801dd4c <_vfiprintf_r+0x1f0>
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	f04f 32ff 	mov.w	r2, #4294967295
 801dc10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc14:	f10a 0a01 	add.w	sl, sl, #1
 801dc18:	9304      	str	r3, [sp, #16]
 801dc1a:	9307      	str	r3, [sp, #28]
 801dc1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dc20:	931a      	str	r3, [sp, #104]	; 0x68
 801dc22:	4654      	mov	r4, sl
 801dc24:	2205      	movs	r2, #5
 801dc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc2a:	4854      	ldr	r0, [pc, #336]	; (801dd7c <_vfiprintf_r+0x220>)
 801dc2c:	f7e2 fb28 	bl	8000280 <memchr>
 801dc30:	9a04      	ldr	r2, [sp, #16]
 801dc32:	b9d8      	cbnz	r0, 801dc6c <_vfiprintf_r+0x110>
 801dc34:	06d1      	lsls	r1, r2, #27
 801dc36:	bf44      	itt	mi
 801dc38:	2320      	movmi	r3, #32
 801dc3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc3e:	0713      	lsls	r3, r2, #28
 801dc40:	bf44      	itt	mi
 801dc42:	232b      	movmi	r3, #43	; 0x2b
 801dc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc48:	f89a 3000 	ldrb.w	r3, [sl]
 801dc4c:	2b2a      	cmp	r3, #42	; 0x2a
 801dc4e:	d015      	beq.n	801dc7c <_vfiprintf_r+0x120>
 801dc50:	9a07      	ldr	r2, [sp, #28]
 801dc52:	4654      	mov	r4, sl
 801dc54:	2000      	movs	r0, #0
 801dc56:	f04f 0c0a 	mov.w	ip, #10
 801dc5a:	4621      	mov	r1, r4
 801dc5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc60:	3b30      	subs	r3, #48	; 0x30
 801dc62:	2b09      	cmp	r3, #9
 801dc64:	d94d      	bls.n	801dd02 <_vfiprintf_r+0x1a6>
 801dc66:	b1b0      	cbz	r0, 801dc96 <_vfiprintf_r+0x13a>
 801dc68:	9207      	str	r2, [sp, #28]
 801dc6a:	e014      	b.n	801dc96 <_vfiprintf_r+0x13a>
 801dc6c:	eba0 0308 	sub.w	r3, r0, r8
 801dc70:	fa09 f303 	lsl.w	r3, r9, r3
 801dc74:	4313      	orrs	r3, r2
 801dc76:	9304      	str	r3, [sp, #16]
 801dc78:	46a2      	mov	sl, r4
 801dc7a:	e7d2      	b.n	801dc22 <_vfiprintf_r+0xc6>
 801dc7c:	9b03      	ldr	r3, [sp, #12]
 801dc7e:	1d19      	adds	r1, r3, #4
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	9103      	str	r1, [sp, #12]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	bfbb      	ittet	lt
 801dc88:	425b      	neglt	r3, r3
 801dc8a:	f042 0202 	orrlt.w	r2, r2, #2
 801dc8e:	9307      	strge	r3, [sp, #28]
 801dc90:	9307      	strlt	r3, [sp, #28]
 801dc92:	bfb8      	it	lt
 801dc94:	9204      	strlt	r2, [sp, #16]
 801dc96:	7823      	ldrb	r3, [r4, #0]
 801dc98:	2b2e      	cmp	r3, #46	; 0x2e
 801dc9a:	d10c      	bne.n	801dcb6 <_vfiprintf_r+0x15a>
 801dc9c:	7863      	ldrb	r3, [r4, #1]
 801dc9e:	2b2a      	cmp	r3, #42	; 0x2a
 801dca0:	d134      	bne.n	801dd0c <_vfiprintf_r+0x1b0>
 801dca2:	9b03      	ldr	r3, [sp, #12]
 801dca4:	1d1a      	adds	r2, r3, #4
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	9203      	str	r2, [sp, #12]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	bfb8      	it	lt
 801dcae:	f04f 33ff 	movlt.w	r3, #4294967295
 801dcb2:	3402      	adds	r4, #2
 801dcb4:	9305      	str	r3, [sp, #20]
 801dcb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801dd8c <_vfiprintf_r+0x230>
 801dcba:	7821      	ldrb	r1, [r4, #0]
 801dcbc:	2203      	movs	r2, #3
 801dcbe:	4650      	mov	r0, sl
 801dcc0:	f7e2 fade 	bl	8000280 <memchr>
 801dcc4:	b138      	cbz	r0, 801dcd6 <_vfiprintf_r+0x17a>
 801dcc6:	9b04      	ldr	r3, [sp, #16]
 801dcc8:	eba0 000a 	sub.w	r0, r0, sl
 801dccc:	2240      	movs	r2, #64	; 0x40
 801dcce:	4082      	lsls	r2, r0
 801dcd0:	4313      	orrs	r3, r2
 801dcd2:	3401      	adds	r4, #1
 801dcd4:	9304      	str	r3, [sp, #16]
 801dcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcda:	4829      	ldr	r0, [pc, #164]	; (801dd80 <_vfiprintf_r+0x224>)
 801dcdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dce0:	2206      	movs	r2, #6
 801dce2:	f7e2 facd 	bl	8000280 <memchr>
 801dce6:	2800      	cmp	r0, #0
 801dce8:	d03f      	beq.n	801dd6a <_vfiprintf_r+0x20e>
 801dcea:	4b26      	ldr	r3, [pc, #152]	; (801dd84 <_vfiprintf_r+0x228>)
 801dcec:	bb1b      	cbnz	r3, 801dd36 <_vfiprintf_r+0x1da>
 801dcee:	9b03      	ldr	r3, [sp, #12]
 801dcf0:	3307      	adds	r3, #7
 801dcf2:	f023 0307 	bic.w	r3, r3, #7
 801dcf6:	3308      	adds	r3, #8
 801dcf8:	9303      	str	r3, [sp, #12]
 801dcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcfc:	443b      	add	r3, r7
 801dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 801dd00:	e768      	b.n	801dbd4 <_vfiprintf_r+0x78>
 801dd02:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd06:	460c      	mov	r4, r1
 801dd08:	2001      	movs	r0, #1
 801dd0a:	e7a6      	b.n	801dc5a <_vfiprintf_r+0xfe>
 801dd0c:	2300      	movs	r3, #0
 801dd0e:	3401      	adds	r4, #1
 801dd10:	9305      	str	r3, [sp, #20]
 801dd12:	4619      	mov	r1, r3
 801dd14:	f04f 0c0a 	mov.w	ip, #10
 801dd18:	4620      	mov	r0, r4
 801dd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd1e:	3a30      	subs	r2, #48	; 0x30
 801dd20:	2a09      	cmp	r2, #9
 801dd22:	d903      	bls.n	801dd2c <_vfiprintf_r+0x1d0>
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d0c6      	beq.n	801dcb6 <_vfiprintf_r+0x15a>
 801dd28:	9105      	str	r1, [sp, #20]
 801dd2a:	e7c4      	b.n	801dcb6 <_vfiprintf_r+0x15a>
 801dd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd30:	4604      	mov	r4, r0
 801dd32:	2301      	movs	r3, #1
 801dd34:	e7f0      	b.n	801dd18 <_vfiprintf_r+0x1bc>
 801dd36:	ab03      	add	r3, sp, #12
 801dd38:	9300      	str	r3, [sp, #0]
 801dd3a:	462a      	mov	r2, r5
 801dd3c:	4b12      	ldr	r3, [pc, #72]	; (801dd88 <_vfiprintf_r+0x22c>)
 801dd3e:	a904      	add	r1, sp, #16
 801dd40:	4630      	mov	r0, r6
 801dd42:	f7fc f9b3 	bl	801a0ac <_printf_float>
 801dd46:	4607      	mov	r7, r0
 801dd48:	1c78      	adds	r0, r7, #1
 801dd4a:	d1d6      	bne.n	801dcfa <_vfiprintf_r+0x19e>
 801dd4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd4e:	07d9      	lsls	r1, r3, #31
 801dd50:	d405      	bmi.n	801dd5e <_vfiprintf_r+0x202>
 801dd52:	89ab      	ldrh	r3, [r5, #12]
 801dd54:	059a      	lsls	r2, r3, #22
 801dd56:	d402      	bmi.n	801dd5e <_vfiprintf_r+0x202>
 801dd58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd5a:	f7fd f981 	bl	801b060 <__retarget_lock_release_recursive>
 801dd5e:	89ab      	ldrh	r3, [r5, #12]
 801dd60:	065b      	lsls	r3, r3, #25
 801dd62:	f53f af1d 	bmi.w	801dba0 <_vfiprintf_r+0x44>
 801dd66:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd68:	e71c      	b.n	801dba4 <_vfiprintf_r+0x48>
 801dd6a:	ab03      	add	r3, sp, #12
 801dd6c:	9300      	str	r3, [sp, #0]
 801dd6e:	462a      	mov	r2, r5
 801dd70:	4b05      	ldr	r3, [pc, #20]	; (801dd88 <_vfiprintf_r+0x22c>)
 801dd72:	a904      	add	r1, sp, #16
 801dd74:	4630      	mov	r0, r6
 801dd76:	f7fc fc3d 	bl	801a5f4 <_printf_i>
 801dd7a:	e7e4      	b.n	801dd46 <_vfiprintf_r+0x1ea>
 801dd7c:	08020b49 	.word	0x08020b49
 801dd80:	08020b53 	.word	0x08020b53
 801dd84:	0801a0ad 	.word	0x0801a0ad
 801dd88:	0801db37 	.word	0x0801db37
 801dd8c:	08020b4f 	.word	0x08020b4f

0801dd90 <_scanf_chars>:
 801dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd94:	4615      	mov	r5, r2
 801dd96:	688a      	ldr	r2, [r1, #8]
 801dd98:	4680      	mov	r8, r0
 801dd9a:	460c      	mov	r4, r1
 801dd9c:	b932      	cbnz	r2, 801ddac <_scanf_chars+0x1c>
 801dd9e:	698a      	ldr	r2, [r1, #24]
 801dda0:	2a00      	cmp	r2, #0
 801dda2:	bf0c      	ite	eq
 801dda4:	2201      	moveq	r2, #1
 801dda6:	f04f 32ff 	movne.w	r2, #4294967295
 801ddaa:	608a      	str	r2, [r1, #8]
 801ddac:	6822      	ldr	r2, [r4, #0]
 801ddae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801de40 <_scanf_chars+0xb0>
 801ddb2:	06d1      	lsls	r1, r2, #27
 801ddb4:	bf5f      	itttt	pl
 801ddb6:	681a      	ldrpl	r2, [r3, #0]
 801ddb8:	1d11      	addpl	r1, r2, #4
 801ddba:	6019      	strpl	r1, [r3, #0]
 801ddbc:	6816      	ldrpl	r6, [r2, #0]
 801ddbe:	2700      	movs	r7, #0
 801ddc0:	69a0      	ldr	r0, [r4, #24]
 801ddc2:	b188      	cbz	r0, 801dde8 <_scanf_chars+0x58>
 801ddc4:	2801      	cmp	r0, #1
 801ddc6:	d107      	bne.n	801ddd8 <_scanf_chars+0x48>
 801ddc8:	682a      	ldr	r2, [r5, #0]
 801ddca:	7811      	ldrb	r1, [r2, #0]
 801ddcc:	6962      	ldr	r2, [r4, #20]
 801ddce:	5c52      	ldrb	r2, [r2, r1]
 801ddd0:	b952      	cbnz	r2, 801dde8 <_scanf_chars+0x58>
 801ddd2:	2f00      	cmp	r7, #0
 801ddd4:	d031      	beq.n	801de3a <_scanf_chars+0xaa>
 801ddd6:	e022      	b.n	801de1e <_scanf_chars+0x8e>
 801ddd8:	2802      	cmp	r0, #2
 801ddda:	d120      	bne.n	801de1e <_scanf_chars+0x8e>
 801dddc:	682b      	ldr	r3, [r5, #0]
 801ddde:	781b      	ldrb	r3, [r3, #0]
 801dde0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801dde4:	071b      	lsls	r3, r3, #28
 801dde6:	d41a      	bmi.n	801de1e <_scanf_chars+0x8e>
 801dde8:	6823      	ldr	r3, [r4, #0]
 801ddea:	06da      	lsls	r2, r3, #27
 801ddec:	bf5e      	ittt	pl
 801ddee:	682b      	ldrpl	r3, [r5, #0]
 801ddf0:	781b      	ldrbpl	r3, [r3, #0]
 801ddf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ddf6:	682a      	ldr	r2, [r5, #0]
 801ddf8:	686b      	ldr	r3, [r5, #4]
 801ddfa:	3201      	adds	r2, #1
 801ddfc:	602a      	str	r2, [r5, #0]
 801ddfe:	68a2      	ldr	r2, [r4, #8]
 801de00:	3b01      	subs	r3, #1
 801de02:	3a01      	subs	r2, #1
 801de04:	606b      	str	r3, [r5, #4]
 801de06:	3701      	adds	r7, #1
 801de08:	60a2      	str	r2, [r4, #8]
 801de0a:	b142      	cbz	r2, 801de1e <_scanf_chars+0x8e>
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	dcd7      	bgt.n	801ddc0 <_scanf_chars+0x30>
 801de10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801de14:	4629      	mov	r1, r5
 801de16:	4640      	mov	r0, r8
 801de18:	4798      	blx	r3
 801de1a:	2800      	cmp	r0, #0
 801de1c:	d0d0      	beq.n	801ddc0 <_scanf_chars+0x30>
 801de1e:	6823      	ldr	r3, [r4, #0]
 801de20:	f013 0310 	ands.w	r3, r3, #16
 801de24:	d105      	bne.n	801de32 <_scanf_chars+0xa2>
 801de26:	68e2      	ldr	r2, [r4, #12]
 801de28:	3201      	adds	r2, #1
 801de2a:	60e2      	str	r2, [r4, #12]
 801de2c:	69a2      	ldr	r2, [r4, #24]
 801de2e:	b102      	cbz	r2, 801de32 <_scanf_chars+0xa2>
 801de30:	7033      	strb	r3, [r6, #0]
 801de32:	6923      	ldr	r3, [r4, #16]
 801de34:	443b      	add	r3, r7
 801de36:	6123      	str	r3, [r4, #16]
 801de38:	2000      	movs	r0, #0
 801de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de3e:	bf00      	nop
 801de40:	08020a49 	.word	0x08020a49

0801de44 <_scanf_i>:
 801de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de48:	4698      	mov	r8, r3
 801de4a:	4b74      	ldr	r3, [pc, #464]	; (801e01c <_scanf_i+0x1d8>)
 801de4c:	460c      	mov	r4, r1
 801de4e:	4682      	mov	sl, r0
 801de50:	4616      	mov	r6, r2
 801de52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801de56:	b087      	sub	sp, #28
 801de58:	ab03      	add	r3, sp, #12
 801de5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801de5e:	4b70      	ldr	r3, [pc, #448]	; (801e020 <_scanf_i+0x1dc>)
 801de60:	69a1      	ldr	r1, [r4, #24]
 801de62:	4a70      	ldr	r2, [pc, #448]	; (801e024 <_scanf_i+0x1e0>)
 801de64:	2903      	cmp	r1, #3
 801de66:	bf18      	it	ne
 801de68:	461a      	movne	r2, r3
 801de6a:	68a3      	ldr	r3, [r4, #8]
 801de6c:	9201      	str	r2, [sp, #4]
 801de6e:	1e5a      	subs	r2, r3, #1
 801de70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801de74:	bf88      	it	hi
 801de76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801de7a:	4627      	mov	r7, r4
 801de7c:	bf82      	ittt	hi
 801de7e:	eb03 0905 	addhi.w	r9, r3, r5
 801de82:	f240 135d 	movwhi	r3, #349	; 0x15d
 801de86:	60a3      	strhi	r3, [r4, #8]
 801de88:	f857 3b1c 	ldr.w	r3, [r7], #28
 801de8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801de90:	bf98      	it	ls
 801de92:	f04f 0900 	movls.w	r9, #0
 801de96:	6023      	str	r3, [r4, #0]
 801de98:	463d      	mov	r5, r7
 801de9a:	f04f 0b00 	mov.w	fp, #0
 801de9e:	6831      	ldr	r1, [r6, #0]
 801dea0:	ab03      	add	r3, sp, #12
 801dea2:	7809      	ldrb	r1, [r1, #0]
 801dea4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801dea8:	2202      	movs	r2, #2
 801deaa:	f7e2 f9e9 	bl	8000280 <memchr>
 801deae:	b328      	cbz	r0, 801defc <_scanf_i+0xb8>
 801deb0:	f1bb 0f01 	cmp.w	fp, #1
 801deb4:	d159      	bne.n	801df6a <_scanf_i+0x126>
 801deb6:	6862      	ldr	r2, [r4, #4]
 801deb8:	b92a      	cbnz	r2, 801dec6 <_scanf_i+0x82>
 801deba:	6822      	ldr	r2, [r4, #0]
 801debc:	2308      	movs	r3, #8
 801debe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dec2:	6063      	str	r3, [r4, #4]
 801dec4:	6022      	str	r2, [r4, #0]
 801dec6:	6822      	ldr	r2, [r4, #0]
 801dec8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801decc:	6022      	str	r2, [r4, #0]
 801dece:	68a2      	ldr	r2, [r4, #8]
 801ded0:	1e51      	subs	r1, r2, #1
 801ded2:	60a1      	str	r1, [r4, #8]
 801ded4:	b192      	cbz	r2, 801defc <_scanf_i+0xb8>
 801ded6:	6832      	ldr	r2, [r6, #0]
 801ded8:	1c51      	adds	r1, r2, #1
 801deda:	6031      	str	r1, [r6, #0]
 801dedc:	7812      	ldrb	r2, [r2, #0]
 801dede:	f805 2b01 	strb.w	r2, [r5], #1
 801dee2:	6872      	ldr	r2, [r6, #4]
 801dee4:	3a01      	subs	r2, #1
 801dee6:	2a00      	cmp	r2, #0
 801dee8:	6072      	str	r2, [r6, #4]
 801deea:	dc07      	bgt.n	801defc <_scanf_i+0xb8>
 801deec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801def0:	4631      	mov	r1, r6
 801def2:	4650      	mov	r0, sl
 801def4:	4790      	blx	r2
 801def6:	2800      	cmp	r0, #0
 801def8:	f040 8085 	bne.w	801e006 <_scanf_i+0x1c2>
 801defc:	f10b 0b01 	add.w	fp, fp, #1
 801df00:	f1bb 0f03 	cmp.w	fp, #3
 801df04:	d1cb      	bne.n	801de9e <_scanf_i+0x5a>
 801df06:	6863      	ldr	r3, [r4, #4]
 801df08:	b90b      	cbnz	r3, 801df0e <_scanf_i+0xca>
 801df0a:	230a      	movs	r3, #10
 801df0c:	6063      	str	r3, [r4, #4]
 801df0e:	6863      	ldr	r3, [r4, #4]
 801df10:	4945      	ldr	r1, [pc, #276]	; (801e028 <_scanf_i+0x1e4>)
 801df12:	6960      	ldr	r0, [r4, #20]
 801df14:	1ac9      	subs	r1, r1, r3
 801df16:	f000 f937 	bl	801e188 <__sccl>
 801df1a:	f04f 0b00 	mov.w	fp, #0
 801df1e:	68a3      	ldr	r3, [r4, #8]
 801df20:	6822      	ldr	r2, [r4, #0]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d03d      	beq.n	801dfa2 <_scanf_i+0x15e>
 801df26:	6831      	ldr	r1, [r6, #0]
 801df28:	6960      	ldr	r0, [r4, #20]
 801df2a:	f891 c000 	ldrb.w	ip, [r1]
 801df2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801df32:	2800      	cmp	r0, #0
 801df34:	d035      	beq.n	801dfa2 <_scanf_i+0x15e>
 801df36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801df3a:	d124      	bne.n	801df86 <_scanf_i+0x142>
 801df3c:	0510      	lsls	r0, r2, #20
 801df3e:	d522      	bpl.n	801df86 <_scanf_i+0x142>
 801df40:	f10b 0b01 	add.w	fp, fp, #1
 801df44:	f1b9 0f00 	cmp.w	r9, #0
 801df48:	d003      	beq.n	801df52 <_scanf_i+0x10e>
 801df4a:	3301      	adds	r3, #1
 801df4c:	f109 39ff 	add.w	r9, r9, #4294967295
 801df50:	60a3      	str	r3, [r4, #8]
 801df52:	6873      	ldr	r3, [r6, #4]
 801df54:	3b01      	subs	r3, #1
 801df56:	2b00      	cmp	r3, #0
 801df58:	6073      	str	r3, [r6, #4]
 801df5a:	dd1b      	ble.n	801df94 <_scanf_i+0x150>
 801df5c:	6833      	ldr	r3, [r6, #0]
 801df5e:	3301      	adds	r3, #1
 801df60:	6033      	str	r3, [r6, #0]
 801df62:	68a3      	ldr	r3, [r4, #8]
 801df64:	3b01      	subs	r3, #1
 801df66:	60a3      	str	r3, [r4, #8]
 801df68:	e7d9      	b.n	801df1e <_scanf_i+0xda>
 801df6a:	f1bb 0f02 	cmp.w	fp, #2
 801df6e:	d1ae      	bne.n	801dece <_scanf_i+0x8a>
 801df70:	6822      	ldr	r2, [r4, #0]
 801df72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801df76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801df7a:	d1bf      	bne.n	801defc <_scanf_i+0xb8>
 801df7c:	2310      	movs	r3, #16
 801df7e:	6063      	str	r3, [r4, #4]
 801df80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801df84:	e7a2      	b.n	801decc <_scanf_i+0x88>
 801df86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801df8a:	6022      	str	r2, [r4, #0]
 801df8c:	780b      	ldrb	r3, [r1, #0]
 801df8e:	f805 3b01 	strb.w	r3, [r5], #1
 801df92:	e7de      	b.n	801df52 <_scanf_i+0x10e>
 801df94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801df98:	4631      	mov	r1, r6
 801df9a:	4650      	mov	r0, sl
 801df9c:	4798      	blx	r3
 801df9e:	2800      	cmp	r0, #0
 801dfa0:	d0df      	beq.n	801df62 <_scanf_i+0x11e>
 801dfa2:	6823      	ldr	r3, [r4, #0]
 801dfa4:	05d9      	lsls	r1, r3, #23
 801dfa6:	d50d      	bpl.n	801dfc4 <_scanf_i+0x180>
 801dfa8:	42bd      	cmp	r5, r7
 801dfaa:	d909      	bls.n	801dfc0 <_scanf_i+0x17c>
 801dfac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dfb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dfb4:	4632      	mov	r2, r6
 801dfb6:	4650      	mov	r0, sl
 801dfb8:	4798      	blx	r3
 801dfba:	f105 39ff 	add.w	r9, r5, #4294967295
 801dfbe:	464d      	mov	r5, r9
 801dfc0:	42bd      	cmp	r5, r7
 801dfc2:	d028      	beq.n	801e016 <_scanf_i+0x1d2>
 801dfc4:	6822      	ldr	r2, [r4, #0]
 801dfc6:	f012 0210 	ands.w	r2, r2, #16
 801dfca:	d113      	bne.n	801dff4 <_scanf_i+0x1b0>
 801dfcc:	702a      	strb	r2, [r5, #0]
 801dfce:	6863      	ldr	r3, [r4, #4]
 801dfd0:	9e01      	ldr	r6, [sp, #4]
 801dfd2:	4639      	mov	r1, r7
 801dfd4:	4650      	mov	r0, sl
 801dfd6:	47b0      	blx	r6
 801dfd8:	f8d8 3000 	ldr.w	r3, [r8]
 801dfdc:	6821      	ldr	r1, [r4, #0]
 801dfde:	1d1a      	adds	r2, r3, #4
 801dfe0:	f8c8 2000 	str.w	r2, [r8]
 801dfe4:	f011 0f20 	tst.w	r1, #32
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	d00f      	beq.n	801e00c <_scanf_i+0x1c8>
 801dfec:	6018      	str	r0, [r3, #0]
 801dfee:	68e3      	ldr	r3, [r4, #12]
 801dff0:	3301      	adds	r3, #1
 801dff2:	60e3      	str	r3, [r4, #12]
 801dff4:	6923      	ldr	r3, [r4, #16]
 801dff6:	1bed      	subs	r5, r5, r7
 801dff8:	445d      	add	r5, fp
 801dffa:	442b      	add	r3, r5
 801dffc:	6123      	str	r3, [r4, #16]
 801dffe:	2000      	movs	r0, #0
 801e000:	b007      	add	sp, #28
 801e002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e006:	f04f 0b00 	mov.w	fp, #0
 801e00a:	e7ca      	b.n	801dfa2 <_scanf_i+0x15e>
 801e00c:	07ca      	lsls	r2, r1, #31
 801e00e:	bf4c      	ite	mi
 801e010:	8018      	strhmi	r0, [r3, #0]
 801e012:	6018      	strpl	r0, [r3, #0]
 801e014:	e7eb      	b.n	801dfee <_scanf_i+0x1aa>
 801e016:	2001      	movs	r0, #1
 801e018:	e7f2      	b.n	801e000 <_scanf_i+0x1bc>
 801e01a:	bf00      	nop
 801e01c:	080202ec 	.word	0x080202ec
 801e020:	0801ecc9 	.word	0x0801ecc9
 801e024:	0801d4b1 	.word	0x0801d4b1
 801e028:	08020b6a 	.word	0x08020b6a

0801e02c <__sflush_r>:
 801e02c:	898a      	ldrh	r2, [r1, #12]
 801e02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e032:	4605      	mov	r5, r0
 801e034:	0710      	lsls	r0, r2, #28
 801e036:	460c      	mov	r4, r1
 801e038:	d458      	bmi.n	801e0ec <__sflush_r+0xc0>
 801e03a:	684b      	ldr	r3, [r1, #4]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	dc05      	bgt.n	801e04c <__sflush_r+0x20>
 801e040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e042:	2b00      	cmp	r3, #0
 801e044:	dc02      	bgt.n	801e04c <__sflush_r+0x20>
 801e046:	2000      	movs	r0, #0
 801e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e04e:	2e00      	cmp	r6, #0
 801e050:	d0f9      	beq.n	801e046 <__sflush_r+0x1a>
 801e052:	2300      	movs	r3, #0
 801e054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e058:	682f      	ldr	r7, [r5, #0]
 801e05a:	6a21      	ldr	r1, [r4, #32]
 801e05c:	602b      	str	r3, [r5, #0]
 801e05e:	d032      	beq.n	801e0c6 <__sflush_r+0x9a>
 801e060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e062:	89a3      	ldrh	r3, [r4, #12]
 801e064:	075a      	lsls	r2, r3, #29
 801e066:	d505      	bpl.n	801e074 <__sflush_r+0x48>
 801e068:	6863      	ldr	r3, [r4, #4]
 801e06a:	1ac0      	subs	r0, r0, r3
 801e06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e06e:	b10b      	cbz	r3, 801e074 <__sflush_r+0x48>
 801e070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e072:	1ac0      	subs	r0, r0, r3
 801e074:	2300      	movs	r3, #0
 801e076:	4602      	mov	r2, r0
 801e078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e07a:	6a21      	ldr	r1, [r4, #32]
 801e07c:	4628      	mov	r0, r5
 801e07e:	47b0      	blx	r6
 801e080:	1c43      	adds	r3, r0, #1
 801e082:	89a3      	ldrh	r3, [r4, #12]
 801e084:	d106      	bne.n	801e094 <__sflush_r+0x68>
 801e086:	6829      	ldr	r1, [r5, #0]
 801e088:	291d      	cmp	r1, #29
 801e08a:	d82b      	bhi.n	801e0e4 <__sflush_r+0xb8>
 801e08c:	4a29      	ldr	r2, [pc, #164]	; (801e134 <__sflush_r+0x108>)
 801e08e:	410a      	asrs	r2, r1
 801e090:	07d6      	lsls	r6, r2, #31
 801e092:	d427      	bmi.n	801e0e4 <__sflush_r+0xb8>
 801e094:	2200      	movs	r2, #0
 801e096:	6062      	str	r2, [r4, #4]
 801e098:	04d9      	lsls	r1, r3, #19
 801e09a:	6922      	ldr	r2, [r4, #16]
 801e09c:	6022      	str	r2, [r4, #0]
 801e09e:	d504      	bpl.n	801e0aa <__sflush_r+0x7e>
 801e0a0:	1c42      	adds	r2, r0, #1
 801e0a2:	d101      	bne.n	801e0a8 <__sflush_r+0x7c>
 801e0a4:	682b      	ldr	r3, [r5, #0]
 801e0a6:	b903      	cbnz	r3, 801e0aa <__sflush_r+0x7e>
 801e0a8:	6560      	str	r0, [r4, #84]	; 0x54
 801e0aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e0ac:	602f      	str	r7, [r5, #0]
 801e0ae:	2900      	cmp	r1, #0
 801e0b0:	d0c9      	beq.n	801e046 <__sflush_r+0x1a>
 801e0b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e0b6:	4299      	cmp	r1, r3
 801e0b8:	d002      	beq.n	801e0c0 <__sflush_r+0x94>
 801e0ba:	4628      	mov	r0, r5
 801e0bc:	f7fd fe6a 	bl	801bd94 <_free_r>
 801e0c0:	2000      	movs	r0, #0
 801e0c2:	6360      	str	r0, [r4, #52]	; 0x34
 801e0c4:	e7c0      	b.n	801e048 <__sflush_r+0x1c>
 801e0c6:	2301      	movs	r3, #1
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	47b0      	blx	r6
 801e0cc:	1c41      	adds	r1, r0, #1
 801e0ce:	d1c8      	bne.n	801e062 <__sflush_r+0x36>
 801e0d0:	682b      	ldr	r3, [r5, #0]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d0c5      	beq.n	801e062 <__sflush_r+0x36>
 801e0d6:	2b1d      	cmp	r3, #29
 801e0d8:	d001      	beq.n	801e0de <__sflush_r+0xb2>
 801e0da:	2b16      	cmp	r3, #22
 801e0dc:	d101      	bne.n	801e0e2 <__sflush_r+0xb6>
 801e0de:	602f      	str	r7, [r5, #0]
 801e0e0:	e7b1      	b.n	801e046 <__sflush_r+0x1a>
 801e0e2:	89a3      	ldrh	r3, [r4, #12]
 801e0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0e8:	81a3      	strh	r3, [r4, #12]
 801e0ea:	e7ad      	b.n	801e048 <__sflush_r+0x1c>
 801e0ec:	690f      	ldr	r7, [r1, #16]
 801e0ee:	2f00      	cmp	r7, #0
 801e0f0:	d0a9      	beq.n	801e046 <__sflush_r+0x1a>
 801e0f2:	0793      	lsls	r3, r2, #30
 801e0f4:	680e      	ldr	r6, [r1, #0]
 801e0f6:	bf08      	it	eq
 801e0f8:	694b      	ldreq	r3, [r1, #20]
 801e0fa:	600f      	str	r7, [r1, #0]
 801e0fc:	bf18      	it	ne
 801e0fe:	2300      	movne	r3, #0
 801e100:	eba6 0807 	sub.w	r8, r6, r7
 801e104:	608b      	str	r3, [r1, #8]
 801e106:	f1b8 0f00 	cmp.w	r8, #0
 801e10a:	dd9c      	ble.n	801e046 <__sflush_r+0x1a>
 801e10c:	6a21      	ldr	r1, [r4, #32]
 801e10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e110:	4643      	mov	r3, r8
 801e112:	463a      	mov	r2, r7
 801e114:	4628      	mov	r0, r5
 801e116:	47b0      	blx	r6
 801e118:	2800      	cmp	r0, #0
 801e11a:	dc06      	bgt.n	801e12a <__sflush_r+0xfe>
 801e11c:	89a3      	ldrh	r3, [r4, #12]
 801e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e122:	81a3      	strh	r3, [r4, #12]
 801e124:	f04f 30ff 	mov.w	r0, #4294967295
 801e128:	e78e      	b.n	801e048 <__sflush_r+0x1c>
 801e12a:	4407      	add	r7, r0
 801e12c:	eba8 0800 	sub.w	r8, r8, r0
 801e130:	e7e9      	b.n	801e106 <__sflush_r+0xda>
 801e132:	bf00      	nop
 801e134:	dfbffffe 	.word	0xdfbffffe

0801e138 <_fflush_r>:
 801e138:	b538      	push	{r3, r4, r5, lr}
 801e13a:	690b      	ldr	r3, [r1, #16]
 801e13c:	4605      	mov	r5, r0
 801e13e:	460c      	mov	r4, r1
 801e140:	b913      	cbnz	r3, 801e148 <_fflush_r+0x10>
 801e142:	2500      	movs	r5, #0
 801e144:	4628      	mov	r0, r5
 801e146:	bd38      	pop	{r3, r4, r5, pc}
 801e148:	b118      	cbz	r0, 801e152 <_fflush_r+0x1a>
 801e14a:	6a03      	ldr	r3, [r0, #32]
 801e14c:	b90b      	cbnz	r3, 801e152 <_fflush_r+0x1a>
 801e14e:	f7fc fe0f 	bl	801ad70 <__sinit>
 801e152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e156:	2b00      	cmp	r3, #0
 801e158:	d0f3      	beq.n	801e142 <_fflush_r+0xa>
 801e15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e15c:	07d0      	lsls	r0, r2, #31
 801e15e:	d404      	bmi.n	801e16a <_fflush_r+0x32>
 801e160:	0599      	lsls	r1, r3, #22
 801e162:	d402      	bmi.n	801e16a <_fflush_r+0x32>
 801e164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e166:	f7fc ff7a 	bl	801b05e <__retarget_lock_acquire_recursive>
 801e16a:	4628      	mov	r0, r5
 801e16c:	4621      	mov	r1, r4
 801e16e:	f7ff ff5d 	bl	801e02c <__sflush_r>
 801e172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e174:	07da      	lsls	r2, r3, #31
 801e176:	4605      	mov	r5, r0
 801e178:	d4e4      	bmi.n	801e144 <_fflush_r+0xc>
 801e17a:	89a3      	ldrh	r3, [r4, #12]
 801e17c:	059b      	lsls	r3, r3, #22
 801e17e:	d4e1      	bmi.n	801e144 <_fflush_r+0xc>
 801e180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e182:	f7fc ff6d 	bl	801b060 <__retarget_lock_release_recursive>
 801e186:	e7dd      	b.n	801e144 <_fflush_r+0xc>

0801e188 <__sccl>:
 801e188:	b570      	push	{r4, r5, r6, lr}
 801e18a:	780b      	ldrb	r3, [r1, #0]
 801e18c:	4604      	mov	r4, r0
 801e18e:	2b5e      	cmp	r3, #94	; 0x5e
 801e190:	bf0b      	itete	eq
 801e192:	784b      	ldrbeq	r3, [r1, #1]
 801e194:	1c4a      	addne	r2, r1, #1
 801e196:	1c8a      	addeq	r2, r1, #2
 801e198:	2100      	movne	r1, #0
 801e19a:	bf08      	it	eq
 801e19c:	2101      	moveq	r1, #1
 801e19e:	3801      	subs	r0, #1
 801e1a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801e1a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 801e1a8:	42a8      	cmp	r0, r5
 801e1aa:	d1fb      	bne.n	801e1a4 <__sccl+0x1c>
 801e1ac:	b90b      	cbnz	r3, 801e1b2 <__sccl+0x2a>
 801e1ae:	1e50      	subs	r0, r2, #1
 801e1b0:	bd70      	pop	{r4, r5, r6, pc}
 801e1b2:	f081 0101 	eor.w	r1, r1, #1
 801e1b6:	54e1      	strb	r1, [r4, r3]
 801e1b8:	4610      	mov	r0, r2
 801e1ba:	4602      	mov	r2, r0
 801e1bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e1c0:	2d2d      	cmp	r5, #45	; 0x2d
 801e1c2:	d005      	beq.n	801e1d0 <__sccl+0x48>
 801e1c4:	2d5d      	cmp	r5, #93	; 0x5d
 801e1c6:	d016      	beq.n	801e1f6 <__sccl+0x6e>
 801e1c8:	2d00      	cmp	r5, #0
 801e1ca:	d0f1      	beq.n	801e1b0 <__sccl+0x28>
 801e1cc:	462b      	mov	r3, r5
 801e1ce:	e7f2      	b.n	801e1b6 <__sccl+0x2e>
 801e1d0:	7846      	ldrb	r6, [r0, #1]
 801e1d2:	2e5d      	cmp	r6, #93	; 0x5d
 801e1d4:	d0fa      	beq.n	801e1cc <__sccl+0x44>
 801e1d6:	42b3      	cmp	r3, r6
 801e1d8:	dcf8      	bgt.n	801e1cc <__sccl+0x44>
 801e1da:	3002      	adds	r0, #2
 801e1dc:	461a      	mov	r2, r3
 801e1de:	3201      	adds	r2, #1
 801e1e0:	4296      	cmp	r6, r2
 801e1e2:	54a1      	strb	r1, [r4, r2]
 801e1e4:	dcfb      	bgt.n	801e1de <__sccl+0x56>
 801e1e6:	1af2      	subs	r2, r6, r3
 801e1e8:	3a01      	subs	r2, #1
 801e1ea:	1c5d      	adds	r5, r3, #1
 801e1ec:	42b3      	cmp	r3, r6
 801e1ee:	bfa8      	it	ge
 801e1f0:	2200      	movge	r2, #0
 801e1f2:	18ab      	adds	r3, r5, r2
 801e1f4:	e7e1      	b.n	801e1ba <__sccl+0x32>
 801e1f6:	4610      	mov	r0, r2
 801e1f8:	e7da      	b.n	801e1b0 <__sccl+0x28>

0801e1fa <__submore>:
 801e1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1fe:	460c      	mov	r4, r1
 801e200:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e206:	4299      	cmp	r1, r3
 801e208:	d11d      	bne.n	801e246 <__submore+0x4c>
 801e20a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e20e:	f7fb fc99 	bl	8019b44 <_malloc_r>
 801e212:	b918      	cbnz	r0, 801e21c <__submore+0x22>
 801e214:	f04f 30ff 	mov.w	r0, #4294967295
 801e218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e220:	63a3      	str	r3, [r4, #56]	; 0x38
 801e222:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801e226:	6360      	str	r0, [r4, #52]	; 0x34
 801e228:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801e22c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801e230:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801e234:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e238:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801e23c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801e240:	6020      	str	r0, [r4, #0]
 801e242:	2000      	movs	r0, #0
 801e244:	e7e8      	b.n	801e218 <__submore+0x1e>
 801e246:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e248:	0077      	lsls	r7, r6, #1
 801e24a:	463a      	mov	r2, r7
 801e24c:	f000 fc9b 	bl	801eb86 <_realloc_r>
 801e250:	4605      	mov	r5, r0
 801e252:	2800      	cmp	r0, #0
 801e254:	d0de      	beq.n	801e214 <__submore+0x1a>
 801e256:	eb00 0806 	add.w	r8, r0, r6
 801e25a:	4601      	mov	r1, r0
 801e25c:	4632      	mov	r2, r6
 801e25e:	4640      	mov	r0, r8
 801e260:	f7fc feff 	bl	801b062 <memcpy>
 801e264:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801e268:	f8c4 8000 	str.w	r8, [r4]
 801e26c:	e7e9      	b.n	801e242 <__submore+0x48>

0801e26e <__swbuf_r>:
 801e26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e270:	460e      	mov	r6, r1
 801e272:	4614      	mov	r4, r2
 801e274:	4605      	mov	r5, r0
 801e276:	b118      	cbz	r0, 801e280 <__swbuf_r+0x12>
 801e278:	6a03      	ldr	r3, [r0, #32]
 801e27a:	b90b      	cbnz	r3, 801e280 <__swbuf_r+0x12>
 801e27c:	f7fc fd78 	bl	801ad70 <__sinit>
 801e280:	69a3      	ldr	r3, [r4, #24]
 801e282:	60a3      	str	r3, [r4, #8]
 801e284:	89a3      	ldrh	r3, [r4, #12]
 801e286:	071a      	lsls	r2, r3, #28
 801e288:	d525      	bpl.n	801e2d6 <__swbuf_r+0x68>
 801e28a:	6923      	ldr	r3, [r4, #16]
 801e28c:	b31b      	cbz	r3, 801e2d6 <__swbuf_r+0x68>
 801e28e:	6823      	ldr	r3, [r4, #0]
 801e290:	6922      	ldr	r2, [r4, #16]
 801e292:	1a98      	subs	r0, r3, r2
 801e294:	6963      	ldr	r3, [r4, #20]
 801e296:	b2f6      	uxtb	r6, r6
 801e298:	4283      	cmp	r3, r0
 801e29a:	4637      	mov	r7, r6
 801e29c:	dc04      	bgt.n	801e2a8 <__swbuf_r+0x3a>
 801e29e:	4621      	mov	r1, r4
 801e2a0:	4628      	mov	r0, r5
 801e2a2:	f7ff ff49 	bl	801e138 <_fflush_r>
 801e2a6:	b9e0      	cbnz	r0, 801e2e2 <__swbuf_r+0x74>
 801e2a8:	68a3      	ldr	r3, [r4, #8]
 801e2aa:	3b01      	subs	r3, #1
 801e2ac:	60a3      	str	r3, [r4, #8]
 801e2ae:	6823      	ldr	r3, [r4, #0]
 801e2b0:	1c5a      	adds	r2, r3, #1
 801e2b2:	6022      	str	r2, [r4, #0]
 801e2b4:	701e      	strb	r6, [r3, #0]
 801e2b6:	6962      	ldr	r2, [r4, #20]
 801e2b8:	1c43      	adds	r3, r0, #1
 801e2ba:	429a      	cmp	r2, r3
 801e2bc:	d004      	beq.n	801e2c8 <__swbuf_r+0x5a>
 801e2be:	89a3      	ldrh	r3, [r4, #12]
 801e2c0:	07db      	lsls	r3, r3, #31
 801e2c2:	d506      	bpl.n	801e2d2 <__swbuf_r+0x64>
 801e2c4:	2e0a      	cmp	r6, #10
 801e2c6:	d104      	bne.n	801e2d2 <__swbuf_r+0x64>
 801e2c8:	4621      	mov	r1, r4
 801e2ca:	4628      	mov	r0, r5
 801e2cc:	f7ff ff34 	bl	801e138 <_fflush_r>
 801e2d0:	b938      	cbnz	r0, 801e2e2 <__swbuf_r+0x74>
 801e2d2:	4638      	mov	r0, r7
 801e2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2d6:	4621      	mov	r1, r4
 801e2d8:	4628      	mov	r0, r5
 801e2da:	f000 f805 	bl	801e2e8 <__swsetup_r>
 801e2de:	2800      	cmp	r0, #0
 801e2e0:	d0d5      	beq.n	801e28e <__swbuf_r+0x20>
 801e2e2:	f04f 37ff 	mov.w	r7, #4294967295
 801e2e6:	e7f4      	b.n	801e2d2 <__swbuf_r+0x64>

0801e2e8 <__swsetup_r>:
 801e2e8:	b538      	push	{r3, r4, r5, lr}
 801e2ea:	4b2a      	ldr	r3, [pc, #168]	; (801e394 <__swsetup_r+0xac>)
 801e2ec:	4605      	mov	r5, r0
 801e2ee:	6818      	ldr	r0, [r3, #0]
 801e2f0:	460c      	mov	r4, r1
 801e2f2:	b118      	cbz	r0, 801e2fc <__swsetup_r+0x14>
 801e2f4:	6a03      	ldr	r3, [r0, #32]
 801e2f6:	b90b      	cbnz	r3, 801e2fc <__swsetup_r+0x14>
 801e2f8:	f7fc fd3a 	bl	801ad70 <__sinit>
 801e2fc:	89a3      	ldrh	r3, [r4, #12]
 801e2fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e302:	0718      	lsls	r0, r3, #28
 801e304:	d422      	bmi.n	801e34c <__swsetup_r+0x64>
 801e306:	06d9      	lsls	r1, r3, #27
 801e308:	d407      	bmi.n	801e31a <__swsetup_r+0x32>
 801e30a:	2309      	movs	r3, #9
 801e30c:	602b      	str	r3, [r5, #0]
 801e30e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e312:	81a3      	strh	r3, [r4, #12]
 801e314:	f04f 30ff 	mov.w	r0, #4294967295
 801e318:	e034      	b.n	801e384 <__swsetup_r+0x9c>
 801e31a:	0758      	lsls	r0, r3, #29
 801e31c:	d512      	bpl.n	801e344 <__swsetup_r+0x5c>
 801e31e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e320:	b141      	cbz	r1, 801e334 <__swsetup_r+0x4c>
 801e322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e326:	4299      	cmp	r1, r3
 801e328:	d002      	beq.n	801e330 <__swsetup_r+0x48>
 801e32a:	4628      	mov	r0, r5
 801e32c:	f7fd fd32 	bl	801bd94 <_free_r>
 801e330:	2300      	movs	r3, #0
 801e332:	6363      	str	r3, [r4, #52]	; 0x34
 801e334:	89a3      	ldrh	r3, [r4, #12]
 801e336:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e33a:	81a3      	strh	r3, [r4, #12]
 801e33c:	2300      	movs	r3, #0
 801e33e:	6063      	str	r3, [r4, #4]
 801e340:	6923      	ldr	r3, [r4, #16]
 801e342:	6023      	str	r3, [r4, #0]
 801e344:	89a3      	ldrh	r3, [r4, #12]
 801e346:	f043 0308 	orr.w	r3, r3, #8
 801e34a:	81a3      	strh	r3, [r4, #12]
 801e34c:	6923      	ldr	r3, [r4, #16]
 801e34e:	b94b      	cbnz	r3, 801e364 <__swsetup_r+0x7c>
 801e350:	89a3      	ldrh	r3, [r4, #12]
 801e352:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e35a:	d003      	beq.n	801e364 <__swsetup_r+0x7c>
 801e35c:	4621      	mov	r1, r4
 801e35e:	4628      	mov	r0, r5
 801e360:	f000 fce7 	bl	801ed32 <__smakebuf_r>
 801e364:	89a0      	ldrh	r0, [r4, #12]
 801e366:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e36a:	f010 0301 	ands.w	r3, r0, #1
 801e36e:	d00a      	beq.n	801e386 <__swsetup_r+0x9e>
 801e370:	2300      	movs	r3, #0
 801e372:	60a3      	str	r3, [r4, #8]
 801e374:	6963      	ldr	r3, [r4, #20]
 801e376:	425b      	negs	r3, r3
 801e378:	61a3      	str	r3, [r4, #24]
 801e37a:	6923      	ldr	r3, [r4, #16]
 801e37c:	b943      	cbnz	r3, 801e390 <__swsetup_r+0xa8>
 801e37e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e382:	d1c4      	bne.n	801e30e <__swsetup_r+0x26>
 801e384:	bd38      	pop	{r3, r4, r5, pc}
 801e386:	0781      	lsls	r1, r0, #30
 801e388:	bf58      	it	pl
 801e38a:	6963      	ldrpl	r3, [r4, #20]
 801e38c:	60a3      	str	r3, [r4, #8]
 801e38e:	e7f4      	b.n	801e37a <__swsetup_r+0x92>
 801e390:	2000      	movs	r0, #0
 801e392:	e7f7      	b.n	801e384 <__swsetup_r+0x9c>
 801e394:	2000020c 	.word	0x2000020c

0801e398 <memmove>:
 801e398:	4288      	cmp	r0, r1
 801e39a:	b510      	push	{r4, lr}
 801e39c:	eb01 0402 	add.w	r4, r1, r2
 801e3a0:	d902      	bls.n	801e3a8 <memmove+0x10>
 801e3a2:	4284      	cmp	r4, r0
 801e3a4:	4623      	mov	r3, r4
 801e3a6:	d807      	bhi.n	801e3b8 <memmove+0x20>
 801e3a8:	1e43      	subs	r3, r0, #1
 801e3aa:	42a1      	cmp	r1, r4
 801e3ac:	d008      	beq.n	801e3c0 <memmove+0x28>
 801e3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e3b6:	e7f8      	b.n	801e3aa <memmove+0x12>
 801e3b8:	4402      	add	r2, r0
 801e3ba:	4601      	mov	r1, r0
 801e3bc:	428a      	cmp	r2, r1
 801e3be:	d100      	bne.n	801e3c2 <memmove+0x2a>
 801e3c0:	bd10      	pop	{r4, pc}
 801e3c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e3c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e3ca:	e7f7      	b.n	801e3bc <memmove+0x24>

0801e3cc <strncmp>:
 801e3cc:	b510      	push	{r4, lr}
 801e3ce:	b16a      	cbz	r2, 801e3ec <strncmp+0x20>
 801e3d0:	3901      	subs	r1, #1
 801e3d2:	1884      	adds	r4, r0, r2
 801e3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e3d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e3dc:	429a      	cmp	r2, r3
 801e3de:	d103      	bne.n	801e3e8 <strncmp+0x1c>
 801e3e0:	42a0      	cmp	r0, r4
 801e3e2:	d001      	beq.n	801e3e8 <strncmp+0x1c>
 801e3e4:	2a00      	cmp	r2, #0
 801e3e6:	d1f5      	bne.n	801e3d4 <strncmp+0x8>
 801e3e8:	1ad0      	subs	r0, r2, r3
 801e3ea:	bd10      	pop	{r4, pc}
 801e3ec:	4610      	mov	r0, r2
 801e3ee:	e7fc      	b.n	801e3ea <strncmp+0x1e>

0801e3f0 <_raise_r>:
 801e3f0:	291f      	cmp	r1, #31
 801e3f2:	b538      	push	{r3, r4, r5, lr}
 801e3f4:	4604      	mov	r4, r0
 801e3f6:	460d      	mov	r5, r1
 801e3f8:	d904      	bls.n	801e404 <_raise_r+0x14>
 801e3fa:	2316      	movs	r3, #22
 801e3fc:	6003      	str	r3, [r0, #0]
 801e3fe:	f04f 30ff 	mov.w	r0, #4294967295
 801e402:	bd38      	pop	{r3, r4, r5, pc}
 801e404:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e406:	b112      	cbz	r2, 801e40e <_raise_r+0x1e>
 801e408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e40c:	b94b      	cbnz	r3, 801e422 <_raise_r+0x32>
 801e40e:	4620      	mov	r0, r4
 801e410:	f000 f830 	bl	801e474 <_getpid_r>
 801e414:	462a      	mov	r2, r5
 801e416:	4601      	mov	r1, r0
 801e418:	4620      	mov	r0, r4
 801e41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e41e:	f000 b817 	b.w	801e450 <_kill_r>
 801e422:	2b01      	cmp	r3, #1
 801e424:	d00a      	beq.n	801e43c <_raise_r+0x4c>
 801e426:	1c59      	adds	r1, r3, #1
 801e428:	d103      	bne.n	801e432 <_raise_r+0x42>
 801e42a:	2316      	movs	r3, #22
 801e42c:	6003      	str	r3, [r0, #0]
 801e42e:	2001      	movs	r0, #1
 801e430:	e7e7      	b.n	801e402 <_raise_r+0x12>
 801e432:	2400      	movs	r4, #0
 801e434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e438:	4628      	mov	r0, r5
 801e43a:	4798      	blx	r3
 801e43c:	2000      	movs	r0, #0
 801e43e:	e7e0      	b.n	801e402 <_raise_r+0x12>

0801e440 <raise>:
 801e440:	4b02      	ldr	r3, [pc, #8]	; (801e44c <raise+0xc>)
 801e442:	4601      	mov	r1, r0
 801e444:	6818      	ldr	r0, [r3, #0]
 801e446:	f7ff bfd3 	b.w	801e3f0 <_raise_r>
 801e44a:	bf00      	nop
 801e44c:	2000020c 	.word	0x2000020c

0801e450 <_kill_r>:
 801e450:	b538      	push	{r3, r4, r5, lr}
 801e452:	4d07      	ldr	r5, [pc, #28]	; (801e470 <_kill_r+0x20>)
 801e454:	2300      	movs	r3, #0
 801e456:	4604      	mov	r4, r0
 801e458:	4608      	mov	r0, r1
 801e45a:	4611      	mov	r1, r2
 801e45c:	602b      	str	r3, [r5, #0]
 801e45e:	f7e4 fa6d 	bl	800293c <_kill>
 801e462:	1c43      	adds	r3, r0, #1
 801e464:	d102      	bne.n	801e46c <_kill_r+0x1c>
 801e466:	682b      	ldr	r3, [r5, #0]
 801e468:	b103      	cbz	r3, 801e46c <_kill_r+0x1c>
 801e46a:	6023      	str	r3, [r4, #0]
 801e46c:	bd38      	pop	{r3, r4, r5, pc}
 801e46e:	bf00      	nop
 801e470:	20005ea4 	.word	0x20005ea4

0801e474 <_getpid_r>:
 801e474:	f7e4 ba5a 	b.w	800292c <_getpid>

0801e478 <nan>:
 801e478:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e480 <nan+0x8>
 801e47c:	4770      	bx	lr
 801e47e:	bf00      	nop
 801e480:	00000000 	.word	0x00000000
 801e484:	7ff80000 	.word	0x7ff80000

0801e488 <_calloc_r>:
 801e488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e48a:	fba1 2402 	umull	r2, r4, r1, r2
 801e48e:	b94c      	cbnz	r4, 801e4a4 <_calloc_r+0x1c>
 801e490:	4611      	mov	r1, r2
 801e492:	9201      	str	r2, [sp, #4]
 801e494:	f7fb fb56 	bl	8019b44 <_malloc_r>
 801e498:	9a01      	ldr	r2, [sp, #4]
 801e49a:	4605      	mov	r5, r0
 801e49c:	b930      	cbnz	r0, 801e4ac <_calloc_r+0x24>
 801e49e:	4628      	mov	r0, r5
 801e4a0:	b003      	add	sp, #12
 801e4a2:	bd30      	pop	{r4, r5, pc}
 801e4a4:	220c      	movs	r2, #12
 801e4a6:	6002      	str	r2, [r0, #0]
 801e4a8:	2500      	movs	r5, #0
 801e4aa:	e7f8      	b.n	801e49e <_calloc_r+0x16>
 801e4ac:	4621      	mov	r1, r4
 801e4ae:	f7fc fd48 	bl	801af42 <memset>
 801e4b2:	e7f4      	b.n	801e49e <_calloc_r+0x16>

0801e4b4 <rshift>:
 801e4b4:	6903      	ldr	r3, [r0, #16]
 801e4b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e4ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e4be:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e4c2:	f100 0414 	add.w	r4, r0, #20
 801e4c6:	dd45      	ble.n	801e554 <rshift+0xa0>
 801e4c8:	f011 011f 	ands.w	r1, r1, #31
 801e4cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e4d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e4d4:	d10c      	bne.n	801e4f0 <rshift+0x3c>
 801e4d6:	f100 0710 	add.w	r7, r0, #16
 801e4da:	4629      	mov	r1, r5
 801e4dc:	42b1      	cmp	r1, r6
 801e4de:	d334      	bcc.n	801e54a <rshift+0x96>
 801e4e0:	1a9b      	subs	r3, r3, r2
 801e4e2:	009b      	lsls	r3, r3, #2
 801e4e4:	1eea      	subs	r2, r5, #3
 801e4e6:	4296      	cmp	r6, r2
 801e4e8:	bf38      	it	cc
 801e4ea:	2300      	movcc	r3, #0
 801e4ec:	4423      	add	r3, r4
 801e4ee:	e015      	b.n	801e51c <rshift+0x68>
 801e4f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e4f4:	f1c1 0820 	rsb	r8, r1, #32
 801e4f8:	40cf      	lsrs	r7, r1
 801e4fa:	f105 0e04 	add.w	lr, r5, #4
 801e4fe:	46a1      	mov	r9, r4
 801e500:	4576      	cmp	r6, lr
 801e502:	46f4      	mov	ip, lr
 801e504:	d815      	bhi.n	801e532 <rshift+0x7e>
 801e506:	1a9a      	subs	r2, r3, r2
 801e508:	0092      	lsls	r2, r2, #2
 801e50a:	3a04      	subs	r2, #4
 801e50c:	3501      	adds	r5, #1
 801e50e:	42ae      	cmp	r6, r5
 801e510:	bf38      	it	cc
 801e512:	2200      	movcc	r2, #0
 801e514:	18a3      	adds	r3, r4, r2
 801e516:	50a7      	str	r7, [r4, r2]
 801e518:	b107      	cbz	r7, 801e51c <rshift+0x68>
 801e51a:	3304      	adds	r3, #4
 801e51c:	1b1a      	subs	r2, r3, r4
 801e51e:	42a3      	cmp	r3, r4
 801e520:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e524:	bf08      	it	eq
 801e526:	2300      	moveq	r3, #0
 801e528:	6102      	str	r2, [r0, #16]
 801e52a:	bf08      	it	eq
 801e52c:	6143      	streq	r3, [r0, #20]
 801e52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e532:	f8dc c000 	ldr.w	ip, [ip]
 801e536:	fa0c fc08 	lsl.w	ip, ip, r8
 801e53a:	ea4c 0707 	orr.w	r7, ip, r7
 801e53e:	f849 7b04 	str.w	r7, [r9], #4
 801e542:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e546:	40cf      	lsrs	r7, r1
 801e548:	e7da      	b.n	801e500 <rshift+0x4c>
 801e54a:	f851 cb04 	ldr.w	ip, [r1], #4
 801e54e:	f847 cf04 	str.w	ip, [r7, #4]!
 801e552:	e7c3      	b.n	801e4dc <rshift+0x28>
 801e554:	4623      	mov	r3, r4
 801e556:	e7e1      	b.n	801e51c <rshift+0x68>

0801e558 <__hexdig_fun>:
 801e558:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e55c:	2b09      	cmp	r3, #9
 801e55e:	d802      	bhi.n	801e566 <__hexdig_fun+0xe>
 801e560:	3820      	subs	r0, #32
 801e562:	b2c0      	uxtb	r0, r0
 801e564:	4770      	bx	lr
 801e566:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e56a:	2b05      	cmp	r3, #5
 801e56c:	d801      	bhi.n	801e572 <__hexdig_fun+0x1a>
 801e56e:	3847      	subs	r0, #71	; 0x47
 801e570:	e7f7      	b.n	801e562 <__hexdig_fun+0xa>
 801e572:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e576:	2b05      	cmp	r3, #5
 801e578:	d801      	bhi.n	801e57e <__hexdig_fun+0x26>
 801e57a:	3827      	subs	r0, #39	; 0x27
 801e57c:	e7f1      	b.n	801e562 <__hexdig_fun+0xa>
 801e57e:	2000      	movs	r0, #0
 801e580:	4770      	bx	lr
	...

0801e584 <__gethex>:
 801e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e588:	4617      	mov	r7, r2
 801e58a:	680a      	ldr	r2, [r1, #0]
 801e58c:	b085      	sub	sp, #20
 801e58e:	f102 0b02 	add.w	fp, r2, #2
 801e592:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e596:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e59a:	4681      	mov	r9, r0
 801e59c:	468a      	mov	sl, r1
 801e59e:	9302      	str	r3, [sp, #8]
 801e5a0:	32fe      	adds	r2, #254	; 0xfe
 801e5a2:	eb02 030b 	add.w	r3, r2, fp
 801e5a6:	46d8      	mov	r8, fp
 801e5a8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801e5ac:	9301      	str	r3, [sp, #4]
 801e5ae:	2830      	cmp	r0, #48	; 0x30
 801e5b0:	d0f7      	beq.n	801e5a2 <__gethex+0x1e>
 801e5b2:	f7ff ffd1 	bl	801e558 <__hexdig_fun>
 801e5b6:	4604      	mov	r4, r0
 801e5b8:	2800      	cmp	r0, #0
 801e5ba:	d138      	bne.n	801e62e <__gethex+0xaa>
 801e5bc:	49a7      	ldr	r1, [pc, #668]	; (801e85c <__gethex+0x2d8>)
 801e5be:	2201      	movs	r2, #1
 801e5c0:	4640      	mov	r0, r8
 801e5c2:	f7ff ff03 	bl	801e3cc <strncmp>
 801e5c6:	4606      	mov	r6, r0
 801e5c8:	2800      	cmp	r0, #0
 801e5ca:	d169      	bne.n	801e6a0 <__gethex+0x11c>
 801e5cc:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e5d0:	465d      	mov	r5, fp
 801e5d2:	f7ff ffc1 	bl	801e558 <__hexdig_fun>
 801e5d6:	2800      	cmp	r0, #0
 801e5d8:	d064      	beq.n	801e6a4 <__gethex+0x120>
 801e5da:	465a      	mov	r2, fp
 801e5dc:	7810      	ldrb	r0, [r2, #0]
 801e5de:	2830      	cmp	r0, #48	; 0x30
 801e5e0:	4690      	mov	r8, r2
 801e5e2:	f102 0201 	add.w	r2, r2, #1
 801e5e6:	d0f9      	beq.n	801e5dc <__gethex+0x58>
 801e5e8:	f7ff ffb6 	bl	801e558 <__hexdig_fun>
 801e5ec:	2301      	movs	r3, #1
 801e5ee:	fab0 f480 	clz	r4, r0
 801e5f2:	0964      	lsrs	r4, r4, #5
 801e5f4:	465e      	mov	r6, fp
 801e5f6:	9301      	str	r3, [sp, #4]
 801e5f8:	4642      	mov	r2, r8
 801e5fa:	4615      	mov	r5, r2
 801e5fc:	3201      	adds	r2, #1
 801e5fe:	7828      	ldrb	r0, [r5, #0]
 801e600:	f7ff ffaa 	bl	801e558 <__hexdig_fun>
 801e604:	2800      	cmp	r0, #0
 801e606:	d1f8      	bne.n	801e5fa <__gethex+0x76>
 801e608:	4994      	ldr	r1, [pc, #592]	; (801e85c <__gethex+0x2d8>)
 801e60a:	2201      	movs	r2, #1
 801e60c:	4628      	mov	r0, r5
 801e60e:	f7ff fedd 	bl	801e3cc <strncmp>
 801e612:	b978      	cbnz	r0, 801e634 <__gethex+0xb0>
 801e614:	b946      	cbnz	r6, 801e628 <__gethex+0xa4>
 801e616:	1c6e      	adds	r6, r5, #1
 801e618:	4632      	mov	r2, r6
 801e61a:	4615      	mov	r5, r2
 801e61c:	3201      	adds	r2, #1
 801e61e:	7828      	ldrb	r0, [r5, #0]
 801e620:	f7ff ff9a 	bl	801e558 <__hexdig_fun>
 801e624:	2800      	cmp	r0, #0
 801e626:	d1f8      	bne.n	801e61a <__gethex+0x96>
 801e628:	1b73      	subs	r3, r6, r5
 801e62a:	009e      	lsls	r6, r3, #2
 801e62c:	e004      	b.n	801e638 <__gethex+0xb4>
 801e62e:	2400      	movs	r4, #0
 801e630:	4626      	mov	r6, r4
 801e632:	e7e1      	b.n	801e5f8 <__gethex+0x74>
 801e634:	2e00      	cmp	r6, #0
 801e636:	d1f7      	bne.n	801e628 <__gethex+0xa4>
 801e638:	782b      	ldrb	r3, [r5, #0]
 801e63a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e63e:	2b50      	cmp	r3, #80	; 0x50
 801e640:	d13d      	bne.n	801e6be <__gethex+0x13a>
 801e642:	786b      	ldrb	r3, [r5, #1]
 801e644:	2b2b      	cmp	r3, #43	; 0x2b
 801e646:	d02f      	beq.n	801e6a8 <__gethex+0x124>
 801e648:	2b2d      	cmp	r3, #45	; 0x2d
 801e64a:	d031      	beq.n	801e6b0 <__gethex+0x12c>
 801e64c:	1c69      	adds	r1, r5, #1
 801e64e:	f04f 0b00 	mov.w	fp, #0
 801e652:	7808      	ldrb	r0, [r1, #0]
 801e654:	f7ff ff80 	bl	801e558 <__hexdig_fun>
 801e658:	1e42      	subs	r2, r0, #1
 801e65a:	b2d2      	uxtb	r2, r2
 801e65c:	2a18      	cmp	r2, #24
 801e65e:	d82e      	bhi.n	801e6be <__gethex+0x13a>
 801e660:	f1a0 0210 	sub.w	r2, r0, #16
 801e664:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e668:	f7ff ff76 	bl	801e558 <__hexdig_fun>
 801e66c:	f100 3cff 	add.w	ip, r0, #4294967295
 801e670:	fa5f fc8c 	uxtb.w	ip, ip
 801e674:	f1bc 0f18 	cmp.w	ip, #24
 801e678:	d91d      	bls.n	801e6b6 <__gethex+0x132>
 801e67a:	f1bb 0f00 	cmp.w	fp, #0
 801e67e:	d000      	beq.n	801e682 <__gethex+0xfe>
 801e680:	4252      	negs	r2, r2
 801e682:	4416      	add	r6, r2
 801e684:	f8ca 1000 	str.w	r1, [sl]
 801e688:	b1dc      	cbz	r4, 801e6c2 <__gethex+0x13e>
 801e68a:	9b01      	ldr	r3, [sp, #4]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	bf14      	ite	ne
 801e690:	f04f 0800 	movne.w	r8, #0
 801e694:	f04f 0806 	moveq.w	r8, #6
 801e698:	4640      	mov	r0, r8
 801e69a:	b005      	add	sp, #20
 801e69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6a0:	4645      	mov	r5, r8
 801e6a2:	4626      	mov	r6, r4
 801e6a4:	2401      	movs	r4, #1
 801e6a6:	e7c7      	b.n	801e638 <__gethex+0xb4>
 801e6a8:	f04f 0b00 	mov.w	fp, #0
 801e6ac:	1ca9      	adds	r1, r5, #2
 801e6ae:	e7d0      	b.n	801e652 <__gethex+0xce>
 801e6b0:	f04f 0b01 	mov.w	fp, #1
 801e6b4:	e7fa      	b.n	801e6ac <__gethex+0x128>
 801e6b6:	230a      	movs	r3, #10
 801e6b8:	fb03 0002 	mla	r0, r3, r2, r0
 801e6bc:	e7d0      	b.n	801e660 <__gethex+0xdc>
 801e6be:	4629      	mov	r1, r5
 801e6c0:	e7e0      	b.n	801e684 <__gethex+0x100>
 801e6c2:	eba5 0308 	sub.w	r3, r5, r8
 801e6c6:	3b01      	subs	r3, #1
 801e6c8:	4621      	mov	r1, r4
 801e6ca:	2b07      	cmp	r3, #7
 801e6cc:	dc0a      	bgt.n	801e6e4 <__gethex+0x160>
 801e6ce:	4648      	mov	r0, r9
 801e6d0:	f7fd fbac 	bl	801be2c <_Balloc>
 801e6d4:	4604      	mov	r4, r0
 801e6d6:	b940      	cbnz	r0, 801e6ea <__gethex+0x166>
 801e6d8:	4b61      	ldr	r3, [pc, #388]	; (801e860 <__gethex+0x2dc>)
 801e6da:	4602      	mov	r2, r0
 801e6dc:	21e4      	movs	r1, #228	; 0xe4
 801e6de:	4861      	ldr	r0, [pc, #388]	; (801e864 <__gethex+0x2e0>)
 801e6e0:	f7fb f9ea 	bl	8019ab8 <__assert_func>
 801e6e4:	3101      	adds	r1, #1
 801e6e6:	105b      	asrs	r3, r3, #1
 801e6e8:	e7ef      	b.n	801e6ca <__gethex+0x146>
 801e6ea:	f100 0a14 	add.w	sl, r0, #20
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	495a      	ldr	r1, [pc, #360]	; (801e85c <__gethex+0x2d8>)
 801e6f2:	f8cd a004 	str.w	sl, [sp, #4]
 801e6f6:	469b      	mov	fp, r3
 801e6f8:	45a8      	cmp	r8, r5
 801e6fa:	d342      	bcc.n	801e782 <__gethex+0x1fe>
 801e6fc:	9801      	ldr	r0, [sp, #4]
 801e6fe:	f840 bb04 	str.w	fp, [r0], #4
 801e702:	eba0 000a 	sub.w	r0, r0, sl
 801e706:	1080      	asrs	r0, r0, #2
 801e708:	6120      	str	r0, [r4, #16]
 801e70a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801e70e:	4658      	mov	r0, fp
 801e710:	f7fd fc7e 	bl	801c010 <__hi0bits>
 801e714:	683d      	ldr	r5, [r7, #0]
 801e716:	eba8 0000 	sub.w	r0, r8, r0
 801e71a:	42a8      	cmp	r0, r5
 801e71c:	dd59      	ble.n	801e7d2 <__gethex+0x24e>
 801e71e:	eba0 0805 	sub.w	r8, r0, r5
 801e722:	4641      	mov	r1, r8
 801e724:	4620      	mov	r0, r4
 801e726:	f7fe f80d 	bl	801c744 <__any_on>
 801e72a:	4683      	mov	fp, r0
 801e72c:	b1b8      	cbz	r0, 801e75e <__gethex+0x1da>
 801e72e:	f108 33ff 	add.w	r3, r8, #4294967295
 801e732:	1159      	asrs	r1, r3, #5
 801e734:	f003 021f 	and.w	r2, r3, #31
 801e738:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e73c:	f04f 0b01 	mov.w	fp, #1
 801e740:	fa0b f202 	lsl.w	r2, fp, r2
 801e744:	420a      	tst	r2, r1
 801e746:	d00a      	beq.n	801e75e <__gethex+0x1da>
 801e748:	455b      	cmp	r3, fp
 801e74a:	dd06      	ble.n	801e75a <__gethex+0x1d6>
 801e74c:	f1a8 0102 	sub.w	r1, r8, #2
 801e750:	4620      	mov	r0, r4
 801e752:	f7fd fff7 	bl	801c744 <__any_on>
 801e756:	2800      	cmp	r0, #0
 801e758:	d138      	bne.n	801e7cc <__gethex+0x248>
 801e75a:	f04f 0b02 	mov.w	fp, #2
 801e75e:	4641      	mov	r1, r8
 801e760:	4620      	mov	r0, r4
 801e762:	f7ff fea7 	bl	801e4b4 <rshift>
 801e766:	4446      	add	r6, r8
 801e768:	68bb      	ldr	r3, [r7, #8]
 801e76a:	42b3      	cmp	r3, r6
 801e76c:	da41      	bge.n	801e7f2 <__gethex+0x26e>
 801e76e:	4621      	mov	r1, r4
 801e770:	4648      	mov	r0, r9
 801e772:	f7fd fb9b 	bl	801beac <_Bfree>
 801e776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e778:	2300      	movs	r3, #0
 801e77a:	6013      	str	r3, [r2, #0]
 801e77c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801e780:	e78a      	b.n	801e698 <__gethex+0x114>
 801e782:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801e786:	2a2e      	cmp	r2, #46	; 0x2e
 801e788:	d014      	beq.n	801e7b4 <__gethex+0x230>
 801e78a:	2b20      	cmp	r3, #32
 801e78c:	d106      	bne.n	801e79c <__gethex+0x218>
 801e78e:	9b01      	ldr	r3, [sp, #4]
 801e790:	f843 bb04 	str.w	fp, [r3], #4
 801e794:	f04f 0b00 	mov.w	fp, #0
 801e798:	9301      	str	r3, [sp, #4]
 801e79a:	465b      	mov	r3, fp
 801e79c:	7828      	ldrb	r0, [r5, #0]
 801e79e:	9303      	str	r3, [sp, #12]
 801e7a0:	f7ff feda 	bl	801e558 <__hexdig_fun>
 801e7a4:	9b03      	ldr	r3, [sp, #12]
 801e7a6:	f000 000f 	and.w	r0, r0, #15
 801e7aa:	4098      	lsls	r0, r3
 801e7ac:	ea4b 0b00 	orr.w	fp, fp, r0
 801e7b0:	3304      	adds	r3, #4
 801e7b2:	e7a1      	b.n	801e6f8 <__gethex+0x174>
 801e7b4:	45a8      	cmp	r8, r5
 801e7b6:	d8e8      	bhi.n	801e78a <__gethex+0x206>
 801e7b8:	2201      	movs	r2, #1
 801e7ba:	4628      	mov	r0, r5
 801e7bc:	9303      	str	r3, [sp, #12]
 801e7be:	f7ff fe05 	bl	801e3cc <strncmp>
 801e7c2:	4926      	ldr	r1, [pc, #152]	; (801e85c <__gethex+0x2d8>)
 801e7c4:	9b03      	ldr	r3, [sp, #12]
 801e7c6:	2800      	cmp	r0, #0
 801e7c8:	d1df      	bne.n	801e78a <__gethex+0x206>
 801e7ca:	e795      	b.n	801e6f8 <__gethex+0x174>
 801e7cc:	f04f 0b03 	mov.w	fp, #3
 801e7d0:	e7c5      	b.n	801e75e <__gethex+0x1da>
 801e7d2:	da0b      	bge.n	801e7ec <__gethex+0x268>
 801e7d4:	eba5 0800 	sub.w	r8, r5, r0
 801e7d8:	4621      	mov	r1, r4
 801e7da:	4642      	mov	r2, r8
 801e7dc:	4648      	mov	r0, r9
 801e7de:	f7fd fd7f 	bl	801c2e0 <__lshift>
 801e7e2:	eba6 0608 	sub.w	r6, r6, r8
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	f100 0a14 	add.w	sl, r0, #20
 801e7ec:	f04f 0b00 	mov.w	fp, #0
 801e7f0:	e7ba      	b.n	801e768 <__gethex+0x1e4>
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	42b3      	cmp	r3, r6
 801e7f6:	dd73      	ble.n	801e8e0 <__gethex+0x35c>
 801e7f8:	1b9e      	subs	r6, r3, r6
 801e7fa:	42b5      	cmp	r5, r6
 801e7fc:	dc34      	bgt.n	801e868 <__gethex+0x2e4>
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	2b02      	cmp	r3, #2
 801e802:	d023      	beq.n	801e84c <__gethex+0x2c8>
 801e804:	2b03      	cmp	r3, #3
 801e806:	d025      	beq.n	801e854 <__gethex+0x2d0>
 801e808:	2b01      	cmp	r3, #1
 801e80a:	d115      	bne.n	801e838 <__gethex+0x2b4>
 801e80c:	42b5      	cmp	r5, r6
 801e80e:	d113      	bne.n	801e838 <__gethex+0x2b4>
 801e810:	2d01      	cmp	r5, #1
 801e812:	d10b      	bne.n	801e82c <__gethex+0x2a8>
 801e814:	9a02      	ldr	r2, [sp, #8]
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	6013      	str	r3, [r2, #0]
 801e81a:	2301      	movs	r3, #1
 801e81c:	6123      	str	r3, [r4, #16]
 801e81e:	f8ca 3000 	str.w	r3, [sl]
 801e822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e824:	f04f 0862 	mov.w	r8, #98	; 0x62
 801e828:	601c      	str	r4, [r3, #0]
 801e82a:	e735      	b.n	801e698 <__gethex+0x114>
 801e82c:	1e69      	subs	r1, r5, #1
 801e82e:	4620      	mov	r0, r4
 801e830:	f7fd ff88 	bl	801c744 <__any_on>
 801e834:	2800      	cmp	r0, #0
 801e836:	d1ed      	bne.n	801e814 <__gethex+0x290>
 801e838:	4621      	mov	r1, r4
 801e83a:	4648      	mov	r0, r9
 801e83c:	f7fd fb36 	bl	801beac <_Bfree>
 801e840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e842:	2300      	movs	r3, #0
 801e844:	6013      	str	r3, [r2, #0]
 801e846:	f04f 0850 	mov.w	r8, #80	; 0x50
 801e84a:	e725      	b.n	801e698 <__gethex+0x114>
 801e84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d1f2      	bne.n	801e838 <__gethex+0x2b4>
 801e852:	e7df      	b.n	801e814 <__gethex+0x290>
 801e854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e856:	2b00      	cmp	r3, #0
 801e858:	d1dc      	bne.n	801e814 <__gethex+0x290>
 801e85a:	e7ed      	b.n	801e838 <__gethex+0x2b4>
 801e85c:	080209f4 	.word	0x080209f4
 801e860:	0802088d 	.word	0x0802088d
 801e864:	08020b7d 	.word	0x08020b7d
 801e868:	f106 38ff 	add.w	r8, r6, #4294967295
 801e86c:	f1bb 0f00 	cmp.w	fp, #0
 801e870:	d133      	bne.n	801e8da <__gethex+0x356>
 801e872:	f1b8 0f00 	cmp.w	r8, #0
 801e876:	d004      	beq.n	801e882 <__gethex+0x2fe>
 801e878:	4641      	mov	r1, r8
 801e87a:	4620      	mov	r0, r4
 801e87c:	f7fd ff62 	bl	801c744 <__any_on>
 801e880:	4683      	mov	fp, r0
 801e882:	ea4f 1268 	mov.w	r2, r8, asr #5
 801e886:	2301      	movs	r3, #1
 801e888:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801e88c:	f008 081f 	and.w	r8, r8, #31
 801e890:	fa03 f308 	lsl.w	r3, r3, r8
 801e894:	4213      	tst	r3, r2
 801e896:	4631      	mov	r1, r6
 801e898:	4620      	mov	r0, r4
 801e89a:	bf18      	it	ne
 801e89c:	f04b 0b02 	orrne.w	fp, fp, #2
 801e8a0:	1bad      	subs	r5, r5, r6
 801e8a2:	f7ff fe07 	bl	801e4b4 <rshift>
 801e8a6:	687e      	ldr	r6, [r7, #4]
 801e8a8:	f04f 0802 	mov.w	r8, #2
 801e8ac:	f1bb 0f00 	cmp.w	fp, #0
 801e8b0:	d04a      	beq.n	801e948 <__gethex+0x3c4>
 801e8b2:	68fb      	ldr	r3, [r7, #12]
 801e8b4:	2b02      	cmp	r3, #2
 801e8b6:	d016      	beq.n	801e8e6 <__gethex+0x362>
 801e8b8:	2b03      	cmp	r3, #3
 801e8ba:	d018      	beq.n	801e8ee <__gethex+0x36a>
 801e8bc:	2b01      	cmp	r3, #1
 801e8be:	d109      	bne.n	801e8d4 <__gethex+0x350>
 801e8c0:	f01b 0f02 	tst.w	fp, #2
 801e8c4:	d006      	beq.n	801e8d4 <__gethex+0x350>
 801e8c6:	f8da 3000 	ldr.w	r3, [sl]
 801e8ca:	ea4b 0b03 	orr.w	fp, fp, r3
 801e8ce:	f01b 0f01 	tst.w	fp, #1
 801e8d2:	d10f      	bne.n	801e8f4 <__gethex+0x370>
 801e8d4:	f048 0810 	orr.w	r8, r8, #16
 801e8d8:	e036      	b.n	801e948 <__gethex+0x3c4>
 801e8da:	f04f 0b01 	mov.w	fp, #1
 801e8de:	e7d0      	b.n	801e882 <__gethex+0x2fe>
 801e8e0:	f04f 0801 	mov.w	r8, #1
 801e8e4:	e7e2      	b.n	801e8ac <__gethex+0x328>
 801e8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8e8:	f1c3 0301 	rsb	r3, r3, #1
 801e8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d0ef      	beq.n	801e8d4 <__gethex+0x350>
 801e8f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e8f8:	f104 0214 	add.w	r2, r4, #20
 801e8fc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801e900:	9301      	str	r3, [sp, #4]
 801e902:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801e906:	2300      	movs	r3, #0
 801e908:	4694      	mov	ip, r2
 801e90a:	f852 1b04 	ldr.w	r1, [r2], #4
 801e90e:	f1b1 3fff 	cmp.w	r1, #4294967295
 801e912:	d01e      	beq.n	801e952 <__gethex+0x3ce>
 801e914:	3101      	adds	r1, #1
 801e916:	f8cc 1000 	str.w	r1, [ip]
 801e91a:	f1b8 0f02 	cmp.w	r8, #2
 801e91e:	f104 0214 	add.w	r2, r4, #20
 801e922:	d13d      	bne.n	801e9a0 <__gethex+0x41c>
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	3b01      	subs	r3, #1
 801e928:	42ab      	cmp	r3, r5
 801e92a:	d10b      	bne.n	801e944 <__gethex+0x3c0>
 801e92c:	1169      	asrs	r1, r5, #5
 801e92e:	2301      	movs	r3, #1
 801e930:	f005 051f 	and.w	r5, r5, #31
 801e934:	fa03 f505 	lsl.w	r5, r3, r5
 801e938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e93c:	421d      	tst	r5, r3
 801e93e:	bf18      	it	ne
 801e940:	f04f 0801 	movne.w	r8, #1
 801e944:	f048 0820 	orr.w	r8, r8, #32
 801e948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e94a:	601c      	str	r4, [r3, #0]
 801e94c:	9b02      	ldr	r3, [sp, #8]
 801e94e:	601e      	str	r6, [r3, #0]
 801e950:	e6a2      	b.n	801e698 <__gethex+0x114>
 801e952:	4290      	cmp	r0, r2
 801e954:	f842 3c04 	str.w	r3, [r2, #-4]
 801e958:	d8d6      	bhi.n	801e908 <__gethex+0x384>
 801e95a:	68a2      	ldr	r2, [r4, #8]
 801e95c:	4593      	cmp	fp, r2
 801e95e:	db17      	blt.n	801e990 <__gethex+0x40c>
 801e960:	6861      	ldr	r1, [r4, #4]
 801e962:	4648      	mov	r0, r9
 801e964:	3101      	adds	r1, #1
 801e966:	f7fd fa61 	bl	801be2c <_Balloc>
 801e96a:	4682      	mov	sl, r0
 801e96c:	b918      	cbnz	r0, 801e976 <__gethex+0x3f2>
 801e96e:	4b1b      	ldr	r3, [pc, #108]	; (801e9dc <__gethex+0x458>)
 801e970:	4602      	mov	r2, r0
 801e972:	2184      	movs	r1, #132	; 0x84
 801e974:	e6b3      	b.n	801e6de <__gethex+0x15a>
 801e976:	6922      	ldr	r2, [r4, #16]
 801e978:	3202      	adds	r2, #2
 801e97a:	f104 010c 	add.w	r1, r4, #12
 801e97e:	0092      	lsls	r2, r2, #2
 801e980:	300c      	adds	r0, #12
 801e982:	f7fc fb6e 	bl	801b062 <memcpy>
 801e986:	4621      	mov	r1, r4
 801e988:	4648      	mov	r0, r9
 801e98a:	f7fd fa8f 	bl	801beac <_Bfree>
 801e98e:	4654      	mov	r4, sl
 801e990:	6922      	ldr	r2, [r4, #16]
 801e992:	1c51      	adds	r1, r2, #1
 801e994:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e998:	6121      	str	r1, [r4, #16]
 801e99a:	2101      	movs	r1, #1
 801e99c:	6151      	str	r1, [r2, #20]
 801e99e:	e7bc      	b.n	801e91a <__gethex+0x396>
 801e9a0:	6921      	ldr	r1, [r4, #16]
 801e9a2:	4559      	cmp	r1, fp
 801e9a4:	dd0b      	ble.n	801e9be <__gethex+0x43a>
 801e9a6:	2101      	movs	r1, #1
 801e9a8:	4620      	mov	r0, r4
 801e9aa:	f7ff fd83 	bl	801e4b4 <rshift>
 801e9ae:	68bb      	ldr	r3, [r7, #8]
 801e9b0:	3601      	adds	r6, #1
 801e9b2:	42b3      	cmp	r3, r6
 801e9b4:	f6ff aedb 	blt.w	801e76e <__gethex+0x1ea>
 801e9b8:	f04f 0801 	mov.w	r8, #1
 801e9bc:	e7c2      	b.n	801e944 <__gethex+0x3c0>
 801e9be:	f015 051f 	ands.w	r5, r5, #31
 801e9c2:	d0f9      	beq.n	801e9b8 <__gethex+0x434>
 801e9c4:	9b01      	ldr	r3, [sp, #4]
 801e9c6:	441a      	add	r2, r3
 801e9c8:	f1c5 0520 	rsb	r5, r5, #32
 801e9cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801e9d0:	f7fd fb1e 	bl	801c010 <__hi0bits>
 801e9d4:	42a8      	cmp	r0, r5
 801e9d6:	dbe6      	blt.n	801e9a6 <__gethex+0x422>
 801e9d8:	e7ee      	b.n	801e9b8 <__gethex+0x434>
 801e9da:	bf00      	nop
 801e9dc:	0802088d 	.word	0x0802088d

0801e9e0 <L_shift>:
 801e9e0:	f1c2 0208 	rsb	r2, r2, #8
 801e9e4:	0092      	lsls	r2, r2, #2
 801e9e6:	b570      	push	{r4, r5, r6, lr}
 801e9e8:	f1c2 0620 	rsb	r6, r2, #32
 801e9ec:	6843      	ldr	r3, [r0, #4]
 801e9ee:	6804      	ldr	r4, [r0, #0]
 801e9f0:	fa03 f506 	lsl.w	r5, r3, r6
 801e9f4:	432c      	orrs	r4, r5
 801e9f6:	40d3      	lsrs	r3, r2
 801e9f8:	6004      	str	r4, [r0, #0]
 801e9fa:	f840 3f04 	str.w	r3, [r0, #4]!
 801e9fe:	4288      	cmp	r0, r1
 801ea00:	d3f4      	bcc.n	801e9ec <L_shift+0xc>
 801ea02:	bd70      	pop	{r4, r5, r6, pc}

0801ea04 <__match>:
 801ea04:	b530      	push	{r4, r5, lr}
 801ea06:	6803      	ldr	r3, [r0, #0]
 801ea08:	3301      	adds	r3, #1
 801ea0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ea0e:	b914      	cbnz	r4, 801ea16 <__match+0x12>
 801ea10:	6003      	str	r3, [r0, #0]
 801ea12:	2001      	movs	r0, #1
 801ea14:	bd30      	pop	{r4, r5, pc}
 801ea16:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ea1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ea1e:	2d19      	cmp	r5, #25
 801ea20:	bf98      	it	ls
 801ea22:	3220      	addls	r2, #32
 801ea24:	42a2      	cmp	r2, r4
 801ea26:	d0f0      	beq.n	801ea0a <__match+0x6>
 801ea28:	2000      	movs	r0, #0
 801ea2a:	e7f3      	b.n	801ea14 <__match+0x10>

0801ea2c <__hexnan>:
 801ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea30:	680b      	ldr	r3, [r1, #0]
 801ea32:	6801      	ldr	r1, [r0, #0]
 801ea34:	115e      	asrs	r6, r3, #5
 801ea36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ea3a:	f013 031f 	ands.w	r3, r3, #31
 801ea3e:	b087      	sub	sp, #28
 801ea40:	bf18      	it	ne
 801ea42:	3604      	addne	r6, #4
 801ea44:	2500      	movs	r5, #0
 801ea46:	1f37      	subs	r7, r6, #4
 801ea48:	4682      	mov	sl, r0
 801ea4a:	4690      	mov	r8, r2
 801ea4c:	9301      	str	r3, [sp, #4]
 801ea4e:	f846 5c04 	str.w	r5, [r6, #-4]
 801ea52:	46b9      	mov	r9, r7
 801ea54:	463c      	mov	r4, r7
 801ea56:	9502      	str	r5, [sp, #8]
 801ea58:	46ab      	mov	fp, r5
 801ea5a:	784a      	ldrb	r2, [r1, #1]
 801ea5c:	1c4b      	adds	r3, r1, #1
 801ea5e:	9303      	str	r3, [sp, #12]
 801ea60:	b342      	cbz	r2, 801eab4 <__hexnan+0x88>
 801ea62:	4610      	mov	r0, r2
 801ea64:	9105      	str	r1, [sp, #20]
 801ea66:	9204      	str	r2, [sp, #16]
 801ea68:	f7ff fd76 	bl	801e558 <__hexdig_fun>
 801ea6c:	2800      	cmp	r0, #0
 801ea6e:	d14f      	bne.n	801eb10 <__hexnan+0xe4>
 801ea70:	9a04      	ldr	r2, [sp, #16]
 801ea72:	9905      	ldr	r1, [sp, #20]
 801ea74:	2a20      	cmp	r2, #32
 801ea76:	d818      	bhi.n	801eaaa <__hexnan+0x7e>
 801ea78:	9b02      	ldr	r3, [sp, #8]
 801ea7a:	459b      	cmp	fp, r3
 801ea7c:	dd13      	ble.n	801eaa6 <__hexnan+0x7a>
 801ea7e:	454c      	cmp	r4, r9
 801ea80:	d206      	bcs.n	801ea90 <__hexnan+0x64>
 801ea82:	2d07      	cmp	r5, #7
 801ea84:	dc04      	bgt.n	801ea90 <__hexnan+0x64>
 801ea86:	462a      	mov	r2, r5
 801ea88:	4649      	mov	r1, r9
 801ea8a:	4620      	mov	r0, r4
 801ea8c:	f7ff ffa8 	bl	801e9e0 <L_shift>
 801ea90:	4544      	cmp	r4, r8
 801ea92:	d950      	bls.n	801eb36 <__hexnan+0x10a>
 801ea94:	2300      	movs	r3, #0
 801ea96:	f1a4 0904 	sub.w	r9, r4, #4
 801ea9a:	f844 3c04 	str.w	r3, [r4, #-4]
 801ea9e:	f8cd b008 	str.w	fp, [sp, #8]
 801eaa2:	464c      	mov	r4, r9
 801eaa4:	461d      	mov	r5, r3
 801eaa6:	9903      	ldr	r1, [sp, #12]
 801eaa8:	e7d7      	b.n	801ea5a <__hexnan+0x2e>
 801eaaa:	2a29      	cmp	r2, #41	; 0x29
 801eaac:	d155      	bne.n	801eb5a <__hexnan+0x12e>
 801eaae:	3102      	adds	r1, #2
 801eab0:	f8ca 1000 	str.w	r1, [sl]
 801eab4:	f1bb 0f00 	cmp.w	fp, #0
 801eab8:	d04f      	beq.n	801eb5a <__hexnan+0x12e>
 801eaba:	454c      	cmp	r4, r9
 801eabc:	d206      	bcs.n	801eacc <__hexnan+0xa0>
 801eabe:	2d07      	cmp	r5, #7
 801eac0:	dc04      	bgt.n	801eacc <__hexnan+0xa0>
 801eac2:	462a      	mov	r2, r5
 801eac4:	4649      	mov	r1, r9
 801eac6:	4620      	mov	r0, r4
 801eac8:	f7ff ff8a 	bl	801e9e0 <L_shift>
 801eacc:	4544      	cmp	r4, r8
 801eace:	d934      	bls.n	801eb3a <__hexnan+0x10e>
 801ead0:	f1a8 0204 	sub.w	r2, r8, #4
 801ead4:	4623      	mov	r3, r4
 801ead6:	f853 1b04 	ldr.w	r1, [r3], #4
 801eada:	f842 1f04 	str.w	r1, [r2, #4]!
 801eade:	429f      	cmp	r7, r3
 801eae0:	d2f9      	bcs.n	801ead6 <__hexnan+0xaa>
 801eae2:	1b3b      	subs	r3, r7, r4
 801eae4:	f023 0303 	bic.w	r3, r3, #3
 801eae8:	3304      	adds	r3, #4
 801eaea:	3e03      	subs	r6, #3
 801eaec:	3401      	adds	r4, #1
 801eaee:	42a6      	cmp	r6, r4
 801eaf0:	bf38      	it	cc
 801eaf2:	2304      	movcc	r3, #4
 801eaf4:	4443      	add	r3, r8
 801eaf6:	2200      	movs	r2, #0
 801eaf8:	f843 2b04 	str.w	r2, [r3], #4
 801eafc:	429f      	cmp	r7, r3
 801eafe:	d2fb      	bcs.n	801eaf8 <__hexnan+0xcc>
 801eb00:	683b      	ldr	r3, [r7, #0]
 801eb02:	b91b      	cbnz	r3, 801eb0c <__hexnan+0xe0>
 801eb04:	4547      	cmp	r7, r8
 801eb06:	d126      	bne.n	801eb56 <__hexnan+0x12a>
 801eb08:	2301      	movs	r3, #1
 801eb0a:	603b      	str	r3, [r7, #0]
 801eb0c:	2005      	movs	r0, #5
 801eb0e:	e025      	b.n	801eb5c <__hexnan+0x130>
 801eb10:	3501      	adds	r5, #1
 801eb12:	2d08      	cmp	r5, #8
 801eb14:	f10b 0b01 	add.w	fp, fp, #1
 801eb18:	dd06      	ble.n	801eb28 <__hexnan+0xfc>
 801eb1a:	4544      	cmp	r4, r8
 801eb1c:	d9c3      	bls.n	801eaa6 <__hexnan+0x7a>
 801eb1e:	2300      	movs	r3, #0
 801eb20:	f844 3c04 	str.w	r3, [r4, #-4]
 801eb24:	2501      	movs	r5, #1
 801eb26:	3c04      	subs	r4, #4
 801eb28:	6822      	ldr	r2, [r4, #0]
 801eb2a:	f000 000f 	and.w	r0, r0, #15
 801eb2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801eb32:	6020      	str	r0, [r4, #0]
 801eb34:	e7b7      	b.n	801eaa6 <__hexnan+0x7a>
 801eb36:	2508      	movs	r5, #8
 801eb38:	e7b5      	b.n	801eaa6 <__hexnan+0x7a>
 801eb3a:	9b01      	ldr	r3, [sp, #4]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d0df      	beq.n	801eb00 <__hexnan+0xd4>
 801eb40:	f1c3 0320 	rsb	r3, r3, #32
 801eb44:	f04f 32ff 	mov.w	r2, #4294967295
 801eb48:	40da      	lsrs	r2, r3
 801eb4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801eb4e:	4013      	ands	r3, r2
 801eb50:	f846 3c04 	str.w	r3, [r6, #-4]
 801eb54:	e7d4      	b.n	801eb00 <__hexnan+0xd4>
 801eb56:	3f04      	subs	r7, #4
 801eb58:	e7d2      	b.n	801eb00 <__hexnan+0xd4>
 801eb5a:	2004      	movs	r0, #4
 801eb5c:	b007      	add	sp, #28
 801eb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb62 <__ascii_mbtowc>:
 801eb62:	b082      	sub	sp, #8
 801eb64:	b901      	cbnz	r1, 801eb68 <__ascii_mbtowc+0x6>
 801eb66:	a901      	add	r1, sp, #4
 801eb68:	b142      	cbz	r2, 801eb7c <__ascii_mbtowc+0x1a>
 801eb6a:	b14b      	cbz	r3, 801eb80 <__ascii_mbtowc+0x1e>
 801eb6c:	7813      	ldrb	r3, [r2, #0]
 801eb6e:	600b      	str	r3, [r1, #0]
 801eb70:	7812      	ldrb	r2, [r2, #0]
 801eb72:	1e10      	subs	r0, r2, #0
 801eb74:	bf18      	it	ne
 801eb76:	2001      	movne	r0, #1
 801eb78:	b002      	add	sp, #8
 801eb7a:	4770      	bx	lr
 801eb7c:	4610      	mov	r0, r2
 801eb7e:	e7fb      	b.n	801eb78 <__ascii_mbtowc+0x16>
 801eb80:	f06f 0001 	mvn.w	r0, #1
 801eb84:	e7f8      	b.n	801eb78 <__ascii_mbtowc+0x16>

0801eb86 <_realloc_r>:
 801eb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb8a:	4680      	mov	r8, r0
 801eb8c:	4614      	mov	r4, r2
 801eb8e:	460e      	mov	r6, r1
 801eb90:	b921      	cbnz	r1, 801eb9c <_realloc_r+0x16>
 801eb92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb96:	4611      	mov	r1, r2
 801eb98:	f7fa bfd4 	b.w	8019b44 <_malloc_r>
 801eb9c:	b92a      	cbnz	r2, 801ebaa <_realloc_r+0x24>
 801eb9e:	f7fd f8f9 	bl	801bd94 <_free_r>
 801eba2:	4625      	mov	r5, r4
 801eba4:	4628      	mov	r0, r5
 801eba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebaa:	f000 f921 	bl	801edf0 <_malloc_usable_size_r>
 801ebae:	4284      	cmp	r4, r0
 801ebb0:	4607      	mov	r7, r0
 801ebb2:	d802      	bhi.n	801ebba <_realloc_r+0x34>
 801ebb4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ebb8:	d812      	bhi.n	801ebe0 <_realloc_r+0x5a>
 801ebba:	4621      	mov	r1, r4
 801ebbc:	4640      	mov	r0, r8
 801ebbe:	f7fa ffc1 	bl	8019b44 <_malloc_r>
 801ebc2:	4605      	mov	r5, r0
 801ebc4:	2800      	cmp	r0, #0
 801ebc6:	d0ed      	beq.n	801eba4 <_realloc_r+0x1e>
 801ebc8:	42bc      	cmp	r4, r7
 801ebca:	4622      	mov	r2, r4
 801ebcc:	4631      	mov	r1, r6
 801ebce:	bf28      	it	cs
 801ebd0:	463a      	movcs	r2, r7
 801ebd2:	f7fc fa46 	bl	801b062 <memcpy>
 801ebd6:	4631      	mov	r1, r6
 801ebd8:	4640      	mov	r0, r8
 801ebda:	f7fd f8db 	bl	801bd94 <_free_r>
 801ebde:	e7e1      	b.n	801eba4 <_realloc_r+0x1e>
 801ebe0:	4635      	mov	r5, r6
 801ebe2:	e7df      	b.n	801eba4 <_realloc_r+0x1e>

0801ebe4 <_strtoul_l.constprop.0>:
 801ebe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ebe8:	4f36      	ldr	r7, [pc, #216]	; (801ecc4 <_strtoul_l.constprop.0+0xe0>)
 801ebea:	4686      	mov	lr, r0
 801ebec:	460d      	mov	r5, r1
 801ebee:	4628      	mov	r0, r5
 801ebf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ebf4:	5d3e      	ldrb	r6, [r7, r4]
 801ebf6:	f016 0608 	ands.w	r6, r6, #8
 801ebfa:	d1f8      	bne.n	801ebee <_strtoul_l.constprop.0+0xa>
 801ebfc:	2c2d      	cmp	r4, #45	; 0x2d
 801ebfe:	d130      	bne.n	801ec62 <_strtoul_l.constprop.0+0x7e>
 801ec00:	782c      	ldrb	r4, [r5, #0]
 801ec02:	2601      	movs	r6, #1
 801ec04:	1c85      	adds	r5, r0, #2
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d057      	beq.n	801ecba <_strtoul_l.constprop.0+0xd6>
 801ec0a:	2b10      	cmp	r3, #16
 801ec0c:	d109      	bne.n	801ec22 <_strtoul_l.constprop.0+0x3e>
 801ec0e:	2c30      	cmp	r4, #48	; 0x30
 801ec10:	d107      	bne.n	801ec22 <_strtoul_l.constprop.0+0x3e>
 801ec12:	7828      	ldrb	r0, [r5, #0]
 801ec14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ec18:	2858      	cmp	r0, #88	; 0x58
 801ec1a:	d149      	bne.n	801ecb0 <_strtoul_l.constprop.0+0xcc>
 801ec1c:	786c      	ldrb	r4, [r5, #1]
 801ec1e:	2310      	movs	r3, #16
 801ec20:	3502      	adds	r5, #2
 801ec22:	f04f 38ff 	mov.w	r8, #4294967295
 801ec26:	2700      	movs	r7, #0
 801ec28:	fbb8 f8f3 	udiv	r8, r8, r3
 801ec2c:	fb03 f908 	mul.w	r9, r3, r8
 801ec30:	ea6f 0909 	mvn.w	r9, r9
 801ec34:	4638      	mov	r0, r7
 801ec36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ec3a:	f1bc 0f09 	cmp.w	ip, #9
 801ec3e:	d815      	bhi.n	801ec6c <_strtoul_l.constprop.0+0x88>
 801ec40:	4664      	mov	r4, ip
 801ec42:	42a3      	cmp	r3, r4
 801ec44:	dd23      	ble.n	801ec8e <_strtoul_l.constprop.0+0xaa>
 801ec46:	f1b7 3fff 	cmp.w	r7, #4294967295
 801ec4a:	d007      	beq.n	801ec5c <_strtoul_l.constprop.0+0x78>
 801ec4c:	4580      	cmp	r8, r0
 801ec4e:	d31b      	bcc.n	801ec88 <_strtoul_l.constprop.0+0xa4>
 801ec50:	d101      	bne.n	801ec56 <_strtoul_l.constprop.0+0x72>
 801ec52:	45a1      	cmp	r9, r4
 801ec54:	db18      	blt.n	801ec88 <_strtoul_l.constprop.0+0xa4>
 801ec56:	fb00 4003 	mla	r0, r0, r3, r4
 801ec5a:	2701      	movs	r7, #1
 801ec5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ec60:	e7e9      	b.n	801ec36 <_strtoul_l.constprop.0+0x52>
 801ec62:	2c2b      	cmp	r4, #43	; 0x2b
 801ec64:	bf04      	itt	eq
 801ec66:	782c      	ldrbeq	r4, [r5, #0]
 801ec68:	1c85      	addeq	r5, r0, #2
 801ec6a:	e7cc      	b.n	801ec06 <_strtoul_l.constprop.0+0x22>
 801ec6c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ec70:	f1bc 0f19 	cmp.w	ip, #25
 801ec74:	d801      	bhi.n	801ec7a <_strtoul_l.constprop.0+0x96>
 801ec76:	3c37      	subs	r4, #55	; 0x37
 801ec78:	e7e3      	b.n	801ec42 <_strtoul_l.constprop.0+0x5e>
 801ec7a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ec7e:	f1bc 0f19 	cmp.w	ip, #25
 801ec82:	d804      	bhi.n	801ec8e <_strtoul_l.constprop.0+0xaa>
 801ec84:	3c57      	subs	r4, #87	; 0x57
 801ec86:	e7dc      	b.n	801ec42 <_strtoul_l.constprop.0+0x5e>
 801ec88:	f04f 37ff 	mov.w	r7, #4294967295
 801ec8c:	e7e6      	b.n	801ec5c <_strtoul_l.constprop.0+0x78>
 801ec8e:	1c7b      	adds	r3, r7, #1
 801ec90:	d106      	bne.n	801eca0 <_strtoul_l.constprop.0+0xbc>
 801ec92:	2322      	movs	r3, #34	; 0x22
 801ec94:	f8ce 3000 	str.w	r3, [lr]
 801ec98:	4638      	mov	r0, r7
 801ec9a:	b932      	cbnz	r2, 801ecaa <_strtoul_l.constprop.0+0xc6>
 801ec9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eca0:	b106      	cbz	r6, 801eca4 <_strtoul_l.constprop.0+0xc0>
 801eca2:	4240      	negs	r0, r0
 801eca4:	2a00      	cmp	r2, #0
 801eca6:	d0f9      	beq.n	801ec9c <_strtoul_l.constprop.0+0xb8>
 801eca8:	b107      	cbz	r7, 801ecac <_strtoul_l.constprop.0+0xc8>
 801ecaa:	1e69      	subs	r1, r5, #1
 801ecac:	6011      	str	r1, [r2, #0]
 801ecae:	e7f5      	b.n	801ec9c <_strtoul_l.constprop.0+0xb8>
 801ecb0:	2430      	movs	r4, #48	; 0x30
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d1b5      	bne.n	801ec22 <_strtoul_l.constprop.0+0x3e>
 801ecb6:	2308      	movs	r3, #8
 801ecb8:	e7b3      	b.n	801ec22 <_strtoul_l.constprop.0+0x3e>
 801ecba:	2c30      	cmp	r4, #48	; 0x30
 801ecbc:	d0a9      	beq.n	801ec12 <_strtoul_l.constprop.0+0x2e>
 801ecbe:	230a      	movs	r3, #10
 801ecc0:	e7af      	b.n	801ec22 <_strtoul_l.constprop.0+0x3e>
 801ecc2:	bf00      	nop
 801ecc4:	08020a49 	.word	0x08020a49

0801ecc8 <_strtoul_r>:
 801ecc8:	f7ff bf8c 	b.w	801ebe4 <_strtoul_l.constprop.0>

0801eccc <__ascii_wctomb>:
 801eccc:	b149      	cbz	r1, 801ece2 <__ascii_wctomb+0x16>
 801ecce:	2aff      	cmp	r2, #255	; 0xff
 801ecd0:	bf85      	ittet	hi
 801ecd2:	238a      	movhi	r3, #138	; 0x8a
 801ecd4:	6003      	strhi	r3, [r0, #0]
 801ecd6:	700a      	strbls	r2, [r1, #0]
 801ecd8:	f04f 30ff 	movhi.w	r0, #4294967295
 801ecdc:	bf98      	it	ls
 801ecde:	2001      	movls	r0, #1
 801ece0:	4770      	bx	lr
 801ece2:	4608      	mov	r0, r1
 801ece4:	4770      	bx	lr

0801ece6 <__swhatbuf_r>:
 801ece6:	b570      	push	{r4, r5, r6, lr}
 801ece8:	460c      	mov	r4, r1
 801ecea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ecee:	2900      	cmp	r1, #0
 801ecf0:	b096      	sub	sp, #88	; 0x58
 801ecf2:	4615      	mov	r5, r2
 801ecf4:	461e      	mov	r6, r3
 801ecf6:	da0d      	bge.n	801ed14 <__swhatbuf_r+0x2e>
 801ecf8:	89a3      	ldrh	r3, [r4, #12]
 801ecfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ecfe:	f04f 0100 	mov.w	r1, #0
 801ed02:	bf0c      	ite	eq
 801ed04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ed08:	2340      	movne	r3, #64	; 0x40
 801ed0a:	2000      	movs	r0, #0
 801ed0c:	6031      	str	r1, [r6, #0]
 801ed0e:	602b      	str	r3, [r5, #0]
 801ed10:	b016      	add	sp, #88	; 0x58
 801ed12:	bd70      	pop	{r4, r5, r6, pc}
 801ed14:	466a      	mov	r2, sp
 801ed16:	f000 f849 	bl	801edac <_fstat_r>
 801ed1a:	2800      	cmp	r0, #0
 801ed1c:	dbec      	blt.n	801ecf8 <__swhatbuf_r+0x12>
 801ed1e:	9901      	ldr	r1, [sp, #4]
 801ed20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ed24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ed28:	4259      	negs	r1, r3
 801ed2a:	4159      	adcs	r1, r3
 801ed2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ed30:	e7eb      	b.n	801ed0a <__swhatbuf_r+0x24>

0801ed32 <__smakebuf_r>:
 801ed32:	898b      	ldrh	r3, [r1, #12]
 801ed34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ed36:	079d      	lsls	r5, r3, #30
 801ed38:	4606      	mov	r6, r0
 801ed3a:	460c      	mov	r4, r1
 801ed3c:	d507      	bpl.n	801ed4e <__smakebuf_r+0x1c>
 801ed3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ed42:	6023      	str	r3, [r4, #0]
 801ed44:	6123      	str	r3, [r4, #16]
 801ed46:	2301      	movs	r3, #1
 801ed48:	6163      	str	r3, [r4, #20]
 801ed4a:	b002      	add	sp, #8
 801ed4c:	bd70      	pop	{r4, r5, r6, pc}
 801ed4e:	ab01      	add	r3, sp, #4
 801ed50:	466a      	mov	r2, sp
 801ed52:	f7ff ffc8 	bl	801ece6 <__swhatbuf_r>
 801ed56:	9900      	ldr	r1, [sp, #0]
 801ed58:	4605      	mov	r5, r0
 801ed5a:	4630      	mov	r0, r6
 801ed5c:	f7fa fef2 	bl	8019b44 <_malloc_r>
 801ed60:	b948      	cbnz	r0, 801ed76 <__smakebuf_r+0x44>
 801ed62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed66:	059a      	lsls	r2, r3, #22
 801ed68:	d4ef      	bmi.n	801ed4a <__smakebuf_r+0x18>
 801ed6a:	f023 0303 	bic.w	r3, r3, #3
 801ed6e:	f043 0302 	orr.w	r3, r3, #2
 801ed72:	81a3      	strh	r3, [r4, #12]
 801ed74:	e7e3      	b.n	801ed3e <__smakebuf_r+0xc>
 801ed76:	89a3      	ldrh	r3, [r4, #12]
 801ed78:	6020      	str	r0, [r4, #0]
 801ed7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed7e:	81a3      	strh	r3, [r4, #12]
 801ed80:	9b00      	ldr	r3, [sp, #0]
 801ed82:	6163      	str	r3, [r4, #20]
 801ed84:	9b01      	ldr	r3, [sp, #4]
 801ed86:	6120      	str	r0, [r4, #16]
 801ed88:	b15b      	cbz	r3, 801eda2 <__smakebuf_r+0x70>
 801ed8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed8e:	4630      	mov	r0, r6
 801ed90:	f000 f81e 	bl	801edd0 <_isatty_r>
 801ed94:	b128      	cbz	r0, 801eda2 <__smakebuf_r+0x70>
 801ed96:	89a3      	ldrh	r3, [r4, #12]
 801ed98:	f023 0303 	bic.w	r3, r3, #3
 801ed9c:	f043 0301 	orr.w	r3, r3, #1
 801eda0:	81a3      	strh	r3, [r4, #12]
 801eda2:	89a3      	ldrh	r3, [r4, #12]
 801eda4:	431d      	orrs	r5, r3
 801eda6:	81a5      	strh	r5, [r4, #12]
 801eda8:	e7cf      	b.n	801ed4a <__smakebuf_r+0x18>
	...

0801edac <_fstat_r>:
 801edac:	b538      	push	{r3, r4, r5, lr}
 801edae:	4d07      	ldr	r5, [pc, #28]	; (801edcc <_fstat_r+0x20>)
 801edb0:	2300      	movs	r3, #0
 801edb2:	4604      	mov	r4, r0
 801edb4:	4608      	mov	r0, r1
 801edb6:	4611      	mov	r1, r2
 801edb8:	602b      	str	r3, [r5, #0]
 801edba:	f7e3 fe02 	bl	80029c2 <_fstat>
 801edbe:	1c43      	adds	r3, r0, #1
 801edc0:	d102      	bne.n	801edc8 <_fstat_r+0x1c>
 801edc2:	682b      	ldr	r3, [r5, #0]
 801edc4:	b103      	cbz	r3, 801edc8 <_fstat_r+0x1c>
 801edc6:	6023      	str	r3, [r4, #0]
 801edc8:	bd38      	pop	{r3, r4, r5, pc}
 801edca:	bf00      	nop
 801edcc:	20005ea4 	.word	0x20005ea4

0801edd0 <_isatty_r>:
 801edd0:	b538      	push	{r3, r4, r5, lr}
 801edd2:	4d06      	ldr	r5, [pc, #24]	; (801edec <_isatty_r+0x1c>)
 801edd4:	2300      	movs	r3, #0
 801edd6:	4604      	mov	r4, r0
 801edd8:	4608      	mov	r0, r1
 801edda:	602b      	str	r3, [r5, #0]
 801eddc:	f7e3 fe01 	bl	80029e2 <_isatty>
 801ede0:	1c43      	adds	r3, r0, #1
 801ede2:	d102      	bne.n	801edea <_isatty_r+0x1a>
 801ede4:	682b      	ldr	r3, [r5, #0]
 801ede6:	b103      	cbz	r3, 801edea <_isatty_r+0x1a>
 801ede8:	6023      	str	r3, [r4, #0]
 801edea:	bd38      	pop	{r3, r4, r5, pc}
 801edec:	20005ea4 	.word	0x20005ea4

0801edf0 <_malloc_usable_size_r>:
 801edf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801edf4:	1f18      	subs	r0, r3, #4
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	bfbc      	itt	lt
 801edfa:	580b      	ldrlt	r3, [r1, r0]
 801edfc:	18c0      	addlt	r0, r0, r3
 801edfe:	4770      	bx	lr

0801ee00 <log10>:
 801ee00:	b538      	push	{r3, r4, r5, lr}
 801ee02:	ed2d 8b02 	vpush	{d8}
 801ee06:	ec55 4b10 	vmov	r4, r5, d0
 801ee0a:	f000 f8b5 	bl	801ef78 <__ieee754_log10>
 801ee0e:	4622      	mov	r2, r4
 801ee10:	462b      	mov	r3, r5
 801ee12:	4620      	mov	r0, r4
 801ee14:	4629      	mov	r1, r5
 801ee16:	eeb0 8a40 	vmov.f32	s16, s0
 801ee1a:	eef0 8a60 	vmov.f32	s17, s1
 801ee1e:	f7e1 fedd 	bl	8000bdc <__aeabi_dcmpun>
 801ee22:	b998      	cbnz	r0, 801ee4c <log10+0x4c>
 801ee24:	2200      	movs	r2, #0
 801ee26:	2300      	movs	r3, #0
 801ee28:	4620      	mov	r0, r4
 801ee2a:	4629      	mov	r1, r5
 801ee2c:	f7e1 feb8 	bl	8000ba0 <__aeabi_dcmple>
 801ee30:	b160      	cbz	r0, 801ee4c <log10+0x4c>
 801ee32:	2200      	movs	r2, #0
 801ee34:	2300      	movs	r3, #0
 801ee36:	4620      	mov	r0, r4
 801ee38:	4629      	mov	r1, r5
 801ee3a:	f7e1 fe9d 	bl	8000b78 <__aeabi_dcmpeq>
 801ee3e:	b160      	cbz	r0, 801ee5a <log10+0x5a>
 801ee40:	f7fc f8e2 	bl	801b008 <__errno>
 801ee44:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801ee70 <log10+0x70>
 801ee48:	2322      	movs	r3, #34	; 0x22
 801ee4a:	6003      	str	r3, [r0, #0]
 801ee4c:	eeb0 0a48 	vmov.f32	s0, s16
 801ee50:	eef0 0a68 	vmov.f32	s1, s17
 801ee54:	ecbd 8b02 	vpop	{d8}
 801ee58:	bd38      	pop	{r3, r4, r5, pc}
 801ee5a:	f7fc f8d5 	bl	801b008 <__errno>
 801ee5e:	ecbd 8b02 	vpop	{d8}
 801ee62:	2321      	movs	r3, #33	; 0x21
 801ee64:	6003      	str	r3, [r0, #0]
 801ee66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee6a:	4803      	ldr	r0, [pc, #12]	; (801ee78 <log10+0x78>)
 801ee6c:	f7ff bb04 	b.w	801e478 <nan>
 801ee70:	00000000 	.word	0x00000000
 801ee74:	fff00000 	.word	0xfff00000
 801ee78:	080207d9 	.word	0x080207d9

0801ee7c <pow>:
 801ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee7e:	ed2d 8b02 	vpush	{d8}
 801ee82:	eeb0 8a40 	vmov.f32	s16, s0
 801ee86:	eef0 8a60 	vmov.f32	s17, s1
 801ee8a:	ec55 4b11 	vmov	r4, r5, d1
 801ee8e:	f000 f8ff 	bl	801f090 <__ieee754_pow>
 801ee92:	4622      	mov	r2, r4
 801ee94:	462b      	mov	r3, r5
 801ee96:	4620      	mov	r0, r4
 801ee98:	4629      	mov	r1, r5
 801ee9a:	ec57 6b10 	vmov	r6, r7, d0
 801ee9e:	f7e1 fe9d 	bl	8000bdc <__aeabi_dcmpun>
 801eea2:	2800      	cmp	r0, #0
 801eea4:	d13b      	bne.n	801ef1e <pow+0xa2>
 801eea6:	ec51 0b18 	vmov	r0, r1, d8
 801eeaa:	2200      	movs	r2, #0
 801eeac:	2300      	movs	r3, #0
 801eeae:	f7e1 fe63 	bl	8000b78 <__aeabi_dcmpeq>
 801eeb2:	b1b8      	cbz	r0, 801eee4 <pow+0x68>
 801eeb4:	2200      	movs	r2, #0
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	4620      	mov	r0, r4
 801eeba:	4629      	mov	r1, r5
 801eebc:	f7e1 fe5c 	bl	8000b78 <__aeabi_dcmpeq>
 801eec0:	2800      	cmp	r0, #0
 801eec2:	d146      	bne.n	801ef52 <pow+0xd6>
 801eec4:	ec45 4b10 	vmov	d0, r4, r5
 801eec8:	f000 f848 	bl	801ef5c <finite>
 801eecc:	b338      	cbz	r0, 801ef1e <pow+0xa2>
 801eece:	2200      	movs	r2, #0
 801eed0:	2300      	movs	r3, #0
 801eed2:	4620      	mov	r0, r4
 801eed4:	4629      	mov	r1, r5
 801eed6:	f7e1 fe59 	bl	8000b8c <__aeabi_dcmplt>
 801eeda:	b300      	cbz	r0, 801ef1e <pow+0xa2>
 801eedc:	f7fc f894 	bl	801b008 <__errno>
 801eee0:	2322      	movs	r3, #34	; 0x22
 801eee2:	e01b      	b.n	801ef1c <pow+0xa0>
 801eee4:	ec47 6b10 	vmov	d0, r6, r7
 801eee8:	f000 f838 	bl	801ef5c <finite>
 801eeec:	b9e0      	cbnz	r0, 801ef28 <pow+0xac>
 801eeee:	eeb0 0a48 	vmov.f32	s0, s16
 801eef2:	eef0 0a68 	vmov.f32	s1, s17
 801eef6:	f000 f831 	bl	801ef5c <finite>
 801eefa:	b1a8      	cbz	r0, 801ef28 <pow+0xac>
 801eefc:	ec45 4b10 	vmov	d0, r4, r5
 801ef00:	f000 f82c 	bl	801ef5c <finite>
 801ef04:	b180      	cbz	r0, 801ef28 <pow+0xac>
 801ef06:	4632      	mov	r2, r6
 801ef08:	463b      	mov	r3, r7
 801ef0a:	4630      	mov	r0, r6
 801ef0c:	4639      	mov	r1, r7
 801ef0e:	f7e1 fe65 	bl	8000bdc <__aeabi_dcmpun>
 801ef12:	2800      	cmp	r0, #0
 801ef14:	d0e2      	beq.n	801eedc <pow+0x60>
 801ef16:	f7fc f877 	bl	801b008 <__errno>
 801ef1a:	2321      	movs	r3, #33	; 0x21
 801ef1c:	6003      	str	r3, [r0, #0]
 801ef1e:	ecbd 8b02 	vpop	{d8}
 801ef22:	ec47 6b10 	vmov	d0, r6, r7
 801ef26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef28:	2200      	movs	r2, #0
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	4630      	mov	r0, r6
 801ef2e:	4639      	mov	r1, r7
 801ef30:	f7e1 fe22 	bl	8000b78 <__aeabi_dcmpeq>
 801ef34:	2800      	cmp	r0, #0
 801ef36:	d0f2      	beq.n	801ef1e <pow+0xa2>
 801ef38:	eeb0 0a48 	vmov.f32	s0, s16
 801ef3c:	eef0 0a68 	vmov.f32	s1, s17
 801ef40:	f000 f80c 	bl	801ef5c <finite>
 801ef44:	2800      	cmp	r0, #0
 801ef46:	d0ea      	beq.n	801ef1e <pow+0xa2>
 801ef48:	ec45 4b10 	vmov	d0, r4, r5
 801ef4c:	f000 f806 	bl	801ef5c <finite>
 801ef50:	e7c3      	b.n	801eeda <pow+0x5e>
 801ef52:	4f01      	ldr	r7, [pc, #4]	; (801ef58 <pow+0xdc>)
 801ef54:	2600      	movs	r6, #0
 801ef56:	e7e2      	b.n	801ef1e <pow+0xa2>
 801ef58:	3ff00000 	.word	0x3ff00000

0801ef5c <finite>:
 801ef5c:	b082      	sub	sp, #8
 801ef5e:	ed8d 0b00 	vstr	d0, [sp]
 801ef62:	9801      	ldr	r0, [sp, #4]
 801ef64:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ef68:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ef6c:	0fc0      	lsrs	r0, r0, #31
 801ef6e:	b002      	add	sp, #8
 801ef70:	4770      	bx	lr
 801ef72:	0000      	movs	r0, r0
 801ef74:	0000      	movs	r0, r0
	...

0801ef78 <__ieee754_log10>:
 801ef78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef7c:	ec55 4b10 	vmov	r4, r5, d0
 801ef80:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801ef84:	462b      	mov	r3, r5
 801ef86:	da2f      	bge.n	801efe8 <__ieee754_log10+0x70>
 801ef88:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801ef8c:	4322      	orrs	r2, r4
 801ef8e:	d109      	bne.n	801efa4 <__ieee754_log10+0x2c>
 801ef90:	493b      	ldr	r1, [pc, #236]	; (801f080 <__ieee754_log10+0x108>)
 801ef92:	2200      	movs	r2, #0
 801ef94:	2300      	movs	r3, #0
 801ef96:	2000      	movs	r0, #0
 801ef98:	f7e1 fcb0 	bl	80008fc <__aeabi_ddiv>
 801ef9c:	ec41 0b10 	vmov	d0, r0, r1
 801efa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801efa4:	2d00      	cmp	r5, #0
 801efa6:	da09      	bge.n	801efbc <__ieee754_log10+0x44>
 801efa8:	ee10 2a10 	vmov	r2, s0
 801efac:	ee10 0a10 	vmov	r0, s0
 801efb0:	4629      	mov	r1, r5
 801efb2:	f7e1 f9c1 	bl	8000338 <__aeabi_dsub>
 801efb6:	2200      	movs	r2, #0
 801efb8:	2300      	movs	r3, #0
 801efba:	e7ed      	b.n	801ef98 <__ieee754_log10+0x20>
 801efbc:	4b31      	ldr	r3, [pc, #196]	; (801f084 <__ieee754_log10+0x10c>)
 801efbe:	2200      	movs	r2, #0
 801efc0:	4629      	mov	r1, r5
 801efc2:	ee10 0a10 	vmov	r0, s0
 801efc6:	f7e1 fb6f 	bl	80006a8 <__aeabi_dmul>
 801efca:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801efce:	4604      	mov	r4, r0
 801efd0:	460d      	mov	r5, r1
 801efd2:	460b      	mov	r3, r1
 801efd4:	492c      	ldr	r1, [pc, #176]	; (801f088 <__ieee754_log10+0x110>)
 801efd6:	428b      	cmp	r3, r1
 801efd8:	dd08      	ble.n	801efec <__ieee754_log10+0x74>
 801efda:	4622      	mov	r2, r4
 801efdc:	462b      	mov	r3, r5
 801efde:	4620      	mov	r0, r4
 801efe0:	4629      	mov	r1, r5
 801efe2:	f7e1 f9ab 	bl	800033c <__adddf3>
 801efe6:	e7d9      	b.n	801ef9c <__ieee754_log10+0x24>
 801efe8:	2200      	movs	r2, #0
 801efea:	e7f3      	b.n	801efd4 <__ieee754_log10+0x5c>
 801efec:	1518      	asrs	r0, r3, #20
 801efee:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801eff2:	4410      	add	r0, r2
 801eff4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801eff8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801effc:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801f000:	f7e1 fae8 	bl	80005d4 <__aeabi_i2d>
 801f004:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801f008:	3303      	adds	r3, #3
 801f00a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801f00e:	ec45 4b10 	vmov	d0, r4, r5
 801f012:	4606      	mov	r6, r0
 801f014:	460f      	mov	r7, r1
 801f016:	f000 fef7 	bl	801fe08 <__ieee754_log>
 801f01a:	a313      	add	r3, pc, #76	; (adr r3, 801f068 <__ieee754_log10+0xf0>)
 801f01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f020:	4630      	mov	r0, r6
 801f022:	4639      	mov	r1, r7
 801f024:	ec59 8b10 	vmov	r8, r9, d0
 801f028:	f7e1 fb3e 	bl	80006a8 <__aeabi_dmul>
 801f02c:	a310      	add	r3, pc, #64	; (adr r3, 801f070 <__ieee754_log10+0xf8>)
 801f02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f032:	4604      	mov	r4, r0
 801f034:	460d      	mov	r5, r1
 801f036:	4640      	mov	r0, r8
 801f038:	4649      	mov	r1, r9
 801f03a:	f7e1 fb35 	bl	80006a8 <__aeabi_dmul>
 801f03e:	4602      	mov	r2, r0
 801f040:	460b      	mov	r3, r1
 801f042:	4620      	mov	r0, r4
 801f044:	4629      	mov	r1, r5
 801f046:	f7e1 f979 	bl	800033c <__adddf3>
 801f04a:	a30b      	add	r3, pc, #44	; (adr r3, 801f078 <__ieee754_log10+0x100>)
 801f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f050:	4604      	mov	r4, r0
 801f052:	460d      	mov	r5, r1
 801f054:	4630      	mov	r0, r6
 801f056:	4639      	mov	r1, r7
 801f058:	f7e1 fb26 	bl	80006a8 <__aeabi_dmul>
 801f05c:	4602      	mov	r2, r0
 801f05e:	460b      	mov	r3, r1
 801f060:	4620      	mov	r0, r4
 801f062:	4629      	mov	r1, r5
 801f064:	e7bd      	b.n	801efe2 <__ieee754_log10+0x6a>
 801f066:	bf00      	nop
 801f068:	11f12b36 	.word	0x11f12b36
 801f06c:	3d59fef3 	.word	0x3d59fef3
 801f070:	1526e50e 	.word	0x1526e50e
 801f074:	3fdbcb7b 	.word	0x3fdbcb7b
 801f078:	509f6000 	.word	0x509f6000
 801f07c:	3fd34413 	.word	0x3fd34413
 801f080:	c3500000 	.word	0xc3500000
 801f084:	43500000 	.word	0x43500000
 801f088:	7fefffff 	.word	0x7fefffff
 801f08c:	00000000 	.word	0x00000000

0801f090 <__ieee754_pow>:
 801f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f094:	ed2d 8b06 	vpush	{d8-d10}
 801f098:	b089      	sub	sp, #36	; 0x24
 801f09a:	ed8d 1b00 	vstr	d1, [sp]
 801f09e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801f0a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801f0a6:	ea58 0102 	orrs.w	r1, r8, r2
 801f0aa:	ec57 6b10 	vmov	r6, r7, d0
 801f0ae:	d115      	bne.n	801f0dc <__ieee754_pow+0x4c>
 801f0b0:	19b3      	adds	r3, r6, r6
 801f0b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801f0b6:	4152      	adcs	r2, r2
 801f0b8:	4299      	cmp	r1, r3
 801f0ba:	4b89      	ldr	r3, [pc, #548]	; (801f2e0 <__ieee754_pow+0x250>)
 801f0bc:	4193      	sbcs	r3, r2
 801f0be:	f080 84d1 	bcs.w	801fa64 <__ieee754_pow+0x9d4>
 801f0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f0c6:	4630      	mov	r0, r6
 801f0c8:	4639      	mov	r1, r7
 801f0ca:	f7e1 f937 	bl	800033c <__adddf3>
 801f0ce:	ec41 0b10 	vmov	d0, r0, r1
 801f0d2:	b009      	add	sp, #36	; 0x24
 801f0d4:	ecbd 8b06 	vpop	{d8-d10}
 801f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0dc:	4b81      	ldr	r3, [pc, #516]	; (801f2e4 <__ieee754_pow+0x254>)
 801f0de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801f0e2:	429c      	cmp	r4, r3
 801f0e4:	ee10 aa10 	vmov	sl, s0
 801f0e8:	463d      	mov	r5, r7
 801f0ea:	dc06      	bgt.n	801f0fa <__ieee754_pow+0x6a>
 801f0ec:	d101      	bne.n	801f0f2 <__ieee754_pow+0x62>
 801f0ee:	2e00      	cmp	r6, #0
 801f0f0:	d1e7      	bne.n	801f0c2 <__ieee754_pow+0x32>
 801f0f2:	4598      	cmp	r8, r3
 801f0f4:	dc01      	bgt.n	801f0fa <__ieee754_pow+0x6a>
 801f0f6:	d10f      	bne.n	801f118 <__ieee754_pow+0x88>
 801f0f8:	b172      	cbz	r2, 801f118 <__ieee754_pow+0x88>
 801f0fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801f0fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801f102:	ea55 050a 	orrs.w	r5, r5, sl
 801f106:	d1dc      	bne.n	801f0c2 <__ieee754_pow+0x32>
 801f108:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f10c:	18db      	adds	r3, r3, r3
 801f10e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801f112:	4152      	adcs	r2, r2
 801f114:	429d      	cmp	r5, r3
 801f116:	e7d0      	b.n	801f0ba <__ieee754_pow+0x2a>
 801f118:	2d00      	cmp	r5, #0
 801f11a:	da3b      	bge.n	801f194 <__ieee754_pow+0x104>
 801f11c:	4b72      	ldr	r3, [pc, #456]	; (801f2e8 <__ieee754_pow+0x258>)
 801f11e:	4598      	cmp	r8, r3
 801f120:	dc51      	bgt.n	801f1c6 <__ieee754_pow+0x136>
 801f122:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801f126:	4598      	cmp	r8, r3
 801f128:	f340 84ab 	ble.w	801fa82 <__ieee754_pow+0x9f2>
 801f12c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801f130:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f134:	2b14      	cmp	r3, #20
 801f136:	dd0f      	ble.n	801f158 <__ieee754_pow+0xc8>
 801f138:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f13c:	fa22 f103 	lsr.w	r1, r2, r3
 801f140:	fa01 f303 	lsl.w	r3, r1, r3
 801f144:	4293      	cmp	r3, r2
 801f146:	f040 849c 	bne.w	801fa82 <__ieee754_pow+0x9f2>
 801f14a:	f001 0101 	and.w	r1, r1, #1
 801f14e:	f1c1 0302 	rsb	r3, r1, #2
 801f152:	9304      	str	r3, [sp, #16]
 801f154:	b182      	cbz	r2, 801f178 <__ieee754_pow+0xe8>
 801f156:	e05f      	b.n	801f218 <__ieee754_pow+0x188>
 801f158:	2a00      	cmp	r2, #0
 801f15a:	d15b      	bne.n	801f214 <__ieee754_pow+0x184>
 801f15c:	f1c3 0314 	rsb	r3, r3, #20
 801f160:	fa48 f103 	asr.w	r1, r8, r3
 801f164:	fa01 f303 	lsl.w	r3, r1, r3
 801f168:	4543      	cmp	r3, r8
 801f16a:	f040 8487 	bne.w	801fa7c <__ieee754_pow+0x9ec>
 801f16e:	f001 0101 	and.w	r1, r1, #1
 801f172:	f1c1 0302 	rsb	r3, r1, #2
 801f176:	9304      	str	r3, [sp, #16]
 801f178:	4b5c      	ldr	r3, [pc, #368]	; (801f2ec <__ieee754_pow+0x25c>)
 801f17a:	4598      	cmp	r8, r3
 801f17c:	d132      	bne.n	801f1e4 <__ieee754_pow+0x154>
 801f17e:	f1b9 0f00 	cmp.w	r9, #0
 801f182:	f280 8477 	bge.w	801fa74 <__ieee754_pow+0x9e4>
 801f186:	4959      	ldr	r1, [pc, #356]	; (801f2ec <__ieee754_pow+0x25c>)
 801f188:	4632      	mov	r2, r6
 801f18a:	463b      	mov	r3, r7
 801f18c:	2000      	movs	r0, #0
 801f18e:	f7e1 fbb5 	bl	80008fc <__aeabi_ddiv>
 801f192:	e79c      	b.n	801f0ce <__ieee754_pow+0x3e>
 801f194:	2300      	movs	r3, #0
 801f196:	9304      	str	r3, [sp, #16]
 801f198:	2a00      	cmp	r2, #0
 801f19a:	d13d      	bne.n	801f218 <__ieee754_pow+0x188>
 801f19c:	4b51      	ldr	r3, [pc, #324]	; (801f2e4 <__ieee754_pow+0x254>)
 801f19e:	4598      	cmp	r8, r3
 801f1a0:	d1ea      	bne.n	801f178 <__ieee754_pow+0xe8>
 801f1a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801f1a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801f1aa:	ea53 030a 	orrs.w	r3, r3, sl
 801f1ae:	f000 8459 	beq.w	801fa64 <__ieee754_pow+0x9d4>
 801f1b2:	4b4f      	ldr	r3, [pc, #316]	; (801f2f0 <__ieee754_pow+0x260>)
 801f1b4:	429c      	cmp	r4, r3
 801f1b6:	dd08      	ble.n	801f1ca <__ieee754_pow+0x13a>
 801f1b8:	f1b9 0f00 	cmp.w	r9, #0
 801f1bc:	f2c0 8456 	blt.w	801fa6c <__ieee754_pow+0x9dc>
 801f1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f1c4:	e783      	b.n	801f0ce <__ieee754_pow+0x3e>
 801f1c6:	2302      	movs	r3, #2
 801f1c8:	e7e5      	b.n	801f196 <__ieee754_pow+0x106>
 801f1ca:	f1b9 0f00 	cmp.w	r9, #0
 801f1ce:	f04f 0000 	mov.w	r0, #0
 801f1d2:	f04f 0100 	mov.w	r1, #0
 801f1d6:	f6bf af7a 	bge.w	801f0ce <__ieee754_pow+0x3e>
 801f1da:	e9dd 0300 	ldrd	r0, r3, [sp]
 801f1de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f1e2:	e774      	b.n	801f0ce <__ieee754_pow+0x3e>
 801f1e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801f1e8:	d106      	bne.n	801f1f8 <__ieee754_pow+0x168>
 801f1ea:	4632      	mov	r2, r6
 801f1ec:	463b      	mov	r3, r7
 801f1ee:	4630      	mov	r0, r6
 801f1f0:	4639      	mov	r1, r7
 801f1f2:	f7e1 fa59 	bl	80006a8 <__aeabi_dmul>
 801f1f6:	e76a      	b.n	801f0ce <__ieee754_pow+0x3e>
 801f1f8:	4b3e      	ldr	r3, [pc, #248]	; (801f2f4 <__ieee754_pow+0x264>)
 801f1fa:	4599      	cmp	r9, r3
 801f1fc:	d10c      	bne.n	801f218 <__ieee754_pow+0x188>
 801f1fe:	2d00      	cmp	r5, #0
 801f200:	db0a      	blt.n	801f218 <__ieee754_pow+0x188>
 801f202:	ec47 6b10 	vmov	d0, r6, r7
 801f206:	b009      	add	sp, #36	; 0x24
 801f208:	ecbd 8b06 	vpop	{d8-d10}
 801f20c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f210:	f000 bd20 	b.w	801fc54 <__ieee754_sqrt>
 801f214:	2300      	movs	r3, #0
 801f216:	9304      	str	r3, [sp, #16]
 801f218:	ec47 6b10 	vmov	d0, r6, r7
 801f21c:	f000 fc62 	bl	801fae4 <fabs>
 801f220:	ec51 0b10 	vmov	r0, r1, d0
 801f224:	f1ba 0f00 	cmp.w	sl, #0
 801f228:	d129      	bne.n	801f27e <__ieee754_pow+0x1ee>
 801f22a:	b124      	cbz	r4, 801f236 <__ieee754_pow+0x1a6>
 801f22c:	4b2f      	ldr	r3, [pc, #188]	; (801f2ec <__ieee754_pow+0x25c>)
 801f22e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801f232:	429a      	cmp	r2, r3
 801f234:	d123      	bne.n	801f27e <__ieee754_pow+0x1ee>
 801f236:	f1b9 0f00 	cmp.w	r9, #0
 801f23a:	da05      	bge.n	801f248 <__ieee754_pow+0x1b8>
 801f23c:	4602      	mov	r2, r0
 801f23e:	460b      	mov	r3, r1
 801f240:	2000      	movs	r0, #0
 801f242:	492a      	ldr	r1, [pc, #168]	; (801f2ec <__ieee754_pow+0x25c>)
 801f244:	f7e1 fb5a 	bl	80008fc <__aeabi_ddiv>
 801f248:	2d00      	cmp	r5, #0
 801f24a:	f6bf af40 	bge.w	801f0ce <__ieee754_pow+0x3e>
 801f24e:	9b04      	ldr	r3, [sp, #16]
 801f250:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f254:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f258:	431c      	orrs	r4, r3
 801f25a:	d108      	bne.n	801f26e <__ieee754_pow+0x1de>
 801f25c:	4602      	mov	r2, r0
 801f25e:	460b      	mov	r3, r1
 801f260:	4610      	mov	r0, r2
 801f262:	4619      	mov	r1, r3
 801f264:	f7e1 f868 	bl	8000338 <__aeabi_dsub>
 801f268:	4602      	mov	r2, r0
 801f26a:	460b      	mov	r3, r1
 801f26c:	e78f      	b.n	801f18e <__ieee754_pow+0xfe>
 801f26e:	9b04      	ldr	r3, [sp, #16]
 801f270:	2b01      	cmp	r3, #1
 801f272:	f47f af2c 	bne.w	801f0ce <__ieee754_pow+0x3e>
 801f276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f27a:	4619      	mov	r1, r3
 801f27c:	e727      	b.n	801f0ce <__ieee754_pow+0x3e>
 801f27e:	0feb      	lsrs	r3, r5, #31
 801f280:	3b01      	subs	r3, #1
 801f282:	9306      	str	r3, [sp, #24]
 801f284:	9a06      	ldr	r2, [sp, #24]
 801f286:	9b04      	ldr	r3, [sp, #16]
 801f288:	4313      	orrs	r3, r2
 801f28a:	d102      	bne.n	801f292 <__ieee754_pow+0x202>
 801f28c:	4632      	mov	r2, r6
 801f28e:	463b      	mov	r3, r7
 801f290:	e7e6      	b.n	801f260 <__ieee754_pow+0x1d0>
 801f292:	4b19      	ldr	r3, [pc, #100]	; (801f2f8 <__ieee754_pow+0x268>)
 801f294:	4598      	cmp	r8, r3
 801f296:	f340 80fb 	ble.w	801f490 <__ieee754_pow+0x400>
 801f29a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801f29e:	4598      	cmp	r8, r3
 801f2a0:	4b13      	ldr	r3, [pc, #76]	; (801f2f0 <__ieee754_pow+0x260>)
 801f2a2:	dd0c      	ble.n	801f2be <__ieee754_pow+0x22e>
 801f2a4:	429c      	cmp	r4, r3
 801f2a6:	dc0f      	bgt.n	801f2c8 <__ieee754_pow+0x238>
 801f2a8:	f1b9 0f00 	cmp.w	r9, #0
 801f2ac:	da0f      	bge.n	801f2ce <__ieee754_pow+0x23e>
 801f2ae:	2000      	movs	r0, #0
 801f2b0:	b009      	add	sp, #36	; 0x24
 801f2b2:	ecbd 8b06 	vpop	{d8-d10}
 801f2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ba:	f000 bcc2 	b.w	801fc42 <__math_oflow>
 801f2be:	429c      	cmp	r4, r3
 801f2c0:	dbf2      	blt.n	801f2a8 <__ieee754_pow+0x218>
 801f2c2:	4b0a      	ldr	r3, [pc, #40]	; (801f2ec <__ieee754_pow+0x25c>)
 801f2c4:	429c      	cmp	r4, r3
 801f2c6:	dd19      	ble.n	801f2fc <__ieee754_pow+0x26c>
 801f2c8:	f1b9 0f00 	cmp.w	r9, #0
 801f2cc:	dcef      	bgt.n	801f2ae <__ieee754_pow+0x21e>
 801f2ce:	2000      	movs	r0, #0
 801f2d0:	b009      	add	sp, #36	; 0x24
 801f2d2:	ecbd 8b06 	vpop	{d8-d10}
 801f2d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2da:	f000 bca9 	b.w	801fc30 <__math_uflow>
 801f2de:	bf00      	nop
 801f2e0:	fff00000 	.word	0xfff00000
 801f2e4:	7ff00000 	.word	0x7ff00000
 801f2e8:	433fffff 	.word	0x433fffff
 801f2ec:	3ff00000 	.word	0x3ff00000
 801f2f0:	3fefffff 	.word	0x3fefffff
 801f2f4:	3fe00000 	.word	0x3fe00000
 801f2f8:	41e00000 	.word	0x41e00000
 801f2fc:	4b60      	ldr	r3, [pc, #384]	; (801f480 <__ieee754_pow+0x3f0>)
 801f2fe:	2200      	movs	r2, #0
 801f300:	f7e1 f81a 	bl	8000338 <__aeabi_dsub>
 801f304:	a354      	add	r3, pc, #336	; (adr r3, 801f458 <__ieee754_pow+0x3c8>)
 801f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f30a:	4604      	mov	r4, r0
 801f30c:	460d      	mov	r5, r1
 801f30e:	f7e1 f9cb 	bl	80006a8 <__aeabi_dmul>
 801f312:	a353      	add	r3, pc, #332	; (adr r3, 801f460 <__ieee754_pow+0x3d0>)
 801f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f318:	4606      	mov	r6, r0
 801f31a:	460f      	mov	r7, r1
 801f31c:	4620      	mov	r0, r4
 801f31e:	4629      	mov	r1, r5
 801f320:	f7e1 f9c2 	bl	80006a8 <__aeabi_dmul>
 801f324:	4b57      	ldr	r3, [pc, #348]	; (801f484 <__ieee754_pow+0x3f4>)
 801f326:	4682      	mov	sl, r0
 801f328:	468b      	mov	fp, r1
 801f32a:	2200      	movs	r2, #0
 801f32c:	4620      	mov	r0, r4
 801f32e:	4629      	mov	r1, r5
 801f330:	f7e1 f9ba 	bl	80006a8 <__aeabi_dmul>
 801f334:	4602      	mov	r2, r0
 801f336:	460b      	mov	r3, r1
 801f338:	a14b      	add	r1, pc, #300	; (adr r1, 801f468 <__ieee754_pow+0x3d8>)
 801f33a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f33e:	f7e0 fffb 	bl	8000338 <__aeabi_dsub>
 801f342:	4622      	mov	r2, r4
 801f344:	462b      	mov	r3, r5
 801f346:	f7e1 f9af 	bl	80006a8 <__aeabi_dmul>
 801f34a:	4602      	mov	r2, r0
 801f34c:	460b      	mov	r3, r1
 801f34e:	2000      	movs	r0, #0
 801f350:	494d      	ldr	r1, [pc, #308]	; (801f488 <__ieee754_pow+0x3f8>)
 801f352:	f7e0 fff1 	bl	8000338 <__aeabi_dsub>
 801f356:	4622      	mov	r2, r4
 801f358:	4680      	mov	r8, r0
 801f35a:	4689      	mov	r9, r1
 801f35c:	462b      	mov	r3, r5
 801f35e:	4620      	mov	r0, r4
 801f360:	4629      	mov	r1, r5
 801f362:	f7e1 f9a1 	bl	80006a8 <__aeabi_dmul>
 801f366:	4602      	mov	r2, r0
 801f368:	460b      	mov	r3, r1
 801f36a:	4640      	mov	r0, r8
 801f36c:	4649      	mov	r1, r9
 801f36e:	f7e1 f99b 	bl	80006a8 <__aeabi_dmul>
 801f372:	a33f      	add	r3, pc, #252	; (adr r3, 801f470 <__ieee754_pow+0x3e0>)
 801f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f378:	f7e1 f996 	bl	80006a8 <__aeabi_dmul>
 801f37c:	4602      	mov	r2, r0
 801f37e:	460b      	mov	r3, r1
 801f380:	4650      	mov	r0, sl
 801f382:	4659      	mov	r1, fp
 801f384:	f7e0 ffd8 	bl	8000338 <__aeabi_dsub>
 801f388:	4602      	mov	r2, r0
 801f38a:	460b      	mov	r3, r1
 801f38c:	4680      	mov	r8, r0
 801f38e:	4689      	mov	r9, r1
 801f390:	4630      	mov	r0, r6
 801f392:	4639      	mov	r1, r7
 801f394:	f7e0 ffd2 	bl	800033c <__adddf3>
 801f398:	2000      	movs	r0, #0
 801f39a:	4632      	mov	r2, r6
 801f39c:	463b      	mov	r3, r7
 801f39e:	4604      	mov	r4, r0
 801f3a0:	460d      	mov	r5, r1
 801f3a2:	f7e0 ffc9 	bl	8000338 <__aeabi_dsub>
 801f3a6:	4602      	mov	r2, r0
 801f3a8:	460b      	mov	r3, r1
 801f3aa:	4640      	mov	r0, r8
 801f3ac:	4649      	mov	r1, r9
 801f3ae:	f7e0 ffc3 	bl	8000338 <__aeabi_dsub>
 801f3b2:	9b04      	ldr	r3, [sp, #16]
 801f3b4:	9a06      	ldr	r2, [sp, #24]
 801f3b6:	3b01      	subs	r3, #1
 801f3b8:	4313      	orrs	r3, r2
 801f3ba:	4682      	mov	sl, r0
 801f3bc:	468b      	mov	fp, r1
 801f3be:	f040 81e7 	bne.w	801f790 <__ieee754_pow+0x700>
 801f3c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801f478 <__ieee754_pow+0x3e8>
 801f3c6:	eeb0 8a47 	vmov.f32	s16, s14
 801f3ca:	eef0 8a67 	vmov.f32	s17, s15
 801f3ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 801f3d2:	2600      	movs	r6, #0
 801f3d4:	4632      	mov	r2, r6
 801f3d6:	463b      	mov	r3, r7
 801f3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f3dc:	f7e0 ffac 	bl	8000338 <__aeabi_dsub>
 801f3e0:	4622      	mov	r2, r4
 801f3e2:	462b      	mov	r3, r5
 801f3e4:	f7e1 f960 	bl	80006a8 <__aeabi_dmul>
 801f3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f3ec:	4680      	mov	r8, r0
 801f3ee:	4689      	mov	r9, r1
 801f3f0:	4650      	mov	r0, sl
 801f3f2:	4659      	mov	r1, fp
 801f3f4:	f7e1 f958 	bl	80006a8 <__aeabi_dmul>
 801f3f8:	4602      	mov	r2, r0
 801f3fa:	460b      	mov	r3, r1
 801f3fc:	4640      	mov	r0, r8
 801f3fe:	4649      	mov	r1, r9
 801f400:	f7e0 ff9c 	bl	800033c <__adddf3>
 801f404:	4632      	mov	r2, r6
 801f406:	463b      	mov	r3, r7
 801f408:	4680      	mov	r8, r0
 801f40a:	4689      	mov	r9, r1
 801f40c:	4620      	mov	r0, r4
 801f40e:	4629      	mov	r1, r5
 801f410:	f7e1 f94a 	bl	80006a8 <__aeabi_dmul>
 801f414:	460b      	mov	r3, r1
 801f416:	4604      	mov	r4, r0
 801f418:	460d      	mov	r5, r1
 801f41a:	4602      	mov	r2, r0
 801f41c:	4649      	mov	r1, r9
 801f41e:	4640      	mov	r0, r8
 801f420:	f7e0 ff8c 	bl	800033c <__adddf3>
 801f424:	4b19      	ldr	r3, [pc, #100]	; (801f48c <__ieee754_pow+0x3fc>)
 801f426:	4299      	cmp	r1, r3
 801f428:	ec45 4b19 	vmov	d9, r4, r5
 801f42c:	4606      	mov	r6, r0
 801f42e:	460f      	mov	r7, r1
 801f430:	468b      	mov	fp, r1
 801f432:	f340 82f0 	ble.w	801fa16 <__ieee754_pow+0x986>
 801f436:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801f43a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801f43e:	4303      	orrs	r3, r0
 801f440:	f000 81e4 	beq.w	801f80c <__ieee754_pow+0x77c>
 801f444:	ec51 0b18 	vmov	r0, r1, d8
 801f448:	2200      	movs	r2, #0
 801f44a:	2300      	movs	r3, #0
 801f44c:	f7e1 fb9e 	bl	8000b8c <__aeabi_dcmplt>
 801f450:	3800      	subs	r0, #0
 801f452:	bf18      	it	ne
 801f454:	2001      	movne	r0, #1
 801f456:	e72b      	b.n	801f2b0 <__ieee754_pow+0x220>
 801f458:	60000000 	.word	0x60000000
 801f45c:	3ff71547 	.word	0x3ff71547
 801f460:	f85ddf44 	.word	0xf85ddf44
 801f464:	3e54ae0b 	.word	0x3e54ae0b
 801f468:	55555555 	.word	0x55555555
 801f46c:	3fd55555 	.word	0x3fd55555
 801f470:	652b82fe 	.word	0x652b82fe
 801f474:	3ff71547 	.word	0x3ff71547
 801f478:	00000000 	.word	0x00000000
 801f47c:	bff00000 	.word	0xbff00000
 801f480:	3ff00000 	.word	0x3ff00000
 801f484:	3fd00000 	.word	0x3fd00000
 801f488:	3fe00000 	.word	0x3fe00000
 801f48c:	408fffff 	.word	0x408fffff
 801f490:	4bd5      	ldr	r3, [pc, #852]	; (801f7e8 <__ieee754_pow+0x758>)
 801f492:	402b      	ands	r3, r5
 801f494:	2200      	movs	r2, #0
 801f496:	b92b      	cbnz	r3, 801f4a4 <__ieee754_pow+0x414>
 801f498:	4bd4      	ldr	r3, [pc, #848]	; (801f7ec <__ieee754_pow+0x75c>)
 801f49a:	f7e1 f905 	bl	80006a8 <__aeabi_dmul>
 801f49e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801f4a2:	460c      	mov	r4, r1
 801f4a4:	1523      	asrs	r3, r4, #20
 801f4a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f4aa:	4413      	add	r3, r2
 801f4ac:	9305      	str	r3, [sp, #20]
 801f4ae:	4bd0      	ldr	r3, [pc, #832]	; (801f7f0 <__ieee754_pow+0x760>)
 801f4b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801f4b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801f4b8:	429c      	cmp	r4, r3
 801f4ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801f4be:	dd08      	ble.n	801f4d2 <__ieee754_pow+0x442>
 801f4c0:	4bcc      	ldr	r3, [pc, #816]	; (801f7f4 <__ieee754_pow+0x764>)
 801f4c2:	429c      	cmp	r4, r3
 801f4c4:	f340 8162 	ble.w	801f78c <__ieee754_pow+0x6fc>
 801f4c8:	9b05      	ldr	r3, [sp, #20]
 801f4ca:	3301      	adds	r3, #1
 801f4cc:	9305      	str	r3, [sp, #20]
 801f4ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801f4d2:	2400      	movs	r4, #0
 801f4d4:	00e3      	lsls	r3, r4, #3
 801f4d6:	9307      	str	r3, [sp, #28]
 801f4d8:	4bc7      	ldr	r3, [pc, #796]	; (801f7f8 <__ieee754_pow+0x768>)
 801f4da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f4de:	ed93 7b00 	vldr	d7, [r3]
 801f4e2:	4629      	mov	r1, r5
 801f4e4:	ec53 2b17 	vmov	r2, r3, d7
 801f4e8:	eeb0 9a47 	vmov.f32	s18, s14
 801f4ec:	eef0 9a67 	vmov.f32	s19, s15
 801f4f0:	4682      	mov	sl, r0
 801f4f2:	f7e0 ff21 	bl	8000338 <__aeabi_dsub>
 801f4f6:	4652      	mov	r2, sl
 801f4f8:	4606      	mov	r6, r0
 801f4fa:	460f      	mov	r7, r1
 801f4fc:	462b      	mov	r3, r5
 801f4fe:	ec51 0b19 	vmov	r0, r1, d9
 801f502:	f7e0 ff1b 	bl	800033c <__adddf3>
 801f506:	4602      	mov	r2, r0
 801f508:	460b      	mov	r3, r1
 801f50a:	2000      	movs	r0, #0
 801f50c:	49bb      	ldr	r1, [pc, #748]	; (801f7fc <__ieee754_pow+0x76c>)
 801f50e:	f7e1 f9f5 	bl	80008fc <__aeabi_ddiv>
 801f512:	ec41 0b1a 	vmov	d10, r0, r1
 801f516:	4602      	mov	r2, r0
 801f518:	460b      	mov	r3, r1
 801f51a:	4630      	mov	r0, r6
 801f51c:	4639      	mov	r1, r7
 801f51e:	f7e1 f8c3 	bl	80006a8 <__aeabi_dmul>
 801f522:	2300      	movs	r3, #0
 801f524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f528:	9302      	str	r3, [sp, #8]
 801f52a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f52e:	46ab      	mov	fp, r5
 801f530:	106d      	asrs	r5, r5, #1
 801f532:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801f536:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801f53a:	ec41 0b18 	vmov	d8, r0, r1
 801f53e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801f542:	2200      	movs	r2, #0
 801f544:	4640      	mov	r0, r8
 801f546:	4649      	mov	r1, r9
 801f548:	4614      	mov	r4, r2
 801f54a:	461d      	mov	r5, r3
 801f54c:	f7e1 f8ac 	bl	80006a8 <__aeabi_dmul>
 801f550:	4602      	mov	r2, r0
 801f552:	460b      	mov	r3, r1
 801f554:	4630      	mov	r0, r6
 801f556:	4639      	mov	r1, r7
 801f558:	f7e0 feee 	bl	8000338 <__aeabi_dsub>
 801f55c:	ec53 2b19 	vmov	r2, r3, d9
 801f560:	4606      	mov	r6, r0
 801f562:	460f      	mov	r7, r1
 801f564:	4620      	mov	r0, r4
 801f566:	4629      	mov	r1, r5
 801f568:	f7e0 fee6 	bl	8000338 <__aeabi_dsub>
 801f56c:	4602      	mov	r2, r0
 801f56e:	460b      	mov	r3, r1
 801f570:	4650      	mov	r0, sl
 801f572:	4659      	mov	r1, fp
 801f574:	f7e0 fee0 	bl	8000338 <__aeabi_dsub>
 801f578:	4642      	mov	r2, r8
 801f57a:	464b      	mov	r3, r9
 801f57c:	f7e1 f894 	bl	80006a8 <__aeabi_dmul>
 801f580:	4602      	mov	r2, r0
 801f582:	460b      	mov	r3, r1
 801f584:	4630      	mov	r0, r6
 801f586:	4639      	mov	r1, r7
 801f588:	f7e0 fed6 	bl	8000338 <__aeabi_dsub>
 801f58c:	ec53 2b1a 	vmov	r2, r3, d10
 801f590:	f7e1 f88a 	bl	80006a8 <__aeabi_dmul>
 801f594:	ec53 2b18 	vmov	r2, r3, d8
 801f598:	ec41 0b19 	vmov	d9, r0, r1
 801f59c:	ec51 0b18 	vmov	r0, r1, d8
 801f5a0:	f7e1 f882 	bl	80006a8 <__aeabi_dmul>
 801f5a4:	a37c      	add	r3, pc, #496	; (adr r3, 801f798 <__ieee754_pow+0x708>)
 801f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5aa:	4604      	mov	r4, r0
 801f5ac:	460d      	mov	r5, r1
 801f5ae:	f7e1 f87b 	bl	80006a8 <__aeabi_dmul>
 801f5b2:	a37b      	add	r3, pc, #492	; (adr r3, 801f7a0 <__ieee754_pow+0x710>)
 801f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5b8:	f7e0 fec0 	bl	800033c <__adddf3>
 801f5bc:	4622      	mov	r2, r4
 801f5be:	462b      	mov	r3, r5
 801f5c0:	f7e1 f872 	bl	80006a8 <__aeabi_dmul>
 801f5c4:	a378      	add	r3, pc, #480	; (adr r3, 801f7a8 <__ieee754_pow+0x718>)
 801f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ca:	f7e0 feb7 	bl	800033c <__adddf3>
 801f5ce:	4622      	mov	r2, r4
 801f5d0:	462b      	mov	r3, r5
 801f5d2:	f7e1 f869 	bl	80006a8 <__aeabi_dmul>
 801f5d6:	a376      	add	r3, pc, #472	; (adr r3, 801f7b0 <__ieee754_pow+0x720>)
 801f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5dc:	f7e0 feae 	bl	800033c <__adddf3>
 801f5e0:	4622      	mov	r2, r4
 801f5e2:	462b      	mov	r3, r5
 801f5e4:	f7e1 f860 	bl	80006a8 <__aeabi_dmul>
 801f5e8:	a373      	add	r3, pc, #460	; (adr r3, 801f7b8 <__ieee754_pow+0x728>)
 801f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ee:	f7e0 fea5 	bl	800033c <__adddf3>
 801f5f2:	4622      	mov	r2, r4
 801f5f4:	462b      	mov	r3, r5
 801f5f6:	f7e1 f857 	bl	80006a8 <__aeabi_dmul>
 801f5fa:	a371      	add	r3, pc, #452	; (adr r3, 801f7c0 <__ieee754_pow+0x730>)
 801f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f600:	f7e0 fe9c 	bl	800033c <__adddf3>
 801f604:	4622      	mov	r2, r4
 801f606:	4606      	mov	r6, r0
 801f608:	460f      	mov	r7, r1
 801f60a:	462b      	mov	r3, r5
 801f60c:	4620      	mov	r0, r4
 801f60e:	4629      	mov	r1, r5
 801f610:	f7e1 f84a 	bl	80006a8 <__aeabi_dmul>
 801f614:	4602      	mov	r2, r0
 801f616:	460b      	mov	r3, r1
 801f618:	4630      	mov	r0, r6
 801f61a:	4639      	mov	r1, r7
 801f61c:	f7e1 f844 	bl	80006a8 <__aeabi_dmul>
 801f620:	4642      	mov	r2, r8
 801f622:	4604      	mov	r4, r0
 801f624:	460d      	mov	r5, r1
 801f626:	464b      	mov	r3, r9
 801f628:	ec51 0b18 	vmov	r0, r1, d8
 801f62c:	f7e0 fe86 	bl	800033c <__adddf3>
 801f630:	ec53 2b19 	vmov	r2, r3, d9
 801f634:	f7e1 f838 	bl	80006a8 <__aeabi_dmul>
 801f638:	4622      	mov	r2, r4
 801f63a:	462b      	mov	r3, r5
 801f63c:	f7e0 fe7e 	bl	800033c <__adddf3>
 801f640:	4642      	mov	r2, r8
 801f642:	4682      	mov	sl, r0
 801f644:	468b      	mov	fp, r1
 801f646:	464b      	mov	r3, r9
 801f648:	4640      	mov	r0, r8
 801f64a:	4649      	mov	r1, r9
 801f64c:	f7e1 f82c 	bl	80006a8 <__aeabi_dmul>
 801f650:	4b6b      	ldr	r3, [pc, #428]	; (801f800 <__ieee754_pow+0x770>)
 801f652:	2200      	movs	r2, #0
 801f654:	4606      	mov	r6, r0
 801f656:	460f      	mov	r7, r1
 801f658:	f7e0 fe70 	bl	800033c <__adddf3>
 801f65c:	4652      	mov	r2, sl
 801f65e:	465b      	mov	r3, fp
 801f660:	f7e0 fe6c 	bl	800033c <__adddf3>
 801f664:	2000      	movs	r0, #0
 801f666:	4604      	mov	r4, r0
 801f668:	460d      	mov	r5, r1
 801f66a:	4602      	mov	r2, r0
 801f66c:	460b      	mov	r3, r1
 801f66e:	4640      	mov	r0, r8
 801f670:	4649      	mov	r1, r9
 801f672:	f7e1 f819 	bl	80006a8 <__aeabi_dmul>
 801f676:	4b62      	ldr	r3, [pc, #392]	; (801f800 <__ieee754_pow+0x770>)
 801f678:	4680      	mov	r8, r0
 801f67a:	4689      	mov	r9, r1
 801f67c:	2200      	movs	r2, #0
 801f67e:	4620      	mov	r0, r4
 801f680:	4629      	mov	r1, r5
 801f682:	f7e0 fe59 	bl	8000338 <__aeabi_dsub>
 801f686:	4632      	mov	r2, r6
 801f688:	463b      	mov	r3, r7
 801f68a:	f7e0 fe55 	bl	8000338 <__aeabi_dsub>
 801f68e:	4602      	mov	r2, r0
 801f690:	460b      	mov	r3, r1
 801f692:	4650      	mov	r0, sl
 801f694:	4659      	mov	r1, fp
 801f696:	f7e0 fe4f 	bl	8000338 <__aeabi_dsub>
 801f69a:	ec53 2b18 	vmov	r2, r3, d8
 801f69e:	f7e1 f803 	bl	80006a8 <__aeabi_dmul>
 801f6a2:	4622      	mov	r2, r4
 801f6a4:	4606      	mov	r6, r0
 801f6a6:	460f      	mov	r7, r1
 801f6a8:	462b      	mov	r3, r5
 801f6aa:	ec51 0b19 	vmov	r0, r1, d9
 801f6ae:	f7e0 fffb 	bl	80006a8 <__aeabi_dmul>
 801f6b2:	4602      	mov	r2, r0
 801f6b4:	460b      	mov	r3, r1
 801f6b6:	4630      	mov	r0, r6
 801f6b8:	4639      	mov	r1, r7
 801f6ba:	f7e0 fe3f 	bl	800033c <__adddf3>
 801f6be:	4606      	mov	r6, r0
 801f6c0:	460f      	mov	r7, r1
 801f6c2:	4602      	mov	r2, r0
 801f6c4:	460b      	mov	r3, r1
 801f6c6:	4640      	mov	r0, r8
 801f6c8:	4649      	mov	r1, r9
 801f6ca:	f7e0 fe37 	bl	800033c <__adddf3>
 801f6ce:	a33e      	add	r3, pc, #248	; (adr r3, 801f7c8 <__ieee754_pow+0x738>)
 801f6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6d4:	2000      	movs	r0, #0
 801f6d6:	4604      	mov	r4, r0
 801f6d8:	460d      	mov	r5, r1
 801f6da:	f7e0 ffe5 	bl	80006a8 <__aeabi_dmul>
 801f6de:	4642      	mov	r2, r8
 801f6e0:	ec41 0b18 	vmov	d8, r0, r1
 801f6e4:	464b      	mov	r3, r9
 801f6e6:	4620      	mov	r0, r4
 801f6e8:	4629      	mov	r1, r5
 801f6ea:	f7e0 fe25 	bl	8000338 <__aeabi_dsub>
 801f6ee:	4602      	mov	r2, r0
 801f6f0:	460b      	mov	r3, r1
 801f6f2:	4630      	mov	r0, r6
 801f6f4:	4639      	mov	r1, r7
 801f6f6:	f7e0 fe1f 	bl	8000338 <__aeabi_dsub>
 801f6fa:	a335      	add	r3, pc, #212	; (adr r3, 801f7d0 <__ieee754_pow+0x740>)
 801f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f700:	f7e0 ffd2 	bl	80006a8 <__aeabi_dmul>
 801f704:	a334      	add	r3, pc, #208	; (adr r3, 801f7d8 <__ieee754_pow+0x748>)
 801f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f70a:	4606      	mov	r6, r0
 801f70c:	460f      	mov	r7, r1
 801f70e:	4620      	mov	r0, r4
 801f710:	4629      	mov	r1, r5
 801f712:	f7e0 ffc9 	bl	80006a8 <__aeabi_dmul>
 801f716:	4602      	mov	r2, r0
 801f718:	460b      	mov	r3, r1
 801f71a:	4630      	mov	r0, r6
 801f71c:	4639      	mov	r1, r7
 801f71e:	f7e0 fe0d 	bl	800033c <__adddf3>
 801f722:	9a07      	ldr	r2, [sp, #28]
 801f724:	4b37      	ldr	r3, [pc, #220]	; (801f804 <__ieee754_pow+0x774>)
 801f726:	4413      	add	r3, r2
 801f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f72c:	f7e0 fe06 	bl	800033c <__adddf3>
 801f730:	4682      	mov	sl, r0
 801f732:	9805      	ldr	r0, [sp, #20]
 801f734:	468b      	mov	fp, r1
 801f736:	f7e0 ff4d 	bl	80005d4 <__aeabi_i2d>
 801f73a:	9a07      	ldr	r2, [sp, #28]
 801f73c:	4b32      	ldr	r3, [pc, #200]	; (801f808 <__ieee754_pow+0x778>)
 801f73e:	4413      	add	r3, r2
 801f740:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f744:	4606      	mov	r6, r0
 801f746:	460f      	mov	r7, r1
 801f748:	4652      	mov	r2, sl
 801f74a:	465b      	mov	r3, fp
 801f74c:	ec51 0b18 	vmov	r0, r1, d8
 801f750:	f7e0 fdf4 	bl	800033c <__adddf3>
 801f754:	4642      	mov	r2, r8
 801f756:	464b      	mov	r3, r9
 801f758:	f7e0 fdf0 	bl	800033c <__adddf3>
 801f75c:	4632      	mov	r2, r6
 801f75e:	463b      	mov	r3, r7
 801f760:	f7e0 fdec 	bl	800033c <__adddf3>
 801f764:	2000      	movs	r0, #0
 801f766:	4632      	mov	r2, r6
 801f768:	463b      	mov	r3, r7
 801f76a:	4604      	mov	r4, r0
 801f76c:	460d      	mov	r5, r1
 801f76e:	f7e0 fde3 	bl	8000338 <__aeabi_dsub>
 801f772:	4642      	mov	r2, r8
 801f774:	464b      	mov	r3, r9
 801f776:	f7e0 fddf 	bl	8000338 <__aeabi_dsub>
 801f77a:	ec53 2b18 	vmov	r2, r3, d8
 801f77e:	f7e0 fddb 	bl	8000338 <__aeabi_dsub>
 801f782:	4602      	mov	r2, r0
 801f784:	460b      	mov	r3, r1
 801f786:	4650      	mov	r0, sl
 801f788:	4659      	mov	r1, fp
 801f78a:	e610      	b.n	801f3ae <__ieee754_pow+0x31e>
 801f78c:	2401      	movs	r4, #1
 801f78e:	e6a1      	b.n	801f4d4 <__ieee754_pow+0x444>
 801f790:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801f7e0 <__ieee754_pow+0x750>
 801f794:	e617      	b.n	801f3c6 <__ieee754_pow+0x336>
 801f796:	bf00      	nop
 801f798:	4a454eef 	.word	0x4a454eef
 801f79c:	3fca7e28 	.word	0x3fca7e28
 801f7a0:	93c9db65 	.word	0x93c9db65
 801f7a4:	3fcd864a 	.word	0x3fcd864a
 801f7a8:	a91d4101 	.word	0xa91d4101
 801f7ac:	3fd17460 	.word	0x3fd17460
 801f7b0:	518f264d 	.word	0x518f264d
 801f7b4:	3fd55555 	.word	0x3fd55555
 801f7b8:	db6fabff 	.word	0xdb6fabff
 801f7bc:	3fdb6db6 	.word	0x3fdb6db6
 801f7c0:	33333303 	.word	0x33333303
 801f7c4:	3fe33333 	.word	0x3fe33333
 801f7c8:	e0000000 	.word	0xe0000000
 801f7cc:	3feec709 	.word	0x3feec709
 801f7d0:	dc3a03fd 	.word	0xdc3a03fd
 801f7d4:	3feec709 	.word	0x3feec709
 801f7d8:	145b01f5 	.word	0x145b01f5
 801f7dc:	be3e2fe0 	.word	0xbe3e2fe0
 801f7e0:	00000000 	.word	0x00000000
 801f7e4:	3ff00000 	.word	0x3ff00000
 801f7e8:	7ff00000 	.word	0x7ff00000
 801f7ec:	43400000 	.word	0x43400000
 801f7f0:	0003988e 	.word	0x0003988e
 801f7f4:	000bb679 	.word	0x000bb679
 801f7f8:	08020be0 	.word	0x08020be0
 801f7fc:	3ff00000 	.word	0x3ff00000
 801f800:	40080000 	.word	0x40080000
 801f804:	08020c00 	.word	0x08020c00
 801f808:	08020bf0 	.word	0x08020bf0
 801f80c:	a3b3      	add	r3, pc, #716	; (adr r3, 801fadc <__ieee754_pow+0xa4c>)
 801f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f812:	4640      	mov	r0, r8
 801f814:	4649      	mov	r1, r9
 801f816:	f7e0 fd91 	bl	800033c <__adddf3>
 801f81a:	4622      	mov	r2, r4
 801f81c:	ec41 0b1a 	vmov	d10, r0, r1
 801f820:	462b      	mov	r3, r5
 801f822:	4630      	mov	r0, r6
 801f824:	4639      	mov	r1, r7
 801f826:	f7e0 fd87 	bl	8000338 <__aeabi_dsub>
 801f82a:	4602      	mov	r2, r0
 801f82c:	460b      	mov	r3, r1
 801f82e:	ec51 0b1a 	vmov	r0, r1, d10
 801f832:	f7e1 f9c9 	bl	8000bc8 <__aeabi_dcmpgt>
 801f836:	2800      	cmp	r0, #0
 801f838:	f47f ae04 	bne.w	801f444 <__ieee754_pow+0x3b4>
 801f83c:	4aa2      	ldr	r2, [pc, #648]	; (801fac8 <__ieee754_pow+0xa38>)
 801f83e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f842:	4293      	cmp	r3, r2
 801f844:	f340 8107 	ble.w	801fa56 <__ieee754_pow+0x9c6>
 801f848:	151b      	asrs	r3, r3, #20
 801f84a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f84e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f852:	fa4a fa03 	asr.w	sl, sl, r3
 801f856:	44da      	add	sl, fp
 801f858:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801f85c:	489b      	ldr	r0, [pc, #620]	; (801facc <__ieee754_pow+0xa3c>)
 801f85e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801f862:	4108      	asrs	r0, r1
 801f864:	ea00 030a 	and.w	r3, r0, sl
 801f868:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801f86c:	f1c1 0114 	rsb	r1, r1, #20
 801f870:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f874:	fa4a fa01 	asr.w	sl, sl, r1
 801f878:	f1bb 0f00 	cmp.w	fp, #0
 801f87c:	f04f 0200 	mov.w	r2, #0
 801f880:	4620      	mov	r0, r4
 801f882:	4629      	mov	r1, r5
 801f884:	bfb8      	it	lt
 801f886:	f1ca 0a00 	rsblt	sl, sl, #0
 801f88a:	f7e0 fd55 	bl	8000338 <__aeabi_dsub>
 801f88e:	ec41 0b19 	vmov	d9, r0, r1
 801f892:	4642      	mov	r2, r8
 801f894:	464b      	mov	r3, r9
 801f896:	ec51 0b19 	vmov	r0, r1, d9
 801f89a:	f7e0 fd4f 	bl	800033c <__adddf3>
 801f89e:	a37a      	add	r3, pc, #488	; (adr r3, 801fa88 <__ieee754_pow+0x9f8>)
 801f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8a4:	2000      	movs	r0, #0
 801f8a6:	4604      	mov	r4, r0
 801f8a8:	460d      	mov	r5, r1
 801f8aa:	f7e0 fefd 	bl	80006a8 <__aeabi_dmul>
 801f8ae:	ec53 2b19 	vmov	r2, r3, d9
 801f8b2:	4606      	mov	r6, r0
 801f8b4:	460f      	mov	r7, r1
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	4629      	mov	r1, r5
 801f8ba:	f7e0 fd3d 	bl	8000338 <__aeabi_dsub>
 801f8be:	4602      	mov	r2, r0
 801f8c0:	460b      	mov	r3, r1
 801f8c2:	4640      	mov	r0, r8
 801f8c4:	4649      	mov	r1, r9
 801f8c6:	f7e0 fd37 	bl	8000338 <__aeabi_dsub>
 801f8ca:	a371      	add	r3, pc, #452	; (adr r3, 801fa90 <__ieee754_pow+0xa00>)
 801f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8d0:	f7e0 feea 	bl	80006a8 <__aeabi_dmul>
 801f8d4:	a370      	add	r3, pc, #448	; (adr r3, 801fa98 <__ieee754_pow+0xa08>)
 801f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8da:	4680      	mov	r8, r0
 801f8dc:	4689      	mov	r9, r1
 801f8de:	4620      	mov	r0, r4
 801f8e0:	4629      	mov	r1, r5
 801f8e2:	f7e0 fee1 	bl	80006a8 <__aeabi_dmul>
 801f8e6:	4602      	mov	r2, r0
 801f8e8:	460b      	mov	r3, r1
 801f8ea:	4640      	mov	r0, r8
 801f8ec:	4649      	mov	r1, r9
 801f8ee:	f7e0 fd25 	bl	800033c <__adddf3>
 801f8f2:	4604      	mov	r4, r0
 801f8f4:	460d      	mov	r5, r1
 801f8f6:	4602      	mov	r2, r0
 801f8f8:	460b      	mov	r3, r1
 801f8fa:	4630      	mov	r0, r6
 801f8fc:	4639      	mov	r1, r7
 801f8fe:	f7e0 fd1d 	bl	800033c <__adddf3>
 801f902:	4632      	mov	r2, r6
 801f904:	463b      	mov	r3, r7
 801f906:	4680      	mov	r8, r0
 801f908:	4689      	mov	r9, r1
 801f90a:	f7e0 fd15 	bl	8000338 <__aeabi_dsub>
 801f90e:	4602      	mov	r2, r0
 801f910:	460b      	mov	r3, r1
 801f912:	4620      	mov	r0, r4
 801f914:	4629      	mov	r1, r5
 801f916:	f7e0 fd0f 	bl	8000338 <__aeabi_dsub>
 801f91a:	4642      	mov	r2, r8
 801f91c:	4606      	mov	r6, r0
 801f91e:	460f      	mov	r7, r1
 801f920:	464b      	mov	r3, r9
 801f922:	4640      	mov	r0, r8
 801f924:	4649      	mov	r1, r9
 801f926:	f7e0 febf 	bl	80006a8 <__aeabi_dmul>
 801f92a:	a35d      	add	r3, pc, #372	; (adr r3, 801faa0 <__ieee754_pow+0xa10>)
 801f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f930:	4604      	mov	r4, r0
 801f932:	460d      	mov	r5, r1
 801f934:	f7e0 feb8 	bl	80006a8 <__aeabi_dmul>
 801f938:	a35b      	add	r3, pc, #364	; (adr r3, 801faa8 <__ieee754_pow+0xa18>)
 801f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f93e:	f7e0 fcfb 	bl	8000338 <__aeabi_dsub>
 801f942:	4622      	mov	r2, r4
 801f944:	462b      	mov	r3, r5
 801f946:	f7e0 feaf 	bl	80006a8 <__aeabi_dmul>
 801f94a:	a359      	add	r3, pc, #356	; (adr r3, 801fab0 <__ieee754_pow+0xa20>)
 801f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f950:	f7e0 fcf4 	bl	800033c <__adddf3>
 801f954:	4622      	mov	r2, r4
 801f956:	462b      	mov	r3, r5
 801f958:	f7e0 fea6 	bl	80006a8 <__aeabi_dmul>
 801f95c:	a356      	add	r3, pc, #344	; (adr r3, 801fab8 <__ieee754_pow+0xa28>)
 801f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f962:	f7e0 fce9 	bl	8000338 <__aeabi_dsub>
 801f966:	4622      	mov	r2, r4
 801f968:	462b      	mov	r3, r5
 801f96a:	f7e0 fe9d 	bl	80006a8 <__aeabi_dmul>
 801f96e:	a354      	add	r3, pc, #336	; (adr r3, 801fac0 <__ieee754_pow+0xa30>)
 801f970:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f974:	f7e0 fce2 	bl	800033c <__adddf3>
 801f978:	4622      	mov	r2, r4
 801f97a:	462b      	mov	r3, r5
 801f97c:	f7e0 fe94 	bl	80006a8 <__aeabi_dmul>
 801f980:	4602      	mov	r2, r0
 801f982:	460b      	mov	r3, r1
 801f984:	4640      	mov	r0, r8
 801f986:	4649      	mov	r1, r9
 801f988:	f7e0 fcd6 	bl	8000338 <__aeabi_dsub>
 801f98c:	4604      	mov	r4, r0
 801f98e:	460d      	mov	r5, r1
 801f990:	4602      	mov	r2, r0
 801f992:	460b      	mov	r3, r1
 801f994:	4640      	mov	r0, r8
 801f996:	4649      	mov	r1, r9
 801f998:	f7e0 fe86 	bl	80006a8 <__aeabi_dmul>
 801f99c:	2200      	movs	r2, #0
 801f99e:	ec41 0b19 	vmov	d9, r0, r1
 801f9a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f9a6:	4620      	mov	r0, r4
 801f9a8:	4629      	mov	r1, r5
 801f9aa:	f7e0 fcc5 	bl	8000338 <__aeabi_dsub>
 801f9ae:	4602      	mov	r2, r0
 801f9b0:	460b      	mov	r3, r1
 801f9b2:	ec51 0b19 	vmov	r0, r1, d9
 801f9b6:	f7e0 ffa1 	bl	80008fc <__aeabi_ddiv>
 801f9ba:	4632      	mov	r2, r6
 801f9bc:	4604      	mov	r4, r0
 801f9be:	460d      	mov	r5, r1
 801f9c0:	463b      	mov	r3, r7
 801f9c2:	4640      	mov	r0, r8
 801f9c4:	4649      	mov	r1, r9
 801f9c6:	f7e0 fe6f 	bl	80006a8 <__aeabi_dmul>
 801f9ca:	4632      	mov	r2, r6
 801f9cc:	463b      	mov	r3, r7
 801f9ce:	f7e0 fcb5 	bl	800033c <__adddf3>
 801f9d2:	4602      	mov	r2, r0
 801f9d4:	460b      	mov	r3, r1
 801f9d6:	4620      	mov	r0, r4
 801f9d8:	4629      	mov	r1, r5
 801f9da:	f7e0 fcad 	bl	8000338 <__aeabi_dsub>
 801f9de:	4642      	mov	r2, r8
 801f9e0:	464b      	mov	r3, r9
 801f9e2:	f7e0 fca9 	bl	8000338 <__aeabi_dsub>
 801f9e6:	460b      	mov	r3, r1
 801f9e8:	4602      	mov	r2, r0
 801f9ea:	4939      	ldr	r1, [pc, #228]	; (801fad0 <__ieee754_pow+0xa40>)
 801f9ec:	2000      	movs	r0, #0
 801f9ee:	f7e0 fca3 	bl	8000338 <__aeabi_dsub>
 801f9f2:	ec41 0b10 	vmov	d0, r0, r1
 801f9f6:	ee10 3a90 	vmov	r3, s1
 801f9fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f9fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fa02:	da2b      	bge.n	801fa5c <__ieee754_pow+0x9cc>
 801fa04:	4650      	mov	r0, sl
 801fa06:	f000 f877 	bl	801faf8 <scalbn>
 801fa0a:	ec51 0b10 	vmov	r0, r1, d0
 801fa0e:	ec53 2b18 	vmov	r2, r3, d8
 801fa12:	f7ff bbee 	b.w	801f1f2 <__ieee754_pow+0x162>
 801fa16:	4b2f      	ldr	r3, [pc, #188]	; (801fad4 <__ieee754_pow+0xa44>)
 801fa18:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801fa1c:	429e      	cmp	r6, r3
 801fa1e:	f77f af0d 	ble.w	801f83c <__ieee754_pow+0x7ac>
 801fa22:	4b2d      	ldr	r3, [pc, #180]	; (801fad8 <__ieee754_pow+0xa48>)
 801fa24:	440b      	add	r3, r1
 801fa26:	4303      	orrs	r3, r0
 801fa28:	d009      	beq.n	801fa3e <__ieee754_pow+0x9ae>
 801fa2a:	ec51 0b18 	vmov	r0, r1, d8
 801fa2e:	2200      	movs	r2, #0
 801fa30:	2300      	movs	r3, #0
 801fa32:	f7e1 f8ab 	bl	8000b8c <__aeabi_dcmplt>
 801fa36:	3800      	subs	r0, #0
 801fa38:	bf18      	it	ne
 801fa3a:	2001      	movne	r0, #1
 801fa3c:	e448      	b.n	801f2d0 <__ieee754_pow+0x240>
 801fa3e:	4622      	mov	r2, r4
 801fa40:	462b      	mov	r3, r5
 801fa42:	f7e0 fc79 	bl	8000338 <__aeabi_dsub>
 801fa46:	4642      	mov	r2, r8
 801fa48:	464b      	mov	r3, r9
 801fa4a:	f7e1 f8b3 	bl	8000bb4 <__aeabi_dcmpge>
 801fa4e:	2800      	cmp	r0, #0
 801fa50:	f43f aef4 	beq.w	801f83c <__ieee754_pow+0x7ac>
 801fa54:	e7e9      	b.n	801fa2a <__ieee754_pow+0x99a>
 801fa56:	f04f 0a00 	mov.w	sl, #0
 801fa5a:	e71a      	b.n	801f892 <__ieee754_pow+0x802>
 801fa5c:	ec51 0b10 	vmov	r0, r1, d0
 801fa60:	4619      	mov	r1, r3
 801fa62:	e7d4      	b.n	801fa0e <__ieee754_pow+0x97e>
 801fa64:	491a      	ldr	r1, [pc, #104]	; (801fad0 <__ieee754_pow+0xa40>)
 801fa66:	2000      	movs	r0, #0
 801fa68:	f7ff bb31 	b.w	801f0ce <__ieee754_pow+0x3e>
 801fa6c:	2000      	movs	r0, #0
 801fa6e:	2100      	movs	r1, #0
 801fa70:	f7ff bb2d 	b.w	801f0ce <__ieee754_pow+0x3e>
 801fa74:	4630      	mov	r0, r6
 801fa76:	4639      	mov	r1, r7
 801fa78:	f7ff bb29 	b.w	801f0ce <__ieee754_pow+0x3e>
 801fa7c:	9204      	str	r2, [sp, #16]
 801fa7e:	f7ff bb7b 	b.w	801f178 <__ieee754_pow+0xe8>
 801fa82:	2300      	movs	r3, #0
 801fa84:	f7ff bb65 	b.w	801f152 <__ieee754_pow+0xc2>
 801fa88:	00000000 	.word	0x00000000
 801fa8c:	3fe62e43 	.word	0x3fe62e43
 801fa90:	fefa39ef 	.word	0xfefa39ef
 801fa94:	3fe62e42 	.word	0x3fe62e42
 801fa98:	0ca86c39 	.word	0x0ca86c39
 801fa9c:	be205c61 	.word	0xbe205c61
 801faa0:	72bea4d0 	.word	0x72bea4d0
 801faa4:	3e663769 	.word	0x3e663769
 801faa8:	c5d26bf1 	.word	0xc5d26bf1
 801faac:	3ebbbd41 	.word	0x3ebbbd41
 801fab0:	af25de2c 	.word	0xaf25de2c
 801fab4:	3f11566a 	.word	0x3f11566a
 801fab8:	16bebd93 	.word	0x16bebd93
 801fabc:	3f66c16c 	.word	0x3f66c16c
 801fac0:	5555553e 	.word	0x5555553e
 801fac4:	3fc55555 	.word	0x3fc55555
 801fac8:	3fe00000 	.word	0x3fe00000
 801facc:	fff00000 	.word	0xfff00000
 801fad0:	3ff00000 	.word	0x3ff00000
 801fad4:	4090cbff 	.word	0x4090cbff
 801fad8:	3f6f3400 	.word	0x3f6f3400
 801fadc:	652b82fe 	.word	0x652b82fe
 801fae0:	3c971547 	.word	0x3c971547

0801fae4 <fabs>:
 801fae4:	ec51 0b10 	vmov	r0, r1, d0
 801fae8:	ee10 2a10 	vmov	r2, s0
 801faec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801faf0:	ec43 2b10 	vmov	d0, r2, r3
 801faf4:	4770      	bx	lr
	...

0801faf8 <scalbn>:
 801faf8:	b570      	push	{r4, r5, r6, lr}
 801fafa:	ec55 4b10 	vmov	r4, r5, d0
 801fafe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fb02:	4606      	mov	r6, r0
 801fb04:	462b      	mov	r3, r5
 801fb06:	b999      	cbnz	r1, 801fb30 <scalbn+0x38>
 801fb08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fb0c:	4323      	orrs	r3, r4
 801fb0e:	d03f      	beq.n	801fb90 <scalbn+0x98>
 801fb10:	4b35      	ldr	r3, [pc, #212]	; (801fbe8 <scalbn+0xf0>)
 801fb12:	4629      	mov	r1, r5
 801fb14:	ee10 0a10 	vmov	r0, s0
 801fb18:	2200      	movs	r2, #0
 801fb1a:	f7e0 fdc5 	bl	80006a8 <__aeabi_dmul>
 801fb1e:	4b33      	ldr	r3, [pc, #204]	; (801fbec <scalbn+0xf4>)
 801fb20:	429e      	cmp	r6, r3
 801fb22:	4604      	mov	r4, r0
 801fb24:	460d      	mov	r5, r1
 801fb26:	da10      	bge.n	801fb4a <scalbn+0x52>
 801fb28:	a327      	add	r3, pc, #156	; (adr r3, 801fbc8 <scalbn+0xd0>)
 801fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb2e:	e01f      	b.n	801fb70 <scalbn+0x78>
 801fb30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801fb34:	4291      	cmp	r1, r2
 801fb36:	d10c      	bne.n	801fb52 <scalbn+0x5a>
 801fb38:	ee10 2a10 	vmov	r2, s0
 801fb3c:	4620      	mov	r0, r4
 801fb3e:	4629      	mov	r1, r5
 801fb40:	f7e0 fbfc 	bl	800033c <__adddf3>
 801fb44:	4604      	mov	r4, r0
 801fb46:	460d      	mov	r5, r1
 801fb48:	e022      	b.n	801fb90 <scalbn+0x98>
 801fb4a:	460b      	mov	r3, r1
 801fb4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fb50:	3936      	subs	r1, #54	; 0x36
 801fb52:	f24c 3250 	movw	r2, #50000	; 0xc350
 801fb56:	4296      	cmp	r6, r2
 801fb58:	dd0d      	ble.n	801fb76 <scalbn+0x7e>
 801fb5a:	2d00      	cmp	r5, #0
 801fb5c:	a11c      	add	r1, pc, #112	; (adr r1, 801fbd0 <scalbn+0xd8>)
 801fb5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb62:	da02      	bge.n	801fb6a <scalbn+0x72>
 801fb64:	a11c      	add	r1, pc, #112	; (adr r1, 801fbd8 <scalbn+0xe0>)
 801fb66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb6a:	a319      	add	r3, pc, #100	; (adr r3, 801fbd0 <scalbn+0xd8>)
 801fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb70:	f7e0 fd9a 	bl	80006a8 <__aeabi_dmul>
 801fb74:	e7e6      	b.n	801fb44 <scalbn+0x4c>
 801fb76:	1872      	adds	r2, r6, r1
 801fb78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fb7c:	428a      	cmp	r2, r1
 801fb7e:	dcec      	bgt.n	801fb5a <scalbn+0x62>
 801fb80:	2a00      	cmp	r2, #0
 801fb82:	dd08      	ble.n	801fb96 <scalbn+0x9e>
 801fb84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fb88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fb8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fb90:	ec45 4b10 	vmov	d0, r4, r5
 801fb94:	bd70      	pop	{r4, r5, r6, pc}
 801fb96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fb9a:	da08      	bge.n	801fbae <scalbn+0xb6>
 801fb9c:	2d00      	cmp	r5, #0
 801fb9e:	a10a      	add	r1, pc, #40	; (adr r1, 801fbc8 <scalbn+0xd0>)
 801fba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fba4:	dac0      	bge.n	801fb28 <scalbn+0x30>
 801fba6:	a10e      	add	r1, pc, #56	; (adr r1, 801fbe0 <scalbn+0xe8>)
 801fba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbac:	e7bc      	b.n	801fb28 <scalbn+0x30>
 801fbae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fbb2:	3236      	adds	r2, #54	; 0x36
 801fbb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fbb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fbbc:	4620      	mov	r0, r4
 801fbbe:	4b0c      	ldr	r3, [pc, #48]	; (801fbf0 <scalbn+0xf8>)
 801fbc0:	2200      	movs	r2, #0
 801fbc2:	e7d5      	b.n	801fb70 <scalbn+0x78>
 801fbc4:	f3af 8000 	nop.w
 801fbc8:	c2f8f359 	.word	0xc2f8f359
 801fbcc:	01a56e1f 	.word	0x01a56e1f
 801fbd0:	8800759c 	.word	0x8800759c
 801fbd4:	7e37e43c 	.word	0x7e37e43c
 801fbd8:	8800759c 	.word	0x8800759c
 801fbdc:	fe37e43c 	.word	0xfe37e43c
 801fbe0:	c2f8f359 	.word	0xc2f8f359
 801fbe4:	81a56e1f 	.word	0x81a56e1f
 801fbe8:	43500000 	.word	0x43500000
 801fbec:	ffff3cb0 	.word	0xffff3cb0
 801fbf0:	3c900000 	.word	0x3c900000

0801fbf4 <with_errno>:
 801fbf4:	b570      	push	{r4, r5, r6, lr}
 801fbf6:	4604      	mov	r4, r0
 801fbf8:	460d      	mov	r5, r1
 801fbfa:	4616      	mov	r6, r2
 801fbfc:	f7fb fa04 	bl	801b008 <__errno>
 801fc00:	4629      	mov	r1, r5
 801fc02:	6006      	str	r6, [r0, #0]
 801fc04:	4620      	mov	r0, r4
 801fc06:	bd70      	pop	{r4, r5, r6, pc}

0801fc08 <xflow>:
 801fc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fc0a:	4614      	mov	r4, r2
 801fc0c:	461d      	mov	r5, r3
 801fc0e:	b108      	cbz	r0, 801fc14 <xflow+0xc>
 801fc10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fc14:	e9cd 2300 	strd	r2, r3, [sp]
 801fc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fc1c:	4620      	mov	r0, r4
 801fc1e:	4629      	mov	r1, r5
 801fc20:	f7e0 fd42 	bl	80006a8 <__aeabi_dmul>
 801fc24:	2222      	movs	r2, #34	; 0x22
 801fc26:	b003      	add	sp, #12
 801fc28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fc2c:	f7ff bfe2 	b.w	801fbf4 <with_errno>

0801fc30 <__math_uflow>:
 801fc30:	b508      	push	{r3, lr}
 801fc32:	2200      	movs	r2, #0
 801fc34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801fc38:	f7ff ffe6 	bl	801fc08 <xflow>
 801fc3c:	ec41 0b10 	vmov	d0, r0, r1
 801fc40:	bd08      	pop	{r3, pc}

0801fc42 <__math_oflow>:
 801fc42:	b508      	push	{r3, lr}
 801fc44:	2200      	movs	r2, #0
 801fc46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801fc4a:	f7ff ffdd 	bl	801fc08 <xflow>
 801fc4e:	ec41 0b10 	vmov	d0, r0, r1
 801fc52:	bd08      	pop	{r3, pc}

0801fc54 <__ieee754_sqrt>:
 801fc54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc58:	ec55 4b10 	vmov	r4, r5, d0
 801fc5c:	4e67      	ldr	r6, [pc, #412]	; (801fdfc <__ieee754_sqrt+0x1a8>)
 801fc5e:	43ae      	bics	r6, r5
 801fc60:	ee10 0a10 	vmov	r0, s0
 801fc64:	ee10 2a10 	vmov	r2, s0
 801fc68:	4629      	mov	r1, r5
 801fc6a:	462b      	mov	r3, r5
 801fc6c:	d10d      	bne.n	801fc8a <__ieee754_sqrt+0x36>
 801fc6e:	f7e0 fd1b 	bl	80006a8 <__aeabi_dmul>
 801fc72:	4602      	mov	r2, r0
 801fc74:	460b      	mov	r3, r1
 801fc76:	4620      	mov	r0, r4
 801fc78:	4629      	mov	r1, r5
 801fc7a:	f7e0 fb5f 	bl	800033c <__adddf3>
 801fc7e:	4604      	mov	r4, r0
 801fc80:	460d      	mov	r5, r1
 801fc82:	ec45 4b10 	vmov	d0, r4, r5
 801fc86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc8a:	2d00      	cmp	r5, #0
 801fc8c:	dc0b      	bgt.n	801fca6 <__ieee754_sqrt+0x52>
 801fc8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801fc92:	4326      	orrs	r6, r4
 801fc94:	d0f5      	beq.n	801fc82 <__ieee754_sqrt+0x2e>
 801fc96:	b135      	cbz	r5, 801fca6 <__ieee754_sqrt+0x52>
 801fc98:	f7e0 fb4e 	bl	8000338 <__aeabi_dsub>
 801fc9c:	4602      	mov	r2, r0
 801fc9e:	460b      	mov	r3, r1
 801fca0:	f7e0 fe2c 	bl	80008fc <__aeabi_ddiv>
 801fca4:	e7eb      	b.n	801fc7e <__ieee754_sqrt+0x2a>
 801fca6:	1509      	asrs	r1, r1, #20
 801fca8:	f000 808d 	beq.w	801fdc6 <__ieee754_sqrt+0x172>
 801fcac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fcb0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801fcb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fcb8:	07c9      	lsls	r1, r1, #31
 801fcba:	bf5c      	itt	pl
 801fcbc:	005b      	lslpl	r3, r3, #1
 801fcbe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801fcc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fcc6:	bf58      	it	pl
 801fcc8:	0052      	lslpl	r2, r2, #1
 801fcca:	2500      	movs	r5, #0
 801fccc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801fcd0:	1076      	asrs	r6, r6, #1
 801fcd2:	0052      	lsls	r2, r2, #1
 801fcd4:	f04f 0e16 	mov.w	lr, #22
 801fcd8:	46ac      	mov	ip, r5
 801fcda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fcde:	eb0c 0001 	add.w	r0, ip, r1
 801fce2:	4298      	cmp	r0, r3
 801fce4:	bfde      	ittt	le
 801fce6:	1a1b      	suble	r3, r3, r0
 801fce8:	eb00 0c01 	addle.w	ip, r0, r1
 801fcec:	186d      	addle	r5, r5, r1
 801fcee:	005b      	lsls	r3, r3, #1
 801fcf0:	f1be 0e01 	subs.w	lr, lr, #1
 801fcf4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801fcf8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801fcfc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801fd00:	d1ed      	bne.n	801fcde <__ieee754_sqrt+0x8a>
 801fd02:	4674      	mov	r4, lr
 801fd04:	2720      	movs	r7, #32
 801fd06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801fd0a:	4563      	cmp	r3, ip
 801fd0c:	eb01 000e 	add.w	r0, r1, lr
 801fd10:	dc02      	bgt.n	801fd18 <__ieee754_sqrt+0xc4>
 801fd12:	d113      	bne.n	801fd3c <__ieee754_sqrt+0xe8>
 801fd14:	4290      	cmp	r0, r2
 801fd16:	d811      	bhi.n	801fd3c <__ieee754_sqrt+0xe8>
 801fd18:	2800      	cmp	r0, #0
 801fd1a:	eb00 0e01 	add.w	lr, r0, r1
 801fd1e:	da57      	bge.n	801fdd0 <__ieee754_sqrt+0x17c>
 801fd20:	f1be 0f00 	cmp.w	lr, #0
 801fd24:	db54      	blt.n	801fdd0 <__ieee754_sqrt+0x17c>
 801fd26:	f10c 0801 	add.w	r8, ip, #1
 801fd2a:	eba3 030c 	sub.w	r3, r3, ip
 801fd2e:	4290      	cmp	r0, r2
 801fd30:	bf88      	it	hi
 801fd32:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fd36:	1a12      	subs	r2, r2, r0
 801fd38:	440c      	add	r4, r1
 801fd3a:	46c4      	mov	ip, r8
 801fd3c:	005b      	lsls	r3, r3, #1
 801fd3e:	3f01      	subs	r7, #1
 801fd40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801fd44:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801fd48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801fd4c:	d1dd      	bne.n	801fd0a <__ieee754_sqrt+0xb6>
 801fd4e:	4313      	orrs	r3, r2
 801fd50:	d01b      	beq.n	801fd8a <__ieee754_sqrt+0x136>
 801fd52:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801fe00 <__ieee754_sqrt+0x1ac>
 801fd56:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801fe04 <__ieee754_sqrt+0x1b0>
 801fd5a:	e9da 0100 	ldrd	r0, r1, [sl]
 801fd5e:	e9db 2300 	ldrd	r2, r3, [fp]
 801fd62:	f7e0 fae9 	bl	8000338 <__aeabi_dsub>
 801fd66:	e9da 8900 	ldrd	r8, r9, [sl]
 801fd6a:	4602      	mov	r2, r0
 801fd6c:	460b      	mov	r3, r1
 801fd6e:	4640      	mov	r0, r8
 801fd70:	4649      	mov	r1, r9
 801fd72:	f7e0 ff15 	bl	8000ba0 <__aeabi_dcmple>
 801fd76:	b140      	cbz	r0, 801fd8a <__ieee754_sqrt+0x136>
 801fd78:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fd7c:	e9da 0100 	ldrd	r0, r1, [sl]
 801fd80:	e9db 2300 	ldrd	r2, r3, [fp]
 801fd84:	d126      	bne.n	801fdd4 <__ieee754_sqrt+0x180>
 801fd86:	3501      	adds	r5, #1
 801fd88:	463c      	mov	r4, r7
 801fd8a:	106a      	asrs	r2, r5, #1
 801fd8c:	0863      	lsrs	r3, r4, #1
 801fd8e:	07e9      	lsls	r1, r5, #31
 801fd90:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801fd94:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801fd98:	bf48      	it	mi
 801fd9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801fd9e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801fda2:	461c      	mov	r4, r3
 801fda4:	e76d      	b.n	801fc82 <__ieee754_sqrt+0x2e>
 801fda6:	0ad3      	lsrs	r3, r2, #11
 801fda8:	3815      	subs	r0, #21
 801fdaa:	0552      	lsls	r2, r2, #21
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d0fa      	beq.n	801fda6 <__ieee754_sqrt+0x152>
 801fdb0:	02dc      	lsls	r4, r3, #11
 801fdb2:	d50a      	bpl.n	801fdca <__ieee754_sqrt+0x176>
 801fdb4:	f1c1 0420 	rsb	r4, r1, #32
 801fdb8:	fa22 f404 	lsr.w	r4, r2, r4
 801fdbc:	1e4d      	subs	r5, r1, #1
 801fdbe:	408a      	lsls	r2, r1
 801fdc0:	4323      	orrs	r3, r4
 801fdc2:	1b41      	subs	r1, r0, r5
 801fdc4:	e772      	b.n	801fcac <__ieee754_sqrt+0x58>
 801fdc6:	4608      	mov	r0, r1
 801fdc8:	e7f0      	b.n	801fdac <__ieee754_sqrt+0x158>
 801fdca:	005b      	lsls	r3, r3, #1
 801fdcc:	3101      	adds	r1, #1
 801fdce:	e7ef      	b.n	801fdb0 <__ieee754_sqrt+0x15c>
 801fdd0:	46e0      	mov	r8, ip
 801fdd2:	e7aa      	b.n	801fd2a <__ieee754_sqrt+0xd6>
 801fdd4:	f7e0 fab2 	bl	800033c <__adddf3>
 801fdd8:	e9da 8900 	ldrd	r8, r9, [sl]
 801fddc:	4602      	mov	r2, r0
 801fdde:	460b      	mov	r3, r1
 801fde0:	4640      	mov	r0, r8
 801fde2:	4649      	mov	r1, r9
 801fde4:	f7e0 fed2 	bl	8000b8c <__aeabi_dcmplt>
 801fde8:	b120      	cbz	r0, 801fdf4 <__ieee754_sqrt+0x1a0>
 801fdea:	1ca0      	adds	r0, r4, #2
 801fdec:	bf08      	it	eq
 801fdee:	3501      	addeq	r5, #1
 801fdf0:	3402      	adds	r4, #2
 801fdf2:	e7ca      	b.n	801fd8a <__ieee754_sqrt+0x136>
 801fdf4:	3401      	adds	r4, #1
 801fdf6:	f024 0401 	bic.w	r4, r4, #1
 801fdfa:	e7c6      	b.n	801fd8a <__ieee754_sqrt+0x136>
 801fdfc:	7ff00000 	.word	0x7ff00000
 801fe00:	20000380 	.word	0x20000380
 801fe04:	20000388 	.word	0x20000388

0801fe08 <__ieee754_log>:
 801fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe0c:	ec51 0b10 	vmov	r0, r1, d0
 801fe10:	ed2d 8b04 	vpush	{d8-d9}
 801fe14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801fe18:	b083      	sub	sp, #12
 801fe1a:	460d      	mov	r5, r1
 801fe1c:	da29      	bge.n	801fe72 <__ieee754_log+0x6a>
 801fe1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fe22:	4303      	orrs	r3, r0
 801fe24:	ee10 2a10 	vmov	r2, s0
 801fe28:	d10c      	bne.n	801fe44 <__ieee754_log+0x3c>
 801fe2a:	49cf      	ldr	r1, [pc, #828]	; (8020168 <__ieee754_log+0x360>)
 801fe2c:	2200      	movs	r2, #0
 801fe2e:	2300      	movs	r3, #0
 801fe30:	2000      	movs	r0, #0
 801fe32:	f7e0 fd63 	bl	80008fc <__aeabi_ddiv>
 801fe36:	ec41 0b10 	vmov	d0, r0, r1
 801fe3a:	b003      	add	sp, #12
 801fe3c:	ecbd 8b04 	vpop	{d8-d9}
 801fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe44:	2900      	cmp	r1, #0
 801fe46:	da05      	bge.n	801fe54 <__ieee754_log+0x4c>
 801fe48:	460b      	mov	r3, r1
 801fe4a:	f7e0 fa75 	bl	8000338 <__aeabi_dsub>
 801fe4e:	2200      	movs	r2, #0
 801fe50:	2300      	movs	r3, #0
 801fe52:	e7ee      	b.n	801fe32 <__ieee754_log+0x2a>
 801fe54:	4bc5      	ldr	r3, [pc, #788]	; (802016c <__ieee754_log+0x364>)
 801fe56:	2200      	movs	r2, #0
 801fe58:	f7e0 fc26 	bl	80006a8 <__aeabi_dmul>
 801fe5c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801fe60:	460d      	mov	r5, r1
 801fe62:	4ac3      	ldr	r2, [pc, #780]	; (8020170 <__ieee754_log+0x368>)
 801fe64:	4295      	cmp	r5, r2
 801fe66:	dd06      	ble.n	801fe76 <__ieee754_log+0x6e>
 801fe68:	4602      	mov	r2, r0
 801fe6a:	460b      	mov	r3, r1
 801fe6c:	f7e0 fa66 	bl	800033c <__adddf3>
 801fe70:	e7e1      	b.n	801fe36 <__ieee754_log+0x2e>
 801fe72:	2300      	movs	r3, #0
 801fe74:	e7f5      	b.n	801fe62 <__ieee754_log+0x5a>
 801fe76:	152c      	asrs	r4, r5, #20
 801fe78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801fe7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801fe80:	441c      	add	r4, r3
 801fe82:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801fe86:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801fe8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801fe8e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801fe92:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801fe96:	ea42 0105 	orr.w	r1, r2, r5
 801fe9a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801fe9e:	2200      	movs	r2, #0
 801fea0:	4bb4      	ldr	r3, [pc, #720]	; (8020174 <__ieee754_log+0x36c>)
 801fea2:	f7e0 fa49 	bl	8000338 <__aeabi_dsub>
 801fea6:	1cab      	adds	r3, r5, #2
 801fea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801feac:	2b02      	cmp	r3, #2
 801feae:	4682      	mov	sl, r0
 801feb0:	468b      	mov	fp, r1
 801feb2:	f04f 0200 	mov.w	r2, #0
 801feb6:	dc53      	bgt.n	801ff60 <__ieee754_log+0x158>
 801feb8:	2300      	movs	r3, #0
 801feba:	f7e0 fe5d 	bl	8000b78 <__aeabi_dcmpeq>
 801febe:	b1d0      	cbz	r0, 801fef6 <__ieee754_log+0xee>
 801fec0:	2c00      	cmp	r4, #0
 801fec2:	f000 8122 	beq.w	802010a <__ieee754_log+0x302>
 801fec6:	4620      	mov	r0, r4
 801fec8:	f7e0 fb84 	bl	80005d4 <__aeabi_i2d>
 801fecc:	a390      	add	r3, pc, #576	; (adr r3, 8020110 <__ieee754_log+0x308>)
 801fece:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fed2:	4606      	mov	r6, r0
 801fed4:	460f      	mov	r7, r1
 801fed6:	f7e0 fbe7 	bl	80006a8 <__aeabi_dmul>
 801feda:	a38f      	add	r3, pc, #572	; (adr r3, 8020118 <__ieee754_log+0x310>)
 801fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fee0:	4604      	mov	r4, r0
 801fee2:	460d      	mov	r5, r1
 801fee4:	4630      	mov	r0, r6
 801fee6:	4639      	mov	r1, r7
 801fee8:	f7e0 fbde 	bl	80006a8 <__aeabi_dmul>
 801feec:	4602      	mov	r2, r0
 801feee:	460b      	mov	r3, r1
 801fef0:	4620      	mov	r0, r4
 801fef2:	4629      	mov	r1, r5
 801fef4:	e7ba      	b.n	801fe6c <__ieee754_log+0x64>
 801fef6:	a38a      	add	r3, pc, #552	; (adr r3, 8020120 <__ieee754_log+0x318>)
 801fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fefc:	4650      	mov	r0, sl
 801fefe:	4659      	mov	r1, fp
 801ff00:	f7e0 fbd2 	bl	80006a8 <__aeabi_dmul>
 801ff04:	4602      	mov	r2, r0
 801ff06:	460b      	mov	r3, r1
 801ff08:	2000      	movs	r0, #0
 801ff0a:	499b      	ldr	r1, [pc, #620]	; (8020178 <__ieee754_log+0x370>)
 801ff0c:	f7e0 fa14 	bl	8000338 <__aeabi_dsub>
 801ff10:	4652      	mov	r2, sl
 801ff12:	4606      	mov	r6, r0
 801ff14:	460f      	mov	r7, r1
 801ff16:	465b      	mov	r3, fp
 801ff18:	4650      	mov	r0, sl
 801ff1a:	4659      	mov	r1, fp
 801ff1c:	f7e0 fbc4 	bl	80006a8 <__aeabi_dmul>
 801ff20:	4602      	mov	r2, r0
 801ff22:	460b      	mov	r3, r1
 801ff24:	4630      	mov	r0, r6
 801ff26:	4639      	mov	r1, r7
 801ff28:	f7e0 fbbe 	bl	80006a8 <__aeabi_dmul>
 801ff2c:	4606      	mov	r6, r0
 801ff2e:	460f      	mov	r7, r1
 801ff30:	b914      	cbnz	r4, 801ff38 <__ieee754_log+0x130>
 801ff32:	4632      	mov	r2, r6
 801ff34:	463b      	mov	r3, r7
 801ff36:	e0a2      	b.n	802007e <__ieee754_log+0x276>
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f7e0 fb4b 	bl	80005d4 <__aeabi_i2d>
 801ff3e:	a374      	add	r3, pc, #464	; (adr r3, 8020110 <__ieee754_log+0x308>)
 801ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff44:	4680      	mov	r8, r0
 801ff46:	4689      	mov	r9, r1
 801ff48:	f7e0 fbae 	bl	80006a8 <__aeabi_dmul>
 801ff4c:	a372      	add	r3, pc, #456	; (adr r3, 8020118 <__ieee754_log+0x310>)
 801ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff52:	4604      	mov	r4, r0
 801ff54:	460d      	mov	r5, r1
 801ff56:	4640      	mov	r0, r8
 801ff58:	4649      	mov	r1, r9
 801ff5a:	f7e0 fba5 	bl	80006a8 <__aeabi_dmul>
 801ff5e:	e0a7      	b.n	80200b0 <__ieee754_log+0x2a8>
 801ff60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ff64:	f7e0 f9ea 	bl	800033c <__adddf3>
 801ff68:	4602      	mov	r2, r0
 801ff6a:	460b      	mov	r3, r1
 801ff6c:	4650      	mov	r0, sl
 801ff6e:	4659      	mov	r1, fp
 801ff70:	f7e0 fcc4 	bl	80008fc <__aeabi_ddiv>
 801ff74:	ec41 0b18 	vmov	d8, r0, r1
 801ff78:	4620      	mov	r0, r4
 801ff7a:	f7e0 fb2b 	bl	80005d4 <__aeabi_i2d>
 801ff7e:	ec53 2b18 	vmov	r2, r3, d8
 801ff82:	ec41 0b19 	vmov	d9, r0, r1
 801ff86:	ec51 0b18 	vmov	r0, r1, d8
 801ff8a:	f7e0 fb8d 	bl	80006a8 <__aeabi_dmul>
 801ff8e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801ff92:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801ff96:	9301      	str	r3, [sp, #4]
 801ff98:	4602      	mov	r2, r0
 801ff9a:	460b      	mov	r3, r1
 801ff9c:	4680      	mov	r8, r0
 801ff9e:	4689      	mov	r9, r1
 801ffa0:	f7e0 fb82 	bl	80006a8 <__aeabi_dmul>
 801ffa4:	a360      	add	r3, pc, #384	; (adr r3, 8020128 <__ieee754_log+0x320>)
 801ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffaa:	4606      	mov	r6, r0
 801ffac:	460f      	mov	r7, r1
 801ffae:	f7e0 fb7b 	bl	80006a8 <__aeabi_dmul>
 801ffb2:	a35f      	add	r3, pc, #380	; (adr r3, 8020130 <__ieee754_log+0x328>)
 801ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffb8:	f7e0 f9c0 	bl	800033c <__adddf3>
 801ffbc:	4632      	mov	r2, r6
 801ffbe:	463b      	mov	r3, r7
 801ffc0:	f7e0 fb72 	bl	80006a8 <__aeabi_dmul>
 801ffc4:	a35c      	add	r3, pc, #368	; (adr r3, 8020138 <__ieee754_log+0x330>)
 801ffc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffca:	f7e0 f9b7 	bl	800033c <__adddf3>
 801ffce:	4632      	mov	r2, r6
 801ffd0:	463b      	mov	r3, r7
 801ffd2:	f7e0 fb69 	bl	80006a8 <__aeabi_dmul>
 801ffd6:	a35a      	add	r3, pc, #360	; (adr r3, 8020140 <__ieee754_log+0x338>)
 801ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffdc:	f7e0 f9ae 	bl	800033c <__adddf3>
 801ffe0:	4642      	mov	r2, r8
 801ffe2:	464b      	mov	r3, r9
 801ffe4:	f7e0 fb60 	bl	80006a8 <__aeabi_dmul>
 801ffe8:	a357      	add	r3, pc, #348	; (adr r3, 8020148 <__ieee754_log+0x340>)
 801ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffee:	4680      	mov	r8, r0
 801fff0:	4689      	mov	r9, r1
 801fff2:	4630      	mov	r0, r6
 801fff4:	4639      	mov	r1, r7
 801fff6:	f7e0 fb57 	bl	80006a8 <__aeabi_dmul>
 801fffa:	a355      	add	r3, pc, #340	; (adr r3, 8020150 <__ieee754_log+0x348>)
 801fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020000:	f7e0 f99c 	bl	800033c <__adddf3>
 8020004:	4632      	mov	r2, r6
 8020006:	463b      	mov	r3, r7
 8020008:	f7e0 fb4e 	bl	80006a8 <__aeabi_dmul>
 802000c:	a352      	add	r3, pc, #328	; (adr r3, 8020158 <__ieee754_log+0x350>)
 802000e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020012:	f7e0 f993 	bl	800033c <__adddf3>
 8020016:	4632      	mov	r2, r6
 8020018:	463b      	mov	r3, r7
 802001a:	f7e0 fb45 	bl	80006a8 <__aeabi_dmul>
 802001e:	460b      	mov	r3, r1
 8020020:	4602      	mov	r2, r0
 8020022:	4649      	mov	r1, r9
 8020024:	4640      	mov	r0, r8
 8020026:	f7e0 f989 	bl	800033c <__adddf3>
 802002a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802002e:	9b01      	ldr	r3, [sp, #4]
 8020030:	3551      	adds	r5, #81	; 0x51
 8020032:	431d      	orrs	r5, r3
 8020034:	2d00      	cmp	r5, #0
 8020036:	4680      	mov	r8, r0
 8020038:	4689      	mov	r9, r1
 802003a:	dd48      	ble.n	80200ce <__ieee754_log+0x2c6>
 802003c:	4b4e      	ldr	r3, [pc, #312]	; (8020178 <__ieee754_log+0x370>)
 802003e:	2200      	movs	r2, #0
 8020040:	4650      	mov	r0, sl
 8020042:	4659      	mov	r1, fp
 8020044:	f7e0 fb30 	bl	80006a8 <__aeabi_dmul>
 8020048:	4652      	mov	r2, sl
 802004a:	465b      	mov	r3, fp
 802004c:	f7e0 fb2c 	bl	80006a8 <__aeabi_dmul>
 8020050:	4602      	mov	r2, r0
 8020052:	460b      	mov	r3, r1
 8020054:	4606      	mov	r6, r0
 8020056:	460f      	mov	r7, r1
 8020058:	4640      	mov	r0, r8
 802005a:	4649      	mov	r1, r9
 802005c:	f7e0 f96e 	bl	800033c <__adddf3>
 8020060:	ec53 2b18 	vmov	r2, r3, d8
 8020064:	f7e0 fb20 	bl	80006a8 <__aeabi_dmul>
 8020068:	4680      	mov	r8, r0
 802006a:	4689      	mov	r9, r1
 802006c:	b964      	cbnz	r4, 8020088 <__ieee754_log+0x280>
 802006e:	4602      	mov	r2, r0
 8020070:	460b      	mov	r3, r1
 8020072:	4630      	mov	r0, r6
 8020074:	4639      	mov	r1, r7
 8020076:	f7e0 f95f 	bl	8000338 <__aeabi_dsub>
 802007a:	4602      	mov	r2, r0
 802007c:	460b      	mov	r3, r1
 802007e:	4650      	mov	r0, sl
 8020080:	4659      	mov	r1, fp
 8020082:	f7e0 f959 	bl	8000338 <__aeabi_dsub>
 8020086:	e6d6      	b.n	801fe36 <__ieee754_log+0x2e>
 8020088:	a321      	add	r3, pc, #132	; (adr r3, 8020110 <__ieee754_log+0x308>)
 802008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802008e:	ec51 0b19 	vmov	r0, r1, d9
 8020092:	f7e0 fb09 	bl	80006a8 <__aeabi_dmul>
 8020096:	a320      	add	r3, pc, #128	; (adr r3, 8020118 <__ieee754_log+0x310>)
 8020098:	e9d3 2300 	ldrd	r2, r3, [r3]
 802009c:	4604      	mov	r4, r0
 802009e:	460d      	mov	r5, r1
 80200a0:	ec51 0b19 	vmov	r0, r1, d9
 80200a4:	f7e0 fb00 	bl	80006a8 <__aeabi_dmul>
 80200a8:	4642      	mov	r2, r8
 80200aa:	464b      	mov	r3, r9
 80200ac:	f7e0 f946 	bl	800033c <__adddf3>
 80200b0:	4602      	mov	r2, r0
 80200b2:	460b      	mov	r3, r1
 80200b4:	4630      	mov	r0, r6
 80200b6:	4639      	mov	r1, r7
 80200b8:	f7e0 f93e 	bl	8000338 <__aeabi_dsub>
 80200bc:	4652      	mov	r2, sl
 80200be:	465b      	mov	r3, fp
 80200c0:	f7e0 f93a 	bl	8000338 <__aeabi_dsub>
 80200c4:	4602      	mov	r2, r0
 80200c6:	460b      	mov	r3, r1
 80200c8:	4620      	mov	r0, r4
 80200ca:	4629      	mov	r1, r5
 80200cc:	e7d9      	b.n	8020082 <__ieee754_log+0x27a>
 80200ce:	4602      	mov	r2, r0
 80200d0:	460b      	mov	r3, r1
 80200d2:	4650      	mov	r0, sl
 80200d4:	4659      	mov	r1, fp
 80200d6:	f7e0 f92f 	bl	8000338 <__aeabi_dsub>
 80200da:	ec53 2b18 	vmov	r2, r3, d8
 80200de:	f7e0 fae3 	bl	80006a8 <__aeabi_dmul>
 80200e2:	4606      	mov	r6, r0
 80200e4:	460f      	mov	r7, r1
 80200e6:	2c00      	cmp	r4, #0
 80200e8:	f43f af23 	beq.w	801ff32 <__ieee754_log+0x12a>
 80200ec:	a308      	add	r3, pc, #32	; (adr r3, 8020110 <__ieee754_log+0x308>)
 80200ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200f2:	ec51 0b19 	vmov	r0, r1, d9
 80200f6:	f7e0 fad7 	bl	80006a8 <__aeabi_dmul>
 80200fa:	a307      	add	r3, pc, #28	; (adr r3, 8020118 <__ieee754_log+0x310>)
 80200fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020100:	4604      	mov	r4, r0
 8020102:	460d      	mov	r5, r1
 8020104:	ec51 0b19 	vmov	r0, r1, d9
 8020108:	e727      	b.n	801ff5a <__ieee754_log+0x152>
 802010a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8020160 <__ieee754_log+0x358>
 802010e:	e694      	b.n	801fe3a <__ieee754_log+0x32>
 8020110:	fee00000 	.word	0xfee00000
 8020114:	3fe62e42 	.word	0x3fe62e42
 8020118:	35793c76 	.word	0x35793c76
 802011c:	3dea39ef 	.word	0x3dea39ef
 8020120:	55555555 	.word	0x55555555
 8020124:	3fd55555 	.word	0x3fd55555
 8020128:	df3e5244 	.word	0xdf3e5244
 802012c:	3fc2f112 	.word	0x3fc2f112
 8020130:	96cb03de 	.word	0x96cb03de
 8020134:	3fc74664 	.word	0x3fc74664
 8020138:	94229359 	.word	0x94229359
 802013c:	3fd24924 	.word	0x3fd24924
 8020140:	55555593 	.word	0x55555593
 8020144:	3fe55555 	.word	0x3fe55555
 8020148:	d078c69f 	.word	0xd078c69f
 802014c:	3fc39a09 	.word	0x3fc39a09
 8020150:	1d8e78af 	.word	0x1d8e78af
 8020154:	3fcc71c5 	.word	0x3fcc71c5
 8020158:	9997fa04 	.word	0x9997fa04
 802015c:	3fd99999 	.word	0x3fd99999
	...
 8020168:	c3500000 	.word	0xc3500000
 802016c:	43500000 	.word	0x43500000
 8020170:	7fefffff 	.word	0x7fefffff
 8020174:	3ff00000 	.word	0x3ff00000
 8020178:	3fe00000 	.word	0x3fe00000

0802017c <_init>:
 802017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802017e:	bf00      	nop
 8020180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020182:	bc08      	pop	{r3}
 8020184:	469e      	mov	lr, r3
 8020186:	4770      	bx	lr

08020188 <_fini>:
 8020188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802018a:	bf00      	nop
 802018c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802018e:	bc08      	pop	{r3}
 8020190:	469e      	mov	lr, r3
 8020192:	4770      	bx	lr
